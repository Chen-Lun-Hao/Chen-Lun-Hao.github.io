{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-async/source/failure.ico","path":"failure.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/sw.js","path":"sw.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/css/index.less","path":"css/index.less","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/img/banner.png","path":"img/banner.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/img/block.jpg","path":"img/block.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/css/plugins/bootstrap.min.css","path":"css/plugins/bootstrap.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/css/plugins/font-awesome.min.css","path":"css/plugins/font-awesome.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/css/plugins/bootstrap.row.css","path":"css/plugins/bootstrap.row.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/fonts/webfonts/fa-brands-400.woff2","path":"fonts/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/fonts/webfonts/fa-regular-400.woff2","path":"fonts/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/fonts/webfonts/fa-solid-900.woff2","path":"fonts/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/js/plugins/local_search.js","path":"js/plugins/local_search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-async/source/js/plugins/typing.js","path":"js/plugins/typing.js","modified":0,"renderable":1},{"_id":"source/BingSiteAuth.xml","path":"BingSiteAuth.xml","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/android-chrome-192x192.png","path":"android-chrome-192x192.png","modified":0,"renderable":0},{"_id":"source/android-chrome-512x512.png","path":"android-chrome-512x512.png","modified":0,"renderable":0},{"_id":"source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/favicon-16x16.png","path":"favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/favicon-32x32.png","path":"favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/site.webmanifest","path":"site.webmanifest","modified":0,"renderable":0},{"_id":"source/fonts/DTM-Mono-1.otf","path":"fonts/DTM-Mono-1.otf","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/bg.svg","path":"images/bg.svg","modified":0,"renderable":0},{"_id":"source/images/logo/web_conponents.png","path":"images/logo/web_conponents.png","modified":0,"renderable":0},{"_id":"source/images/reward/alipay.jpg","path":"images/reward/alipay.jpg","modified":0,"renderable":0},{"_id":"source/images/reward/qq_pay.jpg","path":"images/reward/qq_pay.jpg","modified":0,"renderable":0},{"_id":"source/images/reward/wx_pay.jpg","path":"images/reward/wx_pay.jpg","modified":0,"renderable":0},{"_id":"source/images/reward/alipay_hd.jpg","path":"images/reward/alipay_hd.jpg","modified":0,"renderable":0},{"_id":"source/sketch/imgs/background.jpg","path":"sketch/imgs/background.jpg","modified":0,"renderable":0},{"_id":"source/sketch/imgs/large-screen-optimised.png","path":"sketch/imgs/large-screen-optimised.png","modified":0,"renderable":0},{"_id":"source/sketch/imgs/iphone-optimised.png","path":"sketch/imgs/iphone-optimised.png","modified":0,"renderable":0},{"_id":"source/sketch/imgs/laptop-screen-optimised.png","path":"sketch/imgs/laptop-screen-optimised.png","modified":0,"renderable":0},{"_id":"source/sketch/imgs/ipad-optimised.png","path":"sketch/imgs/ipad-optimised.png","modified":0,"renderable":0},{"_id":"source/images/posts/admin_template/layout.png","path":"images/posts/admin_template/layout.png","modified":0,"renderable":0},{"_id":"source/images/posts/admin_template/CEt1w5WJrs.gif","path":"images/posts/admin_template/CEt1w5WJrs.gif","modified":0,"renderable":0},{"_id":"source/images/posts/aotubuild/20200102105829.png","path":"images/posts/aotubuild/20200102105829.png","modified":0,"renderable":0},{"_id":"source/images/posts/aotubuild/20200102152424.png","path":"images/posts/aotubuild/20200102152424.png","modified":0,"renderable":0},{"_id":"source/images/posts/aotubuild/20200102162138.png","path":"images/posts/aotubuild/20200102162138.png","modified":0,"renderable":0},{"_id":"source/images/posts/aotubuild/20200102163249.png","path":"images/posts/aotubuild/20200102163249.png","modified":0,"renderable":0},{"_id":"source/images/posts/aotubuild/20200102174220.png","path":"images/posts/aotubuild/20200102174220.png","modified":0,"renderable":0},{"_id":"source/images/posts/aotubuild/20200102175312.png","path":"images/posts/aotubuild/20200102175312.png","modified":0,"renderable":0},{"_id":"source/images/posts/cloudbase/20200615221122.png","path":"images/posts/cloudbase/20200615221122.png","modified":0,"renderable":0},{"_id":"source/images/posts/cloudbase/20200615232440.png","path":"images/posts/cloudbase/20200615232440.png","modified":0,"renderable":0},{"_id":"source/images/posts/cloudbase/20200616162356.png","path":"images/posts/cloudbase/20200616162356.png","modified":0,"renderable":0},{"_id":"source/images/posts/cloudbase/20200615234334.png","path":"images/posts/cloudbase/20200615234334.png","modified":0,"renderable":0},{"_id":"source/images/posts/cloudbase/20200615242451.png","path":"images/posts/cloudbase/20200615242451.png","modified":0,"renderable":0},{"_id":"source/images/posts/cloudbase/20200616162909.png","path":"images/posts/cloudbase/20200616162909.png","modified":0,"renderable":0},{"_id":"source/images/posts/flutter_animation/lct.png","path":"images/posts/flutter_animation/lct.png","modified":0,"renderable":0},{"_id":"source/images/posts/flutter_animation/gxt.png","path":"images/posts/flutter_animation/gxt.png","modified":0,"renderable":0},{"_id":"source/images/posts/cloudbase_comment_two/pic_1657700995751.png","path":"images/posts/cloudbase_comment_two/pic_1657700995751.png","modified":0,"renderable":0},{"_id":"source/images/posts/cloudbase_comment_two/pic_1644560396214.png","path":"images/posts/cloudbase_comment_two/pic_1644560396214.png","modified":0,"renderable":0},{"_id":"source/images/posts/cloudbase_comment_two/pic_1657701583297.png","path":"images/posts/cloudbase_comment_two/pic_1657701583297.png","modified":0,"renderable":0},{"_id":"source/images/posts/hexo_theme_layout/flow.png","path":"images/posts/hexo_theme_layout/flow.png","modified":0,"renderable":0},{"_id":"source/images/posts/hexo_theme_layout/flow2.png","path":"images/posts/hexo_theme_layout/flow2.png","modified":0,"renderable":0},{"_id":"source/images/posts/hexo_theme_layout/image.png","path":"images/posts/hexo_theme_layout/image.png","modified":0,"renderable":0},{"_id":"source/images/posts/hexo_theme_layout/view.png","path":"images/posts/hexo_theme_layout/view.png","modified":0,"renderable":0},{"_id":"source/images/posts/hexo_theme_layout/view_code.png","path":"images/posts/hexo_theme_layout/view_code.png","modified":0,"renderable":0},{"_id":"source/images/posts/git_stash/20200824154456.jpg","path":"images/posts/git_stash/20200824154456.jpg","modified":0,"renderable":0},{"_id":"source/images/posts/git_stash/20200824154701.jpg","path":"images/posts/git_stash/20200824154701.jpg","modified":0,"renderable":0},{"_id":"source/images/posts/js_prototype/proto.jpg","path":"images/posts/js_prototype/proto.jpg","modified":0,"renderable":0},{"_id":"source/images/posts/grid_layout/drop.png","path":"images/posts/grid_layout/drop.png","modified":0,"renderable":0},{"_id":"source/images/posts/grid_layout/grid.png","path":"images/posts/grid_layout/grid.png","modified":0,"renderable":0},{"_id":"source/images/posts/grid_layout/demo.png","path":"images/posts/grid_layout/demo.png","modified":0,"renderable":0},{"_id":"source/images/posts/grid_layout/mask1.png","path":"images/posts/grid_layout/mask1.png","modified":0,"renderable":0},{"_id":"source/images/posts/grid_layout/mask2.png","path":"images/posts/grid_layout/mask2.png","modified":0,"renderable":0},{"_id":"source/images/posts/grid_layout/offset.png","path":"images/posts/grid_layout/offset.png","modified":0,"renderable":0},{"_id":"source/images/posts/grid_layout/resize.png","path":"images/posts/grid_layout/resize.png","modified":0,"renderable":0},{"_id":"source/images/posts/grid_layout/resize_demo.png","path":"images/posts/grid_layout/resize_demo.png","modified":0,"renderable":0},{"_id":"source/images/posts/js_vue/20200312225611.png","path":"images/posts/js_vue/20200312225611.png","modified":0,"renderable":0},{"_id":"source/images/posts/js_vue/20200312225648.png","path":"images/posts/js_vue/20200312225648.png","modified":0,"renderable":0},{"_id":"source/images/posts/onewallhaven/down.png","path":"images/posts/onewallhaven/down.png","modified":0,"renderable":0},{"_id":"source/images/posts/node_proxy/20200629201153.png","path":"images/posts/node_proxy/20200629201153.png","modified":0,"renderable":0},{"_id":"source/images/posts/onewallhaven/onewallhaven.png","path":"images/posts/onewallhaven/onewallhaven.png","modified":0,"renderable":0},{"_id":"source/images/posts/vscode_extension/20210615205632.png","path":"images/posts/vscode_extension/20210615205632.png","modified":0,"renderable":0},{"_id":"source/images/posts/vscode_extension/20210614224806.png","path":"images/posts/vscode_extension/20210614224806.png","modified":0,"renderable":0},{"_id":"source/images/posts/vscode_extension/20210615205655.png","path":"images/posts/vscode_extension/20210615205655.png","modified":0,"renderable":0},{"_id":"source/images/posts/vscode_extension/20210616211914.png","path":"images/posts/vscode_extension/20210616211914.png","modified":0,"renderable":0},{"_id":"source/images/posts/vscode_extension/20210616230737.png","path":"images/posts/vscode_extension/20210616230737.png","modified":0,"renderable":0},{"_id":"source/images/posts/renew_domains/pic_1636458264700.png","path":"images/posts/renew_domains/pic_1636458264700.png","modified":0,"renderable":0},{"_id":"source/images/posts/vue_docs/pic_1627610920884.png","path":"images/posts/vue_docs/pic_1627610920884.png","modified":0,"renderable":0},{"_id":"source/images/posts/vue_docs/pic_1627612369570.png","path":"images/posts/vue_docs/pic_1627612369570.png","modified":0,"renderable":0},{"_id":"source/images/posts/vue_docs/pic_1627612689754.png","path":"images/posts/vue_docs/pic_1627612689754.png","modified":0,"renderable":0},{"_id":"source/images/posts/vue_docs/pic_1627613208799.png","path":"images/posts/vue_docs/pic_1627613208799.png","modified":0,"renderable":0},{"_id":"source/images/posts/vue_docs/pic_1627623837793.png","path":"images/posts/vue_docs/pic_1627623837793.png","modified":0,"renderable":0},{"_id":"source/images/posts/vue_docs/pic_1627615451450.png","path":"images/posts/vue_docs/pic_1627615451450.png","modified":0,"renderable":0},{"_id":"source/images/posts/vue_web_components/pic_1637475879404.png","path":"images/posts/vue_web_components/pic_1637475879404.png","modified":0,"renderable":0},{"_id":"source/images/posts/vue_web_components/pic_1637476488307.png","path":"images/posts/vue_web_components/pic_1637476488307.png","modified":0,"renderable":0},{"_id":"source/images/posts/vue_web_components/pic_1637477447787.png","path":"images/posts/vue_web_components/pic_1637477447787.png","modified":0,"renderable":0},{"_id":"source/images/posts/vue_web_components/pic_1638631915396.png","path":"images/posts/vue_web_components/pic_1638631915396.png","modified":0,"renderable":0},{"_id":"source/images/posts/web_hexo_editor/hexo_editor_demo.png","path":"images/posts/web_hexo_editor/hexo_editor_demo.png","modified":0,"renderable":0},{"_id":"source/images/posts/webcomponents/20200510202839.png","path":"images/posts/webcomponents/20200510202839.png","modified":0,"renderable":0},{"_id":"source/images/posts/vscode_extension_two/20210623230340.png","path":"images/posts/vscode_extension_two/20210623230340.png","modified":0,"renderable":0},{"_id":"source/images/posts/vscode_extension_two/20210623230642.png","path":"images/posts/vscode_extension_two/20210623230642.png","modified":0,"renderable":0},{"_id":"source/images/posts/vscode_extension_two/20210623231124.png","path":"images/posts/vscode_extension_two/20210623231124.png","modified":0,"renderable":0},{"_id":"source/images/posts/vscode_extension_two/20210623231651.png","path":"images/posts/vscode_extension_two/20210623231651.png","modified":0,"renderable":0},{"_id":"source/images/posts/vscode_extension_two/20210623232915.png","path":"images/posts/vscode_extension_two/20210623232915.png","modified":0,"renderable":0},{"_id":"source/images/posts/vscode_extension_two/20210623233248.png","path":"images/posts/vscode_extension_two/20210623233248.png","modified":0,"renderable":0},{"_id":"source/images/posts/vscode_extension_two/20210623234418.png","path":"images/posts/vscode_extension_two/20210623234418.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/Adream.md","hash":"fbac451993e1a41820f3e1971eba4262a77a932d","modified":1709794111750},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1709793695272},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1709776084335},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1709776084335},{"_id":"public/2024/03/07/hello-world/index.html","hash":"528060937b8326ea076d36ff39fe2a1e99edd71d","modified":1709794720758},{"_id":"public/archives/index.html","hash":"4d48fabc522b60a4d27a6ff9ae3d0ce5d9c4791c","modified":1709800745430},{"_id":"public/2024/03/07/Adream/index.html","hash":"bd89c711cfe314e4aa8bd8478dad25264665fb54","modified":1709794720758},{"_id":"public/archives/2024/index.html","hash":"7fc667aa943aa1f516929b0e8d0095891fd9e6b5","modified":1709794720758},{"_id":"public/archives/2024/03/index.html","hash":"46f57675a3f1b73c173e123b0599e9a7013be283","modified":1709794720758},{"_id":"public/index.html","hash":"2024c8151aec501ef0e42c45afb0e5f66bfb596d","modified":1709800745430},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1709794192094},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1709794192094},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1709794192094},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1709794192094},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1709794192094},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1709794192094},{"_id":"node_modules/hexo-theme-async/package.json","hash":"1cf3c4fc9fac3ec5494a24c9547284062ff9f20f","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/README.md","hash":"099ac773310672f7021f4ad63d88e3065bf1f183","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/README_zh-CN.md","hash":"80cac176d2661eab90cd51d7382430bc31321cfd","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/_config.yml","hash":"3d247d8b143a3f913d384b7129965b4dd2b55640","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/languages/en.yml","hash":"9d735c7c25e8f3a8b6307baa7da991d8f0a21bae","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/languages/default.yml","hash":"0f9a8ea8133b544ef53daad4a32c13f8d9390b88","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/plugins.yml","hash":"9e50cd335ae74447b66e7b855ef825c1ba9a5a14","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/languages/zh-Hans.yml","hash":"181c5cf8ed46f0133129608bfd2bf1274f48df6c","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/404.ejs","hash":"08da6a18480456f65ab24c48d54fd116d739bdc1","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/archive.ejs","hash":"020ead387a3a2af1fa9f30b043af847f3da6bbff","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/about.ejs","hash":"52c1091fb0a3bd123ca72ad341ba5d1531e794c0","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/category.ejs","hash":"eacd97bd2338233ae047037c225942f8a36f831d","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/comment.ejs","hash":"55d3a6b69c5fdbeb6e946541401528243b4455cb","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/custom.ejs","hash":"3e1cea3e7904992bdc8df2d630d75479bb2f6c16","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/index.ejs","hash":"02a02f3a2f5a9da329cd4c2ec0bd1af6c8d58f95","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/links.ejs","hash":"5db12fd2559da0fdebf6c80566adbbf459361e61","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/page.ejs","hash":"1a81e2a16d463f5f944ae3b79f444c2ac4de1ce0","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/post.ejs","hash":"73264aa0e34b3cda21ec6ca33e932144c6b33811","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/layout.ejs","hash":"72c03f68d9d901b42c8f841ac93ba3504ce1180e","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/project.ejs","hash":"379a9822df4eba98d3be636e76dc2c578cb47d47","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/scripts/utils.js","hash":"c0f6d020f71a7751f1d2d2a727e8d811ae84cc6b","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/tag.ejs","hash":"54b38bcc0f2f56fa982fe1962002df0bc4b9bfc3","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/sw.js","hash":"01b07120762ab155c99478afb36075d4d7e2bc9c","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/banner.ejs","hash":"ab5354790334dc1adc0e041ecf5dfe38eb77cdc6","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/header.ejs","hash":"0409d9d28093ceaefcd6e8bd8d3f03553d8b00d0","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/script.ejs","hash":"6d9d5202a0eb36783505e77498ff54f85896f07e","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/footer.ejs","hash":"528fbcd8815ab1ea430bb5d6b30f92e34025c1ae","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_widget/categorie.ejs","hash":"1752c7f055a81e4ad94cd65551f549b190adf17c","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/main.ejs","hash":"63cb1b7baa5b87ae89f15352925df99691c0f2f9","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_widget/header-logo.ejs","hash":"ad750aad202365e0c5d35f20bc3c7954f85c0573","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/head.ejs","hash":"492db41c5ad4b5574385fc3924ec27b9633f5f15","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_widget/about-card.ejs","hash":"eb5e8539844b28229a3d8bb26452e5800d976c2e","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_widget/fixed-btn.ejs","hash":"7423a0638d27a7d980e7bcbc09c55761f37ff17d","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_widget/header-theme.ejs","hash":"e3dd05bd47e62edc68a37ed17773211c234f2675","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_widget/header-search.ejs","hash":"de299cf96a8c7e546511a4196874d44b1db43b57","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_widget/paginator.ejs","hash":"c7b76e443375b7d2bb15452b34ffcc654105db1f","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_widget/header-menu.ejs","hash":"a4a4884e1ad24da186df197fc0d9a75e6f4741c5","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_third-party/cdn.ejs","hash":"964693a454808aa8277027ec3c5dda7f7af01255","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_widget/post-toc.ejs","hash":"c0355e8fb5067bb36976c6a6c587b9393418e861","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_widget/search.ejs","hash":"573c500a4ecb65b822b3a34168dbcf446c92bc0f","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/scripts/console/plugin.js","hash":"0af4b27cc86549826d24e1908da4aa9966debc14","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_third-party/sw.ejs","hash":"277f75522dffa7d985f3400f18b4f60861d2430d","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/scripts/tags/caniuse.js","hash":"45df24923a6f3d061f37fcbb953a7492594204f3","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/scripts/tags/flink.js","hash":"d33a42eb75633d9a91ff3435031440490fa3aff7","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/scripts/tags/gallery.js","hash":"6aa14493096c10b73349b9d6f9ea70cfe65874b1","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_third-party/plugin.ejs","hash":"fffc71fec6909a707dc30fca0f50ef0d031037ed","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_third-party/web-analytics.ejs","hash":"9ed8b2717075bb8f37d65580f1de586ebbb89bc1","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/scripts/tags/tabs.js","hash":"af6ca352d69cdd9d3ae0e0682b9ab5597fa15261","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/scripts/tags/imgs.js","hash":"0db85bb9b42e0dc0c6ffbd019a7a9a87c7253d3e","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/scripts/tags/note.js","hash":"24db43d8712bbaa6464675d5772c65226094833b","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/scripts/filters/index.js","hash":"0210de43b6369cf720b72ac39a8a4ae461ad2452","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/scripts/events/config.js","hash":"a2e274fef40ca8fb981b2f0cf09c7b1c727cc93e","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/scripts/filters/cdn.js","hash":"b1030d8897da4bee5b66b1d669a2f5f4baee0e06","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/scripts/events/index.js","hash":"18b4e43ac08123bd27ee9619385a9e1d4a0fce0c","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/scripts/events/layout.js","hash":"b07fdc3448461ebe1e10288d0be5d5e616e99e1c","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/scripts/helper/async_config.js","hash":"7c4c6ced68d5dd25d8a42dbeebef0ebb1ddd6aad","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/scripts/helper/index.js","hash":"16a2b891096c41467eaeb8ece9648e213c8ce837","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/scripts/helper/list_archives.js","hash":"a5cda6eb2fdad0fecbf7c8b0737900d41847a1e4","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/scripts/helper/list_categories.js","hash":"af2357f1c930b6422a5db8c83f3d25eefc415c4c","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/scripts/helper/tag.js","hash":"718f7207db1e1b8db704d83893f2daffdef9278c","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/scripts/helper/toc.js","hash":"7aefa488acf5abebe205d52e5908e88cf0e14d6e","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/scripts/helper/variable.js","hash":"b5912726f7015076f9671f3e24087c400c781db7","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/index.less","hash":"0bfbea5508c83bef866261d37fdbf91d3b8cc3ff","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/img/block.jpg","hash":"1dd350354bd3fe2e7287dfe063d7783e4ab91090","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/img/avatar.jpg","hash":"e9e4108ab199202288ee68342a40064649c3d7c1","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/js/main.js","hash":"a9c765b7c893593fe779d3a92dbb453b6feecd8b","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/img/favicon.svg","hash":"ef922eea66dc950fb1327dd4571d777b8aeb8161","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/post/post-card-mini.ejs","hash":"e7a47f33c24943229e423ab7b367973a2a014d24","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/post/post-card.ejs","hash":"9f12b489d174d9df83d1bef35f7a29c337b2d49a","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/post/post-content.ejs","hash":"2cb43a1657dfcff799f67d8e06c31d4c9b571bca","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/post/post-copyright.ejs","hash":"b7e4518edcdc719795c30ad325c410a49255471a","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/page/about.ejs","hash":"47d2232ac1e20fc29a358c6a66f871ca2ee4c215","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/post/post-info.ejs","hash":"18b2d5d78d36fe1c265eb9c4c6aa285e38626886","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/post/post-next-prev.ejs","hash":"81920ae69da586274c742e1a6467b3a0145064b9","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/post/reward.ejs","hash":"664c43ab7346d700d942e30d2a5bdd119743c647","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/page/category.ejs","hash":"041a18d4d563349c0e3110f822d5e82ef6dc2c1a","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/page/post.ejs","hash":"b55db31dacc274339a1b20a6659fb85bf884ea3a","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/page/tag.ejs","hash":"7f278f929ff15d2ae843c8931dcd00cbf273cf59","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/page/archive.ejs","hash":"342c0283eb29d5de9a2d609600c806967098ad42","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/preloader/page-preloader.ejs","hash":"a1ce51be9b477e146dcc3bb4fbe9628c1471969e","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/preloader/change-mode-preloader.ejs","hash":"8a6019defee71021eb9bd46549c8a4479546ec9d","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/page/project.ejs","hash":"afdd4092f92dcd2dc8cb79aba2b214a9d209b1a6","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/page/links.ejs","hash":"f2c73ca53353ae77bcb878f1cf8747d5aca2fa3a","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/page/index.ejs","hash":"19d539a157993bd92ec61db15cf4f6c8fefbbe11","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/sidebar/index.ejs","hash":"bbdebed5b66650db2eb295491c6b4be1a3ef28c8","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_third-party/comment/b-comments.ejs","hash":"398c4769c6bb945844e02fdbaddab501afbfc33f","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_third-party/comment/twikoo.ejs","hash":"4a0aba54594f6692cf11f756ecac2dfb738bcdf6","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_third-party/seo/baidu-push.ejs","hash":"2e3d405b5973c5ceed9cc24a5591240c0345cb94","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_third-party/comment/giscus.ejs","hash":"1ea620f2e4473246272ec7e9f27f8c82f7a5f48e","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_third-party/comment/index.ejs","hash":"bac629e4c8d28cc16720c17d526e0b9fc7059be3","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/plugins/font-awesome.min.css","hash":"6137a9883adce70d78c7f7bbe8af27d91b627d32","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/plugins/bootstrap.row.css","hash":"d06c09ad9e0e351893cb2503e54f9b19f821f540","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/banner.less","hash":"1c7f78a303f6ec8f31e3d8e47a5cbc354a547ef7","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/base.less","hash":"248d1ced3f230e8cb82220389cad409cde272d4a","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/blockquote.less","hash":"dbc233d1b121fe86c8c7f154703bbd245fd72eb4","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/app-frame.less","hash":"e0d18b14fccc5dc2efcde2990e25297591296095","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/btn.less","hash":"31f90223acbd100001250da599e47134fad4d33f","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/index.less","hash":"6e4233951d5960eb7019aff0fecce9918ac4af91","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/fixed-btn.less","hash":"eee667056b0c2a5432defb26202e230a300aedc4","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/footer.less","hash":"7a46e2827061b2c61f7dcd6d35051ff05374094f","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/form.less","hash":"cd0fb267dd8685937d516ec7069e2b697ed2c994","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/list.less","hash":"277bb3f0965da60ea0a0b9d0e24d2a376762174a","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/message.less","hash":"3be2072551fe6064afb994a39620a135c09c156d","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/card.less","hash":"684203e154b921dd729b253e1c9c3951b95021de","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/pagination.less","hash":"c31230e3f8b989ecd7fd360de5617ce7203d1b3b","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/menu.less","hash":"448dff8c2d01ed70ae4679c860eaf08447f9cf8f","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/mode-switcher.less","hash":"230d3968f1616e3b0c97413f9b8f84eb2fe60de2","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/preloader.less","hash":"bdf095448437bd711792dc60ac1c3aca147dadd1","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/publication.less","hash":"3881057cf49d1eedb919c697a90cf8bc7efd6764","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/tag-plugins.less","hash":"02e0e9dc97449014c14d05483d860a3bb206ed3e","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/timeline.less","hash":"092bda5e67170692c939000edcc1ab8354f17df9","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/title-divider.less","hash":"dc868458fecf2da6ab5b0e9f24a5b318ebe01941","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/toc.less","hash":"2f6c8829c07967fe91ff32bfd2228255dea18372","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/video.less","hash":"90661cdeeff381d1bced9dfe7792b3e4b62f557b","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/top-bar.less","hash":"591ad30b2def185acbbc49bc0145c4ff054722da","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_variables/index.less","hash":"246b5759b811534dfa706120c626ce98eee0e517","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/fonts/webfonts/fa-regular-400.woff2","hash":"fbb0d9d51850d824d7eba66e0e210c778d6d42f5","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/js/plugins/typing.js","hash":"49e5af4f80da9bfd46a81495711822de87719656","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/sidebar/card/email.ejs","hash":"d8ceed83ba3b0af7d361ca9254a62afd6e8f741e","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/js/plugins/local_search.js","hash":"7fe911937bd357f4236aabd8d43ae486bad8cd8e","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/sidebar/card/info.ejs","hash":"dfa5d015d7174ad02df0099dadfab3e35e85dd59","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/sidebar/card/user.ejs","hash":"1289fe4e482586510ed2c9a4215c0a4a21dcbec0","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/layout/_partial/sidebar/card/social.ejs","hash":"4543c52a486a87f718fcfe03b6ef59bd771759d5","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/index.less","hash":"2c87ceca6a2642d6d4a31f6a6e293c54fb9494e9","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/comment/index.less","hash":"0460c4f8b74cca3a8e0856772a4008aae301fc01","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/comment/bcomments.less","hash":"2a42ff8315ae2788421111b30c00755bdcac8497","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/fancybox/index.less","hash":"320806390e7e78dee470350c503a8d89e651ddb8","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/comment/twikoo.less","hash":"cb7d1a04b997a5d55bbd8eef351b2c5822e771da","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/highlight/index.less","hash":"16629604ef46d58f80f5b89bd188817f3961634a","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/highlight/theme.less","hash":"a29e8c7c05663d074f4441e28361dc8d261e854f","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/read-mode/single-column.less","hash":"72e2a6e8165128abb02127aef6b90441aeb92f9e","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/highlight/minix.less","hash":"d406de6ef930380b9e1f94aabcd3c42ae092c8ef","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/reward/index.less","hash":"519f7bb569b1fa5185f839592e58ab5ba7b88dbe","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/read-mode/index.less","hash":"1e3da7b7eff2c38c5939f41e2ce85f98ffb7f527","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/search/index.less","hash":"120696c464c600fc43c7974e0d5ff8f5de1b9366","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/read-mode/read-mode.less","hash":"0906dcdfa3bfe1b68ff6b0316ae3df2364c3d334","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/reward/reward.less","hash":"bcf5bde9f09262af9ddf095363a06be0f7b5a8e1","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/search/search.less","hash":"c04623b8102f806c0c140481424decad9edd5ec3","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/highlight/prismjs/index.less","hash":"54da8eddcddef000713468025443498b72ee4b86","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/highlight/highlight/diff.less","hash":"d6b8be31a7c8ba8cd676cc039786673cf0b6eccc","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/highlight/highlight/index.less","hash":"bc02b3c4fed5f61e7182b73b7364fd5528d59fbe","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/highlight/prismjs/diff.less","hash":"1da7d603b515e02305951456dcb8b8ddf6e322f3","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/_components/plugins/highlight/prismjs/line-number.less","hash":"9bd2cce0c88408f64f5712d076542b623a270ab7","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/fonts/webfonts/fa-brands-400.woff2","hash":"f988b2efe9434b0af28943708d33dd3afad9a5ba","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/fonts/webfonts/fa-solid-900.woff2","hash":"80644191098f863f25be27841c0d92c452cf2327","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/css/plugins/bootstrap.min.css","hash":"b6f019002b87e86a07275eacd3c35a13c378b5c3","modified":1709794413188},{"_id":"node_modules/hexo-theme-async/source/img/banner.png","hash":"1fc9c8d054e401d68788027107c9392f047aa5fa","modified":1709794413188},{"_id":"public/img/avatar.jpg","hash":"e9e4108ab199202288ee68342a40064649c3d7c1","modified":1709800745430},{"_id":"public/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1709800745430},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1709800745430},{"_id":"public/img/favicon.svg","hash":"ef922eea66dc950fb1327dd4571d777b8aeb8161","modified":1709800745430},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1709800745430},{"_id":"public/img/block.jpg","hash":"1dd350354bd3fe2e7287dfe063d7783e4ab91090","modified":1709800745430},{"_id":"public/fonts/webfonts/fa-regular-400.woff2","hash":"fbb0d9d51850d824d7eba66e0e210c778d6d42f5","modified":1709800745430},{"_id":"public/sw.js","hash":"01b07120762ab155c99478afb36075d4d7e2bc9c","modified":1709800745430},{"_id":"public/js/plugins/local_search.js","hash":"7fe911937bd357f4236aabd8d43ae486bad8cd8e","modified":1709800745430},{"_id":"public/css/plugins/bootstrap.row.css","hash":"d06c09ad9e0e351893cb2503e54f9b19f821f540","modified":1709800745430},{"_id":"public/js/plugins/typing.js","hash":"49e5af4f80da9bfd46a81495711822de87719656","modified":1709800745430},{"_id":"public/js/main.js","hash":"a9c765b7c893593fe779d3a92dbb453b6feecd8b","modified":1709800745430},{"_id":"public/css/plugins/font-awesome.min.css","hash":"6137a9883adce70d78c7f7bbe8af27d91b627d32","modified":1709800745430},{"_id":"public/css/plugins/bootstrap.min.css","hash":"b6f019002b87e86a07275eacd3c35a13c378b5c3","modified":1709800745430},{"_id":"public/fonts/webfonts/fa-brands-400.woff2","hash":"f988b2efe9434b0af28943708d33dd3afad9a5ba","modified":1709800745430},{"_id":"public/fonts/webfonts/fa-solid-900.woff2","hash":"80644191098f863f25be27841c0d92c452cf2327","modified":1709800745430},{"_id":"public/img/banner.png","hash":"1fc9c8d054e401d68788027107c9392f047aa5fa","modified":1709800745430},{"_id":"public/css/index.css","hash":"06b396155590d7cd00b519a1067074eb7b7aad2f","modified":1709800745430},{"_id":"source/_data/languages.yml","hash":"7ed846d0c46907ea366f12c96ad357f1d36504ab","modified":1709710979000},{"_id":"source/BingSiteAuth.xml","hash":"e473931524729f494da8399ba27293998734449d","modified":1709710979000},{"_id":"source/CNAME","hash":"1631465826fad5e7112105ffe68177a63b2ab46f","modified":1709710979000},{"_id":"source/404.html","hash":"c633cbcbc4ac671b6501eeede8ab108455126efa","modified":1709710979000},{"_id":"source/android-chrome-192x192.png","hash":"08bc1d02b401098687a5481299fcf28ddf94c9ae","modified":1709710979000},{"_id":"source/favicon-16x16.png","hash":"61a010a1735c2a300345a00bad1b795d72c89b34","modified":1709710979000},{"_id":"source/favicon-32x32.png","hash":"147338d2f77acafd966e67e53e02529abd580dc2","modified":1709710979000},{"_id":"source/apple-touch-icon.png","hash":"ddb9c422696ec30b4458af36fe1ce0f6aace5cbd","modified":1709710979000},{"_id":"source/favicon.ico","hash":"7a03f4ea223aff402906ebd5d89ed22460db5c00","modified":1709710979000},{"_id":"source/robots.txt","hash":"6dfc427fe73587726797f47c981e2f24f5dcc61f","modified":1709710979000},{"_id":"source/site.webmanifest","hash":"c1690c08b1975413734729838a8cdd851b93f3d4","modified":1709710979000},{"_id":"source/flex.html","hash":"ed99220d28cdbde67604b205386b080b5db62f87","modified":1709710979000},{"_id":"source/_data/links.yml","hash":"9931125fd192fca6666b13c3201f1a4ac18d957a","modified":1709710979000},{"_id":"source/_data/projects.json","hash":"8a8779dee30a2822b8d1e6a2052e80e7e43df5ca","modified":1709710979000},{"_id":"source/_posts/array_to_tree.md","hash":"eff0ee06945224867a7b9d3f051aad16dae70243","modified":1709710979000},{"_id":"source/_posts/admin_template.md","hash":"7273407d4e994cb944d2e3a44b615321ae6ca5c6","modified":1709710979000},{"_id":"source/_drafts/interview.md","hash":"5922df5e0d23eb931a045a693d2342fed9a3a885","modified":1709710979000},{"_id":"source/_posts/aotubuild.md","hash":"6a11eaa1d447bebb8673f639ccf3cdcbe6f6a54e","modified":1709710979000},{"_id":"source/_posts/blgz.md","hash":"70fe721f7504b8bc621ae3f440d24917e8702968","modified":1709710979000},{"_id":"source/_posts/cloudbase_comment_two.md","hash":"239c31df712333b112fac42bac8cf74a2ecbc659","modified":1709710979000},{"_id":"source/_posts/api_convert.md","hash":"9cafd387f9dc96b47808f97e96b071e07bb28cda","modified":1709710979000},{"_id":"source/_posts/cloudbase_comment.md","hash":"2e7057b418274e6f4e182980a20bd1c5a0f35429","modified":1709710979000},{"_id":"source/_posts/css_filter.md","hash":"8f707d4625f77b45b468d4f30983a9d7c3ac7d5b","modified":1709710979000},{"_id":"source/_posts/css_theme.md","hash":"bba92018d8f68d6e60c4f3f67e9f15ce6339f396","modified":1709710979000},{"_id":"source/_posts/file_download.md","hash":"9b169f213defcfd050c6efa164459419aa26c146","modified":1709710979000},{"_id":"source/_posts/flutter_animation.md","hash":"df863ec8a63a24b4f3d5e094f08373db9d030d40","modified":1709710979000},{"_id":"source/_posts/git_stash.md","hash":"d7eaedb8e02065b56f3ff2f2a0be750a20d43e4a","modified":1709710979000},{"_id":"source/_posts/flutter_basic_widget.md","hash":"3c2c904667ef7e0191a0490426f40c590ae9493b","modified":1709710979000},{"_id":"source/_posts/generate_vue_docs.md","hash":"d0371a81f22117eaaac023603f9c3fd5280d20ed","modified":1709710979000},{"_id":"source/_posts/gird_layout.md","hash":"a9f2ca2d63ca217a450382e3dbf448724c021c2b","modified":1709710979000},{"_id":"source/_posts/helloword.md","hash":"7636e237ece8b349e1381ed724095e502826be11","modified":1709710979000},{"_id":"source/_posts/github_action.md","hash":"3aaf24dd0f99fa57abf8b288efc0c4033c4cb2a4","modified":1709710979000},{"_id":"source/_posts/hexo_theme_async_guide.md","hash":"6589fd60fc6464b8453c8fa40af093e13686e0e7","modified":1709710979000},{"_id":"source/_posts/hexo_theme_layout.md","hash":"138f81b5245eef5166a28a61a5b006fc21d9994a","modified":1709710979000},{"_id":"source/_posts/hexo_theme_text.md","hash":"f4199cffd1e5a4d166395b276bd1e6b49f275878","modified":1709710979000},{"_id":"source/_posts/js_prototype.md","hash":"ca7f7267221dc2f12a692b3b5d828b1b3f26ec86","modified":1709710979000},{"_id":"source/_posts/js_vue.md","hash":"3afd2b728838cb058a62e183225ffc02582c1708","modified":1709710979000},{"_id":"source/_posts/jsasync.md","hash":"b328bd16d1760be2c5759e502905d8c14f271fc6","modified":1709710979000},{"_id":"source/_posts/mongodb_sql.md","hash":"77f309d3a33f7f4395ef535c6faea4c9a7b21b28","modified":1709710979000},{"_id":"source/_posts/npm_publish_package.md","hash":"b4e20dd5a8f3e8cb320a818f9744aef48cfe3d45","modified":1709710979000},{"_id":"source/_posts/renew_domains.md","hash":"5be6d6634b81d6d7134a817f62a89f60399f248b","modified":1709710979000},{"_id":"source/_posts/node_proxy.md","hash":"11f4a01122eb96bd52f4dc568bbb5592454a1049","modified":1709710979000},{"_id":"source/_posts/one_wallhaven.md","hash":"46458c597d9f2c0f7351dfb87f34376298d2ef95","modified":1709710979000},{"_id":"source/_posts/pjax_dynamic_plugins.md","hash":"50d13d3a797cea608b1625ee20e62b668bc51a4f","modified":1709710979000},{"_id":"source/_posts/txgdx.md","hash":"4c49609d4df4645748c03b42fd940c5ef9c38af8","modified":1709710979000},{"_id":"source/_posts/uniapp.md","hash":"3beb5de27a91fd62671d23f1bae532454982f264","modified":1709710979000},{"_id":"source/_posts/vscode_extension.md","hash":"f81fc6c4db5a00999b489247b9282695d0f37371","modified":1709710979000},{"_id":"source/_posts/video_yztx.md","hash":"389f8ee1f809ac494571e6f2d2da27895de4ef9b","modified":1709710979000},{"_id":"source/_posts/vscode_extension_two.md","hash":"2f0acf2e190f1a5c38337f84098817cc84e6fdbe","modified":1709710979000},{"_id":"source/_posts/vue_keep_alive.md","hash":"c5e4d6e4f5b70fc133ee47957c512e59b5a15bcd","modified":1709710979000},{"_id":"source/_posts/vue_hoc.md","hash":"0768473c84bcc85abafda1dc8e8bb60d9dca63ab","modified":1709710979000},{"_id":"source/_posts/vue_use1.md","hash":"92a17df7f5bd540afe0eee0474bd54635a1e5d05","modified":1709710979000},{"_id":"source/_posts/web_components.md","hash":"fa10adb37010a7f92fef7b7db6fb991b76414fd9","modified":1709710979000},{"_id":"source/_posts/vue_web_components.md","hash":"14426b7e51dd683be15771e4d7e0f5de99bf7c19","modified":1709710979000},{"_id":"source/_posts/web_hexo_editor.md","hash":"01c684029021c4bf2158bef6661f978a8a9113f7","modified":1709710979000},{"_id":"source/_posts/waterfalls_and_visiblelist.md","hash":"7d05b36dc34f39882bc257ec9cef94b2f10944f3","modified":1709710979000},{"_id":"source/_posts/webpack.md","hash":"4e4065c0e491a0152b52c0b150f2027af4fe6ff0","modified":1709710979000},{"_id":"source/about/index.md","hash":"40cd9bf6ba974f178dec8094e9e8f590851c2982","modified":1709710979000},{"_id":"source/_posts/wx_swiper.md","hash":"a39b836fd805642788f7e294f0beea530611f965","modified":1709710979000},{"_id":"source/fonts/DTM-Mono-1.otf","hash":"c99ab80dbe223cade5296639b181dc6400614f39","modified":1709710979000},{"_id":"source/links/index.md","hash":"5afd7d8a140266a4532c975692a7b7bccdbb82cb","modified":1709710979000},{"_id":"source/images/avatar.jpg","hash":"bacad1ed3f2c2781cf5b854fd7c24d809da29b38","modified":1709710979000},{"_id":"source/projects/index.md","hash":"6aaa460614402e9cc0314e7df294f4b3d3533431","modified":1709710979000},{"_id":"source/sketch/index.html","hash":"5fd8e330ab8938c51d708567f41a840118b2a539","modified":1709710979000},{"_id":"source/tags/index.md","hash":"8c1b0f736493b18fe5df89b0ddf63745c0387f5c","modified":1709710979000},{"_id":"source/categories/index.md","hash":"fd7d84b83abc22271390ac800ddda26e46565db8","modified":1709710979000},{"_id":"source/_data/style/index.less","hash":"eac115b7fb1f868432d7dcba11a4fd420c89ef56","modified":1709710979000},{"_id":"source/_data/style/twikoo.less","hash":"1ef358cc9bf697c20d5e6d0eed2c1755528e44d4","modified":1709710979000},{"_id":"source/images/reward/alipay.jpg","hash":"7e52ad818e064a103d6649b79645362e3a4b3038","modified":1709710979000},{"_id":"source/images/logo/web_conponents.png","hash":"9a2254c212177bf456f67575aabf04c38df1b8f2","modified":1709710979000},{"_id":"source/images/reward/wx_pay.jpg","hash":"3e3f2c541bcbbb110b011f5b5cd498a809aeb45b","modified":1709710979000},{"_id":"source/sketch/imgs/background.jpg","hash":"439141f4a99a9fc1ece760306b3ff0a9f9ff71b0","modified":1709710979000},{"_id":"source/sketch/imgs/large-screen-optimised.png","hash":"d8b2795b08442a1a000ae476eb2a2a1f56db5a16","modified":1709710979000},{"_id":"source/sketch/imgs/iphone-optimised.png","hash":"53fb48bcfa23508444b5bbb0406e954d7e9f1395","modified":1709710979000},{"_id":"source/sketch/imgs/ipad-optimised.png","hash":"c74aac6591ba89a7140c40eb53737ae5de546ff9","modified":1709710979000},{"_id":"source/sketch/imgs/laptop-screen-optimised.png","hash":"811839b6676f8f90e80f905379356cc76a4173c9","modified":1709710979000},{"_id":"source/images/posts/aotubuild/20200102105829.png","hash":"0c041b46a44b9ecc6372c8d7ab7c331ea520c12a","modified":1709710979000},{"_id":"source/images/posts/aotubuild/20200102152424.png","hash":"e462b3cd81fdc3546272d2cbdbc74d82ce7175d4","modified":1709710979000},{"_id":"source/images/posts/aotubuild/20200102162138.png","hash":"398ded250afab1a0197c449d8e7c027942bd5754","modified":1709710979000},{"_id":"source/images/posts/aotubuild/20200102175312.png","hash":"ac84a7c287737ac9f322b3affac0025b32970cae","modified":1709710979000},{"_id":"source/images/posts/cloudbase/20200615232440.png","hash":"35c53379d5330516d9c328d32a875611626d3e78","modified":1709710979000},{"_id":"source/images/posts/aotubuild/20200102163249.png","hash":"4c29dcccdf2a90a2c6de27ea6500d76030710f3a","modified":1709710979000},{"_id":"source/images/posts/cloudbase/20200615234334.png","hash":"8fb5a06d874fe286b98d6e8ec95f95e51a676edd","modified":1709710979000},{"_id":"source/images/posts/cloudbase/20200616162356.png","hash":"1ef9c44f18382e9eae39cff8732ef1d734aa5fb2","modified":1709710979000},{"_id":"source/images/posts/cloudbase/20200616162909.png","hash":"bd35cf1c3b9bf170eb59556c5a30c288006da44f","modified":1709710979000},{"_id":"source/images/posts/cloudbase/20200615242451.png","hash":"26958e38285eea9776008adb1c4cdbc249256c66","modified":1709710979000},{"_id":"source/images/posts/flutter_animation/lct.png","hash":"9b2036c1e4323e8209141fe5677fe80206941ae4","modified":1709710979000},{"_id":"source/images/posts/cloudbase_comment_two/pic_1644560396214.png","hash":"b7ac67889d64ac00bcfad9c27991b27bb69e9822","modified":1709710979000},{"_id":"source/images/posts/hexo_theme_layout/flow.png","hash":"54adf41eea1d01438197fe3791a5c92a779651d6","modified":1709710979000},{"_id":"source/images/posts/hexo_theme_layout/flow2.png","hash":"6fb2795edcc48494a5d90a489dba6959ababc2f7","modified":1709710979000},{"_id":"source/images/posts/hexo_theme_layout/view.png","hash":"4dae4462e0538b901cafa2f45e9dd43c46e6e985","modified":1709710979000},{"_id":"source/images/posts/git_stash/20200824154456.jpg","hash":"d13dd543afc6af0c66f559f67dc9d8c8db436781","modified":1709710979000},{"_id":"source/images/posts/git_stash/20200824154701.jpg","hash":"859d624e94c0876ad780c71d9eec0caf992c8e75","modified":1709710979000},{"_id":"source/images/posts/js_prototype/proto.jpg","hash":"7a75891477164b13ea4bac15236b3798c05c5465","modified":1709710979000},{"_id":"source/images/posts/grid_layout/grid.png","hash":"9505534a61f9206ec0275d8c6821e56921bf21d0","modified":1709710979000},{"_id":"source/images/posts/grid_layout/mask1.png","hash":"fb61a10829a3a411ff3e2cfd34acc77f9e9db214","modified":1709710979000},{"_id":"source/images/posts/grid_layout/drop.png","hash":"0a91c96915ef98b107572f7e4a00f3dd8ec8a6c4","modified":1709710979000},{"_id":"source/images/posts/grid_layout/resize.png","hash":"c9bbb90fa6c6967b67a5b7d0b2549896e355ae95","modified":1709710979000},{"_id":"source/images/posts/grid_layout/offset.png","hash":"d442e9ffd28294e9620753bd81a9a9032eb3c90f","modified":1709710979000},{"_id":"source/images/posts/grid_layout/resize_demo.png","hash":"779c137bc8e1c70293a628bc76321698f969500f","modified":1709710979000},{"_id":"source/images/posts/js_vue/20200312225611.png","hash":"c19b39f7286000c15fbc04d1d97755625ec17d1f","modified":1709710979000},{"_id":"source/images/posts/js_vue/20200312225648.png","hash":"a5282426b07c747532c03d9ed2c7c8127fbbb8b4","modified":1709710979000},{"_id":"source/images/posts/onewallhaven/down.png","hash":"015875782064f01f37dcbbda5a589dac084cecd5","modified":1709710979000},{"_id":"source/images/posts/node_proxy/20200629201153.png","hash":"a24cc695d1140e8ff5dad9f3a84278c2ba43fc48","modified":1709710979000},{"_id":"source/images/posts/vscode_extension/20210615205655.png","hash":"83082700d26506ab6f45e1d33170708b8d9fbb97","modified":1709710979000},{"_id":"source/images/posts/vscode_extension/20210616211914.png","hash":"d5af6ef0d5bc057ae530dce5161719636e44a41c","modified":1709710979000},{"_id":"source/images/posts/vscode_extension/20210616230737.png","hash":"b94db17ed4420da8290b502b10d7611dcf3f69f2","modified":1709710979000},{"_id":"source/images/posts/vue_docs/pic_1627610920884.png","hash":"87c9916c75aeac8dd6469a4e6a8c10dbee02fb7e","modified":1709710979000},{"_id":"source/images/posts/vue_docs/pic_1627612369570.png","hash":"b6a1397777192da27feed65dbe0b9139a3562882","modified":1709710979000},{"_id":"source/images/posts/vue_docs/pic_1627613208799.png","hash":"3bff00943228b9452b819beb0b9bbb1d1c710e03","modified":1709710979000},{"_id":"source/images/posts/vue_docs/pic_1627612689754.png","hash":"b47958f534809f569af076e9f8968bd1c62248ec","modified":1709710979000},{"_id":"source/images/posts/vue_docs/pic_1627623837793.png","hash":"bae4cac009f7f90760d43ab4fa8b0131f1b2100d","modified":1709710979000},{"_id":"source/images/posts/vue_docs/pic_1627615451450.png","hash":"7913d4f2df27a21eaa2cb0e9fd1cf4c6cbe6effb","modified":1709710979000},{"_id":"source/images/posts/webcomponents/20200510202839.png","hash":"e13bf00820fcea7ffa800c02d87012dc98f1152a","modified":1709710979000},{"_id":"source/android-chrome-512x512.png","hash":"58bab9db995df9a1eb42c57b513b48a903162591","modified":1709710979000},{"_id":"source/images/bg.svg","hash":"3530a21da0127758aa5980be8bc5ee115fb2ecbb","modified":1709710979000},{"_id":"source/images/reward/qq_pay.jpg","hash":"89e5c5ed39f91f9977db454c506852ea9ceaab24","modified":1709710979000},{"_id":"source/images/posts/admin_template/layout.png","hash":"74f0867c91f11a4cd851521de04154e606226cb6","modified":1709710979000},{"_id":"source/images/posts/cloudbase/20200615221122.png","hash":"aaebc089e5d32e348c124f9fb8bc0e4c89f7e7aa","modified":1709710979000},{"_id":"source/images/posts/aotubuild/20200102174220.png","hash":"571202de501e23b973260c67cd1cfa60881c0f52","modified":1709710979000},{"_id":"source/images/posts/flutter_animation/gxt.png","hash":"12622b4b014d83f095c14496f3a6da4021ae5bfa","modified":1709710979000},{"_id":"source/images/posts/grid_layout/demo.png","hash":"af5fca46fac4947c72c1648a1584655e2f69f43b","modified":1709710979000},{"_id":"source/images/posts/grid_layout/mask2.png","hash":"a134ecbbc86535e977796307485f1440ef9fab27","modified":1709710979000},{"_id":"source/images/posts/vscode_extension/20210615205632.png","hash":"797649512e35fd50e0d8fa1c536571957613bb21","modified":1709710979000},{"_id":"source/images/posts/renew_domains/pic_1636458264700.png","hash":"d7f261224607b27974cccf1653b2cb7d34c470af","modified":1709710979000},{"_id":"source/images/posts/vscode_extension_two/20210623234418.png","hash":"f95ebfdb63c012e228042329a20b2df55fc5401e","modified":1709710979000},{"_id":"source/images/reward/alipay_hd.jpg","hash":"90f6abaa0179cf23ce4e1651b4b292c93ee672f8","modified":1709710979000},{"_id":"source/images/posts/cloudbase_comment_two/pic_1657700995751.png","hash":"8b2f294a31b6297e02e307889a2694080e513a71","modified":1709710979000},{"_id":"source/images/posts/hexo_theme_layout/image.png","hash":"61886b17691c36d31808dfb31711ee0a50e853df","modified":1709710979000},{"_id":"source/images/posts/vue_web_components/pic_1637476488307.png","hash":"3e35962908719dba3d2ee1a4cb230155ad549c4a","modified":1709710979000},{"_id":"source/images/posts/vue_web_components/pic_1637475879404.png","hash":"8e09452b3ed570a31a18fd587859184222aaf38b","modified":1709710979000},{"_id":"source/images/posts/vue_web_components/pic_1638631915396.png","hash":"d5beb5979ce864a3d19939d3ef676f1fbaca3940","modified":1709710979000},{"_id":"source/images/posts/web_hexo_editor/hexo_editor_demo.png","hash":"cfdc08b61eb9382ecb1a79916c700498436a551f","modified":1709710979000},{"_id":"source/images/posts/hexo_theme_layout/view_code.png","hash":"b0580bea9bf571cff74b2a557959d5be1b297bed","modified":1709710979000},{"_id":"source/images/posts/vscode_extension/20210614224806.png","hash":"d8dc8601550eb6ad5024a84b97306c9a6a134299","modified":1709710979000},{"_id":"source/images/posts/vue_web_components/pic_1637477447787.png","hash":"19c49337a6434b17fe4584db84426f5b4b651ecf","modified":1709710979000},{"_id":"source/images/posts/cloudbase_comment_two/pic_1657701583297.png","hash":"b82f8baf5034c0a1c106a8905dcd6adbb9029eb2","modified":1709710979000},{"_id":"source/images/posts/vscode_extension_two/20210623230340.png","hash":"7d28674f3bc25f21035101a5e72af39baa9f79e9","modified":1709710979000},{"_id":"source/images/posts/vscode_extension_two/20210623230642.png","hash":"f6cea5d25ae3e2b67ff1842fe852e5ffd4bd0421","modified":1709710979000},{"_id":"source/images/posts/vscode_extension_two/20210623231651.png","hash":"5ff5fc7e9665636d67dda9d2858b59a77fdb5d6e","modified":1709710979000},{"_id":"source/images/posts/vscode_extension_two/20210623231124.png","hash":"1e957a49e67dbccef2190918cddc64be15cf8399","modified":1709710979000},{"_id":"source/images/posts/vscode_extension_two/20210623232915.png","hash":"e99676ceda52d82dd0bfebef4f8e57d18b059cc3","modified":1709710979000},{"_id":"source/images/posts/vscode_extension_two/20210623233248.png","hash":"a533fea4f5941a42c3f27f9bd9784a0e78f76d59","modified":1709710979000},{"_id":"source/images/posts/onewallhaven/onewallhaven.png","hash":"24c227448f90e60dfe1f3ff8e6e3e7c324978482","modified":1709710979000},{"_id":"source/images/posts/admin_template/CEt1w5WJrs.gif","hash":"c9e9d7742ad185d7056c0753d8c514541b33fd1d","modified":1709710979000},{"_id":"public/404.html","hash":"d245cf46466b16eb15b08fc21d1d5100cef7cdf1","modified":1709800745430},{"_id":"public/flex.html","hash":"d17a85d71e43a9598eda6782c9f60a524460b3c8","modified":1709800745430},{"_id":"public/sketch/index.html","hash":"86dd1f9c20b2f28fcfa7fcdf6ed050b75291e8c2","modified":1709800745430},{"_id":"public/atom.xml","hash":"6dae7448efdb3d7e68f6ab771639612e18978e65","modified":1709800745430},{"_id":"public/sitemap.xml","hash":"6c0292dd19af73cced5d634437f2b6a4911221b4","modified":1709800745430},{"_id":"public/search.xml","hash":"ed923c126f6217036f8ff2b3d2689308cb110c87","modified":1709800745430},{"_id":"public/about/index.html","hash":"1a5f6f0969c2d5ce18767850cead8a978d7348f4","modified":1709800745430},{"_id":"public/categories/index.html","hash":"7de2bd11cfd54d556ac98cf0ef1b448d8b2892a8","modified":1709800745430},{"_id":"public/links/index.html","hash":"ea3be335200d6cca284b8c7e6ead0723fdbdb312","modified":1709800745430},{"_id":"public/tags/index.html","hash":"d83cd2b9cf43c0f3a1f4571d00e0dafacc183516","modified":1709800745430},{"_id":"public/hexo_theme_layout/index.html","hash":"b691c551944ec8ece64555b17ce21424132beb2e","modified":1709800745430},{"_id":"public/projects/index.html","hash":"43082d4f8448225cf056fdf70a0aa6787fb1a2c7","modified":1709800745430},{"_id":"public/gird_layout/index.html","hash":"e9cd2a180ae24dbab7a0f3f18991bd142a5ab777","modified":1709800745430},{"_id":"public/api_convert/index.html","hash":"60da4b17cd69bd29ea5938fc7bd3a573520788d4","modified":1709800745430},{"_id":"public/web_hexo_editor/index.html","hash":"2afd7e2824f9f4ad9ba1e938aa0492064f862c59","modified":1709800745430},{"_id":"public/uniapp/index.html","hash":"b6c4ded1ba391c98ced3438ca830652386b05205","modified":1709800745430},{"_id":"public/npm_publish_package/index.html","hash":"464f0a96a9c565d832f8bdd12b2a59488935cfd2","modified":1709800745430},{"_id":"public/wx_swiper/index.html","hash":"2a57685d9c0fbb92c558f1d54f57d5b06e16d3cf","modified":1709800745430},{"_id":"public/waterfalls_and_visiblelist/index.html","hash":"f878a86ea27d627c1251c815a6a4968d1b0fe65f","modified":1709800745430},{"_id":"public/blgz/index.html","hash":"3edadd44bd2f3981e398ab69a1aff6caefdb13ac","modified":1709800745430},{"_id":"public/pjax_dynamic_plugins/index.html","hash":"3bd7f480574c5c2f63bf01b3ea293552863f6e58","modified":1709800745430},{"_id":"public/hexo_theme_async_guide/index.html","hash":"b0e82a7e3e79a43bcdca399841e1e226f3e4dfaf","modified":1709800745430},{"_id":"public/txgdx/index.html","hash":"4793c4c8a254a3f3b1995fa44439234fd28c78fa","modified":1709800745430},{"_id":"public/cloudbase_comment_two/index.html","hash":"7fd11aa498f7a748123e1e991c1b4b689a2d81c5","modified":1709800745430},{"_id":"public/renew_domains/index.html","hash":"86090da42dbc45c84a8f32d35512cb5c842ed979","modified":1709800745430},{"_id":"public/vue_web_components/index.html","hash":"6821c8a072f4d78d907a521ce1c6e25ac900eed5","modified":1709800745430},{"_id":"public/video_yztx/index.html","hash":"fd680428ce8d5fc116cbeaae14170fd92f0c88d9","modified":1709800745430},{"_id":"public/array_to_tree/index.html","hash":"e08c8258e28a3be99e3451cff7772953636501c7","modified":1709800745430},{"_id":"public/github_action/index.html","hash":"70177825844ba78b010a66ad083cf8f108d7d402","modified":1709800745430},{"_id":"public/hexo_theme_text/index.html","hash":"4422e1c330989ebdb32017e146e6b3c537d97b31","modified":1709800745430},{"_id":"public/vscode_extension_two/index.html","hash":"554811ded1f0a0273cd360cedb189addf7e5ccb2","modified":1709800745430},{"_id":"public/generate_vue_docs/index.html","hash":"749d7dc4e6f64b7f5481a79dfc52d918ada24fe0","modified":1709800745430},{"_id":"public/vscode_extension/index.html","hash":"0481aef518eb31e57b7b0d374d911ddeae06dc83","modified":1709800745430},{"_id":"public/flutter_animation/index.html","hash":"c22a27dd716dd254efe238f2cbcb34bf937e72b0","modified":1709800745430},{"_id":"public/mongodb_sql/index.html","hash":"77434c4d01ee6d0001686221fa24217fb4b1cc5a","modified":1709800745430},{"_id":"public/flutter_basic_widget/index.html","hash":"bd8ef4763295a839aa9531520e8e8f85468ff953","modified":1709800745430},{"_id":"public/vue_hoc/index.html","hash":"90bcbeb475289788c0005dc82d97441505504b53","modified":1709800745430},{"_id":"public/vue_keep_alive/index.html","hash":"4fb343d877d637e4a6a645e613a2c5c95575a103","modified":1709800745430},{"_id":"public/one_wallhaven/index.html","hash":"90188a2fcad6042fad06863c2b60896a4cb6727d","modified":1709800745430},{"_id":"public/file_download/index.html","hash":"0c40d67e09ae099eb5e3feef21b85dbed297fb8d","modified":1709800745430},{"_id":"public/css_theme/index.html","hash":"fa91d31a0ad629219a29b375fd22aa135e9d40f2","modified":1709800745430},{"_id":"public/git_stash/index.html","hash":"44d992d5207e4951bd7c08e6a453cbf7ec8a91bc","modified":1709800745430},{"_id":"public/vue_use1/index.html","hash":"47987d98deba7434660805b1ed95dbfb7a100a08","modified":1709800745430},{"_id":"public/cloudbase_comment/index.html","hash":"f1541c5c78767569c00a44ebc69d0696973eb994","modified":1709800745430},{"_id":"public/node_proxy/index.html","hash":"b4ad3927febaa27aa48b022d374ad8d64244244e","modified":1709800745430},{"_id":"public/web_components/index.html","hash":"be9456527c9e0f4a751447b4905d724fd64c428a","modified":1709800745430},{"_id":"public/admin_template/index.html","hash":"2ec93278ad839363edf2e040a5a82144d0a2f732","modified":1709800745430},{"_id":"public/css_filter/index.html","hash":"a7ffc289a9807a728dcd8c37ace912f0054a2da6","modified":1709800745430},{"_id":"public/js_vue/index.html","hash":"5722de8169e1d384fa75e5757e0554c3b709f51e","modified":1709800745430},{"_id":"public/aotubuild/index.html","hash":"ef5aa8c790e3fa6b79829a59086b97df244d4fd8","modified":1709800745430},{"_id":"public/js_prototype/index.html","hash":"127b454e8af01868c78ba678455124cf473e647f","modified":1709800745430},{"_id":"public/jsasync/index.html","hash":"695d5cd50cdbd3748b37d8d73f86cd6d0678c0ad","modified":1709800745430},{"_id":"public/webpack/index.html","hash":"b715af742588def53e1ce0f6fd262d86fb37e8c8","modified":1709800745430},{"_id":"public/helloword/index.html","hash":"85171d8bbb994ebaa04202f4d35db4d90b8e67eb","modified":1709800745430},{"_id":"public/archives/page/2/index.html","hash":"d52a6072c3bfbdce5fec940fd6a707c4891bf826","modified":1709800745430},{"_id":"public/archives/page/3/index.html","hash":"9d675eb05d9a3b6c71e1704c59a650b74cc696da","modified":1709800745430},{"_id":"public/archives/page/4/index.html","hash":"99eff7b88e39dba57aa9130c5deaea9ce0904f22","modified":1709800745430},{"_id":"public/archives/page/5/index.html","hash":"7963ed7a2d6876c1cf381f1c40594b665f9dd1f1","modified":1709800745430},{"_id":"public/archives/2019/index.html","hash":"b2efec0af9ee1ecc7673f81d2b1bfbd943e6ee03","modified":1709800745430},{"_id":"public/archives/2019/11/index.html","hash":"92fb92fa90c9fbd84bbe49e6dde5db3f07c924f0","modified":1709800745430},{"_id":"public/archives/2019/12/index.html","hash":"5b033201ff4608c393f0d3c3a8b44444ba29d849","modified":1709800745430},{"_id":"public/archives/2020/index.html","hash":"8233bdc4f0cd0ffa4f3fbbf39600561e73a97614","modified":1709800745430},{"_id":"public/archives/2020/page/2/index.html","hash":"96a2a666d77ac657e729dd5967b0af58518c6637","modified":1709800745430},{"_id":"public/archives/2020/01/index.html","hash":"e37a3e361a9cb8cce80548c15156411870800c35","modified":1709800745430},{"_id":"public/archives/2020/03/index.html","hash":"c1690962936fd525d51e7303f069ec3b56e1364b","modified":1709800745430},{"_id":"public/archives/2020/04/index.html","hash":"4e2883764705e1a1d2eeb9dd62c450c787273f16","modified":1709800745430},{"_id":"public/archives/2020/05/index.html","hash":"e386efb7cb80d48725eeddee2654dbe1e1e486d8","modified":1709800745430},{"_id":"public/archives/2020/06/index.html","hash":"62eaa0fca3ba6413d51844100d37cff18e95d798","modified":1709800745430},{"_id":"public/archives/2020/08/index.html","hash":"27c2f1b10fde5c8f0e5456b55e38b30e21a68695","modified":1709800745430},{"_id":"public/archives/2020/11/index.html","hash":"fba359f454a5335e1348cd84e75a5ae9c274f3af","modified":1709800745430},{"_id":"public/archives/2020/10/index.html","hash":"664c1b3c0022a0b99b879343c4ca2d3d1d6177fc","modified":1709800745430},{"_id":"public/archives/2021/page/2/index.html","hash":"2e737e7b36966bac9bb0c904282e1b6df3f65820","modified":1709800745430},{"_id":"public/archives/2020/12/index.html","hash":"4bc1609ad0f4c9626880c8fa0ddae6af9e664d54","modified":1709800745430},{"_id":"public/archives/2021/03/index.html","hash":"aff0375b2c10b532472ac6f61c5462e24568856f","modified":1709800745430},{"_id":"public/archives/2021/index.html","hash":"9c41af493a187281594709a28441bbb82b80d95c","modified":1709800745430},{"_id":"public/archives/2021/01/index.html","hash":"827436ff4c2a1e0a21c168d5d056370b9b200b35","modified":1709800745430},{"_id":"public/archives/2021/04/index.html","hash":"9f86c6fcd43651dcd7319bb1c5e78dffcd32212a","modified":1709800745430},{"_id":"public/archives/2021/06/index.html","hash":"3c7f65bf7dc2b46f595c883067fcfa7d4424e9e5","modified":1709800745430},{"_id":"public/archives/2021/07/index.html","hash":"19352e876bfc113f92970dfb6c5cab4b9fb7f476","modified":1709800745430},{"_id":"public/archives/2021/11/index.html","hash":"06747628d65390a29b7d3b29592737bafb20e919","modified":1709800745430},{"_id":"public/archives/2022/index.html","hash":"1f2e335abe40f754b804b400b18cd6f0cfdd3425","modified":1709800745430},{"_id":"public/archives/2021/10/index.html","hash":"ede73e1068a19d9524e2807317df75c0dae4a629","modified":1709800745430},{"_id":"public/archives/2022/07/index.html","hash":"e0803c200837cf334106532fc788cc8ca0501910","modified":1709800745430},{"_id":"public/archives/2022/09/index.html","hash":"a7a56559a2e43fccffca6e3cb7ed21b628c79a5c","modified":1709800745430},{"_id":"public/archives/2022/11/index.html","hash":"6a8e31b080496ac6d84ba3c0c0879bd7f8ba37dc","modified":1709800745430},{"_id":"public/archives/2022/12/index.html","hash":"c8f37000cca6b43a548cc3f7afb0b950e5bdae10","modified":1709800745430},{"_id":"public/archives/2023/index.html","hash":"53bd916617f653b46164130ec0ff06f61da49a50","modified":1709800745430},{"_id":"public/archives/2023/02/index.html","hash":"4595e5a82612475cfb14e2bb34928482cf14548c","modified":1709800745430},{"_id":"public/archives/2022/02/index.html","hash":"640b2e5b10817c01de7684c79d74ae94e873c858","modified":1709800745430},{"_id":"public/archives/2023/04/index.html","hash":"920e9b80a2a121a69b1617d8c75ff160bf47a685","modified":1709800745430},{"_id":"public/archives/2023/07/index.html","hash":"bc7ca15b50b33d2283419f8cebc1b9fcfcd5cab7","modified":1709800745430},{"_id":"public/archives/2023/09/index.html","hash":"2329019ee41d0f4c42335dcfff47c247cb2fc127","modified":1709800745430},{"_id":"public/archives/2022/10/index.html","hash":"d129a7d39c68b6e1f0008203dd44713d62df5cf7","modified":1709800745430},{"_id":"public/archives/2023/11/index.html","hash":"aa30ad0912e271c67919064d1026c829e1f6ca0f","modified":1709800745430},{"_id":"public/archives/2021/09/index.html","hash":"98ab2f5e88b099faa7ca3062e5219fa042b4fba3","modified":1709800745430},{"_id":"public/archives/2023/12/index.html","hash":"74cb9ad707ca8c99ede158906a0997e142a4d84c","modified":1709800745430},{"_id":"public/categories/创作类/index.html","hash":"8bd9532f3a6549b44896031f3d1711e7d1476005","modified":1709800745430},{"_id":"public/categories/记录类/index.html","hash":"46c062297e502ee016187e413c8bbf95390af2a0","modified":1709800745430},{"_id":"public/categories/记录类/page/3/index.html","hash":"136f6f580cda64952feceb152d9d0c7f1f31a80b","modified":1709800745430},{"_id":"public/categories/记录类/page/4/index.html","hash":"483ce84c8d1e9d6484b855ff6a8fd92ca83fb062","modified":1709800745430},{"_id":"public/categories/记录类/page/2/index.html","hash":"c837b33aff3049bacd1e0f545909ff4a90767112","modified":1709800745430},{"_id":"public/categories/转载/index.html","hash":"933ffc5b401d1b437d491e477e4b549445dc3cc5","modified":1709800745430},{"_id":"public/categories/分享类/index.html","hash":"3f4d119b66a23ffbc7ba231b93122c31fb68fa53","modified":1709800745430},{"_id":"public/page/2/index.html","hash":"5377baa75424da6a8fe89707bf54e53b06dbe56c","modified":1709800745430},{"_id":"public/categories/创造类/index.html","hash":"d2bc162cf09e632b9f34e60a151d4702e5578319","modified":1709800745430},{"_id":"public/page/3/index.html","hash":"d76ce4f55731d76de523b3437dc364bc1dd69703","modified":1709800745430},{"_id":"public/page/4/index.html","hash":"f63e208ee52355103bbf7d9db78baf3c3bf02b2d","modified":1709800745430},{"_id":"public/page/5/index.html","hash":"5d99cb14e7001fac66dcd91b47f8a33dd52d9744","modified":1709800745430},{"_id":"public/page/6/index.html","hash":"793476c1bdc6bb94fec4d9b5c6880b72668ca87a","modified":1709800745430},{"_id":"public/tags/vue/index.html","hash":"f1643667f81b325401cad3e25f10bc913df1ad7b","modified":1709800745430},{"_id":"public/tags/vuex/index.html","hash":"f1f7f8b6a4803e055654b9ede2d1d1e465a024c7","modified":1709800745430},{"_id":"public/tags/vue-route/index.html","hash":"20f93c3fd8c23b88ee7fd6ccca8a2fe270822902","modified":1709800745430},{"_id":"public/tags/elemelt-ui/index.html","hash":"456a368e309663695cc803d6dc66b364fdfa6c15","modified":1709800745430},{"_id":"public/tags/JavaScript/index.html","hash":"3ea7d1501604909703f9d069bbe11532062214d8","modified":1709800745430},{"_id":"public/tags/devenv/index.html","hash":"eb799e5d7d972ebf13cdf9a7d29e7b798dd94e9d","modified":1709800745430},{"_id":"public/tags/工具/index.html","hash":"9f946d3ca010a4aeba1520ea34f5127ebd7c6bec","modified":1709800745430},{"_id":"public/tags/AST/index.html","hash":"f7568af158333629d33bfe8b96384f236c3b9561","modified":1709800745430},{"_id":"public/tags/小程序/index.html","hash":"68971644c7328da0400023ac89fd9fee4e40004d","modified":1709800745430},{"_id":"public/tags/node/index.html","hash":"57eda1c2f44d2aba7479fa8ff044904febaff732","modified":1709800745430},{"_id":"public/tags/css/index.html","hash":"3ef9c3122b5591f5b4ef9afe9696868d99a2b5ae","modified":1709800745430},{"_id":"public/tags/electron/index.html","hash":"be57f19b951cbece5a7be786b9e7c6a5f75ca7af","modified":1709800745430},{"_id":"public/tags/Flutter/index.html","hash":"10844e7cb666f3130ba53dcce6c3c48c1a50beb5","modified":1709800745430},{"_id":"public/tags/git/index.html","hash":"ce160ec1c57107056124b5f7ec2746e40f650066","modified":1709800745430},{"_id":"public/tags/github/index.html","hash":"536c4594415f45e929be4c38746daa6c3407d7c4","modified":1709800745430},{"_id":"public/tags/hello-world/index.html","hash":"4e2cd26b01c1f6bd47f01f1984f586be438fa299","modified":1709800745430},{"_id":"public/tags/hexo/index.html","hash":"25081191565fb38132604a4be982840cf5721b99","modified":1709800745430},{"_id":"public/tags/MongoDB/index.html","hash":"46972bc2714e03c8005cea619cbbbb75b055852e","modified":1709800745430},{"_id":"public/tags/npm/index.html","hash":"9d741f8774264e38e4757aa0afd919cffb5cfff2","modified":1709800745430},{"_id":"public/tags/Pjax/index.html","hash":"7886b08d4df0a1f2c74b926e01bef9055ac84497","modified":1709800745430},{"_id":"public/tags/vscode/index.html","hash":"7ea838927e43404752bc51b145c27baa933c2fdc","modified":1709800745430},{"_id":"public/tags/video/index.html","hash":"c0e5dfa4dce42eca94ecc9361b29746547db7ae6","modified":1709800745430},{"_id":"public/tags/WebComponents/index.html","hash":"a1d0cd5b2934192569d288dea962315ab49c8246","modified":1709800745430},{"_id":"public/tags/webpack/index.html","hash":"791eba3c37b7ae6e2c53a8daf348664bc6532d58","modified":1709800745430},{"_id":"public/BingSiteAuth.xml","hash":"e473931524729f494da8399ba27293998734449d","modified":1709800745430},{"_id":"public/CNAME","hash":"1631465826fad5e7112105ffe68177a63b2ab46f","modified":1709800745430},{"_id":"public/apple-touch-icon.png","hash":"ddb9c422696ec30b4458af36fe1ce0f6aace5cbd","modified":1709800745430},{"_id":"public/android-chrome-192x192.png","hash":"08bc1d02b401098687a5481299fcf28ddf94c9ae","modified":1709800745430},{"_id":"public/favicon-16x16.png","hash":"61a010a1735c2a300345a00bad1b795d72c89b34","modified":1709800745430},{"_id":"public/robots.txt","hash":"6dfc427fe73587726797f47c981e2f24f5dcc61f","modified":1709800745430},{"_id":"public/favicon-32x32.png","hash":"147338d2f77acafd966e67e53e02529abd580dc2","modified":1709800745430},{"_id":"public/favicon.ico","hash":"7a03f4ea223aff402906ebd5d89ed22460db5c00","modified":1709800745430},{"_id":"public/site.webmanifest","hash":"c1690c08b1975413734729838a8cdd851b93f3d4","modified":1709800745430},{"_id":"public/fonts/DTM-Mono-1.otf","hash":"c99ab80dbe223cade5296639b181dc6400614f39","modified":1709800745430},{"_id":"public/images/avatar.jpg","hash":"bacad1ed3f2c2781cf5b854fd7c24d809da29b38","modified":1709800745430},{"_id":"public/images/logo/web_conponents.png","hash":"9a2254c212177bf456f67575aabf04c38df1b8f2","modified":1709800745430},{"_id":"public/images/reward/alipay.jpg","hash":"7e52ad818e064a103d6649b79645362e3a4b3038","modified":1709800745430},{"_id":"public/images/reward/wx_pay.jpg","hash":"3e3f2c541bcbbb110b011f5b5cd498a809aeb45b","modified":1709800745430},{"_id":"public/sketch/imgs/large-screen-optimised.png","hash":"d8b2795b08442a1a000ae476eb2a2a1f56db5a16","modified":1709800745430},{"_id":"public/sketch/imgs/laptop-screen-optimised.png","hash":"811839b6676f8f90e80f905379356cc76a4173c9","modified":1709800745430},{"_id":"public/sketch/imgs/background.jpg","hash":"439141f4a99a9fc1ece760306b3ff0a9f9ff71b0","modified":1709800745430},{"_id":"public/sketch/imgs/ipad-optimised.png","hash":"c74aac6591ba89a7140c40eb53737ae5de546ff9","modified":1709800745430},{"_id":"public/sketch/imgs/iphone-optimised.png","hash":"53fb48bcfa23508444b5bbb0406e954d7e9f1395","modified":1709800745430},{"_id":"public/images/posts/aotubuild/20200102105829.png","hash":"0c041b46a44b9ecc6372c8d7ab7c331ea520c12a","modified":1709800745430},{"_id":"public/images/posts/aotubuild/20200102162138.png","hash":"398ded250afab1a0197c449d8e7c027942bd5754","modified":1709800745430},{"_id":"public/images/posts/aotubuild/20200102152424.png","hash":"e462b3cd81fdc3546272d2cbdbc74d82ce7175d4","modified":1709800745430},{"_id":"public/images/posts/aotubuild/20200102163249.png","hash":"4c29dcccdf2a90a2c6de27ea6500d76030710f3a","modified":1709800745430},{"_id":"public/images/posts/aotubuild/20200102175312.png","hash":"ac84a7c287737ac9f322b3affac0025b32970cae","modified":1709800745430},{"_id":"public/images/posts/cloudbase/20200615232440.png","hash":"35c53379d5330516d9c328d32a875611626d3e78","modified":1709800745430},{"_id":"public/images/posts/cloudbase/20200616162356.png","hash":"1ef9c44f18382e9eae39cff8732ef1d734aa5fb2","modified":1709800745430},{"_id":"public/images/posts/cloudbase/20200615234334.png","hash":"8fb5a06d874fe286b98d6e8ec95f95e51a676edd","modified":1709800745430},{"_id":"public/images/posts/cloudbase/20200615242451.png","hash":"26958e38285eea9776008adb1c4cdbc249256c66","modified":1709800745430},{"_id":"public/images/posts/cloudbase/20200616162909.png","hash":"bd35cf1c3b9bf170eb59556c5a30c288006da44f","modified":1709800745430},{"_id":"public/images/posts/flutter_animation/lct.png","hash":"9b2036c1e4323e8209141fe5677fe80206941ae4","modified":1709800745430},{"_id":"public/images/posts/cloudbase_comment_two/pic_1644560396214.png","hash":"b7ac67889d64ac00bcfad9c27991b27bb69e9822","modified":1709800745430},{"_id":"public/images/posts/hexo_theme_layout/flow.png","hash":"54adf41eea1d01438197fe3791a5c92a779651d6","modified":1709800745430},{"_id":"public/images/posts/hexo_theme_layout/flow2.png","hash":"6fb2795edcc48494a5d90a489dba6959ababc2f7","modified":1709800745430},{"_id":"public/images/posts/hexo_theme_layout/view.png","hash":"4dae4462e0538b901cafa2f45e9dd43c46e6e985","modified":1709800745430},{"_id":"public/images/posts/git_stash/20200824154456.jpg","hash":"d13dd543afc6af0c66f559f67dc9d8c8db436781","modified":1709800745430},{"_id":"public/images/posts/git_stash/20200824154701.jpg","hash":"859d624e94c0876ad780c71d9eec0caf992c8e75","modified":1709800745430},{"_id":"public/images/posts/js_prototype/proto.jpg","hash":"7a75891477164b13ea4bac15236b3798c05c5465","modified":1709800745430},{"_id":"public/images/posts/grid_layout/drop.png","hash":"0a91c96915ef98b107572f7e4a00f3dd8ec8a6c4","modified":1709800745430},{"_id":"public/images/posts/grid_layout/grid.png","hash":"9505534a61f9206ec0275d8c6821e56921bf21d0","modified":1709800745430},{"_id":"public/images/posts/grid_layout/mask1.png","hash":"fb61a10829a3a411ff3e2cfd34acc77f9e9db214","modified":1709800745430},{"_id":"public/images/posts/grid_layout/offset.png","hash":"d442e9ffd28294e9620753bd81a9a9032eb3c90f","modified":1709800745430},{"_id":"public/images/posts/grid_layout/resize.png","hash":"c9bbb90fa6c6967b67a5b7d0b2549896e355ae95","modified":1709800745430},{"_id":"public/images/posts/grid_layout/resize_demo.png","hash":"779c137bc8e1c70293a628bc76321698f969500f","modified":1709800745430},{"_id":"public/images/posts/js_vue/20200312225611.png","hash":"c19b39f7286000c15fbc04d1d97755625ec17d1f","modified":1709800745430},{"_id":"public/images/posts/js_vue/20200312225648.png","hash":"a5282426b07c747532c03d9ed2c7c8127fbbb8b4","modified":1709800745430},{"_id":"public/images/posts/onewallhaven/down.png","hash":"015875782064f01f37dcbbda5a589dac084cecd5","modified":1709800745430},{"_id":"public/images/posts/node_proxy/20200629201153.png","hash":"a24cc695d1140e8ff5dad9f3a84278c2ba43fc48","modified":1709800745430},{"_id":"public/images/posts/vscode_extension/20210615205655.png","hash":"83082700d26506ab6f45e1d33170708b8d9fbb97","modified":1709800745430},{"_id":"public/images/posts/vscode_extension/20210616211914.png","hash":"d5af6ef0d5bc057ae530dce5161719636e44a41c","modified":1709800745430},{"_id":"public/images/posts/vscode_extension/20210616230737.png","hash":"b94db17ed4420da8290b502b10d7611dcf3f69f2","modified":1709800745430},{"_id":"public/images/posts/vue_docs/pic_1627612369570.png","hash":"b6a1397777192da27feed65dbe0b9139a3562882","modified":1709800745430},{"_id":"public/images/posts/vue_docs/pic_1627612689754.png","hash":"b47958f534809f569af076e9f8968bd1c62248ec","modified":1709800745430},{"_id":"public/images/posts/vue_docs/pic_1627613208799.png","hash":"3bff00943228b9452b819beb0b9bbb1d1c710e03","modified":1709800745430},{"_id":"public/images/posts/vue_docs/pic_1627623837793.png","hash":"bae4cac009f7f90760d43ab4fa8b0131f1b2100d","modified":1709800745430},{"_id":"public/images/posts/vue_docs/pic_1627610920884.png","hash":"87c9916c75aeac8dd6469a4e6a8c10dbee02fb7e","modified":1709800745430},{"_id":"public/images/posts/vue_docs/pic_1627615451450.png","hash":"7913d4f2df27a21eaa2cb0e9fd1cf4c6cbe6effb","modified":1709800745430},{"_id":"public/images/posts/webcomponents/20200510202839.png","hash":"e13bf00820fcea7ffa800c02d87012dc98f1152a","modified":1709800745430},{"_id":"public/android-chrome-512x512.png","hash":"58bab9db995df9a1eb42c57b513b48a903162591","modified":1709800745430},{"_id":"public/images/bg.svg","hash":"3530a21da0127758aa5980be8bc5ee115fb2ecbb","modified":1709800745430},{"_id":"public/images/reward/qq_pay.jpg","hash":"89e5c5ed39f91f9977db454c506852ea9ceaab24","modified":1709800745430},{"_id":"public/images/posts/admin_template/layout.png","hash":"74f0867c91f11a4cd851521de04154e606226cb6","modified":1709800745430},{"_id":"public/images/posts/aotubuild/20200102174220.png","hash":"571202de501e23b973260c67cd1cfa60881c0f52","modified":1709800745430},{"_id":"public/images/posts/cloudbase/20200615221122.png","hash":"aaebc089e5d32e348c124f9fb8bc0e4c89f7e7aa","modified":1709800745430},{"_id":"public/images/posts/flutter_animation/gxt.png","hash":"12622b4b014d83f095c14496f3a6da4021ae5bfa","modified":1709800745430},{"_id":"public/images/posts/grid_layout/demo.png","hash":"af5fca46fac4947c72c1648a1584655e2f69f43b","modified":1709800745430},{"_id":"public/images/posts/grid_layout/mask2.png","hash":"a134ecbbc86535e977796307485f1440ef9fab27","modified":1709800745430},{"_id":"public/images/posts/vscode_extension/20210615205632.png","hash":"797649512e35fd50e0d8fa1c536571957613bb21","modified":1709800745430},{"_id":"public/images/posts/renew_domains/pic_1636458264700.png","hash":"d7f261224607b27974cccf1653b2cb7d34c470af","modified":1709800745430},{"_id":"public/images/posts/vscode_extension_two/20210623234418.png","hash":"f95ebfdb63c012e228042329a20b2df55fc5401e","modified":1709800745430},{"_id":"public/images/reward/alipay_hd.jpg","hash":"90f6abaa0179cf23ce4e1651b4b292c93ee672f8","modified":1709800745430},{"_id":"public/images/posts/cloudbase_comment_two/pic_1657700995751.png","hash":"8b2f294a31b6297e02e307889a2694080e513a71","modified":1709800745430},{"_id":"public/images/posts/hexo_theme_layout/image.png","hash":"61886b17691c36d31808dfb31711ee0a50e853df","modified":1709800745430},{"_id":"public/images/posts/vue_web_components/pic_1637476488307.png","hash":"3e35962908719dba3d2ee1a4cb230155ad549c4a","modified":1709800745430},{"_id":"public/images/posts/vue_web_components/pic_1637475879404.png","hash":"8e09452b3ed570a31a18fd587859184222aaf38b","modified":1709800745430},{"_id":"public/images/posts/web_hexo_editor/hexo_editor_demo.png","hash":"cfdc08b61eb9382ecb1a79916c700498436a551f","modified":1709800745430},{"_id":"public/images/posts/vue_web_components/pic_1638631915396.png","hash":"d5beb5979ce864a3d19939d3ef676f1fbaca3940","modified":1709800745430},{"_id":"public/images/posts/hexo_theme_layout/view_code.png","hash":"b0580bea9bf571cff74b2a557959d5be1b297bed","modified":1709800745430},{"_id":"public/images/posts/vscode_extension/20210614224806.png","hash":"d8dc8601550eb6ad5024a84b97306c9a6a134299","modified":1709800745430},{"_id":"public/images/posts/vue_web_components/pic_1637477447787.png","hash":"19c49337a6434b17fe4584db84426f5b4b651ecf","modified":1709800745430},{"_id":"public/images/posts/cloudbase_comment_two/pic_1657701583297.png","hash":"b82f8baf5034c0a1c106a8905dcd6adbb9029eb2","modified":1709800745430},{"_id":"public/images/posts/vscode_extension_two/20210623230340.png","hash":"7d28674f3bc25f21035101a5e72af39baa9f79e9","modified":1709800745430},{"_id":"public/images/posts/vscode_extension_two/20210623230642.png","hash":"f6cea5d25ae3e2b67ff1842fe852e5ffd4bd0421","modified":1709800745430},{"_id":"public/images/posts/vscode_extension_two/20210623231651.png","hash":"5ff5fc7e9665636d67dda9d2858b59a77fdb5d6e","modified":1709800745430},{"_id":"public/images/posts/vscode_extension_two/20210623231124.png","hash":"1e957a49e67dbccef2190918cddc64be15cf8399","modified":1709800745430},{"_id":"public/images/posts/vscode_extension_two/20210623232915.png","hash":"e99676ceda52d82dd0bfebef4f8e57d18b059cc3","modified":1709800745430},{"_id":"public/images/posts/vscode_extension_two/20210623233248.png","hash":"a533fea4f5941a42c3f27f9bd9784a0e78f76d59","modified":1709800745430},{"_id":"public/images/posts/onewallhaven/onewallhaven.png","hash":"24c227448f90e60dfe1f3ff8e6e3e7c324978482","modified":1709800745430},{"_id":"public/images/posts/admin_template/CEt1w5WJrs.gif","hash":"c9e9d7742ad185d7056c0753d8c514541b33fd1d","modified":1709800745430}],"Category":[{"name":"创作类","_id":"cltgz7vqj000698lghrprae9k"},{"name":"记录类","_id":"cltgz7vqq000e98lg15ie2oij"},{"name":"创造类","_id":"cltgz7vr5000w98lg6r3b3my7"},{"name":"转载","_id":"cltgz7vrt002498lgft2731ob"},{"name":"分享类","_id":"cltgz7vsb003298lg436z2hto"}],"Data":[{"_id":"languages","data":{"zh-Hans":{"menu":{"home":"Home","archives":"Archives","links":"Links","about":"About","projects":"Projects","forever":"Forever Go"}}}},{"_id":"links","data":[{"name":"Hexo","url":"//hexo.io/","image":"//d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","desc":"快速、简洁且高效的博客框架"},{"name":"白云苍狗","url":"//blog.imalun.com/","image":"//blog.imalun.com/images/avatar.jpg","desc":"醒，亦在人间；梦，亦在人间"},{"name":"阿龙爱吃肉","url":"//3zi.cn","image":"//i.loli.net/2021/03/28/IZilAJ293tVpwLK.jpg","desc":"学习过程中和工作中的新知识点，范围：Java，MySQL，Layui…"},{"name":"五月七日▪君寻","url":"//www.hongtk.cn","image":"//www.hongtk.cn/wp-content/uploads/2021/05/100.png","desc":"申申如也，夭夭如也。"},{"name":"忆梦小站","url":"//www.onyi.net","image":"//cdn.jsdelivr.net/gh/heyechuanmei/YiMengXinYun/image/headportrait.jpg","desc":"微笑着挥手再见，但内心却深知，以后不会再相见。"},{"name":"昨夜星辰","url":"//seachen.cn","image":"//seachen.cn/images/avatar.jpg","desc":"日月之行，星汉灿烂。"},{"name":"浮云翩迁之间","url":"//blognas.hwb0307.com","image":"//blognas.hwb0307.com/wp-content/uploads/2022/04/25b2916b5c49db617f5283.jpg","desc":"百代繁华一朝都，谁非过客；千秋明月吹角寒，花是主人。"},{"name":"热爱生活","url":"//www.clcou.com","image":"//pic.imgdb.cn/item/6274c7be09475431292fd345.jpg","desc":"记录现在和未来"},{"name":"是非题","url":"//www.shifeiti.com","image":"//other.shifeiti.com/logo/logo.png","desc":"记录生活，热爱跑步，学习 FPGA 中"},{"name":"Trtyr's Blog","url":"//www.trtyr.top","image":"//img.trtyr.top/img/head.webp","desc":"A New Story Born"},{"name":"爱吃肉的猫","url":"//meuicat.com/","image":"//s1.ax1x.com/2023/05/26/p9qChjI.jpg","desc":"有肉有猫有生活."},{"name":"有余","url":"//dongping.link/","image":"//image.dongping.link/imageupload/3022db7803924133aeed921cb73822c9.png","desc":"村里唯一的希望."}]},{"_id":"projects","data":[{"title":"设计","children":[{"name":"hexo-theme-async","desc":"一个简单，轻巧的 Hexo 主题。","url":"https://github.com/MaLuns/hexo-theme-async"},{"name":"hexo-theme-text","desc":"一款极简的 Hexo 主题。","url":"https://github.com/MaLuns/hexo-theme-text"}]},{"title":"工具","children":[{"name":"Hexo-Editor","desc":"An online web page for the hexo editor。","url":"https://github.com/MaLuns/hexo-editor"},{"name":"Code-Shows","desc":"一个将代码片段生成为可在线编辑的静态网页的框架。","url":"https://github.com/MaLuns/code-shows"},{"name":"cloud-storage","desc":"使用腾讯云云存储当作图床的 VScode 插件。","url":"https://github.com/MaLuns/vscode-extension-cloud-storage"},{"name":"generate-vue-docs","desc":"vue 组件文档生成包。","url":"https://github.com/MaLuns/generate-vue-docs"},{"name":"view-npm-package","desc":"一款在 VScode 查看 Npm 包代码插件。","url":"https://github.com/MaLuns/vscode-extension-view-npm-package"}]},{"title":"程序","children":[{"name":"wallhaven-electron","desc":"一个基于 Electron 的壁纸程序。","url":"https://github.com/MaLuns/wallhaven-electron"},{"name":"wallhaven-mini","desc":"wallhaven-electron 的小程序版本。","url":"https://github.com/MaLuns/wallhaven-electron"},{"name":"home-nav","desc":"一款简洁的首页导航。","url":"https://github.com/MaLuns/home-nav"}]},{"title":"其他","children":[{"name":"bcommentjs","desc":"一个简洁、安全的静态网站评论插件。","url":"https://github.com/MaLuns/bcommentjs"},{"name":"flutter-study","desc":"flutter 基础使用示范。","url":"https://gitee.com/ml13/flutter_study"},{"name":"dynamic-plugin","desc":"Pjax 下动态加载插件的脚本。","url":"https://github.com/MaLuns/dynamic-plugin"}]}]},{"_id":"style/twikoo","data":":root .tk-admin {\n  color: #000000 !important;\n  background-color: #ffffff !important;\n  backdrop-filter: unset !important;\n}\n:root .tk-admin .tk-panel {\n  color: #000000 !important;\n}\n:root .tk-admin .tk-panel .tk-tabs {\n  margin: 1rem 0 !important;\n}\n:root .tk-admin .tk-panel .tk-tab.__active {\n  color: #000000 !important;\n  border-bottom: unset !important;\n}\n:root .tk-admin .tk-panel-logout,\n:root .tk-admin .tk-admin-comment-filter-type {\n  color: #000000 !important;\n}\n:root .tk-admin .tk-login,\n:root .tk-admin .tk-regist {\n  margin: 0 0 0 40px;\n}\n:root .tk-admin details {\n  padding: 0 !important;\n  border: unset !important;\n}\n:root .tk-admin details summary {\n  padding: 0 !important;\n  margin: 0 !important;\n}\n:root .tk-admin .tk-admin-close {\n  fill: #000000;\n}\n:root.dark .tk-admin {\n  color: #ffffff !important;\n  background-color: #494949 !important;\n  backdrop-filter: unset !important;\n}\n:root.dark .tk-admin .tk-panel {\n  color: #ffffff !important;\n}\n:root.dark .tk-admin .tk-panel .tk-tabs {\n  margin: 1rem 0 !important;\n}\n:root.dark .tk-admin .tk-panel .tk-tab.__active {\n  color: #ffffff !important;\n  border-bottom: unset !important;\n}\n:root.dark .tk-admin .tk-panel-logout,\n:root.dark .tk-admin .tk-admin-comment-filter-type {\n  color: #ffffff !important;\n}\n:root.dark .tk-admin .tk-login,\n:root.dark .tk-admin .tk-regist {\n  margin: 0 0 0 40px;\n}\n:root.dark .tk-admin details {\n  padding: 0 !important;\n  border: unset !important;\n}\n:root.dark .tk-admin details summary {\n  padding: 0 !important;\n  margin: 0 !important;\n}\n:root.dark .tk-admin .tk-admin-close {\n  fill: #ffffff;\n}\n"},{"_id":"style/index","data":":root {\n  --primary: #6062ce;\n  --primary-70: rgba(96, 98, 206, 0.7);\n  --primary-50: rgba(96, 98, 206, 0.5);\n  --primary-30: rgba(96, 98, 206, 0.3);\n  --primary-weak: #7a89df;\n  --primary-weak-50: rgba(122, 137, 223, 0.5);\n  --selection-bg-color: #1f2d3d;\n  --selection-color: #f1f1f1;\n  --body-color: #1f2d3d;\n  --card-cover-bg-color: #c4d6f56b;\n}\n:root.dark {\n  --primary: #6062ce;\n  --primary-70: rgba(96, 98, 206, 0.7);\n  --primary-50: rgba(96, 98, 206, 0.5);\n  --primary-30: rgba(96, 98, 206, 0.3);\n  --primary-weak: #7a89df;\n  --primary-weak-50: rgba(122, 137, 223, 0.5);\n  --selection-bg-color: #f1f1f1;\n  --selection-color: #1f2d3d;\n  --body-color: #f1f1f1b3;\n  --card-cover-bg-color: #102027;\n}\n:root.dark .trm-avatar {\n  filter: invert(0.9);\n  border-color: transparent;\n}\n:root.dark .trm-publication img,\n:root.dark .trm-publication svg {\n  filter: brightness(0.7);\n}\n:root.dark .trm-banner .trm-banner-cover {\n  filter: blur(30px);\n}\n::selection {\n  background: var(--selection-bg-color);\n  color: var(--selection-color);\n}\n.trm-top-bar .container .trm-left-side .trm-logo-frame {\n  width: 100% !important;\n  justify-content: center;\n}\n.trm-top-bar .container .trm-left-side .trm-logo-frame img {\n  height: 70%;\n  width: auto !important;\n}\n@media (max-width: 1200px) {\n  .trm-logo-frame img {\n    display: none;\n  }\n}\n.trm-card .trm-icon {\n  font-size: 26px !important;\n}\n.trm-mode-switcher-place .trm-mode-switcher svg {\n  font-size: 14px;\n}\n@font-face {\n  font-family: 'Raleway';\n  font-style: normal;\n  font-display: swap;\n  src: url(/fonts/DTM-Mono-1.otf);\n}\n@font-face {\n  font-family: OPPOSans;\n  font-style: medium;\n  font-weight: 500;\n  font-display: swap;\n  src: url(https://cup.oisin.cn/font/OPPOSans/OPlusSans.subset.woff2) format('woff2');\n}\n.trm-blog-card .trm-cover-frame {\n  background-color: var(--card-cover-bg-color, #f3f3f3);\n}\n.trm-blog-card .trm-cover-frame .trm-cover-date {\n  font-family: 'Raleway' !important;\n  background-image: linear-gradient(311deg, #421effd9, #60d139);\n  background-clip: text;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n}\nbody {\n  font-family: \"OPPOSans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n}\n.trm-btn,\n.trm-menu nav ul li a,\n.trm-label {\n  font-size: 14px;\n}\n.trm-left-side h6 {\n  font-size: 1.2rem;\n}\n:root .tk-admin {\n  color: #000000 !important;\n  background-color: #ffffff !important;\n  backdrop-filter: unset !important;\n}\n:root .tk-admin .tk-panel {\n  color: #000000 !important;\n}\n:root .tk-admin .tk-panel .tk-tabs {\n  margin: 1rem 0 !important;\n}\n:root .tk-admin .tk-panel .tk-tab.__active {\n  color: #000000 !important;\n  border-bottom: unset !important;\n}\n:root .tk-admin .tk-panel-logout,\n:root .tk-admin .tk-admin-comment-filter-type {\n  color: #000000 !important;\n}\n:root .tk-admin .tk-login,\n:root .tk-admin .tk-regist {\n  margin: 0 0 0 40px;\n}\n:root .tk-admin details {\n  padding: 0 !important;\n  border: unset !important;\n}\n:root .tk-admin details summary {\n  padding: 0 !important;\n  margin: 0 !important;\n}\n:root .tk-admin .tk-admin-close {\n  fill: #000000;\n}\n:root.dark .tk-admin {\n  color: #ffffff !important;\n  background-color: #494949 !important;\n  backdrop-filter: unset !important;\n}\n:root.dark .tk-admin .tk-panel {\n  color: #ffffff !important;\n}\n:root.dark .tk-admin .tk-panel .tk-tabs {\n  margin: 1rem 0 !important;\n}\n:root.dark .tk-admin .tk-panel .tk-tab.__active {\n  color: #ffffff !important;\n  border-bottom: unset !important;\n}\n:root.dark .tk-admin .tk-panel-logout,\n:root.dark .tk-admin .tk-admin-comment-filter-type {\n  color: #ffffff !important;\n}\n:root.dark .tk-admin .tk-login,\n:root.dark .tk-admin .tk-regist {\n  margin: 0 0 0 40px;\n}\n:root.dark .tk-admin details {\n  padding: 0 !important;\n  border: unset !important;\n}\n:root.dark .tk-admin details summary {\n  padding: 0 !important;\n  margin: 0 !important;\n}\n:root.dark .tk-admin .tk-admin-close {\n  fill: #ffffff;\n}\n.trm-top-bar,\n.trm-main-card,\n.trm-blog-card,\n.trm-timeline-content,\n.trm-blog-categories,\nfooter {\n  background-image: url(/images/bg.svg);\n}\n.trm-read-mode .trm-card,\n.trm-read-mode .trm-app-frame,\n.trm-read-mode .trm-banner .trm-banner-content.trm-overlay .trm-banner-text h1 {\n  background-image: url(https://www.bawge.com/usr/themes/MeaWord/assets/img/texture.png);\n}\n"}],"Page":[{"layout":"false","_content":"<!DOCTYPE html>\n<html lang=\"zh-cn\">\n\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    <meta name=\"x5-fullscreen\" content=\"true\">\n    <meta name=\"full-screen\" content=\"yes\">\n    <meta name=\"theme-color\" content=\"#317EFB\">\n    <meta content=\"width=device-width,initial-scale=1,maximum-scale=5,user-scalable=0\" name=\"viewport\">\n    <meta name=\"keywords\" content=\"404\">\n    <meta name=\"description\" content=\"404\">\n    <meta property=\"og:type\" content=\"website\">\n    <meta property=\"og:title\" content=\"白云苍狗\">\n    <meta property=\"og:url\" content=\"https://www.imalun.com/index.html\">\n    <meta property=\"og:site_name\" content=\"白云苍狗\">\n    <meta property=\"og:description\" content=\"404\">\n    <meta property=\"og:locale\" content=\"zh-cn\">\n    <meta name=\"twitter:card\" content=\"summary\">\n    <meta name=\"description\" content=\"404\">\n    <title>页面不见了~</title>\n    <link rel=\"canonical\" href=\"https://www.imalun.com/\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/images/favicon.png\">\n    <link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.min.css\">\n    <style>:root{--blue:#0e0620;--white:#fff;--green:#2ccf6d}html,body{height:100%}body{display:flex;align-items:center;justify-content:center;font-family:\"Nunito Sans\";color:var(--blue);font-size:1em}button{font-family:\"Nunito Sans\"}ul{list-style-type:none;-webkit-padding-start:35px;padding-inline-start:35px}svg{width:100%;visibility:hidden}h1{font-size:7.5em;margin:15px 0;font-weight:bold}h2{font-weight:bold}.btn{z-index:1;overflow:hidden;background:transparent;position:relative;padding:8px 50px;border-radius:30px;cursor:pointer;font-size:1em;letter-spacing:2px;transition:.2s ease;font-weight:bold;margin:5px 0}.btn.green{border:4px solid var(--green);color:var(--blue)}.btn.green:before{content:\"\";position:absolute;left:0;top:0;width:0;height:100%;background:var(--green);z-index:-1;transition:.2s ease}.btn.green:hover{color:var(--white);background:var(--green);transition:.2s ease}.btn.green:hover:before{width:100%}@media screen and (max-width:768px){body{display:block}.container{margin-top:70px;margin-bottom:70px}}</style>\n</head>\n<body>\n    <main><div class=\"container\"><div class=\"row\"><div class=\"col-md-6 align-self-center\"><svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 800 600\"><g><defs><clipPath id=\"GlassClip\"><path d=\"M380.857,346.164c-1.247,4.651-4.668,8.421-9.196,10.06c-9.332,3.377-26.2,7.817-42.301,3.5 s-28.485-16.599-34.877-24.192c-3.101-3.684-4.177-8.66-2.93-13.311l7.453-27.798c0.756-2.82,3.181-4.868,6.088-5.13                      c6.755-0.61,20.546-0.608,41.785,5.087s33.181,12.591,38.725,16.498c2.387,1.682,3.461,4.668,2.705,7.488L380.857,346.164z\" /></clipPath><clipPath id=\"cordClip\"><rect width=\"800\" height=\"600\" /></clipPath></defs><g id=\"planet\"><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-miterlimit=\"10\" cx=\"572.859\" cy=\"108.803\" r=\"90.788\" /><circle id=\"craterBig\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-miterlimit=\"10\" cx=\"548.891\" cy=\"62.319\" r=\"13.074\" /><circle id=\"craterSmall\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-miterlimit=\"10\" cx=\"591.743\" cy=\"158.918\" r=\"7.989\" /><path id=\"ring\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" d=\"                  M476.562,101.461c-30.404,2.164-49.691,4.221-49.691,8.007c0,6.853,63.166,12.408,141.085,12.408s141.085-5.555,141.085-12.408                  c0-3.378-15.347-4.988-40.243-7.225\" /><path id=\"ringShadow\" opacity=\"0.5\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" d=\"                  M483.985,127.43c23.462,1.531,52.515,2.436,83.972,2.436c36.069,0,68.978-1.19,93.922-3.149\" /></g><g id=\"stars\"><g id=\"starsBig\"><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"518.07\" y1=\"245.375\" x2=\"518.07\" y2=\"266.581\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"508.129\" y1=\"255.978\" x2=\"528.01\" y2=\"255.978\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"154.55\" y1=\"231.391\" x2=\"154.55\" y2=\"252.598\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"144.609\" y1=\"241.995\" x2=\"164.49\" y2=\"241.995\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"320.135\" y1=\"132.746\" x2=\"320.135\" y2=\"153.952\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"310.194\" y1=\"143.349\" x2=\"330.075\" y2=\"143.349\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"200.67\" y1=\"483.11\" x2=\"200.67\" y2=\"504.316\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"210.611\" y1=\"493.713\" x2=\"190.73\" y2=\"493.713\" /></g></g><g id=\"starsSmall\"><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"432.173\" y1=\"380.52\" x2=\"432.173\" y2=\"391.83\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"426.871\" y1=\"386.175\" x2=\"437.474\" y2=\"386.175\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"489.555\" y1=\"299.765\" x2=\"489.555\" y2=\"308.124\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"485.636\" y1=\"303.945\" x2=\"493.473\" y2=\"303.945\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"231.468\" y1=\"291.009\" x2=\"231.468\" y2=\"299.369\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"227.55\" y1=\"295.189\" x2=\"235.387\" y2=\"295.189\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"244.032\" y1=\"547.539\" x2=\"244.032\" y2=\"555.898\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"247.95\" y1=\"551.719\" x2=\"240.113\" y2=\"551.719\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"186.359\" y1=\"406.967\" x2=\"186.359\" y2=\"415.326\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"190.277\" y1=\"411.146\" x2=\"182.44\" y2=\"411.146\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"480.296\" y1=\"406.967\" x2=\"480.296\" y2=\"415.326\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"484.215\" y1=\"411.146\" x2=\"476.378\" y2=\"411.146\" /></g></g><g id=\"circlesBig\"><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"588.977\" cy=\"255.978\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"450.066\" cy=\"320.259\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"168.303\" cy=\"353.753\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"429.522\" cy=\"201.185\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"200.67\" cy=\"176.313\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"133.343\" cy=\"477.014\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"283.521\" cy=\"568.033\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"413.618\" cy=\"482.387\" r=\"7.952\" /></g><g id=\"circlesSmall\"><circle fill=\"#0E0620\" cx=\"549.879\" cy=\"296.402\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"253.29\" cy=\"229.24\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"434.824\" cy=\"263.931\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"183.708\" cy=\"544.176\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"382.515\" cy=\"530.923\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"130.693\" cy=\"305.608\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"480.296\" cy=\"477.014\" r=\"2.651\" /></g></g><g id=\"spaceman\" clip-path=\"url(cordClip)\"><path id=\"cord\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                  M273.813,410.969c0,0-54.527,39.501-115.34,38.218c-2.28-0.048-4.926-0.241-7.841-0.548                  c-68.038-7.178-134.288-43.963-167.33-103.87c-0.908-1.646-1.793-3.3-2.654-4.964c-18.395-35.511-37.259-83.385-32.075-118.817\" /><path id=\"backpack\" fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                  M338.164,454.689l-64.726-17.353c-11.086-2.972-17.664-14.369-14.692-25.455l15.694-58.537                  c3.889-14.504,18.799-23.11,33.303-19.221l52.349,14.035c14.504,3.889,23.11,18.799,19.221,33.303l-15.694,58.537                  C360.647,451.083,349.251,457.661,338.164,454.689z\" /><g id=\"antenna\"><line fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"323.396\" y1=\"236.625\" x2=\"295.285\" y2=\"353.753\" /><circle fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" cx=\"323.666\" cy=\"235.617\" r=\"6.375\" /></g><g id=\"armR\"><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M360.633,363.039c1.352,1.061,4.91,5.056,5.824,6.634l27.874,47.634c3.855,6.649,1.59,15.164-5.059,19.02l0,0                      c-6.649,3.855-15.164,1.59-19.02-5.059l-5.603-9.663\" /><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M388.762,434.677c5.234-3.039,7.731-8.966,6.678-14.594c2.344,1.343,4.383,3.289,5.837,5.793                      c4.411,7.596,1.829,17.33-5.767,21.741c-7.596,4.411-17.33,1.829-21.741-5.767c-1.754-3.021-2.817-5.818-2.484-9.046                      C375.625,437.355,383.087,437.973,388.762,434.677z\" /></g><g id=\"armL\"><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M301.301,347.66c-1.702,0.242-5.91,1.627-7.492,2.536l-47.965,27.301c-6.664,3.829-8.963,12.335-5.134,18.999h0                      c3.829,6.664,12.335,8.963,18.999,5.134l9.685-5.564\" /><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M241.978,395.324c-3.012-5.25-2.209-11.631,1.518-15.977c-2.701-0.009-5.44,0.656-7.952,2.096                      c-7.619,4.371-10.253,14.09-5.883,21.71c4.371,7.619,14.09,10.253,21.709,5.883c3.03-1.738,5.35-3.628,6.676-6.59                      C252.013,404.214,245.243,401.017,241.978,395.324z\" /></g><g id=\"body\"><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M353.351,365.387c-7.948,1.263-16.249,0.929-24.48-1.278c-8.232-2.207-15.586-6.07-21.836-11.14                      c-17.004,4.207-31.269,17.289-36.128,35.411l-1.374,5.123c-7.112,26.525,8.617,53.791,35.13,60.899l0,0                      c26.513,7.108,53.771-8.632,60.883-35.158l1.374-5.123C371.778,395.999,365.971,377.536,353.351,365.387z\" /><path fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M269.678,394.912L269.678,394.912c26.3,20.643,59.654,29.585,93.106,25.724l2.419-0.114\" /></g><g id=\"legs\"><g id=\"legR\"><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M312.957,456.734l-14.315,53.395c-1.896,7.07,2.299,14.338,9.37,16.234l0,0c7.07,1.896,14.338-2.299,16.234-9.37l17.838-66.534                          C333.451,455.886,323.526,457.387,312.957,456.734z\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"304.883\" y1=\"486.849\" x2=\"330.487\" y2=\"493.713\" /></g><g id=\"legL\"><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                          M296.315,452.273L282,505.667c-1.896,7.07-9.164,11.265-16.234,9.37l0,0c-7.07-1.896-11.265-9.164-9.37-16.234l17.838-66.534                          C278.993,441.286,286.836,447.55,296.315,452.273z\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"262.638\" y1=\"475.522\" x2=\"288.241\" y2=\"482.387\" /></g></g><g id=\"head\"><ellipse transform=\"matrix(0.259 -0.9659 0.9659 0.259 -51.5445 563.2371)\" fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" cx=\"341.295\" cy=\"315.211\" rx=\"61.961\" ry=\"60.305\" /><path id=\"headStripe\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M330.868,261.338c-7.929,1.72-15.381,5.246-21.799,10.246\" /><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M380.857,346.164c-1.247,4.651-4.668,8.421-9.196,10.06c-9.332,3.377-26.2,7.817-42.301,3.5s-28.485-16.599-34.877-24.192 c-3.101-3.684-4.177-8.66-2.93-13.311l7.453-27.798c0.756-2.82,3.181-4.868,6.088-5.13c6.755-0.61,20.546-0.608,41.785,5.087                      s33.181,12.591,38.725,16.498c2.387,1.682,3.461,4.668,2.705,7.488L380.857,346.164z\" /><g clip-path=\"url(#GlassClip)\"><polygon id=\"glassShine\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-miterlimit=\"10\" points=\"278.436,375.599 383.003,264.076 364.393,251.618 264.807,364.928 \t\t\t\t\" /></g></g></g></g></svg></div><div class=\"col-md-6 align-self-center\"><h1>404</h1><p>您正在查找的页面不存在。你是怎么到这里来的是个谜,但是你可以点击下面的按钮返回主页。</p><a class=\"btn green\" href=\"/\">HOME</a></div></div></div></main>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.1.1/gsap.min.js\"></script>\n    <script>gsap.set(\"svg\",{visibility:\"visible\"});gsap.to(\"#headStripe\",{y:0.5,rotation:1,yoyo:true,repeat:-1,ease:\"sine.inOut\",duration:1});gsap.to(\"#spaceman\",{y:0.5,rotation:1,yoyo:true,repeat:-1,ease:\"sine.inOut\",duration:1});gsap.to(\"#craterSmall\",{x:-3,yoyo:true,repeat:-1,duration:1,ease:\"sine.inOut\"});gsap.to(\"#craterBig\",{x:3,yoyo:true,repeat:-1,duration:1,ease:\"sine.inOut\"});gsap.to(\"#planet\",{rotation:-2,yoyo:true,repeat:-1,duration:1,ease:\"sine.inOut\",transformOrigin:\"50% 50%\"});gsap.to(\"#starsBig g\",{rotation:\"random(-30,30)\",transformOrigin:\"50% 50%\",yoyo:true,repeat:-1,ease:\"sine.inOut\"});gsap.fromTo(\"#starsSmall g\",{scale:0,transformOrigin:\"50% 50%\"},{scale:1,transformOrigin:\"50% 50%\",yoyo:true,repeat:-1,stagger:0.1});gsap.to(\"#circlesSmall circle\",{y:-4,yoyo:true,duration:1,ease:\"sine.inOut\",repeat:-1});gsap.to(\"#circlesBig circle\",{y:-2,yoyo:true,duration:1,ease:\"sine.inOut\",repeat:-1});gsap.set(\"#glassShine\",{x:-68});gsap.to(\"#glassShine\",{x:80,duration:2,rotation:-30,ease:\"expo.inOut\",transformOrigin:\"50% 50%\",repeat:-1,repeatDelay:8,delay:2});</script>\n</body>\n</html>\n","source":"404.html","raw":"---\nlayout: false\n---\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    <meta name=\"x5-fullscreen\" content=\"true\">\n    <meta name=\"full-screen\" content=\"yes\">\n    <meta name=\"theme-color\" content=\"#317EFB\">\n    <meta content=\"width=device-width,initial-scale=1,maximum-scale=5,user-scalable=0\" name=\"viewport\">\n    <meta name=\"keywords\" content=\"404\">\n    <meta name=\"description\" content=\"404\">\n    <meta property=\"og:type\" content=\"website\">\n    <meta property=\"og:title\" content=\"白云苍狗\">\n    <meta property=\"og:url\" content=\"https://www.imalun.com/index.html\">\n    <meta property=\"og:site_name\" content=\"白云苍狗\">\n    <meta property=\"og:description\" content=\"404\">\n    <meta property=\"og:locale\" content=\"zh-cn\">\n    <meta name=\"twitter:card\" content=\"summary\">\n    <meta name=\"description\" content=\"404\">\n    <title>页面不见了~</title>\n    <link rel=\"canonical\" href=\"https://www.imalun.com/\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/images/favicon.png\">\n    <link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.min.css\">\n    <style>:root{--blue:#0e0620;--white:#fff;--green:#2ccf6d}html,body{height:100%}body{display:flex;align-items:center;justify-content:center;font-family:\"Nunito Sans\";color:var(--blue);font-size:1em}button{font-family:\"Nunito Sans\"}ul{list-style-type:none;-webkit-padding-start:35px;padding-inline-start:35px}svg{width:100%;visibility:hidden}h1{font-size:7.5em;margin:15px 0;font-weight:bold}h2{font-weight:bold}.btn{z-index:1;overflow:hidden;background:transparent;position:relative;padding:8px 50px;border-radius:30px;cursor:pointer;font-size:1em;letter-spacing:2px;transition:.2s ease;font-weight:bold;margin:5px 0}.btn.green{border:4px solid var(--green);color:var(--blue)}.btn.green:before{content:\"\";position:absolute;left:0;top:0;width:0;height:100%;background:var(--green);z-index:-1;transition:.2s ease}.btn.green:hover{color:var(--white);background:var(--green);transition:.2s ease}.btn.green:hover:before{width:100%}@media screen and (max-width:768px){body{display:block}.container{margin-top:70px;margin-bottom:70px}}</style>\n</head>\n<body>\n    <main><div class=\"container\"><div class=\"row\"><div class=\"col-md-6 align-self-center\"><svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 800 600\"><g><defs><clipPath id=\"GlassClip\"><path d=\"M380.857,346.164c-1.247,4.651-4.668,8.421-9.196,10.06c-9.332,3.377-26.2,7.817-42.301,3.5 s-28.485-16.599-34.877-24.192c-3.101-3.684-4.177-8.66-2.93-13.311l7.453-27.798c0.756-2.82,3.181-4.868,6.088-5.13                      c6.755-0.61,20.546-0.608,41.785,5.087s33.181,12.591,38.725,16.498c2.387,1.682,3.461,4.668,2.705,7.488L380.857,346.164z\" /></clipPath><clipPath id=\"cordClip\"><rect width=\"800\" height=\"600\" /></clipPath></defs><g id=\"planet\"><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-miterlimit=\"10\" cx=\"572.859\" cy=\"108.803\" r=\"90.788\" /><circle id=\"craterBig\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-miterlimit=\"10\" cx=\"548.891\" cy=\"62.319\" r=\"13.074\" /><circle id=\"craterSmall\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-miterlimit=\"10\" cx=\"591.743\" cy=\"158.918\" r=\"7.989\" /><path id=\"ring\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" d=\"                  M476.562,101.461c-30.404,2.164-49.691,4.221-49.691,8.007c0,6.853,63.166,12.408,141.085,12.408s141.085-5.555,141.085-12.408                  c0-3.378-15.347-4.988-40.243-7.225\" /><path id=\"ringShadow\" opacity=\"0.5\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" d=\"                  M483.985,127.43c23.462,1.531,52.515,2.436,83.972,2.436c36.069,0,68.978-1.19,93.922-3.149\" /></g><g id=\"stars\"><g id=\"starsBig\"><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"518.07\" y1=\"245.375\" x2=\"518.07\" y2=\"266.581\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"508.129\" y1=\"255.978\" x2=\"528.01\" y2=\"255.978\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"154.55\" y1=\"231.391\" x2=\"154.55\" y2=\"252.598\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"144.609\" y1=\"241.995\" x2=\"164.49\" y2=\"241.995\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"320.135\" y1=\"132.746\" x2=\"320.135\" y2=\"153.952\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"310.194\" y1=\"143.349\" x2=\"330.075\" y2=\"143.349\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"200.67\" y1=\"483.11\" x2=\"200.67\" y2=\"504.316\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"210.611\" y1=\"493.713\" x2=\"190.73\" y2=\"493.713\" /></g></g><g id=\"starsSmall\"><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"432.173\" y1=\"380.52\" x2=\"432.173\" y2=\"391.83\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"426.871\" y1=\"386.175\" x2=\"437.474\" y2=\"386.175\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"489.555\" y1=\"299.765\" x2=\"489.555\" y2=\"308.124\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"485.636\" y1=\"303.945\" x2=\"493.473\" y2=\"303.945\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"231.468\" y1=\"291.009\" x2=\"231.468\" y2=\"299.369\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"227.55\" y1=\"295.189\" x2=\"235.387\" y2=\"295.189\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"244.032\" y1=\"547.539\" x2=\"244.032\" y2=\"555.898\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"247.95\" y1=\"551.719\" x2=\"240.113\" y2=\"551.719\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"186.359\" y1=\"406.967\" x2=\"186.359\" y2=\"415.326\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"190.277\" y1=\"411.146\" x2=\"182.44\" y2=\"411.146\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"480.296\" y1=\"406.967\" x2=\"480.296\" y2=\"415.326\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"484.215\" y1=\"411.146\" x2=\"476.378\" y2=\"411.146\" /></g></g><g id=\"circlesBig\"><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"588.977\" cy=\"255.978\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"450.066\" cy=\"320.259\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"168.303\" cy=\"353.753\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"429.522\" cy=\"201.185\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"200.67\" cy=\"176.313\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"133.343\" cy=\"477.014\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"283.521\" cy=\"568.033\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"413.618\" cy=\"482.387\" r=\"7.952\" /></g><g id=\"circlesSmall\"><circle fill=\"#0E0620\" cx=\"549.879\" cy=\"296.402\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"253.29\" cy=\"229.24\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"434.824\" cy=\"263.931\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"183.708\" cy=\"544.176\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"382.515\" cy=\"530.923\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"130.693\" cy=\"305.608\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"480.296\" cy=\"477.014\" r=\"2.651\" /></g></g><g id=\"spaceman\" clip-path=\"url(cordClip)\"><path id=\"cord\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                  M273.813,410.969c0,0-54.527,39.501-115.34,38.218c-2.28-0.048-4.926-0.241-7.841-0.548                  c-68.038-7.178-134.288-43.963-167.33-103.87c-0.908-1.646-1.793-3.3-2.654-4.964c-18.395-35.511-37.259-83.385-32.075-118.817\" /><path id=\"backpack\" fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                  M338.164,454.689l-64.726-17.353c-11.086-2.972-17.664-14.369-14.692-25.455l15.694-58.537                  c3.889-14.504,18.799-23.11,33.303-19.221l52.349,14.035c14.504,3.889,23.11,18.799,19.221,33.303l-15.694,58.537                  C360.647,451.083,349.251,457.661,338.164,454.689z\" /><g id=\"antenna\"><line fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"323.396\" y1=\"236.625\" x2=\"295.285\" y2=\"353.753\" /><circle fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" cx=\"323.666\" cy=\"235.617\" r=\"6.375\" /></g><g id=\"armR\"><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M360.633,363.039c1.352,1.061,4.91,5.056,5.824,6.634l27.874,47.634c3.855,6.649,1.59,15.164-5.059,19.02l0,0                      c-6.649,3.855-15.164,1.59-19.02-5.059l-5.603-9.663\" /><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M388.762,434.677c5.234-3.039,7.731-8.966,6.678-14.594c2.344,1.343,4.383,3.289,5.837,5.793                      c4.411,7.596,1.829,17.33-5.767,21.741c-7.596,4.411-17.33,1.829-21.741-5.767c-1.754-3.021-2.817-5.818-2.484-9.046                      C375.625,437.355,383.087,437.973,388.762,434.677z\" /></g><g id=\"armL\"><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M301.301,347.66c-1.702,0.242-5.91,1.627-7.492,2.536l-47.965,27.301c-6.664,3.829-8.963,12.335-5.134,18.999h0                      c3.829,6.664,12.335,8.963,18.999,5.134l9.685-5.564\" /><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M241.978,395.324c-3.012-5.25-2.209-11.631,1.518-15.977c-2.701-0.009-5.44,0.656-7.952,2.096                      c-7.619,4.371-10.253,14.09-5.883,21.71c4.371,7.619,14.09,10.253,21.709,5.883c3.03-1.738,5.35-3.628,6.676-6.59                      C252.013,404.214,245.243,401.017,241.978,395.324z\" /></g><g id=\"body\"><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M353.351,365.387c-7.948,1.263-16.249,0.929-24.48-1.278c-8.232-2.207-15.586-6.07-21.836-11.14                      c-17.004,4.207-31.269,17.289-36.128,35.411l-1.374,5.123c-7.112,26.525,8.617,53.791,35.13,60.899l0,0                      c26.513,7.108,53.771-8.632,60.883-35.158l1.374-5.123C371.778,395.999,365.971,377.536,353.351,365.387z\" /><path fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M269.678,394.912L269.678,394.912c26.3,20.643,59.654,29.585,93.106,25.724l2.419-0.114\" /></g><g id=\"legs\"><g id=\"legR\"><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M312.957,456.734l-14.315,53.395c-1.896,7.07,2.299,14.338,9.37,16.234l0,0c7.07,1.896,14.338-2.299,16.234-9.37l17.838-66.534                          C333.451,455.886,323.526,457.387,312.957,456.734z\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"304.883\" y1=\"486.849\" x2=\"330.487\" y2=\"493.713\" /></g><g id=\"legL\"><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                          M296.315,452.273L282,505.667c-1.896,7.07-9.164,11.265-16.234,9.37l0,0c-7.07-1.896-11.265-9.164-9.37-16.234l17.838-66.534                          C278.993,441.286,286.836,447.55,296.315,452.273z\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"262.638\" y1=\"475.522\" x2=\"288.241\" y2=\"482.387\" /></g></g><g id=\"head\"><ellipse transform=\"matrix(0.259 -0.9659 0.9659 0.259 -51.5445 563.2371)\" fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" cx=\"341.295\" cy=\"315.211\" rx=\"61.961\" ry=\"60.305\" /><path id=\"headStripe\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M330.868,261.338c-7.929,1.72-15.381,5.246-21.799,10.246\" /><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M380.857,346.164c-1.247,4.651-4.668,8.421-9.196,10.06c-9.332,3.377-26.2,7.817-42.301,3.5s-28.485-16.599-34.877-24.192 c-3.101-3.684-4.177-8.66-2.93-13.311l7.453-27.798c0.756-2.82,3.181-4.868,6.088-5.13c6.755-0.61,20.546-0.608,41.785,5.087                      s33.181,12.591,38.725,16.498c2.387,1.682,3.461,4.668,2.705,7.488L380.857,346.164z\" /><g clip-path=\"url(#GlassClip)\"><polygon id=\"glassShine\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-miterlimit=\"10\" points=\"278.436,375.599 383.003,264.076 364.393,251.618 264.807,364.928 \t\t\t\t\" /></g></g></g></g></svg></div><div class=\"col-md-6 align-self-center\"><h1>404</h1><p>您正在查找的页面不存在。你是怎么到这里来的是个谜,但是你可以点击下面的按钮返回主页。</p><a class=\"btn green\" href=\"/\">HOME</a></div></div></div></main>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.1.1/gsap.min.js\"></script>\n    <script>gsap.set(\"svg\",{visibility:\"visible\"});gsap.to(\"#headStripe\",{y:0.5,rotation:1,yoyo:true,repeat:-1,ease:\"sine.inOut\",duration:1});gsap.to(\"#spaceman\",{y:0.5,rotation:1,yoyo:true,repeat:-1,ease:\"sine.inOut\",duration:1});gsap.to(\"#craterSmall\",{x:-3,yoyo:true,repeat:-1,duration:1,ease:\"sine.inOut\"});gsap.to(\"#craterBig\",{x:3,yoyo:true,repeat:-1,duration:1,ease:\"sine.inOut\"});gsap.to(\"#planet\",{rotation:-2,yoyo:true,repeat:-1,duration:1,ease:\"sine.inOut\",transformOrigin:\"50% 50%\"});gsap.to(\"#starsBig g\",{rotation:\"random(-30,30)\",transformOrigin:\"50% 50%\",yoyo:true,repeat:-1,ease:\"sine.inOut\"});gsap.fromTo(\"#starsSmall g\",{scale:0,transformOrigin:\"50% 50%\"},{scale:1,transformOrigin:\"50% 50%\",yoyo:true,repeat:-1,stagger:0.1});gsap.to(\"#circlesSmall circle\",{y:-4,yoyo:true,duration:1,ease:\"sine.inOut\",repeat:-1});gsap.to(\"#circlesBig circle\",{y:-2,yoyo:true,duration:1,ease:\"sine.inOut\",repeat:-1});gsap.set(\"#glassShine\",{x:-68});gsap.to(\"#glassShine\",{x:80,duration:2,rotation:-30,ease:\"expo.inOut\",transformOrigin:\"50% 50%\",repeat:-1,repeatDelay:8,delay:2});</script>\n</body>\n</html>\n","date":"2024-03-07T08:20:02.792Z","updated":"2024-03-06T07:42:59.000Z","path":"404.html","title":"","comments":1,"_id":"cltgz7vpv000098lg3rlpdg7z","content":"<!DOCTYPE html>\n<html lang=\"zh-cn\">\n\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    <meta name=\"x5-fullscreen\" content=\"true\">\n    <meta name=\"full-screen\" content=\"yes\">\n    <meta name=\"theme-color\" content=\"#317EFB\">\n    <meta content=\"width=device-width,initial-scale=1,maximum-scale=5,user-scalable=0\" name=\"viewport\">\n    <meta name=\"keywords\" content=\"404\">\n    <meta name=\"description\" content=\"404\">\n    <meta property=\"og:type\" content=\"website\">\n    <meta property=\"og:title\" content=\"白云苍狗\">\n    <meta property=\"og:url\" content=\"https://www.imalun.com/index.html\">\n    <meta property=\"og:site_name\" content=\"白云苍狗\">\n    <meta property=\"og:description\" content=\"404\">\n    <meta property=\"og:locale\" content=\"zh-cn\">\n    <meta name=\"twitter:card\" content=\"summary\">\n    <meta name=\"description\" content=\"404\">\n    <title>页面不见了~</title>\n    <link rel=\"canonical\" href=\"https://www.imalun.com/\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/images/favicon.png\">\n    <link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.min.css\">\n    <style>:root{--blue:#0e0620;--white:#fff;--green:#2ccf6d}html,body{height:100%}body{display:flex;align-items:center;justify-content:center;font-family:\"Nunito Sans\";color:var(--blue);font-size:1em}button{font-family:\"Nunito Sans\"}ul{list-style-type:none;-webkit-padding-start:35px;padding-inline-start:35px}svg{width:100%;visibility:hidden}h1{font-size:7.5em;margin:15px 0;font-weight:bold}h2{font-weight:bold}.btn{z-index:1;overflow:hidden;background:transparent;position:relative;padding:8px 50px;border-radius:30px;cursor:pointer;font-size:1em;letter-spacing:2px;transition:.2s ease;font-weight:bold;margin:5px 0}.btn.green{border:4px solid var(--green);color:var(--blue)}.btn.green:before{content:\"\";position:absolute;left:0;top:0;width:0;height:100%;background:var(--green);z-index:-1;transition:.2s ease}.btn.green:hover{color:var(--white);background:var(--green);transition:.2s ease}.btn.green:hover:before{width:100%}@media screen and (max-width:768px){body{display:block}.container{margin-top:70px;margin-bottom:70px}}</style>\n</head>\n<body>\n    <main><div class=\"container\"><div class=\"row\"><div class=\"col-md-6 align-self-center\"><svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 800 600\"><g><defs><clipPath id=\"GlassClip\"><path d=\"M380.857,346.164c-1.247,4.651-4.668,8.421-9.196,10.06c-9.332,3.377-26.2,7.817-42.301,3.5 s-28.485-16.599-34.877-24.192c-3.101-3.684-4.177-8.66-2.93-13.311l7.453-27.798c0.756-2.82,3.181-4.868,6.088-5.13                      c6.755-0.61,20.546-0.608,41.785,5.087s33.181,12.591,38.725,16.498c2.387,1.682,3.461,4.668,2.705,7.488L380.857,346.164z\" /></clipPath><clipPath id=\"cordClip\"><rect width=\"800\" height=\"600\" /></clipPath></defs><g id=\"planet\"><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-miterlimit=\"10\" cx=\"572.859\" cy=\"108.803\" r=\"90.788\" /><circle id=\"craterBig\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-miterlimit=\"10\" cx=\"548.891\" cy=\"62.319\" r=\"13.074\" /><circle id=\"craterSmall\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-miterlimit=\"10\" cx=\"591.743\" cy=\"158.918\" r=\"7.989\" /><path id=\"ring\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" d=\"                  M476.562,101.461c-30.404,2.164-49.691,4.221-49.691,8.007c0,6.853,63.166,12.408,141.085,12.408s141.085-5.555,141.085-12.408                  c0-3.378-15.347-4.988-40.243-7.225\" /><path id=\"ringShadow\" opacity=\"0.5\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" d=\"                  M483.985,127.43c23.462,1.531,52.515,2.436,83.972,2.436c36.069,0,68.978-1.19,93.922-3.149\" /></g><g id=\"stars\"><g id=\"starsBig\"><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"518.07\" y1=\"245.375\" x2=\"518.07\" y2=\"266.581\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"508.129\" y1=\"255.978\" x2=\"528.01\" y2=\"255.978\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"154.55\" y1=\"231.391\" x2=\"154.55\" y2=\"252.598\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"144.609\" y1=\"241.995\" x2=\"164.49\" y2=\"241.995\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"320.135\" y1=\"132.746\" x2=\"320.135\" y2=\"153.952\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"310.194\" y1=\"143.349\" x2=\"330.075\" y2=\"143.349\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"200.67\" y1=\"483.11\" x2=\"200.67\" y2=\"504.316\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"210.611\" y1=\"493.713\" x2=\"190.73\" y2=\"493.713\" /></g></g><g id=\"starsSmall\"><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"432.173\" y1=\"380.52\" x2=\"432.173\" y2=\"391.83\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"426.871\" y1=\"386.175\" x2=\"437.474\" y2=\"386.175\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"489.555\" y1=\"299.765\" x2=\"489.555\" y2=\"308.124\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"485.636\" y1=\"303.945\" x2=\"493.473\" y2=\"303.945\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"231.468\" y1=\"291.009\" x2=\"231.468\" y2=\"299.369\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"227.55\" y1=\"295.189\" x2=\"235.387\" y2=\"295.189\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"244.032\" y1=\"547.539\" x2=\"244.032\" y2=\"555.898\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"247.95\" y1=\"551.719\" x2=\"240.113\" y2=\"551.719\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"186.359\" y1=\"406.967\" x2=\"186.359\" y2=\"415.326\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"190.277\" y1=\"411.146\" x2=\"182.44\" y2=\"411.146\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"480.296\" y1=\"406.967\" x2=\"480.296\" y2=\"415.326\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"484.215\" y1=\"411.146\" x2=\"476.378\" y2=\"411.146\" /></g></g><g id=\"circlesBig\"><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"588.977\" cy=\"255.978\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"450.066\" cy=\"320.259\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"168.303\" cy=\"353.753\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"429.522\" cy=\"201.185\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"200.67\" cy=\"176.313\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"133.343\" cy=\"477.014\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"283.521\" cy=\"568.033\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"413.618\" cy=\"482.387\" r=\"7.952\" /></g><g id=\"circlesSmall\"><circle fill=\"#0E0620\" cx=\"549.879\" cy=\"296.402\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"253.29\" cy=\"229.24\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"434.824\" cy=\"263.931\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"183.708\" cy=\"544.176\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"382.515\" cy=\"530.923\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"130.693\" cy=\"305.608\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"480.296\" cy=\"477.014\" r=\"2.651\" /></g></g><g id=\"spaceman\" clip-path=\"url(cordClip)\"><path id=\"cord\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                  M273.813,410.969c0,0-54.527,39.501-115.34,38.218c-2.28-0.048-4.926-0.241-7.841-0.548                  c-68.038-7.178-134.288-43.963-167.33-103.87c-0.908-1.646-1.793-3.3-2.654-4.964c-18.395-35.511-37.259-83.385-32.075-118.817\" /><path id=\"backpack\" fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                  M338.164,454.689l-64.726-17.353c-11.086-2.972-17.664-14.369-14.692-25.455l15.694-58.537                  c3.889-14.504,18.799-23.11,33.303-19.221l52.349,14.035c14.504,3.889,23.11,18.799,19.221,33.303l-15.694,58.537                  C360.647,451.083,349.251,457.661,338.164,454.689z\" /><g id=\"antenna\"><line fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"323.396\" y1=\"236.625\" x2=\"295.285\" y2=\"353.753\" /><circle fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" cx=\"323.666\" cy=\"235.617\" r=\"6.375\" /></g><g id=\"armR\"><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M360.633,363.039c1.352,1.061,4.91,5.056,5.824,6.634l27.874,47.634c3.855,6.649,1.59,15.164-5.059,19.02l0,0                      c-6.649,3.855-15.164,1.59-19.02-5.059l-5.603-9.663\" /><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M388.762,434.677c5.234-3.039,7.731-8.966,6.678-14.594c2.344,1.343,4.383,3.289,5.837,5.793                      c4.411,7.596,1.829,17.33-5.767,21.741c-7.596,4.411-17.33,1.829-21.741-5.767c-1.754-3.021-2.817-5.818-2.484-9.046                      C375.625,437.355,383.087,437.973,388.762,434.677z\" /></g><g id=\"armL\"><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M301.301,347.66c-1.702,0.242-5.91,1.627-7.492,2.536l-47.965,27.301c-6.664,3.829-8.963,12.335-5.134,18.999h0                      c3.829,6.664,12.335,8.963,18.999,5.134l9.685-5.564\" /><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M241.978,395.324c-3.012-5.25-2.209-11.631,1.518-15.977c-2.701-0.009-5.44,0.656-7.952,2.096                      c-7.619,4.371-10.253,14.09-5.883,21.71c4.371,7.619,14.09,10.253,21.709,5.883c3.03-1.738,5.35-3.628,6.676-6.59                      C252.013,404.214,245.243,401.017,241.978,395.324z\" /></g><g id=\"body\"><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M353.351,365.387c-7.948,1.263-16.249,0.929-24.48-1.278c-8.232-2.207-15.586-6.07-21.836-11.14                      c-17.004,4.207-31.269,17.289-36.128,35.411l-1.374,5.123c-7.112,26.525,8.617,53.791,35.13,60.899l0,0                      c26.513,7.108,53.771-8.632,60.883-35.158l1.374-5.123C371.778,395.999,365.971,377.536,353.351,365.387z\" /><path fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M269.678,394.912L269.678,394.912c26.3,20.643,59.654,29.585,93.106,25.724l2.419-0.114\" /></g><g id=\"legs\"><g id=\"legR\"><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M312.957,456.734l-14.315,53.395c-1.896,7.07,2.299,14.338,9.37,16.234l0,0c7.07,1.896,14.338-2.299,16.234-9.37l17.838-66.534                          C333.451,455.886,323.526,457.387,312.957,456.734z\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"304.883\" y1=\"486.849\" x2=\"330.487\" y2=\"493.713\" /></g><g id=\"legL\"><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                          M296.315,452.273L282,505.667c-1.896,7.07-9.164,11.265-16.234,9.37l0,0c-7.07-1.896-11.265-9.164-9.37-16.234l17.838-66.534                          C278.993,441.286,286.836,447.55,296.315,452.273z\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"262.638\" y1=\"475.522\" x2=\"288.241\" y2=\"482.387\" /></g></g><g id=\"head\"><ellipse transform=\"matrix(0.259 -0.9659 0.9659 0.259 -51.5445 563.2371)\" fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" cx=\"341.295\" cy=\"315.211\" rx=\"61.961\" ry=\"60.305\" /><path id=\"headStripe\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M330.868,261.338c-7.929,1.72-15.381,5.246-21.799,10.246\" /><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M380.857,346.164c-1.247,4.651-4.668,8.421-9.196,10.06c-9.332,3.377-26.2,7.817-42.301,3.5s-28.485-16.599-34.877-24.192 c-3.101-3.684-4.177-8.66-2.93-13.311l7.453-27.798c0.756-2.82,3.181-4.868,6.088-5.13c6.755-0.61,20.546-0.608,41.785,5.087                      s33.181,12.591,38.725,16.498c2.387,1.682,3.461,4.668,2.705,7.488L380.857,346.164z\" /><g clip-path=\"url(#GlassClip)\"><polygon id=\"glassShine\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-miterlimit=\"10\" points=\"278.436,375.599 383.003,264.076 364.393,251.618 264.807,364.928 \t\t\t\t\" /></g></g></g></g></svg></div><div class=\"col-md-6 align-self-center\"><h1>404</h1><p>您正在查找的页面不存在。你是怎么到这里来的是个谜,但是你可以点击下面的按钮返回主页。</p><a class=\"btn green\" href=\"/\">HOME</a></div></div></div></main>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.1.1/gsap.min.js\"></script>\n    <script>gsap.set(\"svg\",{visibility:\"visible\"});gsap.to(\"#headStripe\",{y:0.5,rotation:1,yoyo:true,repeat:-1,ease:\"sine.inOut\",duration:1});gsap.to(\"#spaceman\",{y:0.5,rotation:1,yoyo:true,repeat:-1,ease:\"sine.inOut\",duration:1});gsap.to(\"#craterSmall\",{x:-3,yoyo:true,repeat:-1,duration:1,ease:\"sine.inOut\"});gsap.to(\"#craterBig\",{x:3,yoyo:true,repeat:-1,duration:1,ease:\"sine.inOut\"});gsap.to(\"#planet\",{rotation:-2,yoyo:true,repeat:-1,duration:1,ease:\"sine.inOut\",transformOrigin:\"50% 50%\"});gsap.to(\"#starsBig g\",{rotation:\"random(-30,30)\",transformOrigin:\"50% 50%\",yoyo:true,repeat:-1,ease:\"sine.inOut\"});gsap.fromTo(\"#starsSmall g\",{scale:0,transformOrigin:\"50% 50%\"},{scale:1,transformOrigin:\"50% 50%\",yoyo:true,repeat:-1,stagger:0.1});gsap.to(\"#circlesSmall circle\",{y:-4,yoyo:true,duration:1,ease:\"sine.inOut\",repeat:-1});gsap.to(\"#circlesBig circle\",{y:-2,yoyo:true,duration:1,ease:\"sine.inOut\",repeat:-1});gsap.set(\"#glassShine\",{x:-68});gsap.to(\"#glassShine\",{x:80,duration:2,rotation:-30,ease:\"expo.inOut\",transformOrigin:\"50% 50%\",repeat:-1,repeatDelay:8,delay:2});</script>\n</body>\n</html>\n","excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"zh-cn\">\n\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    <meta name=\"x5-fullscreen\" content=\"true\">\n    <meta name=\"full-screen\" content=\"yes\">\n    <meta name=\"theme-color\" content=\"#317EFB\">\n    <meta content=\"width=device-width,initial-scale=1,maximum-scale=5,user-scalable=0\" name=\"viewport\">\n    <meta name=\"keywords\" content=\"404\">\n    <meta name=\"description\" content=\"404\">\n    <meta property=\"og:type\" content=\"website\">\n    <meta property=\"og:title\" content=\"白云苍狗\">\n    <meta property=\"og:url\" content=\"https://www.imalun.com/index.html\">\n    <meta property=\"og:site_name\" content=\"白云苍狗\">\n    <meta property=\"og:description\" content=\"404\">\n    <meta property=\"og:locale\" content=\"zh-cn\">\n    <meta name=\"twitter:card\" content=\"summary\">\n    <meta name=\"description\" content=\"404\">\n    <title>页面不见了~</title>\n    <link rel=\"canonical\" href=\"https://www.imalun.com/\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/images/favicon.png\">\n    <link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.min.css\">\n    <style>:root{--blue:#0e0620;--white:#fff;--green:#2ccf6d}html,body{height:100%}body{display:flex;align-items:center;justify-content:center;font-family:\"Nunito Sans\";color:var(--blue);font-size:1em}button{font-family:\"Nunito Sans\"}ul{list-style-type:none;-webkit-padding-start:35px;padding-inline-start:35px}svg{width:100%;visibility:hidden}h1{font-size:7.5em;margin:15px 0;font-weight:bold}h2{font-weight:bold}.btn{z-index:1;overflow:hidden;background:transparent;position:relative;padding:8px 50px;border-radius:30px;cursor:pointer;font-size:1em;letter-spacing:2px;transition:.2s ease;font-weight:bold;margin:5px 0}.btn.green{border:4px solid var(--green);color:var(--blue)}.btn.green:before{content:\"\";position:absolute;left:0;top:0;width:0;height:100%;background:var(--green);z-index:-1;transition:.2s ease}.btn.green:hover{color:var(--white);background:var(--green);transition:.2s ease}.btn.green:hover:before{width:100%}@media screen and (max-width:768px){body{display:block}.container{margin-top:70px;margin-bottom:70px}}</style>\n</head>\n<body>\n    <main><div class=\"container\"><div class=\"row\"><div class=\"col-md-6 align-self-center\"><svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 800 600\"><g><defs><clipPath id=\"GlassClip\"><path d=\"M380.857,346.164c-1.247,4.651-4.668,8.421-9.196,10.06c-9.332,3.377-26.2,7.817-42.301,3.5 s-28.485-16.599-34.877-24.192c-3.101-3.684-4.177-8.66-2.93-13.311l7.453-27.798c0.756-2.82,3.181-4.868,6.088-5.13                      c6.755-0.61,20.546-0.608,41.785,5.087s33.181,12.591,38.725,16.498c2.387,1.682,3.461,4.668,2.705,7.488L380.857,346.164z\" /></clipPath><clipPath id=\"cordClip\"><rect width=\"800\" height=\"600\" /></clipPath></defs><g id=\"planet\"><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-miterlimit=\"10\" cx=\"572.859\" cy=\"108.803\" r=\"90.788\" /><circle id=\"craterBig\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-miterlimit=\"10\" cx=\"548.891\" cy=\"62.319\" r=\"13.074\" /><circle id=\"craterSmall\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-miterlimit=\"10\" cx=\"591.743\" cy=\"158.918\" r=\"7.989\" /><path id=\"ring\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" d=\"                  M476.562,101.461c-30.404,2.164-49.691,4.221-49.691,8.007c0,6.853,63.166,12.408,141.085,12.408s141.085-5.555,141.085-12.408                  c0-3.378-15.347-4.988-40.243-7.225\" /><path id=\"ringShadow\" opacity=\"0.5\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" d=\"                  M483.985,127.43c23.462,1.531,52.515,2.436,83.972,2.436c36.069,0,68.978-1.19,93.922-3.149\" /></g><g id=\"stars\"><g id=\"starsBig\"><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"518.07\" y1=\"245.375\" x2=\"518.07\" y2=\"266.581\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"508.129\" y1=\"255.978\" x2=\"528.01\" y2=\"255.978\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"154.55\" y1=\"231.391\" x2=\"154.55\" y2=\"252.598\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"144.609\" y1=\"241.995\" x2=\"164.49\" y2=\"241.995\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"320.135\" y1=\"132.746\" x2=\"320.135\" y2=\"153.952\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"310.194\" y1=\"143.349\" x2=\"330.075\" y2=\"143.349\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"200.67\" y1=\"483.11\" x2=\"200.67\" y2=\"504.316\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"210.611\" y1=\"493.713\" x2=\"190.73\" y2=\"493.713\" /></g></g><g id=\"starsSmall\"><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"432.173\" y1=\"380.52\" x2=\"432.173\" y2=\"391.83\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"426.871\" y1=\"386.175\" x2=\"437.474\" y2=\"386.175\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"489.555\" y1=\"299.765\" x2=\"489.555\" y2=\"308.124\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"485.636\" y1=\"303.945\" x2=\"493.473\" y2=\"303.945\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"231.468\" y1=\"291.009\" x2=\"231.468\" y2=\"299.369\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"227.55\" y1=\"295.189\" x2=\"235.387\" y2=\"295.189\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"244.032\" y1=\"547.539\" x2=\"244.032\" y2=\"555.898\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"247.95\" y1=\"551.719\" x2=\"240.113\" y2=\"551.719\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"186.359\" y1=\"406.967\" x2=\"186.359\" y2=\"415.326\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"190.277\" y1=\"411.146\" x2=\"182.44\" y2=\"411.146\" /></g><g><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"480.296\" y1=\"406.967\" x2=\"480.296\" y2=\"415.326\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" x1=\"484.215\" y1=\"411.146\" x2=\"476.378\" y2=\"411.146\" /></g></g><g id=\"circlesBig\"><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"588.977\" cy=\"255.978\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"450.066\" cy=\"320.259\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"168.303\" cy=\"353.753\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"429.522\" cy=\"201.185\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"200.67\" cy=\"176.313\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"133.343\" cy=\"477.014\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"283.521\" cy=\"568.033\" r=\"7.952\" /><circle fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" cx=\"413.618\" cy=\"482.387\" r=\"7.952\" /></g><g id=\"circlesSmall\"><circle fill=\"#0E0620\" cx=\"549.879\" cy=\"296.402\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"253.29\" cy=\"229.24\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"434.824\" cy=\"263.931\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"183.708\" cy=\"544.176\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"382.515\" cy=\"530.923\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"130.693\" cy=\"305.608\" r=\"2.651\" /><circle fill=\"#0E0620\" cx=\"480.296\" cy=\"477.014\" r=\"2.651\" /></g></g><g id=\"spaceman\" clip-path=\"url(cordClip)\"><path id=\"cord\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                  M273.813,410.969c0,0-54.527,39.501-115.34,38.218c-2.28-0.048-4.926-0.241-7.841-0.548                  c-68.038-7.178-134.288-43.963-167.33-103.87c-0.908-1.646-1.793-3.3-2.654-4.964c-18.395-35.511-37.259-83.385-32.075-118.817\" /><path id=\"backpack\" fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                  M338.164,454.689l-64.726-17.353c-11.086-2.972-17.664-14.369-14.692-25.455l15.694-58.537                  c3.889-14.504,18.799-23.11,33.303-19.221l52.349,14.035c14.504,3.889,23.11,18.799,19.221,33.303l-15.694,58.537                  C360.647,451.083,349.251,457.661,338.164,454.689z\" /><g id=\"antenna\"><line fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"323.396\" y1=\"236.625\" x2=\"295.285\" y2=\"353.753\" /><circle fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" cx=\"323.666\" cy=\"235.617\" r=\"6.375\" /></g><g id=\"armR\"><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M360.633,363.039c1.352,1.061,4.91,5.056,5.824,6.634l27.874,47.634c3.855,6.649,1.59,15.164-5.059,19.02l0,0                      c-6.649,3.855-15.164,1.59-19.02-5.059l-5.603-9.663\" /><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M388.762,434.677c5.234-3.039,7.731-8.966,6.678-14.594c2.344,1.343,4.383,3.289,5.837,5.793                      c4.411,7.596,1.829,17.33-5.767,21.741c-7.596,4.411-17.33,1.829-21.741-5.767c-1.754-3.021-2.817-5.818-2.484-9.046                      C375.625,437.355,383.087,437.973,388.762,434.677z\" /></g><g id=\"armL\"><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M301.301,347.66c-1.702,0.242-5.91,1.627-7.492,2.536l-47.965,27.301c-6.664,3.829-8.963,12.335-5.134,18.999h0                      c3.829,6.664,12.335,8.963,18.999,5.134l9.685-5.564\" /><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M241.978,395.324c-3.012-5.25-2.209-11.631,1.518-15.977c-2.701-0.009-5.44,0.656-7.952,2.096                      c-7.619,4.371-10.253,14.09-5.883,21.71c4.371,7.619,14.09,10.253,21.709,5.883c3.03-1.738,5.35-3.628,6.676-6.59                      C252.013,404.214,245.243,401.017,241.978,395.324z\" /></g><g id=\"body\"><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M353.351,365.387c-7.948,1.263-16.249,0.929-24.48-1.278c-8.232-2.207-15.586-6.07-21.836-11.14                      c-17.004,4.207-31.269,17.289-36.128,35.411l-1.374,5.123c-7.112,26.525,8.617,53.791,35.13,60.899l0,0                      c26.513,7.108,53.771-8.632,60.883-35.158l1.374-5.123C371.778,395.999,365.971,377.536,353.351,365.387z\" /><path fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M269.678,394.912L269.678,394.912c26.3,20.643,59.654,29.585,93.106,25.724l2.419-0.114\" /></g><g id=\"legs\"><g id=\"legR\"><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M312.957,456.734l-14.315,53.395c-1.896,7.07,2.299,14.338,9.37,16.234l0,0c7.07,1.896,14.338-2.299,16.234-9.37l17.838-66.534                          C333.451,455.886,323.526,457.387,312.957,456.734z\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"304.883\" y1=\"486.849\" x2=\"330.487\" y2=\"493.713\" /></g><g id=\"legL\"><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                          M296.315,452.273L282,505.667c-1.896,7.07-9.164,11.265-16.234,9.37l0,0c-7.07-1.896-11.265-9.164-9.37-16.234l17.838-66.534                          C278.993,441.286,286.836,447.55,296.315,452.273z\" /><line fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"262.638\" y1=\"475.522\" x2=\"288.241\" y2=\"482.387\" /></g></g><g id=\"head\"><ellipse transform=\"matrix(0.259 -0.9659 0.9659 0.259 -51.5445 563.2371)\" fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" cx=\"341.295\" cy=\"315.211\" rx=\"61.961\" ry=\"60.305\" /><path id=\"headStripe\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"                      M330.868,261.338c-7.929,1.72-15.381,5.246-21.799,10.246\" /><path fill=\"#FFFFFF\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M380.857,346.164c-1.247,4.651-4.668,8.421-9.196,10.06c-9.332,3.377-26.2,7.817-42.301,3.5s-28.485-16.599-34.877-24.192 c-3.101-3.684-4.177-8.66-2.93-13.311l7.453-27.798c0.756-2.82,3.181-4.868,6.088-5.13c6.755-0.61,20.546-0.608,41.785,5.087                      s33.181,12.591,38.725,16.498c2.387,1.682,3.461,4.668,2.705,7.488L380.857,346.164z\" /><g clip-path=\"url(#GlassClip)\"><polygon id=\"glassShine\" fill=\"none\" stroke=\"#0E0620\" stroke-width=\"3\" stroke-miterlimit=\"10\" points=\"278.436,375.599 383.003,264.076 364.393,251.618 264.807,364.928 \t\t\t\t\" /></g></g></g></g></svg></div><div class=\"col-md-6 align-self-center\"><h1>404</h1><p>您正在查找的页面不存在。你是怎么到这里来的是个谜,但是你可以点击下面的按钮返回主页。</p><a class=\"btn green\" href=\"/\">HOME</a></div></div></div></main>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.1.1/gsap.min.js\"></script>\n    <script>gsap.set(\"svg\",{visibility:\"visible\"});gsap.to(\"#headStripe\",{y:0.5,rotation:1,yoyo:true,repeat:-1,ease:\"sine.inOut\",duration:1});gsap.to(\"#spaceman\",{y:0.5,rotation:1,yoyo:true,repeat:-1,ease:\"sine.inOut\",duration:1});gsap.to(\"#craterSmall\",{x:-3,yoyo:true,repeat:-1,duration:1,ease:\"sine.inOut\"});gsap.to(\"#craterBig\",{x:3,yoyo:true,repeat:-1,duration:1,ease:\"sine.inOut\"});gsap.to(\"#planet\",{rotation:-2,yoyo:true,repeat:-1,duration:1,ease:\"sine.inOut\",transformOrigin:\"50% 50%\"});gsap.to(\"#starsBig g\",{rotation:\"random(-30,30)\",transformOrigin:\"50% 50%\",yoyo:true,repeat:-1,ease:\"sine.inOut\"});gsap.fromTo(\"#starsSmall g\",{scale:0,transformOrigin:\"50% 50%\"},{scale:1,transformOrigin:\"50% 50%\",yoyo:true,repeat:-1,stagger:0.1});gsap.to(\"#circlesSmall circle\",{y:-4,yoyo:true,duration:1,ease:\"sine.inOut\",repeat:-1});gsap.to(\"#circlesBig circle\",{y:-2,yoyo:true,duration:1,ease:\"sine.inOut\",repeat:-1});gsap.set(\"#glassShine\",{x:-68});gsap.to(\"#glassShine\",{x:80,duration:2,rotation:-30,ease:\"expo.inOut\",transformOrigin:\"50% 50%\",repeat:-1,repeatDelay:8,delay:2});</script>\n</body>\n</html>\n"},{"layout":"false","_content":"<!DOCTYPE html>\n<html lang=\"zh-cn\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flex可视化</title>\n    <link rel=\"canonical\" href=\"https://www.imalun.com/\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/images/favicon.png\">\n    <link href=\"https://cdn.bootcdn.net/ajax/libs/checkbox.css/1.1.3/css/away/away.min.css\" rel=\"stylesheet\">\n    <style>\n        * {\n            padding: 0;\n            margin: 0;\n        }\n\n        #app {\n            display: flex;\n            height: 100vh;\n        }\n\n        .left {\n            text-align: right;\n            width: 260px;\n            margin: 20px 10px;\n            padding: 20px;\n            background-color: rgb(243, 243, 243);\n        }\n\n\n        .right {\n            flex: 1;\n            margin: 20px 10px;\n            background-color: rgb(243, 243, 243);\n            overflow: auto;\n        }\n\n        .container-option {\n            margin: 10px 0;\n            padding: 10px 0;\n\n        }\n\n        .container-option+.container-option {\n            border-top: 1px dashed #aaa;\n        }\n\n        .flex-box {\n            height: 100%;\n            width: 100%;\n        }\n\n        .flex-box-item {\n            background-color: #4419aab7;\n            color: #fff;\n            height: 100px;\n            width: 100px;\n            text-align: center;\n            line-height: 100px;\n            font-size: 20px;\n            margin: 10px;\n            font-weight: 600;\n            user-select: none;\n        }\n\n        .flex-box-item.check {\n            background-color: red;\n        }\n\n        .w120 {\n            width: 120px;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"app\">\n        <div class=\"left\">\n            <h3>容器</h3>\n            <div v-for='(item,index) in container' :key=\"index\" class=\"container-option\">\n                <h4 class=\"title\">\n                    <span v-text=\"item.title\"></span>\n                    <select v-model='flexStyle[item.title]' class=\"w120\">\n                        <option v-for='(elem,index) in item.value' :key=\"index\" :label=\"elem\" :value=\"elem\"></option>\n                    </select>\n                </h4>\n            </div>\n            <h3>子元素</h3>\n            <div class=\"container-option\">\n                <h4 class=\"title\">\n                    order\n                    <input type=\"number\" v-model='flexItemsStyle[index].order' class=\"w120\">\n                </h4>\n            </div>\n            <div class=\"container-option\">\n                <h4 class=\"title\">\n                    flex-grow\n                    <input type=\"number\" v-model='flexItemsStyle[index][\"flex-grow\"]' class=\"w120\">\n                </h4>\n            </div>\n            <div class=\"container-option\">\n                <h4 class=\"title\">\n                    flex-shrink\n                    <input type=\"number\" v-model='flexItemsStyle[index][\"flex-shrink\"]' class=\"w120\">\n                </h4>\n            </div>\n            <div class=\"container-option\">\n                <h4 class=\"title\">\n                    flex-basis\n                    <input type=\"text\" v-model='flexItemsStyle[index][\"flex-basis\"]' class=\"w120\">\n                </h4>\n            </div>\n            <div class=\"container-option\">\n                <h4 class=\"title\">\n                    align-self\n                    <select v-model='flexItemsStyle[index][\"align-self\"]' class=\"w120\">\n                        <option v-for='(elem,index) in alignSelfItems' :key=\"index\" :label=\"elem\" :value=\"elem\"></option>\n                    </select>\n                </h4>\n            </div>\n\n            <div>\n                <button @click=\"handleAdd\">添加</button>\n                <button @click=\"handleDel\">删除</button>\n            </div>\n        </div>\n        <div class=\"right\">\n            <div class=\"flex-box\" :style='flexStyle'>\n                <div class=\"flex-box-item\" :class=\"{check:index===idx}\" @click=\"index=idx;\" :style=\"item\" v-for=\"(item,idx) in flexItemsStyle\" :key=\"idx\">{{idx}}</div>\n            </div>\n        </div>\n    </div>\n    <script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.9/vue.min.js\"></script>\n    <script>\n        let item = {\n            'order': 0,\n            'flex-grow': 0,\n            'flex-shrink': 1,\n            'flex-basis': 'auto',\n            'align-self': 'auto'\n        }\n        new Vue({\n            el: '#app',\n            data() {\n                return {\n                    container: [\n                        {\n                            title: \"flex-direction\",\n                            default: \"row\",\n                            value: [\"row\", \"row-reverse\", \"column\", \"column-reverse\"]\n                        },\n                        {\n                            title: \"flex-wrap\",\n                            default: \"nowrap\",\n                            value: [\"nowrap\", \"wrap\", \"wrap-reverse\"]\n                        },\n                        {\n                            title: \"justify-content\",\n                            default: \"flex-start\",\n                            value: [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\"]\n                        },\n                        {\n                            title: \"align-items\",\n                            default: \"stretch\",\n                            value: [\"flex-start\", \"flex-end\", \"center\", \"baseline\", \"stretch\"]\n                        },\n                        {\n                            title: \"align-content\",\n                            default: \"stretch\",\n                            value: [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\", \"stretch\"]\n                        }\n                    ],\n                    item: [\n                        {\n                            title: \"align-content\",\n                            default: \"stretch\",\n                            value: [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\", \"stretch\"]\n                        }\n                    ],\n                    alignSelfItems: [\"auto\", \"flex-start\", \"flex-end\", \"center\", \"baseline\", \"stretch\"],\n                    flexStyle: {\n                        \"display\": \"flex\",\n                        \"flex-direction\": \"row\",\n                        \"flex-wrap\": \"nowrap\",\n                        \"justify-content\": \"flex-start\",\n                        \"align-items\": \"stretch\",\n                        \"align-content\": \"stretch\"\n                    },\n                    index: 0,\n                    flexItemsStyle: [\n                        { ...item },\n                        { ...item },\n                        { ...item },\n                    ]\n                }\n            },\n            methods: {\n                handleAdd() {\n                    this.flexItemsStyle.push({ ...item })\n                },\n                handleDel() {\n                    if (this.flexItemsStyle.length > 1) {\n                        if (this.flexItemsStyle.length - 1 <= this.index) {\n                            --this.index\n                        }\n                        this.flexItemsStyle.pop()\n                    }\n                }\n            }\n        })\n    </script>\n</body>\n\n</html>","source":"flex.html","raw":"---\nlayout: false\n---\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flex可视化</title>\n    <link rel=\"canonical\" href=\"https://www.imalun.com/\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/images/favicon.png\">\n    <link href=\"https://cdn.bootcdn.net/ajax/libs/checkbox.css/1.1.3/css/away/away.min.css\" rel=\"stylesheet\">\n    <style>\n        * {\n            padding: 0;\n            margin: 0;\n        }\n\n        #app {\n            display: flex;\n            height: 100vh;\n        }\n\n        .left {\n            text-align: right;\n            width: 260px;\n            margin: 20px 10px;\n            padding: 20px;\n            background-color: rgb(243, 243, 243);\n        }\n\n\n        .right {\n            flex: 1;\n            margin: 20px 10px;\n            background-color: rgb(243, 243, 243);\n            overflow: auto;\n        }\n\n        .container-option {\n            margin: 10px 0;\n            padding: 10px 0;\n\n        }\n\n        .container-option+.container-option {\n            border-top: 1px dashed #aaa;\n        }\n\n        .flex-box {\n            height: 100%;\n            width: 100%;\n        }\n\n        .flex-box-item {\n            background-color: #4419aab7;\n            color: #fff;\n            height: 100px;\n            width: 100px;\n            text-align: center;\n            line-height: 100px;\n            font-size: 20px;\n            margin: 10px;\n            font-weight: 600;\n            user-select: none;\n        }\n\n        .flex-box-item.check {\n            background-color: red;\n        }\n\n        .w120 {\n            width: 120px;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"app\">\n        <div class=\"left\">\n            <h3>容器</h3>\n            <div v-for='(item,index) in container' :key=\"index\" class=\"container-option\">\n                <h4 class=\"title\">\n                    <span v-text=\"item.title\"></span>\n                    <select v-model='flexStyle[item.title]' class=\"w120\">\n                        <option v-for='(elem,index) in item.value' :key=\"index\" :label=\"elem\" :value=\"elem\"></option>\n                    </select>\n                </h4>\n            </div>\n            <h3>子元素</h3>\n            <div class=\"container-option\">\n                <h4 class=\"title\">\n                    order\n                    <input type=\"number\" v-model='flexItemsStyle[index].order' class=\"w120\">\n                </h4>\n            </div>\n            <div class=\"container-option\">\n                <h4 class=\"title\">\n                    flex-grow\n                    <input type=\"number\" v-model='flexItemsStyle[index][\"flex-grow\"]' class=\"w120\">\n                </h4>\n            </div>\n            <div class=\"container-option\">\n                <h4 class=\"title\">\n                    flex-shrink\n                    <input type=\"number\" v-model='flexItemsStyle[index][\"flex-shrink\"]' class=\"w120\">\n                </h4>\n            </div>\n            <div class=\"container-option\">\n                <h4 class=\"title\">\n                    flex-basis\n                    <input type=\"text\" v-model='flexItemsStyle[index][\"flex-basis\"]' class=\"w120\">\n                </h4>\n            </div>\n            <div class=\"container-option\">\n                <h4 class=\"title\">\n                    align-self\n                    <select v-model='flexItemsStyle[index][\"align-self\"]' class=\"w120\">\n                        <option v-for='(elem,index) in alignSelfItems' :key=\"index\" :label=\"elem\" :value=\"elem\"></option>\n                    </select>\n                </h4>\n            </div>\n\n            <div>\n                <button @click=\"handleAdd\">添加</button>\n                <button @click=\"handleDel\">删除</button>\n            </div>\n        </div>\n        <div class=\"right\">\n            <div class=\"flex-box\" :style='flexStyle'>\n                <div class=\"flex-box-item\" :class=\"{check:index===idx}\" @click=\"index=idx;\" :style=\"item\" v-for=\"(item,idx) in flexItemsStyle\" :key=\"idx\">{{idx}}</div>\n            </div>\n        </div>\n    </div>\n    <script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.9/vue.min.js\"></script>\n    <script>\n        let item = {\n            'order': 0,\n            'flex-grow': 0,\n            'flex-shrink': 1,\n            'flex-basis': 'auto',\n            'align-self': 'auto'\n        }\n        new Vue({\n            el: '#app',\n            data() {\n                return {\n                    container: [\n                        {\n                            title: \"flex-direction\",\n                            default: \"row\",\n                            value: [\"row\", \"row-reverse\", \"column\", \"column-reverse\"]\n                        },\n                        {\n                            title: \"flex-wrap\",\n                            default: \"nowrap\",\n                            value: [\"nowrap\", \"wrap\", \"wrap-reverse\"]\n                        },\n                        {\n                            title: \"justify-content\",\n                            default: \"flex-start\",\n                            value: [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\"]\n                        },\n                        {\n                            title: \"align-items\",\n                            default: \"stretch\",\n                            value: [\"flex-start\", \"flex-end\", \"center\", \"baseline\", \"stretch\"]\n                        },\n                        {\n                            title: \"align-content\",\n                            default: \"stretch\",\n                            value: [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\", \"stretch\"]\n                        }\n                    ],\n                    item: [\n                        {\n                            title: \"align-content\",\n                            default: \"stretch\",\n                            value: [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\", \"stretch\"]\n                        }\n                    ],\n                    alignSelfItems: [\"auto\", \"flex-start\", \"flex-end\", \"center\", \"baseline\", \"stretch\"],\n                    flexStyle: {\n                        \"display\": \"flex\",\n                        \"flex-direction\": \"row\",\n                        \"flex-wrap\": \"nowrap\",\n                        \"justify-content\": \"flex-start\",\n                        \"align-items\": \"stretch\",\n                        \"align-content\": \"stretch\"\n                    },\n                    index: 0,\n                    flexItemsStyle: [\n                        { ...item },\n                        { ...item },\n                        { ...item },\n                    ]\n                }\n            },\n            methods: {\n                handleAdd() {\n                    this.flexItemsStyle.push({ ...item })\n                },\n                handleDel() {\n                    if (this.flexItemsStyle.length > 1) {\n                        if (this.flexItemsStyle.length - 1 <= this.index) {\n                            --this.index\n                        }\n                        this.flexItemsStyle.pop()\n                    }\n                }\n            }\n        })\n    </script>\n</body>\n\n</html>","date":"2024-03-07T08:20:02.795Z","updated":"2024-03-06T07:42:59.000Z","path":"flex.html","title":"","comments":1,"_id":"cltgz7vq8000298lg89dzhnqg","content":"<!DOCTYPE html>\n<html lang=\"zh-cn\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flex可视化</title>\n    <link rel=\"canonical\" href=\"https://www.imalun.com/\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/images/favicon.png\">\n    <link href=\"https://cdn.bootcdn.net/ajax/libs/checkbox.css/1.1.3/css/away/away.min.css\" rel=\"stylesheet\">\n    <style>\n        * {\n            padding: 0;\n            margin: 0;\n        }\n\n        #app {\n            display: flex;\n            height: 100vh;\n        }\n\n        .left {\n            text-align: right;\n            width: 260px;\n            margin: 20px 10px;\n            padding: 20px;\n            background-color: rgb(243, 243, 243);\n        }\n\n\n        .right {\n            flex: 1;\n            margin: 20px 10px;\n            background-color: rgb(243, 243, 243);\n            overflow: auto;\n        }\n\n        .container-option {\n            margin: 10px 0;\n            padding: 10px 0;\n\n        }\n\n        .container-option+.container-option {\n            border-top: 1px dashed #aaa;\n        }\n\n        .flex-box {\n            height: 100%;\n            width: 100%;\n        }\n\n        .flex-box-item {\n            background-color: #4419aab7;\n            color: #fff;\n            height: 100px;\n            width: 100px;\n            text-align: center;\n            line-height: 100px;\n            font-size: 20px;\n            margin: 10px;\n            font-weight: 600;\n            user-select: none;\n        }\n\n        .flex-box-item.check {\n            background-color: red;\n        }\n\n        .w120 {\n            width: 120px;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"app\">\n        <div class=\"left\">\n            <h3>容器</h3>\n            <div v-for='(item,index) in container' :key=\"index\" class=\"container-option\">\n                <h4 class=\"title\">\n                    <span v-text=\"item.title\"></span>\n                    <select v-model='flexStyle[item.title]' class=\"w120\">\n                        <option v-for='(elem,index) in item.value' :key=\"index\" :label=\"elem\" :value=\"elem\"></option>\n                    </select>\n                </h4>\n            </div>\n            <h3>子元素</h3>\n            <div class=\"container-option\">\n                <h4 class=\"title\">\n                    order\n                    <input type=\"number\" v-model='flexItemsStyle[index].order' class=\"w120\">\n                </h4>\n            </div>\n            <div class=\"container-option\">\n                <h4 class=\"title\">\n                    flex-grow\n                    <input type=\"number\" v-model='flexItemsStyle[index][\"flex-grow\"]' class=\"w120\">\n                </h4>\n            </div>\n            <div class=\"container-option\">\n                <h4 class=\"title\">\n                    flex-shrink\n                    <input type=\"number\" v-model='flexItemsStyle[index][\"flex-shrink\"]' class=\"w120\">\n                </h4>\n            </div>\n            <div class=\"container-option\">\n                <h4 class=\"title\">\n                    flex-basis\n                    <input type=\"text\" v-model='flexItemsStyle[index][\"flex-basis\"]' class=\"w120\">\n                </h4>\n            </div>\n            <div class=\"container-option\">\n                <h4 class=\"title\">\n                    align-self\n                    <select v-model='flexItemsStyle[index][\"align-self\"]' class=\"w120\">\n                        <option v-for='(elem,index) in alignSelfItems' :key=\"index\" :label=\"elem\" :value=\"elem\"></option>\n                    </select>\n                </h4>\n            </div>\n\n            <div>\n                <button @click=\"handleAdd\">添加</button>\n                <button @click=\"handleDel\">删除</button>\n            </div>\n        </div>\n        <div class=\"right\">\n            <div class=\"flex-box\" :style='flexStyle'>\n                <div class=\"flex-box-item\" :class=\"{check:index===idx}\" @click=\"index=idx;\" :style=\"item\" v-for=\"(item,idx) in flexItemsStyle\" :key=\"idx\"></div>\n            </div>\n        </div>\n    </div>\n    <script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.9/vue.min.js\"></script>\n    <script>\n        let item = {\n            'order': 0,\n            'flex-grow': 0,\n            'flex-shrink': 1,\n            'flex-basis': 'auto',\n            'align-self': 'auto'\n        }\n        new Vue({\n            el: '#app',\n            data() {\n                return {\n                    container: [\n                        {\n                            title: \"flex-direction\",\n                            default: \"row\",\n                            value: [\"row\", \"row-reverse\", \"column\", \"column-reverse\"]\n                        },\n                        {\n                            title: \"flex-wrap\",\n                            default: \"nowrap\",\n                            value: [\"nowrap\", \"wrap\", \"wrap-reverse\"]\n                        },\n                        {\n                            title: \"justify-content\",\n                            default: \"flex-start\",\n                            value: [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\"]\n                        },\n                        {\n                            title: \"align-items\",\n                            default: \"stretch\",\n                            value: [\"flex-start\", \"flex-end\", \"center\", \"baseline\", \"stretch\"]\n                        },\n                        {\n                            title: \"align-content\",\n                            default: \"stretch\",\n                            value: [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\", \"stretch\"]\n                        }\n                    ],\n                    item: [\n                        {\n                            title: \"align-content\",\n                            default: \"stretch\",\n                            value: [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\", \"stretch\"]\n                        }\n                    ],\n                    alignSelfItems: [\"auto\", \"flex-start\", \"flex-end\", \"center\", \"baseline\", \"stretch\"],\n                    flexStyle: {\n                        \"display\": \"flex\",\n                        \"flex-direction\": \"row\",\n                        \"flex-wrap\": \"nowrap\",\n                        \"justify-content\": \"flex-start\",\n                        \"align-items\": \"stretch\",\n                        \"align-content\": \"stretch\"\n                    },\n                    index: 0,\n                    flexItemsStyle: [\n                        { ...item },\n                        { ...item },\n                        { ...item },\n                    ]\n                }\n            },\n            methods: {\n                handleAdd() {\n                    this.flexItemsStyle.push({ ...item })\n                },\n                handleDel() {\n                    if (this.flexItemsStyle.length > 1) {\n                        if (this.flexItemsStyle.length - 1 <= this.index) {\n                            --this.index\n                        }\n                        this.flexItemsStyle.pop()\n                    }\n                }\n            }\n        })\n    </script>\n</body>\n\n</html>","excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"zh-cn\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flex可视化</title>\n    <link rel=\"canonical\" href=\"https://www.imalun.com/\">\n    <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/images/favicon.png\">\n    <link href=\"https://cdn.bootcdn.net/ajax/libs/checkbox.css/1.1.3/css/away/away.min.css\" rel=\"stylesheet\">\n    <style>\n        * {\n            padding: 0;\n            margin: 0;\n        }\n\n        #app {\n            display: flex;\n            height: 100vh;\n        }\n\n        .left {\n            text-align: right;\n            width: 260px;\n            margin: 20px 10px;\n            padding: 20px;\n            background-color: rgb(243, 243, 243);\n        }\n\n\n        .right {\n            flex: 1;\n            margin: 20px 10px;\n            background-color: rgb(243, 243, 243);\n            overflow: auto;\n        }\n\n        .container-option {\n            margin: 10px 0;\n            padding: 10px 0;\n\n        }\n\n        .container-option+.container-option {\n            border-top: 1px dashed #aaa;\n        }\n\n        .flex-box {\n            height: 100%;\n            width: 100%;\n        }\n\n        .flex-box-item {\n            background-color: #4419aab7;\n            color: #fff;\n            height: 100px;\n            width: 100px;\n            text-align: center;\n            line-height: 100px;\n            font-size: 20px;\n            margin: 10px;\n            font-weight: 600;\n            user-select: none;\n        }\n\n        .flex-box-item.check {\n            background-color: red;\n        }\n\n        .w120 {\n            width: 120px;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"app\">\n        <div class=\"left\">\n            <h3>容器</h3>\n            <div v-for='(item,index) in container' :key=\"index\" class=\"container-option\">\n                <h4 class=\"title\">\n                    <span v-text=\"item.title\"></span>\n                    <select v-model='flexStyle[item.title]' class=\"w120\">\n                        <option v-for='(elem,index) in item.value' :key=\"index\" :label=\"elem\" :value=\"elem\"></option>\n                    </select>\n                </h4>\n            </div>\n            <h3>子元素</h3>\n            <div class=\"container-option\">\n                <h4 class=\"title\">\n                    order\n                    <input type=\"number\" v-model='flexItemsStyle[index].order' class=\"w120\">\n                </h4>\n            </div>\n            <div class=\"container-option\">\n                <h4 class=\"title\">\n                    flex-grow\n                    <input type=\"number\" v-model='flexItemsStyle[index][\"flex-grow\"]' class=\"w120\">\n                </h4>\n            </div>\n            <div class=\"container-option\">\n                <h4 class=\"title\">\n                    flex-shrink\n                    <input type=\"number\" v-model='flexItemsStyle[index][\"flex-shrink\"]' class=\"w120\">\n                </h4>\n            </div>\n            <div class=\"container-option\">\n                <h4 class=\"title\">\n                    flex-basis\n                    <input type=\"text\" v-model='flexItemsStyle[index][\"flex-basis\"]' class=\"w120\">\n                </h4>\n            </div>\n            <div class=\"container-option\">\n                <h4 class=\"title\">\n                    align-self\n                    <select v-model='flexItemsStyle[index][\"align-self\"]' class=\"w120\">\n                        <option v-for='(elem,index) in alignSelfItems' :key=\"index\" :label=\"elem\" :value=\"elem\"></option>\n                    </select>\n                </h4>\n            </div>\n\n            <div>\n                <button @click=\"handleAdd\">添加</button>\n                <button @click=\"handleDel\">删除</button>\n            </div>\n        </div>\n        <div class=\"right\">\n            <div class=\"flex-box\" :style='flexStyle'>\n                <div class=\"flex-box-item\" :class=\"{check:index===idx}\" @click=\"index=idx;\" :style=\"item\" v-for=\"(item,idx) in flexItemsStyle\" :key=\"idx\"></div>\n            </div>\n        </div>\n    </div>\n    <script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.9/vue.min.js\"></script>\n    <script>\n        let item = {\n            'order': 0,\n            'flex-grow': 0,\n            'flex-shrink': 1,\n            'flex-basis': 'auto',\n            'align-self': 'auto'\n        }\n        new Vue({\n            el: '#app',\n            data() {\n                return {\n                    container: [\n                        {\n                            title: \"flex-direction\",\n                            default: \"row\",\n                            value: [\"row\", \"row-reverse\", \"column\", \"column-reverse\"]\n                        },\n                        {\n                            title: \"flex-wrap\",\n                            default: \"nowrap\",\n                            value: [\"nowrap\", \"wrap\", \"wrap-reverse\"]\n                        },\n                        {\n                            title: \"justify-content\",\n                            default: \"flex-start\",\n                            value: [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\"]\n                        },\n                        {\n                            title: \"align-items\",\n                            default: \"stretch\",\n                            value: [\"flex-start\", \"flex-end\", \"center\", \"baseline\", \"stretch\"]\n                        },\n                        {\n                            title: \"align-content\",\n                            default: \"stretch\",\n                            value: [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\", \"stretch\"]\n                        }\n                    ],\n                    item: [\n                        {\n                            title: \"align-content\",\n                            default: \"stretch\",\n                            value: [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\", \"stretch\"]\n                        }\n                    ],\n                    alignSelfItems: [\"auto\", \"flex-start\", \"flex-end\", \"center\", \"baseline\", \"stretch\"],\n                    flexStyle: {\n                        \"display\": \"flex\",\n                        \"flex-direction\": \"row\",\n                        \"flex-wrap\": \"nowrap\",\n                        \"justify-content\": \"flex-start\",\n                        \"align-items\": \"stretch\",\n                        \"align-content\": \"stretch\"\n                    },\n                    index: 0,\n                    flexItemsStyle: [\n                        { ...item },\n                        { ...item },\n                        { ...item },\n                    ]\n                }\n            },\n            methods: {\n                handleAdd() {\n                    this.flexItemsStyle.push({ ...item })\n                },\n                handleDel() {\n                    if (this.flexItemsStyle.length > 1) {\n                        if (this.flexItemsStyle.length - 1 <= this.index) {\n                            --this.index\n                        }\n                        this.flexItemsStyle.pop()\n                    }\n                }\n            }\n        })\n    </script>\n</body>\n\n</html>"},{"title":"关于","type":"about","keywords":"about,个人介绍","comments":0,"_content":"\n<div class=\"row trm-scroll-animation trm-active-el\" style=\"margin-bottom: var(--card-bottom-card);\">\n    <div class=\"col-lg-12\">\n        <blockquote>一觉游仙好梦，任它竹冷松寒。轩辕事，古今谈，风流河山。沉醉负白首，舒怀成大观。醒，亦在人间；梦，亦在人间。</blockquote>\n    </div>\n</div>\n\n<div class=\"row trm-scroll-animation\" >\n    <div class=\"col-lg-12\">\n        <h5 class=\"trm-title-with-divider\">作者 <span data-number=\"01\"></span></h5>\n        <div class=\"trm-card trm-active-el\">\n            大家好，我是 <strong>白云苍狗</strong>，很高兴您能在浩瀚如烟的互联网世界里发现这个博客，更感谢您能够饶有兴致地浏览这个页面。建立这个 Blog 是出于兴趣爱好，我将在此分会分享一些学习笔记，可能还会分享少许图片、视频以及其他有趣东西的链接。\n        </div>\n    </div>\n</div>\n\n<div class=\"row trm-scroll-animation\">\n    <div class=\"col-lg-12\">\n        <h5 class=\"trm-title-with-divider\">程序 <span data-number=\"02\"></span></h5>\n        <div class=\"trm-card trm-active-el\">\n            <ul class=\"trm-list\">\n                <li>程序：<a href=\"https://hexo.io\" style=\"font-weight:700\" target=\"_blank\" rel=\"nofollow\">Hexo</a></li>\n                <li>主题：<a href=\"https://github.com/MaLuns/hexo-theme-async\" style=\"font-weight:700\" target=\"_blank\" rel=\"nofollow\">Hexo-theme-async</a></li>\n                <li>托管：<a href=\"https://vercel.com\" style=\"font-weight:700\" target=\"_blank\" rel=\"nofollow\">Vercel</a></li>\n            </ul>\n        </div>\n    </div>\n</div>\n\n<div class=\"row trm-scroll-animation\">\n    <div class=\"col-lg-12\">\n        <h5 class=\"trm-title-with-divider\">隐私权及评论 <span data-number=\"03\"></span></h5>\n        <div class=\"trm-card trm-active-el\">\n            本网站不会追踪访客行为，且不要求访客提供任何敏感信息（比如真实姓名、身份证号码、手机号等），因而也不存在任何隐私泄漏问题。访客参与评论，必须遵守法律法规和基本道德规范，文明礼貌。严禁发布任何有关淫秽、反动、暴力、博彩、恐吓、低俗的内容或违法信息，在尊重言论自由的同时请保持和平与理性。请勿对他人采取不友好的评论或其它过激行为。\n            <br><br>\n            本博客采用 <strong><a target=\"_blank\" rel=\"noopener\" href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\">知识产权署名-非商业性使用 4.0 国际许可协议</a></strong> 进行许可。\n            <br>转载前请联系作者获得许可，并注明原文链接。如有侵权，请留言告知，我会一周内删除。谢谢！\n        </div>\n    </div>\n</div>","source":"about/index.md","raw":"---\ntitle: 关于\ntype: about\nkeywords: about,个人介绍\ncomments: false\n---\n\n<div class=\"row trm-scroll-animation trm-active-el\" style=\"margin-bottom: var(--card-bottom-card);\">\n    <div class=\"col-lg-12\">\n        <blockquote>一觉游仙好梦，任它竹冷松寒。轩辕事，古今谈，风流河山。沉醉负白首，舒怀成大观。醒，亦在人间；梦，亦在人间。</blockquote>\n    </div>\n</div>\n\n<div class=\"row trm-scroll-animation\" >\n    <div class=\"col-lg-12\">\n        <h5 class=\"trm-title-with-divider\">作者 <span data-number=\"01\"></span></h5>\n        <div class=\"trm-card trm-active-el\">\n            大家好，我是 <strong>白云苍狗</strong>，很高兴您能在浩瀚如烟的互联网世界里发现这个博客，更感谢您能够饶有兴致地浏览这个页面。建立这个 Blog 是出于兴趣爱好，我将在此分会分享一些学习笔记，可能还会分享少许图片、视频以及其他有趣东西的链接。\n        </div>\n    </div>\n</div>\n\n<div class=\"row trm-scroll-animation\">\n    <div class=\"col-lg-12\">\n        <h5 class=\"trm-title-with-divider\">程序 <span data-number=\"02\"></span></h5>\n        <div class=\"trm-card trm-active-el\">\n            <ul class=\"trm-list\">\n                <li>程序：<a href=\"https://hexo.io\" style=\"font-weight:700\" target=\"_blank\" rel=\"nofollow\">Hexo</a></li>\n                <li>主题：<a href=\"https://github.com/MaLuns/hexo-theme-async\" style=\"font-weight:700\" target=\"_blank\" rel=\"nofollow\">Hexo-theme-async</a></li>\n                <li>托管：<a href=\"https://vercel.com\" style=\"font-weight:700\" target=\"_blank\" rel=\"nofollow\">Vercel</a></li>\n            </ul>\n        </div>\n    </div>\n</div>\n\n<div class=\"row trm-scroll-animation\">\n    <div class=\"col-lg-12\">\n        <h5 class=\"trm-title-with-divider\">隐私权及评论 <span data-number=\"03\"></span></h5>\n        <div class=\"trm-card trm-active-el\">\n            本网站不会追踪访客行为，且不要求访客提供任何敏感信息（比如真实姓名、身份证号码、手机号等），因而也不存在任何隐私泄漏问题。访客参与评论，必须遵守法律法规和基本道德规范，文明礼貌。严禁发布任何有关淫秽、反动、暴力、博彩、恐吓、低俗的内容或违法信息，在尊重言论自由的同时请保持和平与理性。请勿对他人采取不友好的评论或其它过激行为。\n            <br><br>\n            本博客采用 <strong><a target=\"_blank\" rel=\"noopener\" href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\">知识产权署名-非商业性使用 4.0 国际许可协议</a></strong> 进行许可。\n            <br>转载前请联系作者获得许可，并注明原文链接。如有侵权，请留言告知，我会一周内删除。谢谢！\n        </div>\n    </div>\n</div>","date":"2024-03-07T08:20:02.793Z","updated":"2024-03-06T07:42:59.000Z","path":"about/index.html","layout":"page","_id":"cltgz7vqg000498lgclugabxx","content":"<div class=\"row trm-scroll-animation trm-active-el\" style=\"margin-bottom: var(--card-bottom-card);\">\n    <div class=\"col-lg-12\">\n        <blockquote>一觉游仙好梦，任它竹冷松寒。轩辕事，古今谈，风流河山。沉醉负白首，舒怀成大观。醒，亦在人间；梦，亦在人间。</blockquote>\n    </div>\n</div>\n\n<div class=\"row trm-scroll-animation\" >\n    <div class=\"col-lg-12\">\n        <h5 class=\"trm-title-with-divider\">作者 <span data-number=\"01\"></span></h5>\n        <div class=\"trm-card trm-active-el\">\n            大家好，我是 <strong>白云苍狗</strong>，很高兴您能在浩瀚如烟的互联网世界里发现这个博客，更感谢您能够饶有兴致地浏览这个页面。建立这个 Blog 是出于兴趣爱好，我将在此分会分享一些学习笔记，可能还会分享少许图片、视频以及其他有趣东西的链接。\n        </div>\n    </div>\n</div>\n\n<div class=\"row trm-scroll-animation\">\n    <div class=\"col-lg-12\">\n        <h5 class=\"trm-title-with-divider\">程序 <span data-number=\"02\"></span></h5>\n        <div class=\"trm-card trm-active-el\">\n            <ul class=\"trm-list\">\n                <li>程序：<a href=\"https://hexo.io\" style=\"font-weight:700\" target=\"_blank\" rel=\"nofollow\">Hexo</a></li>\n                <li>主题：<a href=\"https://github.com/MaLuns/hexo-theme-async\" style=\"font-weight:700\" target=\"_blank\" rel=\"nofollow\">Hexo-theme-async</a></li>\n                <li>托管：<a href=\"https://vercel.com\" style=\"font-weight:700\" target=\"_blank\" rel=\"nofollow\">Vercel</a></li>\n            </ul>\n        </div>\n    </div>\n</div>\n\n<div class=\"row trm-scroll-animation\">\n    <div class=\"col-lg-12\">\n        <h5 class=\"trm-title-with-divider\">隐私权及评论 <span data-number=\"03\"></span></h5>\n        <div class=\"trm-card trm-active-el\">\n            本网站不会追踪访客行为，且不要求访客提供任何敏感信息（比如真实姓名、身份证号码、手机号等），因而也不存在任何隐私泄漏问题。访客参与评论，必须遵守法律法规和基本道德规范，文明礼貌。严禁发布任何有关淫秽、反动、暴力、博彩、恐吓、低俗的内容或违法信息，在尊重言论自由的同时请保持和平与理性。请勿对他人采取不友好的评论或其它过激行为。\n            <br><br>\n            本博客采用 <strong><a target=\"_blank\" rel=\"noopener\" href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\">知识产权署名-非商业性使用 4.0 国际许可协议</a></strong> 进行许可。\n            <br>转载前请联系作者获得许可，并注明原文链接。如有侵权，请留言告知，我会一周内删除。谢谢！\n        </div>\n    </div>\n</div>","excerpt":"","more":"<div class=\"row trm-scroll-animation trm-active-el\" style=\"margin-bottom: var(--card-bottom-card);\">\n    <div class=\"col-lg-12\">\n        <blockquote>一觉游仙好梦，任它竹冷松寒。轩辕事，古今谈，风流河山。沉醉负白首，舒怀成大观。醒，亦在人间；梦，亦在人间。</blockquote>\n    </div>\n</div>\n\n<div class=\"row trm-scroll-animation\" >\n    <div class=\"col-lg-12\">\n        <h5 class=\"trm-title-with-divider\">作者 <span data-number=\"01\"></span></h5>\n        <div class=\"trm-card trm-active-el\">\n            大家好，我是 <strong>白云苍狗</strong>，很高兴您能在浩瀚如烟的互联网世界里发现这个博客，更感谢您能够饶有兴致地浏览这个页面。建立这个 Blog 是出于兴趣爱好，我将在此分会分享一些学习笔记，可能还会分享少许图片、视频以及其他有趣东西的链接。\n        </div>\n    </div>\n</div>\n\n<div class=\"row trm-scroll-animation\">\n    <div class=\"col-lg-12\">\n        <h5 class=\"trm-title-with-divider\">程序 <span data-number=\"02\"></span></h5>\n        <div class=\"trm-card trm-active-el\">\n            <ul class=\"trm-list\">\n                <li>程序：<a href=\"https://hexo.io\" style=\"font-weight:700\" target=\"_blank\" rel=\"nofollow\">Hexo</a></li>\n                <li>主题：<a href=\"https://github.com/MaLuns/hexo-theme-async\" style=\"font-weight:700\" target=\"_blank\" rel=\"nofollow\">Hexo-theme-async</a></li>\n                <li>托管：<a href=\"https://vercel.com\" style=\"font-weight:700\" target=\"_blank\" rel=\"nofollow\">Vercel</a></li>\n            </ul>\n        </div>\n    </div>\n</div>\n\n<div class=\"row trm-scroll-animation\">\n    <div class=\"col-lg-12\">\n        <h5 class=\"trm-title-with-divider\">隐私权及评论 <span data-number=\"03\"></span></h5>\n        <div class=\"trm-card trm-active-el\">\n            本网站不会追踪访客行为，且不要求访客提供任何敏感信息（比如真实姓名、身份证号码、手机号等），因而也不存在任何隐私泄漏问题。访客参与评论，必须遵守法律法规和基本道德规范，文明礼貌。严禁发布任何有关淫秽、反动、暴力、博彩、恐吓、低俗的内容或违法信息，在尊重言论自由的同时请保持和平与理性。请勿对他人采取不友好的评论或其它过激行为。\n            <br><br>\n            本博客采用 <strong><a target=\"_blank\" rel=\"noopener\" href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\">知识产权署名-非商业性使用 4.0 国际许可协议</a></strong> 进行许可。\n            <br>转载前请联系作者获得许可，并注明原文链接。如有侵权，请留言告知，我会一周内删除。谢谢！\n        </div>\n    </div>\n</div>"},{"title":"分类","date":"2019-11-16T02:46:27.000Z","layout":"category","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-11-16 10:46:27\nlayout: category\n---\n","updated":"2024-03-06T07:42:59.000Z","path":"categories/index.html","comments":1,"_id":"cltgz7vqm000898lgf407cm2m","content":"","excerpt":"","more":""},{"title":"友情链接","date":"2019-11-16T02:46:27.000Z","type":"links","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\ndate: 2019-11-16 10:46:27\ntype: links\n---","updated":"2024-03-06T07:42:59.000Z","path":"links/index.html","comments":1,"layout":"page","_id":"cltgz7vqo000a98lg2hpv1f9c","content":"","excerpt":"","more":""},{"title":"分享一些我做的小玩具们🤣🤣🤣","single_column":true,"banner":{"bannerText":"All code is open-source and free to use","bannerTitle":"Interesting code"},"_content":"\n<div class=\"row trm-mb-20\">\n    <div class=\"col-lg-12\">\n        <blockquote>\n            分享一些我做的小玩具们🤣🤣🤣\n        </blockquote>\n    </div>\n</div>\n\n<div class=\"row\" style=\"padding: 0 16px;margin-bottom: var(--card-bottom-card);\">\n    <div class=\"col-lg-6\" style=\"padding-right: 4px;padding-left: 4px;\">\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/hexo-theme-async\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-theme-async&theme=flag-india\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-theme-async&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/hexo-theme-text\">\n            <img class=\"trm-light-icon\"  style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-theme-text\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-theme-text&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/hexo-editor\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-editor&theme=flag-india\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-editor&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/vscode-extension-cloud-storage\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vscode-extension-cloud-storage\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vscode-extension-cloud-storage&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/generate-vue-docs\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=generate-vue-docs&theme=flag-india\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=generate-vue-docs&theme=cobalt\"/>\n        </a>\n    </div>\n    <div class=\"col-lg-6\" style=\"padding-right: 4px;padding-left: 4px;\">\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/wallhaven-electron\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=wallhaven-electron\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=wallhaven-electron&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/wallhaven-mini\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=wallhaven-mini&theme=flag-india\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=wallhaven-mini&theme=cobalt \"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/code-shows\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=code-shows\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=code-shows&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/vscode-extension-yapi\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vscode-extension-yapi&theme=flag-india\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vscode-extension-yapi&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/vite-plugin-mock-server-plus\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vite-plugin-mock-server-plus\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vite-plugin-mock-server-plus&theme=cobalt\"/>\n        </a>\n    </div>\n</div>\n","source":"projects/index.md","raw":"---\ntitle: 分享一些我做的小玩具们🤣🤣🤣\n# type: project\nsingle_column: true\nbanner:\n    bannerText: All code is open-source and free to use\n    bannerTitle: Interesting code\n---\n\n<div class=\"row trm-mb-20\">\n    <div class=\"col-lg-12\">\n        <blockquote>\n            分享一些我做的小玩具们🤣🤣🤣\n        </blockquote>\n    </div>\n</div>\n\n<div class=\"row\" style=\"padding: 0 16px;margin-bottom: var(--card-bottom-card);\">\n    <div class=\"col-lg-6\" style=\"padding-right: 4px;padding-left: 4px;\">\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/hexo-theme-async\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-theme-async&theme=flag-india\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-theme-async&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/hexo-theme-text\">\n            <img class=\"trm-light-icon\"  style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-theme-text\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-theme-text&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/hexo-editor\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-editor&theme=flag-india\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-editor&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/vscode-extension-cloud-storage\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vscode-extension-cloud-storage\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vscode-extension-cloud-storage&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/generate-vue-docs\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=generate-vue-docs&theme=flag-india\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=generate-vue-docs&theme=cobalt\"/>\n        </a>\n    </div>\n    <div class=\"col-lg-6\" style=\"padding-right: 4px;padding-left: 4px;\">\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/wallhaven-electron\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=wallhaven-electron\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=wallhaven-electron&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/wallhaven-mini\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=wallhaven-mini&theme=flag-india\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=wallhaven-mini&theme=cobalt \"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/code-shows\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=code-shows\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=code-shows&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/vscode-extension-yapi\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vscode-extension-yapi&theme=flag-india\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vscode-extension-yapi&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/vite-plugin-mock-server-plus\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vite-plugin-mock-server-plus\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vite-plugin-mock-server-plus&theme=cobalt\"/>\n        </a>\n    </div>\n</div>\n","date":"2024-03-07T08:20:02.815Z","updated":"2024-03-06T07:42:59.000Z","path":"projects/index.html","comments":1,"layout":"page","_id":"cltgz7vqp000c98lgcsvsgypt","content":"<div class=\"row trm-mb-20\">\n    <div class=\"col-lg-12\">\n        <blockquote>\n            分享一些我做的小玩具们🤣🤣🤣\n        </blockquote>\n    </div>\n</div>\n\n<div class=\"row\" style=\"padding: 0 16px;margin-bottom: var(--card-bottom-card);\">\n    <div class=\"col-lg-6\" style=\"padding-right: 4px;padding-left: 4px;\">\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/hexo-theme-async\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-theme-async&theme=flag-india\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-theme-async&theme=cobalt\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/hexo-theme-text\">\n            <img class=\"trm-light-icon\"  style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-theme-text\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-theme-text&theme=cobalt\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/hexo-editor\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-editor&theme=flag-india\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-editor&theme=cobalt\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/vscode-extension-cloud-storage\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vscode-extension-cloud-storage\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vscode-extension-cloud-storage&theme=cobalt\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/generate-vue-docs\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=generate-vue-docs&theme=flag-india\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=generate-vue-docs&theme=cobalt\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n        </a>\n    </div>\n    <div class=\"col-lg-6\" style=\"padding-right: 4px;padding-left: 4px;\">\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/wallhaven-electron\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=wallhaven-electron\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=wallhaven-electron&theme=cobalt\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/wallhaven-mini\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=wallhaven-mini&theme=flag-india\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=wallhaven-mini&theme=cobalt \" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/code-shows\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=code-shows\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=code-shows&theme=cobalt\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/vscode-extension-yapi\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vscode-extension-yapi&theme=flag-india\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vscode-extension-yapi&theme=cobalt\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/vite-plugin-mock-server-plus\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vite-plugin-mock-server-plus\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vite-plugin-mock-server-plus&theme=cobalt\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n        </a>\n    </div>\n</div>\n","excerpt":"","more":"<div class=\"row trm-mb-20\">\n    <div class=\"col-lg-12\">\n        <blockquote>\n            分享一些我做的小玩具们🤣🤣🤣\n        </blockquote>\n    </div>\n</div>\n\n<div class=\"row\" style=\"padding: 0 16px;margin-bottom: var(--card-bottom-card);\">\n    <div class=\"col-lg-6\" style=\"padding-right: 4px;padding-left: 4px;\">\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/hexo-theme-async\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-theme-async&theme=flag-india\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-theme-async&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/hexo-theme-text\">\n            <img class=\"trm-light-icon\"  style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-theme-text\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-theme-text&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/hexo-editor\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-editor&theme=flag-india\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=hexo-editor&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/vscode-extension-cloud-storage\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vscode-extension-cloud-storage\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vscode-extension-cloud-storage&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/generate-vue-docs\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=generate-vue-docs&theme=flag-india\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=generate-vue-docs&theme=cobalt\"/>\n        </a>\n    </div>\n    <div class=\"col-lg-6\" style=\"padding-right: 4px;padding-left: 4px;\">\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/wallhaven-electron\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=wallhaven-electron\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=wallhaven-electron&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/wallhaven-mini\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=wallhaven-mini&theme=flag-india\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=wallhaven-mini&theme=cobalt \"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/code-shows\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=code-shows\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=code-shows&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/vscode-extension-yapi\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vscode-extension-yapi&theme=flag-india\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vscode-extension-yapi&theme=cobalt\"/>\n        </a>\n        <a class=\"\" target=\"_parent\" href=\"https://github.com/MaLuns/vite-plugin-mock-server-plus\">\n            <img class=\"trm-light-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vite-plugin-mock-server-plus\"/>\n            <img class=\"trm-dark-icon\" style=\"width:100%\" src=\"https://github-readme-stats.eurkon.com/api/pin/?username=Maluns&hide_border=true&repo=vite-plugin-mock-server-plus&theme=cobalt\"/>\n        </a>\n    </div>\n</div>\n"},{"layout":"false","_content":"<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>网站示例图生成</title>\n    <style>\n        :root {\n            --bg: #ffffff;\n            --color: #686868;\n            --from-bg: #fafafa;\n            --border-color: #979797;\n        }\n\n        :root.dark {\n            --bg: #2e2e2e;\n            --color: #949494;\n            --from-bg: #000000;\n            --border-color: #979797;\n        }\n\n        * {\n            padding: 0;\n            margin: 0;\n        }\n\n        body {\n            height: 100vh;\n            overflow: hidden;\n            background-color: var(--bg);\n        }\n\n        section {\n            width: 1200px;\n            position: fixed;\n            max-width: 1200px;\n            height: 600px;\n            margin: auto;\n            left: 0;\n            right: 0;\n            top: 0;\n            bottom: 0;\n        }\n\n        div {\n            background-repeat: no-repeat;\n            background-size: 100%;\n        }\n\n        .iphone {\n            background-image: url(sketch/imgs/iphone-optimised.png);\n            position: absolute;\n            width: 95px;\n            height: 196px;\n            top: 375px;\n            left: 300px;\n            z-index: 5;\n        }\n\n        .iphone iframe {\n            width: 320px;\n            height: 480px;\n            top: 32px;\n            left: 11px;\n            overflow-y: hidden;\n        }\n\n        .ipad {\n            background-image: url(sketch/imgs/ipad-optimised.png);\n            width: 246px;\n            height: 400px;\n            z-index: 3;\n            position: absolute;\n            left: 120px;\n            top: 230px;\n        }\n\n        .ipad iframe {\n            width: 768px;\n            height: 1024px;\n            top: 35px;\n            left: 38px;\n            overflow-y: hidden;\n        }\n\n        .large-screen {\n            position: absolute;\n            width: 566px;\n            height: 538px;\n            background-image: url(sketch/imgs/large-screen-optimised.png);\n            top: 0px;\n            left: 220px;\n            z-index: 1;\n        }\n\n        .large-screen iframe {\n            left: 28px;\n            top: 38px;\n            width: 1600px;\n            height: 992px;\n            transform: scale(0.3181);\n            -webkit-transform: scale(0.3181);\n            -o-transform: scale(0.3181);\n            -ms-transform: scale(0.3181);\n            -moz-transform: scale(0.3181);\n            transform-origin: top left;\n            -webkit-transform-origin: top left;\n            -o-transform-origin: top left;\n            -ms-transform-origin: top left;\n            -moz-transform-origin: top left;\n        }\n\n        .laptop-screen {\n            background-image: url(sketch/imgs/laptop-screen-optimised.png);\n            width: 477px;\n            height: 307px;\n            top: 264px;\n            left: 560px;\n            position: absolute;\n            z-index: 2;\n        }\n\n        .laptop-screen iframe {\n            width: 1280px;\n            height: 802px;\n            top: 26px;\n            left: 60px;\n            transform: scale(0.277);\n            -webkit-transform: scale(0.277);\n            -o-transform: scale(0.277);\n            -ms-transform: scale(0.277);\n            -moz-transform: scale(0.277);\n            transform-origin: top left;\n            -webkit-transform-origin: top left;\n            -o-transform-origin: top left;\n            -ms-transform-origin: top left;\n            -moz-transform-origin: top left;\n        }\n\n        iframe {\n            transform: scale(0.219);\n            -webkit-transform: scale(0.219);\n            -o-transform: scale(0.219);\n            -ms-transform: scale(0.219);\n            -moz-transform: scale(0.219);\n            transform-origin: top left;\n            -webkit-transform-origin: top left;\n            -o-transform-origin: top left;\n            -ms-transform-origin: top left;\n            -moz-transform-origin: top left;\n            margin: 0;\n            padding: 0;\n            position: relative;\n            background-color: var(--bg);\n            border: none;\n        }\n\n        .rwd {\n            position: fixed;\n            z-index: 10;\n            width: 100%;\n            padding: 20px 0;\n            line-height: 2;\n            user-select: none;\n            display: flex;\n            justify-content: center;\n            background-color: var(--from-bg);\n            box-shadow: 0 0 20px #0000002e;\n            transition: transform .3s;\n        }\n\n        .rwd.hide {\n            transform: translateY(-100%)\n        }\n\n        .hide-btn {\n            cursor: pointer;\n            position: absolute;\n            bottom: -30px;\n            right: 0;\n            height: 30px;\n            line-height: 30px;\n            width: 100px;\n            text-align: center;\n            color: var(--color);\n            background-color: var(--from-bg);\n            box-shadow: 3px 5px 6px #00000024;\n        }\n\n        .input {\n            display: inline-block;\n            background-color: transparent;\n            border: 1px solid var(--border-color);\n            color: var(--color);\n            line-height: 2;\n            font-size: 1.4em;\n            text-align: center;\n            width: 60%;\n            border-right: 0px solid transparent !important;\n            border-radius: 8px 0 0 8px;\n            outline: none;\n        }\n\n        .button {\n            display: inline-block;\n            color: var(--color);\n            padding: 0 20px;\n            margin: 0;\n            font-size: 1.4em;\n            text-align: center;\n            border: solid 1px var(--border-color);\n            cursor: pointer;\n        }\n\n        .button+.button {\n            border-left: 0px solid transparent;\n        }\n    </style>\n</head>\n\n<body>\n    <section id=\"demo\">\n        <div class=\"ipad\">\n            <iframe src=\"\"> </iframe>\n        </div>\n        <div class=\"iphone\">\n            <iframe src=\"\"> </iframe>\n        </div>\n        <div class=\"laptop-screen\">\n            <iframe src=\"\"> </iframe>\n        </div>\n        <div class=\"large-screen\">\n            <iframe src=\"\"> </iframe>\n        </div>\n    </section>\n    <div id=\"rwd\" class=\"rwd\">\n        <input type=\"text\" placeholder=\"Please enter the preview URL\" class=\"input\" id=\"sitesrc\">\n        <div id=\"setsrc\" class=\"button\"> GO </div>\n        <div id=\"theme\" class=\"button\"> Light </div>\n        <div id=\"expansion\" class=\"hide-btn\">\n            collapse\n        </div>\n    </div>\n    <script>\n        document.getElementById(\"theme\").addEventListener(\"click\", function () {\n            this.innerText = document.documentElement.classList.contains('dark') ? 'Dark' : 'Light'\n            document.documentElement.classList.toggle('dark')\n        })\n        document.getElementById(\"setsrc\").addEventListener(\"click\", function () {\n            const src = document.getElementById(\"sitesrc\").value\n            const iframes = document.querySelectorAll(\"iframe\")\n            Array.from(iframes).forEach(item => {\n                item.src = src\n            })\n        })\n        document.getElementById(\"expansion\").addEventListener(\"click\", function () {\n            this.innerText = document.getElementById(\"rwd\").classList.contains('hide') ? 'collapse' : 'expansion'\n            document.getElementById(\"rwd\").classList.toggle(\"hide\")\n        })\n\n    </script>\n</body>\n\n</html>","source":"sketch/index.html","raw":"---\nlayout: false\n---\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>网站示例图生成</title>\n    <style>\n        :root {\n            --bg: #ffffff;\n            --color: #686868;\n            --from-bg: #fafafa;\n            --border-color: #979797;\n        }\n\n        :root.dark {\n            --bg: #2e2e2e;\n            --color: #949494;\n            --from-bg: #000000;\n            --border-color: #979797;\n        }\n\n        * {\n            padding: 0;\n            margin: 0;\n        }\n\n        body {\n            height: 100vh;\n            overflow: hidden;\n            background-color: var(--bg);\n        }\n\n        section {\n            width: 1200px;\n            position: fixed;\n            max-width: 1200px;\n            height: 600px;\n            margin: auto;\n            left: 0;\n            right: 0;\n            top: 0;\n            bottom: 0;\n        }\n\n        div {\n            background-repeat: no-repeat;\n            background-size: 100%;\n        }\n\n        .iphone {\n            background-image: url(sketch/imgs/iphone-optimised.png);\n            position: absolute;\n            width: 95px;\n            height: 196px;\n            top: 375px;\n            left: 300px;\n            z-index: 5;\n        }\n\n        .iphone iframe {\n            width: 320px;\n            height: 480px;\n            top: 32px;\n            left: 11px;\n            overflow-y: hidden;\n        }\n\n        .ipad {\n            background-image: url(sketch/imgs/ipad-optimised.png);\n            width: 246px;\n            height: 400px;\n            z-index: 3;\n            position: absolute;\n            left: 120px;\n            top: 230px;\n        }\n\n        .ipad iframe {\n            width: 768px;\n            height: 1024px;\n            top: 35px;\n            left: 38px;\n            overflow-y: hidden;\n        }\n\n        .large-screen {\n            position: absolute;\n            width: 566px;\n            height: 538px;\n            background-image: url(sketch/imgs/large-screen-optimised.png);\n            top: 0px;\n            left: 220px;\n            z-index: 1;\n        }\n\n        .large-screen iframe {\n            left: 28px;\n            top: 38px;\n            width: 1600px;\n            height: 992px;\n            transform: scale(0.3181);\n            -webkit-transform: scale(0.3181);\n            -o-transform: scale(0.3181);\n            -ms-transform: scale(0.3181);\n            -moz-transform: scale(0.3181);\n            transform-origin: top left;\n            -webkit-transform-origin: top left;\n            -o-transform-origin: top left;\n            -ms-transform-origin: top left;\n            -moz-transform-origin: top left;\n        }\n\n        .laptop-screen {\n            background-image: url(sketch/imgs/laptop-screen-optimised.png);\n            width: 477px;\n            height: 307px;\n            top: 264px;\n            left: 560px;\n            position: absolute;\n            z-index: 2;\n        }\n\n        .laptop-screen iframe {\n            width: 1280px;\n            height: 802px;\n            top: 26px;\n            left: 60px;\n            transform: scale(0.277);\n            -webkit-transform: scale(0.277);\n            -o-transform: scale(0.277);\n            -ms-transform: scale(0.277);\n            -moz-transform: scale(0.277);\n            transform-origin: top left;\n            -webkit-transform-origin: top left;\n            -o-transform-origin: top left;\n            -ms-transform-origin: top left;\n            -moz-transform-origin: top left;\n        }\n\n        iframe {\n            transform: scale(0.219);\n            -webkit-transform: scale(0.219);\n            -o-transform: scale(0.219);\n            -ms-transform: scale(0.219);\n            -moz-transform: scale(0.219);\n            transform-origin: top left;\n            -webkit-transform-origin: top left;\n            -o-transform-origin: top left;\n            -ms-transform-origin: top left;\n            -moz-transform-origin: top left;\n            margin: 0;\n            padding: 0;\n            position: relative;\n            background-color: var(--bg);\n            border: none;\n        }\n\n        .rwd {\n            position: fixed;\n            z-index: 10;\n            width: 100%;\n            padding: 20px 0;\n            line-height: 2;\n            user-select: none;\n            display: flex;\n            justify-content: center;\n            background-color: var(--from-bg);\n            box-shadow: 0 0 20px #0000002e;\n            transition: transform .3s;\n        }\n\n        .rwd.hide {\n            transform: translateY(-100%)\n        }\n\n        .hide-btn {\n            cursor: pointer;\n            position: absolute;\n            bottom: -30px;\n            right: 0;\n            height: 30px;\n            line-height: 30px;\n            width: 100px;\n            text-align: center;\n            color: var(--color);\n            background-color: var(--from-bg);\n            box-shadow: 3px 5px 6px #00000024;\n        }\n\n        .input {\n            display: inline-block;\n            background-color: transparent;\n            border: 1px solid var(--border-color);\n            color: var(--color);\n            line-height: 2;\n            font-size: 1.4em;\n            text-align: center;\n            width: 60%;\n            border-right: 0px solid transparent !important;\n            border-radius: 8px 0 0 8px;\n            outline: none;\n        }\n\n        .button {\n            display: inline-block;\n            color: var(--color);\n            padding: 0 20px;\n            margin: 0;\n            font-size: 1.4em;\n            text-align: center;\n            border: solid 1px var(--border-color);\n            cursor: pointer;\n        }\n\n        .button+.button {\n            border-left: 0px solid transparent;\n        }\n    </style>\n</head>\n\n<body>\n    <section id=\"demo\">\n        <div class=\"ipad\">\n            <iframe src=\"\"> </iframe>\n        </div>\n        <div class=\"iphone\">\n            <iframe src=\"\"> </iframe>\n        </div>\n        <div class=\"laptop-screen\">\n            <iframe src=\"\"> </iframe>\n        </div>\n        <div class=\"large-screen\">\n            <iframe src=\"\"> </iframe>\n        </div>\n    </section>\n    <div id=\"rwd\" class=\"rwd\">\n        <input type=\"text\" placeholder=\"Please enter the preview URL\" class=\"input\" id=\"sitesrc\">\n        <div id=\"setsrc\" class=\"button\"> GO </div>\n        <div id=\"theme\" class=\"button\"> Light </div>\n        <div id=\"expansion\" class=\"hide-btn\">\n            collapse\n        </div>\n    </div>\n    <script>\n        document.getElementById(\"theme\").addEventListener(\"click\", function () {\n            this.innerText = document.documentElement.classList.contains('dark') ? 'Dark' : 'Light'\n            document.documentElement.classList.toggle('dark')\n        })\n        document.getElementById(\"setsrc\").addEventListener(\"click\", function () {\n            const src = document.getElementById(\"sitesrc\").value\n            const iframes = document.querySelectorAll(\"iframe\")\n            Array.from(iframes).forEach(item => {\n                item.src = src\n            })\n        })\n        document.getElementById(\"expansion\").addEventListener(\"click\", function () {\n            this.innerText = document.getElementById(\"rwd\").classList.contains('hide') ? 'collapse' : 'expansion'\n            document.getElementById(\"rwd\").classList.toggle(\"hide\")\n        })\n\n    </script>\n</body>\n\n</html>","date":"2024-03-07T08:20:02.816Z","updated":"2024-03-06T07:42:59.000Z","path":"sketch/index.html","title":"","comments":1,"_id":"cltgz7vqv000g98lg75wfg3b5","content":"<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>网站示例图生成</title>\n    <style>\n        :root {\n            --bg: #ffffff;\n            --color: #686868;\n            --from-bg: #fafafa;\n            --border-color: #979797;\n        }\n\n        :root.dark {\n            --bg: #2e2e2e;\n            --color: #949494;\n            --from-bg: #000000;\n            --border-color: #979797;\n        }\n\n        * {\n            padding: 0;\n            margin: 0;\n        }\n\n        body {\n            height: 100vh;\n            overflow: hidden;\n            background-color: var(--bg);\n        }\n\n        section {\n            width: 1200px;\n            position: fixed;\n            max-width: 1200px;\n            height: 600px;\n            margin: auto;\n            left: 0;\n            right: 0;\n            top: 0;\n            bottom: 0;\n        }\n\n        div {\n            background-repeat: no-repeat;\n            background-size: 100%;\n        }\n\n        .iphone {\n            background-image: url(sketch/imgs/iphone-optimised.png);\n            position: absolute;\n            width: 95px;\n            height: 196px;\n            top: 375px;\n            left: 300px;\n            z-index: 5;\n        }\n\n        .iphone iframe {\n            width: 320px;\n            height: 480px;\n            top: 32px;\n            left: 11px;\n            overflow-y: hidden;\n        }\n\n        .ipad {\n            background-image: url(sketch/imgs/ipad-optimised.png);\n            width: 246px;\n            height: 400px;\n            z-index: 3;\n            position: absolute;\n            left: 120px;\n            top: 230px;\n        }\n\n        .ipad iframe {\n            width: 768px;\n            height: 1024px;\n            top: 35px;\n            left: 38px;\n            overflow-y: hidden;\n        }\n\n        .large-screen {\n            position: absolute;\n            width: 566px;\n            height: 538px;\n            background-image: url(sketch/imgs/large-screen-optimised.png);\n            top: 0px;\n            left: 220px;\n            z-index: 1;\n        }\n\n        .large-screen iframe {\n            left: 28px;\n            top: 38px;\n            width: 1600px;\n            height: 992px;\n            transform: scale(0.3181);\n            -webkit-transform: scale(0.3181);\n            -o-transform: scale(0.3181);\n            -ms-transform: scale(0.3181);\n            -moz-transform: scale(0.3181);\n            transform-origin: top left;\n            -webkit-transform-origin: top left;\n            -o-transform-origin: top left;\n            -ms-transform-origin: top left;\n            -moz-transform-origin: top left;\n        }\n\n        .laptop-screen {\n            background-image: url(sketch/imgs/laptop-screen-optimised.png);\n            width: 477px;\n            height: 307px;\n            top: 264px;\n            left: 560px;\n            position: absolute;\n            z-index: 2;\n        }\n\n        .laptop-screen iframe {\n            width: 1280px;\n            height: 802px;\n            top: 26px;\n            left: 60px;\n            transform: scale(0.277);\n            -webkit-transform: scale(0.277);\n            -o-transform: scale(0.277);\n            -ms-transform: scale(0.277);\n            -moz-transform: scale(0.277);\n            transform-origin: top left;\n            -webkit-transform-origin: top left;\n            -o-transform-origin: top left;\n            -ms-transform-origin: top left;\n            -moz-transform-origin: top left;\n        }\n\n        iframe {\n            transform: scale(0.219);\n            -webkit-transform: scale(0.219);\n            -o-transform: scale(0.219);\n            -ms-transform: scale(0.219);\n            -moz-transform: scale(0.219);\n            transform-origin: top left;\n            -webkit-transform-origin: top left;\n            -o-transform-origin: top left;\n            -ms-transform-origin: top left;\n            -moz-transform-origin: top left;\n            margin: 0;\n            padding: 0;\n            position: relative;\n            background-color: var(--bg);\n            border: none;\n        }\n\n        .rwd {\n            position: fixed;\n            z-index: 10;\n            width: 100%;\n            padding: 20px 0;\n            line-height: 2;\n            user-select: none;\n            display: flex;\n            justify-content: center;\n            background-color: var(--from-bg);\n            box-shadow: 0 0 20px #0000002e;\n            transition: transform .3s;\n        }\n\n        .rwd.hide {\n            transform: translateY(-100%)\n        }\n\n        .hide-btn {\n            cursor: pointer;\n            position: absolute;\n            bottom: -30px;\n            right: 0;\n            height: 30px;\n            line-height: 30px;\n            width: 100px;\n            text-align: center;\n            color: var(--color);\n            background-color: var(--from-bg);\n            box-shadow: 3px 5px 6px #00000024;\n        }\n\n        .input {\n            display: inline-block;\n            background-color: transparent;\n            border: 1px solid var(--border-color);\n            color: var(--color);\n            line-height: 2;\n            font-size: 1.4em;\n            text-align: center;\n            width: 60%;\n            border-right: 0px solid transparent !important;\n            border-radius: 8px 0 0 8px;\n            outline: none;\n        }\n\n        .button {\n            display: inline-block;\n            color: var(--color);\n            padding: 0 20px;\n            margin: 0;\n            font-size: 1.4em;\n            text-align: center;\n            border: solid 1px var(--border-color);\n            cursor: pointer;\n        }\n\n        .button+.button {\n            border-left: 0px solid transparent;\n        }\n    </style>\n</head>\n\n<body>\n    <section id=\"demo\">\n        <div class=\"ipad\">\n            <iframe src=\"\"> </iframe>\n        </div>\n        <div class=\"iphone\">\n            <iframe src=\"\"> </iframe>\n        </div>\n        <div class=\"laptop-screen\">\n            <iframe src=\"\"> </iframe>\n        </div>\n        <div class=\"large-screen\">\n            <iframe src=\"\"> </iframe>\n        </div>\n    </section>\n    <div id=\"rwd\" class=\"rwd\">\n        <input type=\"text\" placeholder=\"Please enter the preview URL\" class=\"input\" id=\"sitesrc\">\n        <div id=\"setsrc\" class=\"button\"> GO </div>\n        <div id=\"theme\" class=\"button\"> Light </div>\n        <div id=\"expansion\" class=\"hide-btn\">\n            collapse\n        </div>\n    </div>\n    <script>\n        document.getElementById(\"theme\").addEventListener(\"click\", function () {\n            this.innerText = document.documentElement.classList.contains('dark') ? 'Dark' : 'Light'\n            document.documentElement.classList.toggle('dark')\n        })\n        document.getElementById(\"setsrc\").addEventListener(\"click\", function () {\n            const src = document.getElementById(\"sitesrc\").value\n            const iframes = document.querySelectorAll(\"iframe\")\n            Array.from(iframes).forEach(item => {\n                item.src = src\n            })\n        })\n        document.getElementById(\"expansion\").addEventListener(\"click\", function () {\n            this.innerText = document.getElementById(\"rwd\").classList.contains('hide') ? 'collapse' : 'expansion'\n            document.getElementById(\"rwd\").classList.toggle(\"hide\")\n        })\n\n    </script>\n</body>\n\n</html>","excerpt":"","more":"<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>网站示例图生成</title>\n    <style>\n        :root {\n            --bg: #ffffff;\n            --color: #686868;\n            --from-bg: #fafafa;\n            --border-color: #979797;\n        }\n\n        :root.dark {\n            --bg: #2e2e2e;\n            --color: #949494;\n            --from-bg: #000000;\n            --border-color: #979797;\n        }\n\n        * {\n            padding: 0;\n            margin: 0;\n        }\n\n        body {\n            height: 100vh;\n            overflow: hidden;\n            background-color: var(--bg);\n        }\n\n        section {\n            width: 1200px;\n            position: fixed;\n            max-width: 1200px;\n            height: 600px;\n            margin: auto;\n            left: 0;\n            right: 0;\n            top: 0;\n            bottom: 0;\n        }\n\n        div {\n            background-repeat: no-repeat;\n            background-size: 100%;\n        }\n\n        .iphone {\n            background-image: url(sketch/imgs/iphone-optimised.png);\n            position: absolute;\n            width: 95px;\n            height: 196px;\n            top: 375px;\n            left: 300px;\n            z-index: 5;\n        }\n\n        .iphone iframe {\n            width: 320px;\n            height: 480px;\n            top: 32px;\n            left: 11px;\n            overflow-y: hidden;\n        }\n\n        .ipad {\n            background-image: url(sketch/imgs/ipad-optimised.png);\n            width: 246px;\n            height: 400px;\n            z-index: 3;\n            position: absolute;\n            left: 120px;\n            top: 230px;\n        }\n\n        .ipad iframe {\n            width: 768px;\n            height: 1024px;\n            top: 35px;\n            left: 38px;\n            overflow-y: hidden;\n        }\n\n        .large-screen {\n            position: absolute;\n            width: 566px;\n            height: 538px;\n            background-image: url(sketch/imgs/large-screen-optimised.png);\n            top: 0px;\n            left: 220px;\n            z-index: 1;\n        }\n\n        .large-screen iframe {\n            left: 28px;\n            top: 38px;\n            width: 1600px;\n            height: 992px;\n            transform: scale(0.3181);\n            -webkit-transform: scale(0.3181);\n            -o-transform: scale(0.3181);\n            -ms-transform: scale(0.3181);\n            -moz-transform: scale(0.3181);\n            transform-origin: top left;\n            -webkit-transform-origin: top left;\n            -o-transform-origin: top left;\n            -ms-transform-origin: top left;\n            -moz-transform-origin: top left;\n        }\n\n        .laptop-screen {\n            background-image: url(sketch/imgs/laptop-screen-optimised.png);\n            width: 477px;\n            height: 307px;\n            top: 264px;\n            left: 560px;\n            position: absolute;\n            z-index: 2;\n        }\n\n        .laptop-screen iframe {\n            width: 1280px;\n            height: 802px;\n            top: 26px;\n            left: 60px;\n            transform: scale(0.277);\n            -webkit-transform: scale(0.277);\n            -o-transform: scale(0.277);\n            -ms-transform: scale(0.277);\n            -moz-transform: scale(0.277);\n            transform-origin: top left;\n            -webkit-transform-origin: top left;\n            -o-transform-origin: top left;\n            -ms-transform-origin: top left;\n            -moz-transform-origin: top left;\n        }\n\n        iframe {\n            transform: scale(0.219);\n            -webkit-transform: scale(0.219);\n            -o-transform: scale(0.219);\n            -ms-transform: scale(0.219);\n            -moz-transform: scale(0.219);\n            transform-origin: top left;\n            -webkit-transform-origin: top left;\n            -o-transform-origin: top left;\n            -ms-transform-origin: top left;\n            -moz-transform-origin: top left;\n            margin: 0;\n            padding: 0;\n            position: relative;\n            background-color: var(--bg);\n            border: none;\n        }\n\n        .rwd {\n            position: fixed;\n            z-index: 10;\n            width: 100%;\n            padding: 20px 0;\n            line-height: 2;\n            user-select: none;\n            display: flex;\n            justify-content: center;\n            background-color: var(--from-bg);\n            box-shadow: 0 0 20px #0000002e;\n            transition: transform .3s;\n        }\n\n        .rwd.hide {\n            transform: translateY(-100%)\n        }\n\n        .hide-btn {\n            cursor: pointer;\n            position: absolute;\n            bottom: -30px;\n            right: 0;\n            height: 30px;\n            line-height: 30px;\n            width: 100px;\n            text-align: center;\n            color: var(--color);\n            background-color: var(--from-bg);\n            box-shadow: 3px 5px 6px #00000024;\n        }\n\n        .input {\n            display: inline-block;\n            background-color: transparent;\n            border: 1px solid var(--border-color);\n            color: var(--color);\n            line-height: 2;\n            font-size: 1.4em;\n            text-align: center;\n            width: 60%;\n            border-right: 0px solid transparent !important;\n            border-radius: 8px 0 0 8px;\n            outline: none;\n        }\n\n        .button {\n            display: inline-block;\n            color: var(--color);\n            padding: 0 20px;\n            margin: 0;\n            font-size: 1.4em;\n            text-align: center;\n            border: solid 1px var(--border-color);\n            cursor: pointer;\n        }\n\n        .button+.button {\n            border-left: 0px solid transparent;\n        }\n    </style>\n</head>\n\n<body>\n    <section id=\"demo\">\n        <div class=\"ipad\">\n            <iframe src=\"\"> </iframe>\n        </div>\n        <div class=\"iphone\">\n            <iframe src=\"\"> </iframe>\n        </div>\n        <div class=\"laptop-screen\">\n            <iframe src=\"\"> </iframe>\n        </div>\n        <div class=\"large-screen\">\n            <iframe src=\"\"> </iframe>\n        </div>\n    </section>\n    <div id=\"rwd\" class=\"rwd\">\n        <input type=\"text\" placeholder=\"Please enter the preview URL\" class=\"input\" id=\"sitesrc\">\n        <div id=\"setsrc\" class=\"button\"> GO </div>\n        <div id=\"theme\" class=\"button\"> Light </div>\n        <div id=\"expansion\" class=\"hide-btn\">\n            collapse\n        </div>\n    </div>\n    <script>\n        document.getElementById(\"theme\").addEventListener(\"click\", function () {\n            this.innerText = document.documentElement.classList.contains('dark') ? 'Dark' : 'Light'\n            document.documentElement.classList.toggle('dark')\n        })\n        document.getElementById(\"setsrc\").addEventListener(\"click\", function () {\n            const src = document.getElementById(\"sitesrc\").value\n            const iframes = document.querySelectorAll(\"iframe\")\n            Array.from(iframes).forEach(item => {\n                item.src = src\n            })\n        })\n        document.getElementById(\"expansion\").addEventListener(\"click\", function () {\n            this.innerText = document.getElementById(\"rwd\").classList.contains('hide') ? 'collapse' : 'expansion'\n            document.getElementById(\"rwd\").classList.toggle(\"hide\")\n        })\n\n    </script>\n</body>\n\n</html>"},{"title":"标签","date":"2019-11-16T02:46:27.000Z","layout":"tag","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-11-16 10:46:27\nlayout: tag\n---\n","updated":"2024-03-06T07:42:59.000Z","path":"tags/index.html","comments":1,"_id":"cltgz7vqw000i98lg5t4hfdjh","content":"","excerpt":"","more":""}],"Post":[{"title":"前端面试记录","comment":true,"date":"2022-04-13T09:24:41.000Z","description":null,"keywords":"面试题","_content":"\n今天接了个视频面试，没有提前看看面试题，结果一些基础东西回答东一点西一点的，看来还是需要看看题巩固下了😅。\n<!--more-->\n\n## CSS\n\n**问：如何使用 Flex 实现三列列表，元素之间间隔 10px，但是两边不需要间距？**\n首先想到的是设置 **flex-wrap: wrap** 让 flex 换行，然后设置元素 **margin: 0 5px**，然后去消除两边间距。后来想想其实陷入了个误区，其实只用设置中间元素就间距就行。\n\n实现如下：\n\n``` html\n<div class=\"flex\">\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n</div>\n```\n``` css\n.flex {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.flex div {\n    height: 200px;\n    background-color: #38acfa;\n    margin: 5px 0;\n    width: calc((100% - 20px) / 3);\n}\n\n.flex div:nth-child(3n-1) {\n    margin: 5px 10px;\n}\n```\n\n## JavaScript\n\n**问：说出下面答应顺序(类似下面这种)？**\n``` js\nconsole.log(1);\nnew Promise(() => {\n    console.log(2);\n})\n\nnew Promise((resolve, reject) => {\n    resolve(4);\n    setTimeout(() => {\n        console.log(6)\n    });\n}).then((val) => {\n    console.log(val)\n\n    new Promise((resolve, reject) => {\n        console.log(8);\n        resolve(9);\n    }).then(console.log).then(() => {\n        console.log(10);\n    })\n})\n\nsetTimeout(() => {\n    console.log(5)\n\n    new Promise((resolve, reject) => {\n        resolve(11);\n    }).then(console.log)\n});\nconsole.log(3);\n```\n一顿思索然后就把 setTimeout 和 Promise 顺序搞反了 😅。其实只需要知道在浏览器里宏任务和微任务执行顺序就很好理解这类型题目。\n\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1337 1080\" width=\"100%\" >\n  <rect x=\"0\" y=\"0\" width=\"1337\" height=\"1080\" fill=\"#ffffff\"></rect>\n  <g stroke-linecap=\"round\" transform=\"translate(570 10) rotate(0 120 50)\">\n    <path d=\"M3.2 -0.29 C69.71 1.32, 144.53 -1.17, 240.96 -3.23 M-0.44 1.07 C52.39 -0.7, 106.43 -1.29, 240.04 1.51 M239.03 -2.71 C239.24 27.76, 237.06 59.93, 242.86 99.52 M240.66 -1.69 C237.16 40.04, 238.41 78.31, 241.34 100.98 M241.11 98.09 C146.92 102.41, 57.57 100.46, 0.41 102.07 M239.94 98.91 C159.69 105.1, 80.39 103.32, -1.3 99.33 M-1.34 96.96 C3.63 62.23, 1.03 32.4, -1.96 -1.43 M1.32 99.27 C-0.4 68.68, 0.62 40.25, -1.52 0.96\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n  </g>\n  <g transform=\"translate(575 37.5) rotate(0 115 22.5)\"><text x=\"115\" y=\"32\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">宏任务</text></g>\n  <g stroke-linecap=\"round\">\n    <g transform=\"translate(690 111) rotate(0 -1.9062701757416107 80.56367796391248)\">\n      <path d=\"M-0.09 0.85 C-0.28 27.28, -0.03 132.26, -0.2 158.42 M-3.58 -1.15 C-4.24 25.8, -2.55 135.28, -2.55 162.28\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(690 111) rotate(0 -1.9062701757416107 80.56367796391248)\">\n      <path d=\"M-11.83 133.89 C-8.96 141.93, -6.32 154.51, 0.58 162.68 M-13.71 135.6 C-10.56 143.23, -3.56 153.9, -0.58 162.03\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(690 111) rotate(0 -1.9062701757416107 80.56367796391248)\">\n      <path d=\"M8.7 133.72 C4.71 141.8, 0.5 154.44, 0.58 162.68 M6.81 135.43 C2.34 143.06, 1.73 153.8, -0.58 162.03\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n  </g>\n  <g stroke-linecap=\"round\" transform=\"translate(470 610) rotate(0 240 60)\">\n    <path d=\"M-1.05 -0.31 C164.77 -1.56, 330.78 -1.76, 478.55 0.33 M0.24 -0.79 C172.1 2.81, 345.56 2.18, 480.02 0.04 M481.67 -0.12 C479.2 24.92, 479.17 52.84, 476.21 123.75 M479.69 1.52 C479.72 38.82, 482.69 77.77, 480.32 119.23 M478.41 119.81 C317.33 119.98, 154.15 120.85, 0.39 119.34 M479.66 120.19 C348.48 117.03, 216.88 116.32, 0.4 120.17 M3.29 119.71 C-1.72 83.68, -2.54 43.59, 0.31 3.91 M-1.96 121.87 C-2.03 93.9, 1.13 69.06, 0.26 0.8\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n  </g>\n  <g transform=\"translate(475 625) rotate(0 235 45)\"><text x=\"235\" y=\"32\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">执行微任务，里面有微任务产</text><text x=\"235\" y=\"77\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">生会继续执行</text></g>\n  <g stroke-linecap=\"round\" transform=\"translate(530 270) rotate(0 160 80)\">\n    <path d=\"M162.67 -0.12 C195.36 16.81, 231.04 35.96, 316.21 84.75 M160.69 1.52 C211.9 28.86, 266.38 55.16, 320.32 80.23 M316.34 80.57 C264.36 108.07, 208.47 136.77, 161.89 158.48 M319.22 81.44 C278.42 100.28, 235.38 120.36, 161.93 160.39 M164.29 159.71 C110.69 135.44, 60.79 107.84, 0.31 84.91 M159.04 161.87 C123.55 145.87, 91.27 130.06, 0.26 81.8 M0.3 78.62 C62.19 47.95, 129.47 16.78, 158.47 -0.46 M0.17 79.11 C60.5 45.8, 122.32 14.26, 159.13 -0.23\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n  </g>\n  <g transform=\"translate(535 327.5) rotate(0 155 22.5)\"><text x=\"155\" y=\"32\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是否有微任务</text></g>\n  <g stroke-linecap=\"round\">\n    <g transform=\"translate(691.6751695338637 429.55010332942015) rotate(0 -1.531027732677785 90.74479518074531)\">\n      <path d=\"M-1.68 1.89 C-1.75 32.27, -2.76 151.45, -2.82 181.04 M2.61 0.45 C2.28 30.03, -4.58 146.09, -5.67 176.35\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(691.6751695338637 429.55010332942015) rotate(0 -1.531027732677785 90.74479518074531)\">\n      <path d=\"M-11.86 146.07 C-12.06 153.52, -12.41 159.56, -7.41 175.14 M-16.36 147.24 C-13.49 157.62, -10.52 165.93, -5.35 175.77\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(691.6751695338637 429.55010332942015) rotate(0 -1.531027732677785 90.74479518074531)\">\n      <path d=\"M8.64 147.06 C4.05 154.05, -0.71 159.88, -7.41 175.14 M4.14 148.23 C0.94 158.11, -2.16 166.13, -5.35 175.77\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n  </g>\n  <g stroke-linecap=\"round\" transform=\"translate(570 970) rotate(0 120 50)\">\n    <path d=\"M-2.62 -0.33 C52.82 1.8, 108.69 1.41, 238.84 1.33 M-1.61 -0.91 C68.67 2.56, 140.92 2.71, 238.96 1.16 M236.51 -2 C240.85 26.07, 240.53 49.34, 239.76 101.44 M239.65 1.07 C237.45 22.27, 237.06 40.77, 240.47 100.02 M237.33 99.13 C149.53 95.53, 58.73 96.65, -0.15 100.79 M240.78 98.48 C165.06 95.69, 88.07 96.99, 1.41 100.92 M1.35 97.12 C-2.91 72.8, 2.29 41.32, -2.48 -2.93 M-1.94 99.34 C-1.77 65.35, 0.58 28.46, -1.61 1.73\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n  </g>\n  <g transform=\"translate(575 997.5) rotate(0 115 22.5)\"><text x=\"115\" y=\"32\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">浏览器渲染</text></g>\n  <g stroke-linecap=\"round\">\n    <g transform=\"translate(690 731) rotate(0 0.9860309289023235 118.84293444115679)\">\n      <path d=\"M2.32 0.13 C2.34 40.14, -1.05 200.34, -1.74 239.95 M0.14 -2.27 C1.23 36.97, 3.08 195.49, 3.71 236\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(690 731) rotate(0 0.9860309289023235 118.84293444115679)\">\n      <path d=\"M-6.75 205.47 C-1.67 211.7, -2.22 223.86, 0.22 234 M-5.63 207.84 C-2.38 215.19, -0.61 227.84, 3.37 237.08\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(690 731) rotate(0 0.9860309289023235 118.84293444115679)\">\n      <path d=\"M13.77 205.19 C14.04 211.82, 8.69 224.05, 0.22 234 M14.89 207.56 C11.49 215.07, 6.6 227.81, 3.37 237.08\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n  </g>\n  <g transform=\"translate(730 470) rotate(0 18.5 25.5)\"><text x=\"18.5\" y=\"38\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">有</text></g>\n  <g stroke-linecap=\"round\">\n    <g transform=\"translate(849.1728389913155 351.5049613710494) rotate(0 180.8271611563838 330.50207458590285)\">\n      <path d=\"M-9.5 -1.5 C57.51 38.17, 400.53 130.07, 395.94 240.44 C391.35 350.8, 35.16 589.81, -37.01 660.68 M-5.71 3.85 C62.04 45.1, 406.4 133.53, 400.83 243.31 C395.25 353.09, 33.78 592.88, -39.17 662.51\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(849.1728389913155 351.5049613710494) rotate(0 180.8271611563838 330.50207458590285)\">\n      <path d=\"M-25.67 632.93 C-30.23 644.13, -36.77 652.46, -35.41 663.3 M-22.62 635.33 C-31 645.42, -35.77 658.89, -37.73 663.55\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(849.1728389913155 351.5049613710494) rotate(0 180.8271611563838 330.50207458590285)\">\n      <path d=\"M-12.88 648.98 C-21.93 654.66, -32.68 657.7, -35.41 663.3 M-9.83 651.38 C-23.48 654.89, -33.36 661.95, -37.73 663.55\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n  </g>\n  <g transform=\"translate(1290 570) rotate(0 18.5 25.5)\"><text x=\"18.5\" y=\"38\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">否</text></g>\n  <g stroke-linecap=\"round\">\n    <g transform=\"translate(651.879869120748 1004.9594971081597) rotate(0 -351.8798691228883 -474.95949710815967)\">\n      <path d=\"M-66.46 -0.22 C-161.93 -92.02, -637.02 -388.84, -639.29 -547.24 C-641.55 -705.64, -173.58 -883.23, -80.08 -950.61 M-61.88 5.04 C-157.67 -87.69, -638.42 -390.97, -641.88 -550.97 C-645.34 -710.97, -176.73 -887.32, -82.65 -954.96\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(651.879869120748 1004.9594971081597) rotate(0 -351.8798691228883 -474.95949710815967)\">\n      <path d=\"M-105.09 -933.58 C-94.47 -940.28, -89.54 -943.43, -80.8 -953.85 M-104.04 -930.93 C-94.17 -941.64, -86.73 -951.69, -82.23 -953.68\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(651.879869120748 1004.9594971081597) rotate(0 -351.8798691228883 -474.95949710815967)\">\n      <path d=\"M-114.74 -951.69 C-101.35 -953.62, -93.93 -952.08, -80.8 -953.85 M-113.69 -949.04 C-100.03 -952.63, -88.73 -955.44, -82.23 -953.68\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n  </g>\n  <g transform=\"translate(50 450) rotate(0 126.5 25.5)\"><text x=\"126.5\" y=\"38\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">继续下一个循环</text></g>\n</svg>\n\n宏任务：\n\n- setTimeout\n- setInterval\n- setImmediate\n- I/O\n- UI render\n\n微任务：\n\n- process.nextTick\n- Promise.then\n- Async/Await(promise)\n- MutationObserver\n\n再来看上面题目：\n``` js\n// 这里同步执行\nconsole.log(1);\n\nnew Promise(() => {\n    // Promise 这里还是同步执行的\n    console.log(2);\n})\n\nnew Promise((resolve, reject) => {\n    resolve(4);\n    // 创建第一个宏任务\n    setTimeout(() => {\n        console.log(6)\n    });\n}).then((val) => { // 创建第一个微任务\n    console.log(val)\n\n    new Promise((resolve, reject) => {\n        console.log(8);\n        \n        resolve(9);\n    }).then(console.log) // 创建第二个微任务\n      .then(() => { // 创建第三个微任务\n        console.log(10);\n    })\n})\n\n// 创建第二位宏任务\nsetTimeout(() => {\n    console.log(5)\n\n    new Promise((resolve, reject) => { \n        resolve(11); \n    }).then(console.log) // 在第二个宏任务，创建的第一个微任务\n});\n\n// 同步执行\nconsole.log(3);\n```\n首先执行最外层 同步代码块 => 然后执行第一个微任务 => 然后在第一个微任务里产生了第 2、3 微任务，只需执行两个 => 没有微任务后开始下一个循环，开始执行第一个宏任务 => 第一个宏任务执行完，没有微任务，开始执行第二个宏任务 => 然后第二个宏任务执行完了，开始执行里面创建微任务 => 结束。\n打印结果为：【1，2，3】，【4，8，9，10】，【6】，【5，11】\n<br>\n\n**问：值类型和引用类型区别？和存储地方？**\n值类型：占用空间固定，保存在栈中，保存与复制的是值本身。\n引用类型：占用空间不固定，保存在堆中，保存与复制的是指向对象的一个指针。\n<br>\n\n**问：对象里的属性是值类型？它是存在哪里的？**\n忘了。\n<br>\n\n**问：JS 为什么精度问题？你是怎么解决的？**\njs 使用的是 IEEE 二进制浮点数算术标准 IEEE 754，精度只有64位。比如 0.1 和 0.2 转为二进制是无穷尽的，做了截断处理，然后在转换为十进制时就丢失了精度。\n\n在工作时使用三方插件解决的，简单使用时候放大倍数后，在计算，对结果在缩小。\n<br>\n\n**问：浅拷贝和深拷贝区别？你怎么实现的？**\n拷贝值和拷贝地址区别，利用递归实现。\n<br>\n\n**问：节流和防抖是什么？一般用在什么地方？**\n节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效\n防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时\n\n举了浏览器滚动事件例子：\n节流: 添加一个定时任务，再次触发时，如果定时任务没执行，跳过当次调用。\n防抖: 添加一个定时任务，如果再次触发时，定时任务没执行，则清空定时任务，重新创建定时任务。\n<br>\n\n## 浏览器、HTTP\n\n**问：301，304 分别代表什么？**\n没想起 304 状态码。\n\n- 301：转发或重定向\n- 304：未修改，说明无需再次传输请求的内容，也就是说可以使用缓存的内容\n<br>\n\n**问：webSocket，http 区别？**\n只知道 HTTP 是单向的，WebSocket 是双向的。\n\n相同点：\n\n- 都是基于TCP的应用层协议。\n- 都使用Request/Response模型进行连接的建立。\n- 在连接的建立过程中对错误的处理方式相同，在这个阶段WebSocket可能返回和HTTP相同的返回码。\n- 都可以在网络中传输数据。\n\n不同点：\n\n- WebSocket使用HTTP来建立连接，但是定义了一系列新的header域，这些域在HTTP中并不会使用。\n- WebSocket的连接不能通过中间人来转发，它必须是一个直接连接。\n- WebSocket连接建立之后，通信双方都可以在任何时刻向另一方发送数据。\n- WebSocket连接建立之后，数据的传输使用帧来传递，不再需要Request消息。\n- WebSocket的数据帧有序。##使用WebSocket，而不是用Socket的原因：\n- 因为整个浏览器都不支持直接调用系统底层的 Socket，基于浏览器的 Web 自然无法调用，只能使用封装的高级协议方案 —— WebSocket\n\n<br>\n\n**问：Cookie、 LocalStorage 与 SessionStorage 区别和使用场景？**\nlocalStorage 和 sessionStorage 基本是一致的，除了生命周期不一致。前者永久保存，后者只在当前会话下生效。\nCookie 一般是后端生成的，可设置有效期、是否可读等。\n\n\n## Vue\n\n**问：vue2.x响应原理？**\nvue2.x 把对象 get set 进行劫持，通过发布订阅模式进行依赖收集管理，对数组方法进行重写。\nvue3 使用代理。\n<br>\n\n**问：v-if - v-show区别？**\nvif 根据条件渲染，v-show 都渲染根据 display:none 来显示。\n<br>\n\n**问：平时写过哪些指令？**\n拖拽、复制粘贴、高度自适应等等。\n<br>\n\n**问：父子组件和跨组件之间通信？**\nprops、$emit、使用事件总栈、全局状态、vuex等等。\n<br>\n\n**问：平时是Vue中有哪些性能优化？**\n长列表使用虚拟滚动减少渲染节点、将没必要数据冻结或者不挂在到 data 上减少依赖收集、减小组件颗粒度方便跟小颗粒度更新组件等等。\n<br>\n\n**问：VNode的作用？**\n实际上它只是一层对真实 DOM 的抽象，以 JavaScript 对象 (VNode 节点) 作为基础的树，用对象的属性来描述节点，最终可以通过一系列操作使这棵树映射到真实环境上。当需要更新 DOM  时候通过 diff 算法找出差异部分进行更新。\n因为 VNode 只是一个普通 JavaScript 对象，所以当应用到非 Web 平台时，可以通过 VNode 进行解析映射到其他平台视图上。\n<br>\n\n**问：new Vue() 中做了哪些操作？**\n源码太久以前看的了，没想起来具体操作了，只记得 初始化生命周期、初始化事件中心、初始化渲染、初始化data、在解析模版时做依赖收集、执行钩子函数之类的。","source":"_drafts/interview.md","raw":"---\ntitle: 前端面试记录\ncomment: true\ndate: 2022-04-13 17:24:41\ntags:\ndescription:\ncategories: 记录类\nkeywords: 面试题\n---\n\n今天接了个视频面试，没有提前看看面试题，结果一些基础东西回答东一点西一点的，看来还是需要看看题巩固下了😅。\n<!--more-->\n\n## CSS\n\n**问：如何使用 Flex 实现三列列表，元素之间间隔 10px，但是两边不需要间距？**\n首先想到的是设置 **flex-wrap: wrap** 让 flex 换行，然后设置元素 **margin: 0 5px**，然后去消除两边间距。后来想想其实陷入了个误区，其实只用设置中间元素就间距就行。\n\n实现如下：\n\n``` html\n<div class=\"flex\">\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n    <div></div>\n</div>\n```\n``` css\n.flex {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.flex div {\n    height: 200px;\n    background-color: #38acfa;\n    margin: 5px 0;\n    width: calc((100% - 20px) / 3);\n}\n\n.flex div:nth-child(3n-1) {\n    margin: 5px 10px;\n}\n```\n\n## JavaScript\n\n**问：说出下面答应顺序(类似下面这种)？**\n``` js\nconsole.log(1);\nnew Promise(() => {\n    console.log(2);\n})\n\nnew Promise((resolve, reject) => {\n    resolve(4);\n    setTimeout(() => {\n        console.log(6)\n    });\n}).then((val) => {\n    console.log(val)\n\n    new Promise((resolve, reject) => {\n        console.log(8);\n        resolve(9);\n    }).then(console.log).then(() => {\n        console.log(10);\n    })\n})\n\nsetTimeout(() => {\n    console.log(5)\n\n    new Promise((resolve, reject) => {\n        resolve(11);\n    }).then(console.log)\n});\nconsole.log(3);\n```\n一顿思索然后就把 setTimeout 和 Promise 顺序搞反了 😅。其实只需要知道在浏览器里宏任务和微任务执行顺序就很好理解这类型题目。\n\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1337 1080\" width=\"100%\" >\n  <rect x=\"0\" y=\"0\" width=\"1337\" height=\"1080\" fill=\"#ffffff\"></rect>\n  <g stroke-linecap=\"round\" transform=\"translate(570 10) rotate(0 120 50)\">\n    <path d=\"M3.2 -0.29 C69.71 1.32, 144.53 -1.17, 240.96 -3.23 M-0.44 1.07 C52.39 -0.7, 106.43 -1.29, 240.04 1.51 M239.03 -2.71 C239.24 27.76, 237.06 59.93, 242.86 99.52 M240.66 -1.69 C237.16 40.04, 238.41 78.31, 241.34 100.98 M241.11 98.09 C146.92 102.41, 57.57 100.46, 0.41 102.07 M239.94 98.91 C159.69 105.1, 80.39 103.32, -1.3 99.33 M-1.34 96.96 C3.63 62.23, 1.03 32.4, -1.96 -1.43 M1.32 99.27 C-0.4 68.68, 0.62 40.25, -1.52 0.96\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n  </g>\n  <g transform=\"translate(575 37.5) rotate(0 115 22.5)\"><text x=\"115\" y=\"32\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">宏任务</text></g>\n  <g stroke-linecap=\"round\">\n    <g transform=\"translate(690 111) rotate(0 -1.9062701757416107 80.56367796391248)\">\n      <path d=\"M-0.09 0.85 C-0.28 27.28, -0.03 132.26, -0.2 158.42 M-3.58 -1.15 C-4.24 25.8, -2.55 135.28, -2.55 162.28\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(690 111) rotate(0 -1.9062701757416107 80.56367796391248)\">\n      <path d=\"M-11.83 133.89 C-8.96 141.93, -6.32 154.51, 0.58 162.68 M-13.71 135.6 C-10.56 143.23, -3.56 153.9, -0.58 162.03\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(690 111) rotate(0 -1.9062701757416107 80.56367796391248)\">\n      <path d=\"M8.7 133.72 C4.71 141.8, 0.5 154.44, 0.58 162.68 M6.81 135.43 C2.34 143.06, 1.73 153.8, -0.58 162.03\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n  </g>\n  <g stroke-linecap=\"round\" transform=\"translate(470 610) rotate(0 240 60)\">\n    <path d=\"M-1.05 -0.31 C164.77 -1.56, 330.78 -1.76, 478.55 0.33 M0.24 -0.79 C172.1 2.81, 345.56 2.18, 480.02 0.04 M481.67 -0.12 C479.2 24.92, 479.17 52.84, 476.21 123.75 M479.69 1.52 C479.72 38.82, 482.69 77.77, 480.32 119.23 M478.41 119.81 C317.33 119.98, 154.15 120.85, 0.39 119.34 M479.66 120.19 C348.48 117.03, 216.88 116.32, 0.4 120.17 M3.29 119.71 C-1.72 83.68, -2.54 43.59, 0.31 3.91 M-1.96 121.87 C-2.03 93.9, 1.13 69.06, 0.26 0.8\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n  </g>\n  <g transform=\"translate(475 625) rotate(0 235 45)\"><text x=\"235\" y=\"32\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">执行微任务，里面有微任务产</text><text x=\"235\" y=\"77\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">生会继续执行</text></g>\n  <g stroke-linecap=\"round\" transform=\"translate(530 270) rotate(0 160 80)\">\n    <path d=\"M162.67 -0.12 C195.36 16.81, 231.04 35.96, 316.21 84.75 M160.69 1.52 C211.9 28.86, 266.38 55.16, 320.32 80.23 M316.34 80.57 C264.36 108.07, 208.47 136.77, 161.89 158.48 M319.22 81.44 C278.42 100.28, 235.38 120.36, 161.93 160.39 M164.29 159.71 C110.69 135.44, 60.79 107.84, 0.31 84.91 M159.04 161.87 C123.55 145.87, 91.27 130.06, 0.26 81.8 M0.3 78.62 C62.19 47.95, 129.47 16.78, 158.47 -0.46 M0.17 79.11 C60.5 45.8, 122.32 14.26, 159.13 -0.23\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n  </g>\n  <g transform=\"translate(535 327.5) rotate(0 155 22.5)\"><text x=\"155\" y=\"32\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是否有微任务</text></g>\n  <g stroke-linecap=\"round\">\n    <g transform=\"translate(691.6751695338637 429.55010332942015) rotate(0 -1.531027732677785 90.74479518074531)\">\n      <path d=\"M-1.68 1.89 C-1.75 32.27, -2.76 151.45, -2.82 181.04 M2.61 0.45 C2.28 30.03, -4.58 146.09, -5.67 176.35\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(691.6751695338637 429.55010332942015) rotate(0 -1.531027732677785 90.74479518074531)\">\n      <path d=\"M-11.86 146.07 C-12.06 153.52, -12.41 159.56, -7.41 175.14 M-16.36 147.24 C-13.49 157.62, -10.52 165.93, -5.35 175.77\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(691.6751695338637 429.55010332942015) rotate(0 -1.531027732677785 90.74479518074531)\">\n      <path d=\"M8.64 147.06 C4.05 154.05, -0.71 159.88, -7.41 175.14 M4.14 148.23 C0.94 158.11, -2.16 166.13, -5.35 175.77\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n  </g>\n  <g stroke-linecap=\"round\" transform=\"translate(570 970) rotate(0 120 50)\">\n    <path d=\"M-2.62 -0.33 C52.82 1.8, 108.69 1.41, 238.84 1.33 M-1.61 -0.91 C68.67 2.56, 140.92 2.71, 238.96 1.16 M236.51 -2 C240.85 26.07, 240.53 49.34, 239.76 101.44 M239.65 1.07 C237.45 22.27, 237.06 40.77, 240.47 100.02 M237.33 99.13 C149.53 95.53, 58.73 96.65, -0.15 100.79 M240.78 98.48 C165.06 95.69, 88.07 96.99, 1.41 100.92 M1.35 97.12 C-2.91 72.8, 2.29 41.32, -2.48 -2.93 M-1.94 99.34 C-1.77 65.35, 0.58 28.46, -1.61 1.73\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n  </g>\n  <g transform=\"translate(575 997.5) rotate(0 115 22.5)\"><text x=\"115\" y=\"32\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">浏览器渲染</text></g>\n  <g stroke-linecap=\"round\">\n    <g transform=\"translate(690 731) rotate(0 0.9860309289023235 118.84293444115679)\">\n      <path d=\"M2.32 0.13 C2.34 40.14, -1.05 200.34, -1.74 239.95 M0.14 -2.27 C1.23 36.97, 3.08 195.49, 3.71 236\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(690 731) rotate(0 0.9860309289023235 118.84293444115679)\">\n      <path d=\"M-6.75 205.47 C-1.67 211.7, -2.22 223.86, 0.22 234 M-5.63 207.84 C-2.38 215.19, -0.61 227.84, 3.37 237.08\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(690 731) rotate(0 0.9860309289023235 118.84293444115679)\">\n      <path d=\"M13.77 205.19 C14.04 211.82, 8.69 224.05, 0.22 234 M14.89 207.56 C11.49 215.07, 6.6 227.81, 3.37 237.08\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n  </g>\n  <g transform=\"translate(730 470) rotate(0 18.5 25.5)\"><text x=\"18.5\" y=\"38\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">有</text></g>\n  <g stroke-linecap=\"round\">\n    <g transform=\"translate(849.1728389913155 351.5049613710494) rotate(0 180.8271611563838 330.50207458590285)\">\n      <path d=\"M-9.5 -1.5 C57.51 38.17, 400.53 130.07, 395.94 240.44 C391.35 350.8, 35.16 589.81, -37.01 660.68 M-5.71 3.85 C62.04 45.1, 406.4 133.53, 400.83 243.31 C395.25 353.09, 33.78 592.88, -39.17 662.51\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(849.1728389913155 351.5049613710494) rotate(0 180.8271611563838 330.50207458590285)\">\n      <path d=\"M-25.67 632.93 C-30.23 644.13, -36.77 652.46, -35.41 663.3 M-22.62 635.33 C-31 645.42, -35.77 658.89, -37.73 663.55\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(849.1728389913155 351.5049613710494) rotate(0 180.8271611563838 330.50207458590285)\">\n      <path d=\"M-12.88 648.98 C-21.93 654.66, -32.68 657.7, -35.41 663.3 M-9.83 651.38 C-23.48 654.89, -33.36 661.95, -37.73 663.55\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n  </g>\n  <g transform=\"translate(1290 570) rotate(0 18.5 25.5)\"><text x=\"18.5\" y=\"38\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">否</text></g>\n  <g stroke-linecap=\"round\">\n    <g transform=\"translate(651.879869120748 1004.9594971081597) rotate(0 -351.8798691228883 -474.95949710815967)\">\n      <path d=\"M-66.46 -0.22 C-161.93 -92.02, -637.02 -388.84, -639.29 -547.24 C-641.55 -705.64, -173.58 -883.23, -80.08 -950.61 M-61.88 5.04 C-157.67 -87.69, -638.42 -390.97, -641.88 -550.97 C-645.34 -710.97, -176.73 -887.32, -82.65 -954.96\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(651.879869120748 1004.9594971081597) rotate(0 -351.8798691228883 -474.95949710815967)\">\n      <path d=\"M-105.09 -933.58 C-94.47 -940.28, -89.54 -943.43, -80.8 -953.85 M-104.04 -930.93 C-94.17 -941.64, -86.73 -951.69, -82.23 -953.68\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(651.879869120748 1004.9594971081597) rotate(0 -351.8798691228883 -474.95949710815967)\">\n      <path d=\"M-114.74 -951.69 C-101.35 -953.62, -93.93 -952.08, -80.8 -953.85 M-113.69 -949.04 C-100.03 -952.63, -88.73 -955.44, -82.23 -953.68\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n  </g>\n  <g transform=\"translate(50 450) rotate(0 126.5 25.5)\"><text x=\"126.5\" y=\"38\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">继续下一个循环</text></g>\n</svg>\n\n宏任务：\n\n- setTimeout\n- setInterval\n- setImmediate\n- I/O\n- UI render\n\n微任务：\n\n- process.nextTick\n- Promise.then\n- Async/Await(promise)\n- MutationObserver\n\n再来看上面题目：\n``` js\n// 这里同步执行\nconsole.log(1);\n\nnew Promise(() => {\n    // Promise 这里还是同步执行的\n    console.log(2);\n})\n\nnew Promise((resolve, reject) => {\n    resolve(4);\n    // 创建第一个宏任务\n    setTimeout(() => {\n        console.log(6)\n    });\n}).then((val) => { // 创建第一个微任务\n    console.log(val)\n\n    new Promise((resolve, reject) => {\n        console.log(8);\n        \n        resolve(9);\n    }).then(console.log) // 创建第二个微任务\n      .then(() => { // 创建第三个微任务\n        console.log(10);\n    })\n})\n\n// 创建第二位宏任务\nsetTimeout(() => {\n    console.log(5)\n\n    new Promise((resolve, reject) => { \n        resolve(11); \n    }).then(console.log) // 在第二个宏任务，创建的第一个微任务\n});\n\n// 同步执行\nconsole.log(3);\n```\n首先执行最外层 同步代码块 => 然后执行第一个微任务 => 然后在第一个微任务里产生了第 2、3 微任务，只需执行两个 => 没有微任务后开始下一个循环，开始执行第一个宏任务 => 第一个宏任务执行完，没有微任务，开始执行第二个宏任务 => 然后第二个宏任务执行完了，开始执行里面创建微任务 => 结束。\n打印结果为：【1，2，3】，【4，8，9，10】，【6】，【5，11】\n<br>\n\n**问：值类型和引用类型区别？和存储地方？**\n值类型：占用空间固定，保存在栈中，保存与复制的是值本身。\n引用类型：占用空间不固定，保存在堆中，保存与复制的是指向对象的一个指针。\n<br>\n\n**问：对象里的属性是值类型？它是存在哪里的？**\n忘了。\n<br>\n\n**问：JS 为什么精度问题？你是怎么解决的？**\njs 使用的是 IEEE 二进制浮点数算术标准 IEEE 754，精度只有64位。比如 0.1 和 0.2 转为二进制是无穷尽的，做了截断处理，然后在转换为十进制时就丢失了精度。\n\n在工作时使用三方插件解决的，简单使用时候放大倍数后，在计算，对结果在缩小。\n<br>\n\n**问：浅拷贝和深拷贝区别？你怎么实现的？**\n拷贝值和拷贝地址区别，利用递归实现。\n<br>\n\n**问：节流和防抖是什么？一般用在什么地方？**\n节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效\n防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时\n\n举了浏览器滚动事件例子：\n节流: 添加一个定时任务，再次触发时，如果定时任务没执行，跳过当次调用。\n防抖: 添加一个定时任务，如果再次触发时，定时任务没执行，则清空定时任务，重新创建定时任务。\n<br>\n\n## 浏览器、HTTP\n\n**问：301，304 分别代表什么？**\n没想起 304 状态码。\n\n- 301：转发或重定向\n- 304：未修改，说明无需再次传输请求的内容，也就是说可以使用缓存的内容\n<br>\n\n**问：webSocket，http 区别？**\n只知道 HTTP 是单向的，WebSocket 是双向的。\n\n相同点：\n\n- 都是基于TCP的应用层协议。\n- 都使用Request/Response模型进行连接的建立。\n- 在连接的建立过程中对错误的处理方式相同，在这个阶段WebSocket可能返回和HTTP相同的返回码。\n- 都可以在网络中传输数据。\n\n不同点：\n\n- WebSocket使用HTTP来建立连接，但是定义了一系列新的header域，这些域在HTTP中并不会使用。\n- WebSocket的连接不能通过中间人来转发，它必须是一个直接连接。\n- WebSocket连接建立之后，通信双方都可以在任何时刻向另一方发送数据。\n- WebSocket连接建立之后，数据的传输使用帧来传递，不再需要Request消息。\n- WebSocket的数据帧有序。##使用WebSocket，而不是用Socket的原因：\n- 因为整个浏览器都不支持直接调用系统底层的 Socket，基于浏览器的 Web 自然无法调用，只能使用封装的高级协议方案 —— WebSocket\n\n<br>\n\n**问：Cookie、 LocalStorage 与 SessionStorage 区别和使用场景？**\nlocalStorage 和 sessionStorage 基本是一致的，除了生命周期不一致。前者永久保存，后者只在当前会话下生效。\nCookie 一般是后端生成的，可设置有效期、是否可读等。\n\n\n## Vue\n\n**问：vue2.x响应原理？**\nvue2.x 把对象 get set 进行劫持，通过发布订阅模式进行依赖收集管理，对数组方法进行重写。\nvue3 使用代理。\n<br>\n\n**问：v-if - v-show区别？**\nvif 根据条件渲染，v-show 都渲染根据 display:none 来显示。\n<br>\n\n**问：平时写过哪些指令？**\n拖拽、复制粘贴、高度自适应等等。\n<br>\n\n**问：父子组件和跨组件之间通信？**\nprops、$emit、使用事件总栈、全局状态、vuex等等。\n<br>\n\n**问：平时是Vue中有哪些性能优化？**\n长列表使用虚拟滚动减少渲染节点、将没必要数据冻结或者不挂在到 data 上减少依赖收集、减小组件颗粒度方便跟小颗粒度更新组件等等。\n<br>\n\n**问：VNode的作用？**\n实际上它只是一层对真实 DOM 的抽象，以 JavaScript 对象 (VNode 节点) 作为基础的树，用对象的属性来描述节点，最终可以通过一系列操作使这棵树映射到真实环境上。当需要更新 DOM  时候通过 diff 算法找出差异部分进行更新。\n因为 VNode 只是一个普通 JavaScript 对象，所以当应用到非 Web 平台时，可以通过 VNode 进行解析映射到其他平台视图上。\n<br>\n\n**问：new Vue() 中做了哪些操作？**\n源码太久以前看的了，没想起来具体操作了，只记得 初始化生命周期、初始化事件中心、初始化渲染、初始化data、在解析模版时做依赖收集、执行钩子函数之类的。","slug":"interview","published":0,"updated":"2024-03-06T07:42:59.000Z","comments":1,"layout":"post","photos":[],"_id":"cltgz7vq2000198lgbnau6olv","content":"<p>今天接了个视频面试，没有提前看看面试题，结果一些基础东西回答东一点西一点的，看来还是需要看看题巩固下了😅。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><p><strong>问：如何使用 Flex 实现三列列表，元素之间间隔 10px，但是两边不需要间距？</strong><br>首先想到的是设置 <strong>flex-wrap: wrap</strong> 让 flex 换行，然后设置元素 <strong>margin: 0 5px</strong>，然后去消除两边间距。后来想想其实陷入了个误区，其实只用设置中间元素就间距就行。</p>\n<p>实现如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.flex</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">flex-wrap</span>: wrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.flex</span> <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#38acfa</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"built_in\">calc</span>((<span class=\"number\">100%</span> - <span class=\"number\">20px</span>) / <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.flex</span> <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">3</span>n-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><p><strong>问：说出下面答应顺序(类似下面这种)？</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"number\">11</span>);</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<p>一顿思索然后就把 setTimeout 和 Promise 顺序搞反了 😅。其实只需要知道在浏览器里宏任务和微任务执行顺序就很好理解这类型题目。</p>\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1337 1080\" width=\"100%\" >\n  <rect x=\"0\" y=\"0\" width=\"1337\" height=\"1080\" fill=\"#ffffff\"></rect>\n  <g stroke-linecap=\"round\" transform=\"translate(570 10) rotate(0 120 50)\">\n    <path d=\"M3.2 -0.29 C69.71 1.32, 144.53 -1.17, 240.96 -3.23 M-0.44 1.07 C52.39 -0.7, 106.43 -1.29, 240.04 1.51 M239.03 -2.71 C239.24 27.76, 237.06 59.93, 242.86 99.52 M240.66 -1.69 C237.16 40.04, 238.41 78.31, 241.34 100.98 M241.11 98.09 C146.92 102.41, 57.57 100.46, 0.41 102.07 M239.94 98.91 C159.69 105.1, 80.39 103.32, -1.3 99.33 M-1.34 96.96 C3.63 62.23, 1.03 32.4, -1.96 -1.43 M1.32 99.27 C-0.4 68.68, 0.62 40.25, -1.52 0.96\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n  </g>\n  <g transform=\"translate(575 37.5) rotate(0 115 22.5)\"><text x=\"115\" y=\"32\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">宏任务</text></g>\n  <g stroke-linecap=\"round\">\n    <g transform=\"translate(690 111) rotate(0 -1.9062701757416107 80.56367796391248)\">\n      <path d=\"M-0.09 0.85 C-0.28 27.28, -0.03 132.26, -0.2 158.42 M-3.58 -1.15 C-4.24 25.8, -2.55 135.28, -2.55 162.28\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(690 111) rotate(0 -1.9062701757416107 80.56367796391248)\">\n      <path d=\"M-11.83 133.89 C-8.96 141.93, -6.32 154.51, 0.58 162.68 M-13.71 135.6 C-10.56 143.23, -3.56 153.9, -0.58 162.03\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(690 111) rotate(0 -1.9062701757416107 80.56367796391248)\">\n      <path d=\"M8.7 133.72 C4.71 141.8, 0.5 154.44, 0.58 162.68 M6.81 135.43 C2.34 143.06, 1.73 153.8, -0.58 162.03\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n  </g>\n  <g stroke-linecap=\"round\" transform=\"translate(470 610) rotate(0 240 60)\">\n    <path d=\"M-1.05 -0.31 C164.77 -1.56, 330.78 -1.76, 478.55 0.33 M0.24 -0.79 C172.1 2.81, 345.56 2.18, 480.02 0.04 M481.67 -0.12 C479.2 24.92, 479.17 52.84, 476.21 123.75 M479.69 1.52 C479.72 38.82, 482.69 77.77, 480.32 119.23 M478.41 119.81 C317.33 119.98, 154.15 120.85, 0.39 119.34 M479.66 120.19 C348.48 117.03, 216.88 116.32, 0.4 120.17 M3.29 119.71 C-1.72 83.68, -2.54 43.59, 0.31 3.91 M-1.96 121.87 C-2.03 93.9, 1.13 69.06, 0.26 0.8\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n  </g>\n  <g transform=\"translate(475 625) rotate(0 235 45)\"><text x=\"235\" y=\"32\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">执行微任务，里面有微任务产</text><text x=\"235\" y=\"77\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">生会继续执行</text></g>\n  <g stroke-linecap=\"round\" transform=\"translate(530 270) rotate(0 160 80)\">\n    <path d=\"M162.67 -0.12 C195.36 16.81, 231.04 35.96, 316.21 84.75 M160.69 1.52 C211.9 28.86, 266.38 55.16, 320.32 80.23 M316.34 80.57 C264.36 108.07, 208.47 136.77, 161.89 158.48 M319.22 81.44 C278.42 100.28, 235.38 120.36, 161.93 160.39 M164.29 159.71 C110.69 135.44, 60.79 107.84, 0.31 84.91 M159.04 161.87 C123.55 145.87, 91.27 130.06, 0.26 81.8 M0.3 78.62 C62.19 47.95, 129.47 16.78, 158.47 -0.46 M0.17 79.11 C60.5 45.8, 122.32 14.26, 159.13 -0.23\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n  </g>\n  <g transform=\"translate(535 327.5) rotate(0 155 22.5)\"><text x=\"155\" y=\"32\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是否有微任务</text></g>\n  <g stroke-linecap=\"round\">\n    <g transform=\"translate(691.6751695338637 429.55010332942015) rotate(0 -1.531027732677785 90.74479518074531)\">\n      <path d=\"M-1.68 1.89 C-1.75 32.27, -2.76 151.45, -2.82 181.04 M2.61 0.45 C2.28 30.03, -4.58 146.09, -5.67 176.35\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(691.6751695338637 429.55010332942015) rotate(0 -1.531027732677785 90.74479518074531)\">\n      <path d=\"M-11.86 146.07 C-12.06 153.52, -12.41 159.56, -7.41 175.14 M-16.36 147.24 C-13.49 157.62, -10.52 165.93, -5.35 175.77\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(691.6751695338637 429.55010332942015) rotate(0 -1.531027732677785 90.74479518074531)\">\n      <path d=\"M8.64 147.06 C4.05 154.05, -0.71 159.88, -7.41 175.14 M4.14 148.23 C0.94 158.11, -2.16 166.13, -5.35 175.77\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n  </g>\n  <g stroke-linecap=\"round\" transform=\"translate(570 970) rotate(0 120 50)\">\n    <path d=\"M-2.62 -0.33 C52.82 1.8, 108.69 1.41, 238.84 1.33 M-1.61 -0.91 C68.67 2.56, 140.92 2.71, 238.96 1.16 M236.51 -2 C240.85 26.07, 240.53 49.34, 239.76 101.44 M239.65 1.07 C237.45 22.27, 237.06 40.77, 240.47 100.02 M237.33 99.13 C149.53 95.53, 58.73 96.65, -0.15 100.79 M240.78 98.48 C165.06 95.69, 88.07 96.99, 1.41 100.92 M1.35 97.12 C-2.91 72.8, 2.29 41.32, -2.48 -2.93 M-1.94 99.34 C-1.77 65.35, 0.58 28.46, -1.61 1.73\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n  </g>\n  <g transform=\"translate(575 997.5) rotate(0 115 22.5)\"><text x=\"115\" y=\"32\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">浏览器渲染</text></g>\n  <g stroke-linecap=\"round\">\n    <g transform=\"translate(690 731) rotate(0 0.9860309289023235 118.84293444115679)\">\n      <path d=\"M2.32 0.13 C2.34 40.14, -1.05 200.34, -1.74 239.95 M0.14 -2.27 C1.23 36.97, 3.08 195.49, 3.71 236\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(690 731) rotate(0 0.9860309289023235 118.84293444115679)\">\n      <path d=\"M-6.75 205.47 C-1.67 211.7, -2.22 223.86, 0.22 234 M-5.63 207.84 C-2.38 215.19, -0.61 227.84, 3.37 237.08\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(690 731) rotate(0 0.9860309289023235 118.84293444115679)\">\n      <path d=\"M13.77 205.19 C14.04 211.82, 8.69 224.05, 0.22 234 M14.89 207.56 C11.49 215.07, 6.6 227.81, 3.37 237.08\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n  </g>\n  <g transform=\"translate(730 470) rotate(0 18.5 25.5)\"><text x=\"18.5\" y=\"38\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">有</text></g>\n  <g stroke-linecap=\"round\">\n    <g transform=\"translate(849.1728389913155 351.5049613710494) rotate(0 180.8271611563838 330.50207458590285)\">\n      <path d=\"M-9.5 -1.5 C57.51 38.17, 400.53 130.07, 395.94 240.44 C391.35 350.8, 35.16 589.81, -37.01 660.68 M-5.71 3.85 C62.04 45.1, 406.4 133.53, 400.83 243.31 C395.25 353.09, 33.78 592.88, -39.17 662.51\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(849.1728389913155 351.5049613710494) rotate(0 180.8271611563838 330.50207458590285)\">\n      <path d=\"M-25.67 632.93 C-30.23 644.13, -36.77 652.46, -35.41 663.3 M-22.62 635.33 C-31 645.42, -35.77 658.89, -37.73 663.55\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(849.1728389913155 351.5049613710494) rotate(0 180.8271611563838 330.50207458590285)\">\n      <path d=\"M-12.88 648.98 C-21.93 654.66, -32.68 657.7, -35.41 663.3 M-9.83 651.38 C-23.48 654.89, -33.36 661.95, -37.73 663.55\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n  </g>\n  <g transform=\"translate(1290 570) rotate(0 18.5 25.5)\"><text x=\"18.5\" y=\"38\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">否</text></g>\n  <g stroke-linecap=\"round\">\n    <g transform=\"translate(651.879869120748 1004.9594971081597) rotate(0 -351.8798691228883 -474.95949710815967)\">\n      <path d=\"M-66.46 -0.22 C-161.93 -92.02, -637.02 -388.84, -639.29 -547.24 C-641.55 -705.64, -173.58 -883.23, -80.08 -950.61 M-61.88 5.04 C-157.67 -87.69, -638.42 -390.97, -641.88 -550.97 C-645.34 -710.97, -176.73 -887.32, -82.65 -954.96\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(651.879869120748 1004.9594971081597) rotate(0 -351.8798691228883 -474.95949710815967)\">\n      <path d=\"M-105.09 -933.58 C-94.47 -940.28, -89.54 -943.43, -80.8 -953.85 M-104.04 -930.93 C-94.17 -941.64, -86.73 -951.69, -82.23 -953.68\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(651.879869120748 1004.9594971081597) rotate(0 -351.8798691228883 -474.95949710815967)\">\n      <path d=\"M-114.74 -951.69 C-101.35 -953.62, -93.93 -952.08, -80.8 -953.85 M-113.69 -949.04 C-100.03 -952.63, -88.73 -955.44, -82.23 -953.68\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n  </g>\n  <g transform=\"translate(50 450) rotate(0 126.5 25.5)\"><text x=\"126.5\" y=\"38\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">继续下一个循环</text></g>\n</svg>\n\n<p>宏任务：</p>\n<ul>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>setImmediate</li>\n<li>I&#x2F;O</li>\n<li>UI render</li>\n</ul>\n<p>微任务：</p>\n<ul>\n<li>process.nextTick</li>\n<li>Promise.then</li>\n<li>Async&#x2F;Await(promise)</li>\n<li>MutationObserver</li>\n</ul>\n<p>再来看上面题目：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里同步执行</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Promise 这里还是同步执行的</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 创建第一个宏任务</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123; <span class=\"comment\">// 创建第一个微任务</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>) <span class=\"comment\">// 创建第二个微任务</span></span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">// 创建第三个微任务</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建第二位宏任务</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"number\">11</span>); </span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>) <span class=\"comment\">// 在第二个宏任务，创建的第一个微任务</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同步执行</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<p>首先执行最外层 同步代码块 &#x3D;&gt; 然后执行第一个微任务 &#x3D;&gt; 然后在第一个微任务里产生了第 2、3 微任务，只需执行两个 &#x3D;&gt; 没有微任务后开始下一个循环，开始执行第一个宏任务 &#x3D;&gt; 第一个宏任务执行完，没有微任务，开始执行第二个宏任务 &#x3D;&gt; 然后第二个宏任务执行完了，开始执行里面创建微任务 &#x3D;&gt; 结束。<br>打印结果为：【1，2，3】，【4，8，9，10】，【6】，【5，11】<br><br></p>\n<p><strong>问：值类型和引用类型区别？和存储地方？</strong><br>值类型：占用空间固定，保存在栈中，保存与复制的是值本身。<br>引用类型：占用空间不固定，保存在堆中，保存与复制的是指向对象的一个指针。<br><br></p>\n<p><strong>问：对象里的属性是值类型？它是存在哪里的？</strong><br>忘了。<br><br></p>\n<p><strong>问：JS 为什么精度问题？你是怎么解决的？</strong><br>js 使用的是 IEEE 二进制浮点数算术标准 IEEE 754，精度只有64位。比如 0.1 和 0.2 转为二进制是无穷尽的，做了截断处理，然后在转换为十进制时就丢失了精度。</p>\n<p>在工作时使用三方插件解决的，简单使用时候放大倍数后，在计算，对结果在缩小。<br><br></p>\n<p><strong>问：浅拷贝和深拷贝区别？你怎么实现的？</strong><br>拷贝值和拷贝地址区别，利用递归实现。<br><br></p>\n<p><strong>问：节流和防抖是什么？一般用在什么地方？</strong><br>节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效<br>防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</p>\n<p>举了浏览器滚动事件例子：<br>节流: 添加一个定时任务，再次触发时，如果定时任务没执行，跳过当次调用。<br>防抖: 添加一个定时任务，如果再次触发时，定时任务没执行，则清空定时任务，重新创建定时任务。<br><br></p>\n<h2 id=\"浏览器、HTTP\"><a href=\"#浏览器、HTTP\" class=\"headerlink\" title=\"浏览器、HTTP\"></a>浏览器、HTTP</h2><p><strong>问：301，304 分别代表什么？</strong><br>没想起 304 状态码。</p>\n<ul>\n<li>301：转发或重定向</li>\n<li>304：未修改，说明无需再次传输请求的内容，也就是说可以使用缓存的内容<br></li>\n</ul>\n<p><strong>问：webSocket，http 区别？</strong><br>只知道 HTTP 是单向的，WebSocket 是双向的。</p>\n<p>相同点：</p>\n<ul>\n<li>都是基于TCP的应用层协议。</li>\n<li>都使用Request&#x2F;Response模型进行连接的建立。</li>\n<li>在连接的建立过程中对错误的处理方式相同，在这个阶段WebSocket可能返回和HTTP相同的返回码。</li>\n<li>都可以在网络中传输数据。</li>\n</ul>\n<p>不同点：</p>\n<ul>\n<li>WebSocket使用HTTP来建立连接，但是定义了一系列新的header域，这些域在HTTP中并不会使用。</li>\n<li>WebSocket的连接不能通过中间人来转发，它必须是一个直接连接。</li>\n<li>WebSocket连接建立之后，通信双方都可以在任何时刻向另一方发送数据。</li>\n<li>WebSocket连接建立之后，数据的传输使用帧来传递，不再需要Request消息。</li>\n<li>WebSocket的数据帧有序。##使用WebSocket，而不是用Socket的原因：</li>\n<li>因为整个浏览器都不支持直接调用系统底层的 Socket，基于浏览器的 Web 自然无法调用，只能使用封装的高级协议方案 —— WebSocket</li>\n</ul>\n<br>\n\n<p><strong>问：Cookie、 LocalStorage 与 SessionStorage 区别和使用场景？</strong><br>localStorage 和 sessionStorage 基本是一致的，除了生命周期不一致。前者永久保存，后者只在当前会话下生效。<br>Cookie 一般是后端生成的，可设置有效期、是否可读等。</p>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><p><strong>问：vue2.x响应原理？</strong><br>vue2.x 把对象 get set 进行劫持，通过发布订阅模式进行依赖收集管理，对数组方法进行重写。<br>vue3 使用代理。<br><br></p>\n<p><strong>问：v-if - v-show区别？</strong><br>vif 根据条件渲染，v-show 都渲染根据 display:none 来显示。<br><br></p>\n<p><strong>问：平时写过哪些指令？</strong><br>拖拽、复制粘贴、高度自适应等等。<br><br></p>\n<p><strong>问：父子组件和跨组件之间通信？</strong><br>props、$emit、使用事件总栈、全局状态、vuex等等。<br><br></p>\n<p><strong>问：平时是Vue中有哪些性能优化？</strong><br>长列表使用虚拟滚动减少渲染节点、将没必要数据冻结或者不挂在到 data 上减少依赖收集、减小组件颗粒度方便跟小颗粒度更新组件等等。<br><br></p>\n<p><strong>问：VNode的作用？</strong><br>实际上它只是一层对真实 DOM 的抽象，以 JavaScript 对象 (VNode 节点) 作为基础的树，用对象的属性来描述节点，最终可以通过一系列操作使这棵树映射到真实环境上。当需要更新 DOM  时候通过 diff 算法找出差异部分进行更新。<br>因为 VNode 只是一个普通 JavaScript 对象，所以当应用到非 Web 平台时，可以通过 VNode 进行解析映射到其他平台视图上。<br><br></p>\n<p><strong>问：new Vue() 中做了哪些操作？</strong><br>源码太久以前看的了，没想起来具体操作了，只记得 初始化生命周期、初始化事件中心、初始化渲染、初始化data、在解析模版时做依赖收集、执行钩子函数之类的。</p>\n","excerpt":"<p>今天接了个视频面试，没有提前看看面试题，结果一些基础东西回答东一点西一点的，看来还是需要看看题巩固下了😅。</p>","more":"<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><p><strong>问：如何使用 Flex 实现三列列表，元素之间间隔 10px，但是两边不需要间距？</strong><br>首先想到的是设置 <strong>flex-wrap: wrap</strong> 让 flex 换行，然后设置元素 <strong>margin: 0 5px</strong>，然后去消除两边间距。后来想想其实陷入了个误区，其实只用设置中间元素就间距就行。</p>\n<p>实现如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;flex&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.flex</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">flex-wrap</span>: wrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.flex</span> <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#38acfa</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"built_in\">calc</span>((<span class=\"number\">100%</span> - <span class=\"number\">20px</span>) / <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.flex</span> <span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">3</span>n-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><p><strong>问：说出下面答应顺序(类似下面这种)？</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"number\">11</span>);</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<p>一顿思索然后就把 setTimeout 和 Promise 顺序搞反了 😅。其实只需要知道在浏览器里宏任务和微任务执行顺序就很好理解这类型题目。</p>\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1337 1080\" width=\"100%\" >\n  <rect x=\"0\" y=\"0\" width=\"1337\" height=\"1080\" fill=\"#ffffff\"></rect>\n  <g stroke-linecap=\"round\" transform=\"translate(570 10) rotate(0 120 50)\">\n    <path d=\"M3.2 -0.29 C69.71 1.32, 144.53 -1.17, 240.96 -3.23 M-0.44 1.07 C52.39 -0.7, 106.43 -1.29, 240.04 1.51 M239.03 -2.71 C239.24 27.76, 237.06 59.93, 242.86 99.52 M240.66 -1.69 C237.16 40.04, 238.41 78.31, 241.34 100.98 M241.11 98.09 C146.92 102.41, 57.57 100.46, 0.41 102.07 M239.94 98.91 C159.69 105.1, 80.39 103.32, -1.3 99.33 M-1.34 96.96 C3.63 62.23, 1.03 32.4, -1.96 -1.43 M1.32 99.27 C-0.4 68.68, 0.62 40.25, -1.52 0.96\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n  </g>\n  <g transform=\"translate(575 37.5) rotate(0 115 22.5)\"><text x=\"115\" y=\"32\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">宏任务</text></g>\n  <g stroke-linecap=\"round\">\n    <g transform=\"translate(690 111) rotate(0 -1.9062701757416107 80.56367796391248)\">\n      <path d=\"M-0.09 0.85 C-0.28 27.28, -0.03 132.26, -0.2 158.42 M-3.58 -1.15 C-4.24 25.8, -2.55 135.28, -2.55 162.28\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(690 111) rotate(0 -1.9062701757416107 80.56367796391248)\">\n      <path d=\"M-11.83 133.89 C-8.96 141.93, -6.32 154.51, 0.58 162.68 M-13.71 135.6 C-10.56 143.23, -3.56 153.9, -0.58 162.03\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(690 111) rotate(0 -1.9062701757416107 80.56367796391248)\">\n      <path d=\"M8.7 133.72 C4.71 141.8, 0.5 154.44, 0.58 162.68 M6.81 135.43 C2.34 143.06, 1.73 153.8, -0.58 162.03\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n  </g>\n  <g stroke-linecap=\"round\" transform=\"translate(470 610) rotate(0 240 60)\">\n    <path d=\"M-1.05 -0.31 C164.77 -1.56, 330.78 -1.76, 478.55 0.33 M0.24 -0.79 C172.1 2.81, 345.56 2.18, 480.02 0.04 M481.67 -0.12 C479.2 24.92, 479.17 52.84, 476.21 123.75 M479.69 1.52 C479.72 38.82, 482.69 77.77, 480.32 119.23 M478.41 119.81 C317.33 119.98, 154.15 120.85, 0.39 119.34 M479.66 120.19 C348.48 117.03, 216.88 116.32, 0.4 120.17 M3.29 119.71 C-1.72 83.68, -2.54 43.59, 0.31 3.91 M-1.96 121.87 C-2.03 93.9, 1.13 69.06, 0.26 0.8\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n  </g>\n  <g transform=\"translate(475 625) rotate(0 235 45)\"><text x=\"235\" y=\"32\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">执行微任务，里面有微任务产</text><text x=\"235\" y=\"77\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">生会继续执行</text></g>\n  <g stroke-linecap=\"round\" transform=\"translate(530 270) rotate(0 160 80)\">\n    <path d=\"M162.67 -0.12 C195.36 16.81, 231.04 35.96, 316.21 84.75 M160.69 1.52 C211.9 28.86, 266.38 55.16, 320.32 80.23 M316.34 80.57 C264.36 108.07, 208.47 136.77, 161.89 158.48 M319.22 81.44 C278.42 100.28, 235.38 120.36, 161.93 160.39 M164.29 159.71 C110.69 135.44, 60.79 107.84, 0.31 84.91 M159.04 161.87 C123.55 145.87, 91.27 130.06, 0.26 81.8 M0.3 78.62 C62.19 47.95, 129.47 16.78, 158.47 -0.46 M0.17 79.11 C60.5 45.8, 122.32 14.26, 159.13 -0.23\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n  </g>\n  <g transform=\"translate(535 327.5) rotate(0 155 22.5)\"><text x=\"155\" y=\"32\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是否有微任务</text></g>\n  <g stroke-linecap=\"round\">\n    <g transform=\"translate(691.6751695338637 429.55010332942015) rotate(0 -1.531027732677785 90.74479518074531)\">\n      <path d=\"M-1.68 1.89 C-1.75 32.27, -2.76 151.45, -2.82 181.04 M2.61 0.45 C2.28 30.03, -4.58 146.09, -5.67 176.35\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(691.6751695338637 429.55010332942015) rotate(0 -1.531027732677785 90.74479518074531)\">\n      <path d=\"M-11.86 146.07 C-12.06 153.52, -12.41 159.56, -7.41 175.14 M-16.36 147.24 C-13.49 157.62, -10.52 165.93, -5.35 175.77\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(691.6751695338637 429.55010332942015) rotate(0 -1.531027732677785 90.74479518074531)\">\n      <path d=\"M8.64 147.06 C4.05 154.05, -0.71 159.88, -7.41 175.14 M4.14 148.23 C0.94 158.11, -2.16 166.13, -5.35 175.77\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n  </g>\n  <g stroke-linecap=\"round\" transform=\"translate(570 970) rotate(0 120 50)\">\n    <path d=\"M-2.62 -0.33 C52.82 1.8, 108.69 1.41, 238.84 1.33 M-1.61 -0.91 C68.67 2.56, 140.92 2.71, 238.96 1.16 M236.51 -2 C240.85 26.07, 240.53 49.34, 239.76 101.44 M239.65 1.07 C237.45 22.27, 237.06 40.77, 240.47 100.02 M237.33 99.13 C149.53 95.53, 58.73 96.65, -0.15 100.79 M240.78 98.48 C165.06 95.69, 88.07 96.99, 1.41 100.92 M1.35 97.12 C-2.91 72.8, 2.29 41.32, -2.48 -2.93 M-1.94 99.34 C-1.77 65.35, 0.58 28.46, -1.61 1.73\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n  </g>\n  <g transform=\"translate(575 997.5) rotate(0 115 22.5)\"><text x=\"115\" y=\"32\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">浏览器渲染</text></g>\n  <g stroke-linecap=\"round\">\n    <g transform=\"translate(690 731) rotate(0 0.9860309289023235 118.84293444115679)\">\n      <path d=\"M2.32 0.13 C2.34 40.14, -1.05 200.34, -1.74 239.95 M0.14 -2.27 C1.23 36.97, 3.08 195.49, 3.71 236\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(690 731) rotate(0 0.9860309289023235 118.84293444115679)\">\n      <path d=\"M-6.75 205.47 C-1.67 211.7, -2.22 223.86, 0.22 234 M-5.63 207.84 C-2.38 215.19, -0.61 227.84, 3.37 237.08\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(690 731) rotate(0 0.9860309289023235 118.84293444115679)\">\n      <path d=\"M13.77 205.19 C14.04 211.82, 8.69 224.05, 0.22 234 M14.89 207.56 C11.49 215.07, 6.6 227.81, 3.37 237.08\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n  </g>\n  <g transform=\"translate(730 470) rotate(0 18.5 25.5)\"><text x=\"18.5\" y=\"38\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">有</text></g>\n  <g stroke-linecap=\"round\">\n    <g transform=\"translate(849.1728389913155 351.5049613710494) rotate(0 180.8271611563838 330.50207458590285)\">\n      <path d=\"M-9.5 -1.5 C57.51 38.17, 400.53 130.07, 395.94 240.44 C391.35 350.8, 35.16 589.81, -37.01 660.68 M-5.71 3.85 C62.04 45.1, 406.4 133.53, 400.83 243.31 C395.25 353.09, 33.78 592.88, -39.17 662.51\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(849.1728389913155 351.5049613710494) rotate(0 180.8271611563838 330.50207458590285)\">\n      <path d=\"M-25.67 632.93 C-30.23 644.13, -36.77 652.46, -35.41 663.3 M-22.62 635.33 C-31 645.42, -35.77 658.89, -37.73 663.55\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(849.1728389913155 351.5049613710494) rotate(0 180.8271611563838 330.50207458590285)\">\n      <path d=\"M-12.88 648.98 C-21.93 654.66, -32.68 657.7, -35.41 663.3 M-9.83 651.38 C-23.48 654.89, -33.36 661.95, -37.73 663.55\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n  </g>\n  <g transform=\"translate(1290 570) rotate(0 18.5 25.5)\"><text x=\"18.5\" y=\"38\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">否</text></g>\n  <g stroke-linecap=\"round\">\n    <g transform=\"translate(651.879869120748 1004.9594971081597) rotate(0 -351.8798691228883 -474.95949710815967)\">\n      <path d=\"M-66.46 -0.22 C-161.93 -92.02, -637.02 -388.84, -639.29 -547.24 C-641.55 -705.64, -173.58 -883.23, -80.08 -950.61 M-61.88 5.04 C-157.67 -87.69, -638.42 -390.97, -641.88 -550.97 C-645.34 -710.97, -176.73 -887.32, -82.65 -954.96\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(651.879869120748 1004.9594971081597) rotate(0 -351.8798691228883 -474.95949710815967)\">\n      <path d=\"M-105.09 -933.58 C-94.47 -940.28, -89.54 -943.43, -80.8 -953.85 M-104.04 -930.93 C-94.17 -941.64, -86.73 -951.69, -82.23 -953.68\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n    <g transform=\"translate(651.879869120748 1004.9594971081597) rotate(0 -351.8798691228883 -474.95949710815967)\">\n      <path d=\"M-114.74 -951.69 C-101.35 -953.62, -93.93 -952.08, -80.8 -953.85 M-113.69 -949.04 C-100.03 -952.63, -88.73 -955.44, -82.23 -953.68\" stroke=\"#010101\" stroke-width=\"1\" fill=\"none\"></path>\n    </g>\n  </g>\n  <g transform=\"translate(50 450) rotate(0 126.5 25.5)\"><text x=\"126.5\" y=\"38\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"36px\" fill=\"#010101\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">继续下一个循环</text></g>\n</svg>\n\n<p>宏任务：</p>\n<ul>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>setImmediate</li>\n<li>I&#x2F;O</li>\n<li>UI render</li>\n</ul>\n<p>微任务：</p>\n<ul>\n<li>process.nextTick</li>\n<li>Promise.then</li>\n<li>Async&#x2F;Await(promise)</li>\n<li>MutationObserver</li>\n</ul>\n<p>再来看上面题目：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里同步执行</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Promise 这里还是同步执行的</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 创建第一个宏任务</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123; <span class=\"comment\">// 创建第一个微任务</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>) <span class=\"comment\">// 创建第二个微任务</span></span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">// 创建第三个微任务</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建第二位宏任务</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(<span class=\"number\">11</span>); </span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">log</span>) <span class=\"comment\">// 在第二个宏任务，创建的第一个微任务</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同步执行</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<p>首先执行最外层 同步代码块 &#x3D;&gt; 然后执行第一个微任务 &#x3D;&gt; 然后在第一个微任务里产生了第 2、3 微任务，只需执行两个 &#x3D;&gt; 没有微任务后开始下一个循环，开始执行第一个宏任务 &#x3D;&gt; 第一个宏任务执行完，没有微任务，开始执行第二个宏任务 &#x3D;&gt; 然后第二个宏任务执行完了，开始执行里面创建微任务 &#x3D;&gt; 结束。<br>打印结果为：【1，2，3】，【4，8，9，10】，【6】，【5，11】<br><br></p>\n<p><strong>问：值类型和引用类型区别？和存储地方？</strong><br>值类型：占用空间固定，保存在栈中，保存与复制的是值本身。<br>引用类型：占用空间不固定，保存在堆中，保存与复制的是指向对象的一个指针。<br><br></p>\n<p><strong>问：对象里的属性是值类型？它是存在哪里的？</strong><br>忘了。<br><br></p>\n<p><strong>问：JS 为什么精度问题？你是怎么解决的？</strong><br>js 使用的是 IEEE 二进制浮点数算术标准 IEEE 754，精度只有64位。比如 0.1 和 0.2 转为二进制是无穷尽的，做了截断处理，然后在转换为十进制时就丢失了精度。</p>\n<p>在工作时使用三方插件解决的，简单使用时候放大倍数后，在计算，对结果在缩小。<br><br></p>\n<p><strong>问：浅拷贝和深拷贝区别？你怎么实现的？</strong><br>拷贝值和拷贝地址区别，利用递归实现。<br><br></p>\n<p><strong>问：节流和防抖是什么？一般用在什么地方？</strong><br>节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效<br>防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</p>\n<p>举了浏览器滚动事件例子：<br>节流: 添加一个定时任务，再次触发时，如果定时任务没执行，跳过当次调用。<br>防抖: 添加一个定时任务，如果再次触发时，定时任务没执行，则清空定时任务，重新创建定时任务。<br><br></p>\n<h2 id=\"浏览器、HTTP\"><a href=\"#浏览器、HTTP\" class=\"headerlink\" title=\"浏览器、HTTP\"></a>浏览器、HTTP</h2><p><strong>问：301，304 分别代表什么？</strong><br>没想起 304 状态码。</p>\n<ul>\n<li>301：转发或重定向</li>\n<li>304：未修改，说明无需再次传输请求的内容，也就是说可以使用缓存的内容<br></li>\n</ul>\n<p><strong>问：webSocket，http 区别？</strong><br>只知道 HTTP 是单向的，WebSocket 是双向的。</p>\n<p>相同点：</p>\n<ul>\n<li>都是基于TCP的应用层协议。</li>\n<li>都使用Request&#x2F;Response模型进行连接的建立。</li>\n<li>在连接的建立过程中对错误的处理方式相同，在这个阶段WebSocket可能返回和HTTP相同的返回码。</li>\n<li>都可以在网络中传输数据。</li>\n</ul>\n<p>不同点：</p>\n<ul>\n<li>WebSocket使用HTTP来建立连接，但是定义了一系列新的header域，这些域在HTTP中并不会使用。</li>\n<li>WebSocket的连接不能通过中间人来转发，它必须是一个直接连接。</li>\n<li>WebSocket连接建立之后，通信双方都可以在任何时刻向另一方发送数据。</li>\n<li>WebSocket连接建立之后，数据的传输使用帧来传递，不再需要Request消息。</li>\n<li>WebSocket的数据帧有序。##使用WebSocket，而不是用Socket的原因：</li>\n<li>因为整个浏览器都不支持直接调用系统底层的 Socket，基于浏览器的 Web 自然无法调用，只能使用封装的高级协议方案 —— WebSocket</li>\n</ul>\n<br>\n\n<p><strong>问：Cookie、 LocalStorage 与 SessionStorage 区别和使用场景？</strong><br>localStorage 和 sessionStorage 基本是一致的，除了生命周期不一致。前者永久保存，后者只在当前会话下生效。<br>Cookie 一般是后端生成的，可设置有效期、是否可读等。</p>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><p><strong>问：vue2.x响应原理？</strong><br>vue2.x 把对象 get set 进行劫持，通过发布订阅模式进行依赖收集管理，对数组方法进行重写。<br>vue3 使用代理。<br><br></p>\n<p><strong>问：v-if - v-show区别？</strong><br>vif 根据条件渲染，v-show 都渲染根据 display:none 来显示。<br><br></p>\n<p><strong>问：平时写过哪些指令？</strong><br>拖拽、复制粘贴、高度自适应等等。<br><br></p>\n<p><strong>问：父子组件和跨组件之间通信？</strong><br>props、$emit、使用事件总栈、全局状态、vuex等等。<br><br></p>\n<p><strong>问：平时是Vue中有哪些性能优化？</strong><br>长列表使用虚拟滚动减少渲染节点、将没必要数据冻结或者不挂在到 data 上减少依赖收集、减小组件颗粒度方便跟小颗粒度更新组件等等。<br><br></p>\n<p><strong>问：VNode的作用？</strong><br>实际上它只是一层对真实 DOM 的抽象，以 JavaScript 对象 (VNode 节点) 作为基础的树，用对象的属性来描述节点，最终可以通过一系列操作使这棵树映射到真实环境上。当需要更新 DOM  时候通过 diff 算法找出差异部分进行更新。<br>因为 VNode 只是一个普通 JavaScript 对象，所以当应用到非 Web 平台时，可以通过 VNode 进行解析映射到其他平台视图上。<br><br></p>\n<p><strong>问：new Vue() 中做了哪些操作？</strong><br>源码太久以前看的了，没想起来具体操作了，只记得 初始化生命周期、初始化事件中心、初始化渲染、初始化data、在解析模版时做依赖收集、执行钩子函数之类的。</p>"},{"title":"从零开始搭建一个后台模板","date":"2020-04-15T02:16:09.000Z","comments":1,"keywords":"admin-template,vue,element,后台模板","_content":"\n闲来没事，又开始造轮子玩玩了，用vue + element-ui 撸个后台模板。\n\n<!-- more -->\n\n## 主要用的使用依赖 ##\n- vue          \n- vuex         \n- vue-router   \n- vue-i18n     \n- axios        \n- element-ui   \n- nprogress    \n- antv/g2      \n\n\n## 项目结构 ##\n\n```\n┌── public                     \n│   ├── index.html             // html模板\n│   ├── favicon.ico            // favicon图标\n│ \n├── src                        // 源代码\n│   ├── api                    // 所有请求\n│   ├── assets                 // 静态资源\n│   ├── components             // 全局公用组件\n│   ├── config                 // 配置文件\n│   ├── libs                   // 全局公用方法\n│   ├── locale                 // 国际化 \n│   ├── mock                   // 模拟数据\n│   ├── plugin                 // vue插件\n│   ├── router                 // 路由\n│   ├── store                  // 全局 store管理\n│   ├── views                  // view\n│   ├── App.vue                // 入口页面\n│   ├── index.less             // 全局样式\n│   ├── main.js                // 入口 加载组件 初始化等\n│ \n├── vue.config.js              // vue-cli 配置\n├── .gitignore                 // git 忽略项\n└── package.json               // package.json\n\n```\n\n\n[演示地址](//ml13.gitee.io/admin-template)   [项目地址](//gitee.com/ml13/admin-template)\n\n## 效果图 ##\n\n![](/images/posts/admin_template/CEt1w5WJrs.gif)_示例_\n\n","source":"_posts/admin_template.md","raw":"---\ntitle: 从零开始搭建一个后台模板\ndate: 2020-04-15 10:16:09\ntags: [vue,vuex,vue-route,elemelt-ui]\ncategories: 创作类\ncomments: true\nkeywords: admin-template,vue,element,后台模板\n---\n\n闲来没事，又开始造轮子玩玩了，用vue + element-ui 撸个后台模板。\n\n<!-- more -->\n\n## 主要用的使用依赖 ##\n- vue          \n- vuex         \n- vue-router   \n- vue-i18n     \n- axios        \n- element-ui   \n- nprogress    \n- antv/g2      \n\n\n## 项目结构 ##\n\n```\n┌── public                     \n│   ├── index.html             // html模板\n│   ├── favicon.ico            // favicon图标\n│ \n├── src                        // 源代码\n│   ├── api                    // 所有请求\n│   ├── assets                 // 静态资源\n│   ├── components             // 全局公用组件\n│   ├── config                 // 配置文件\n│   ├── libs                   // 全局公用方法\n│   ├── locale                 // 国际化 \n│   ├── mock                   // 模拟数据\n│   ├── plugin                 // vue插件\n│   ├── router                 // 路由\n│   ├── store                  // 全局 store管理\n│   ├── views                  // view\n│   ├── App.vue                // 入口页面\n│   ├── index.less             // 全局样式\n│   ├── main.js                // 入口 加载组件 初始化等\n│ \n├── vue.config.js              // vue-cli 配置\n├── .gitignore                 // git 忽略项\n└── package.json               // package.json\n\n```\n\n\n[演示地址](//ml13.gitee.io/admin-template)   [项目地址](//gitee.com/ml13/admin-template)\n\n## 效果图 ##\n\n![](/images/posts/admin_template/CEt1w5WJrs.gif)_示例_\n\n","slug":"admin_template","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vqc000398lg3ex0gdvm","content":"<p>闲来没事，又开始造轮子玩玩了，用vue + element-ui 撸个后台模板。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"主要用的使用依赖\"><a href=\"#主要用的使用依赖\" class=\"headerlink\" title=\"主要用的使用依赖\"></a>主要用的使用依赖</h2><ul>\n<li>vue          </li>\n<li>vuex         </li>\n<li>vue-router   </li>\n<li>vue-i18n     </li>\n<li>axios        </li>\n<li>element-ui   </li>\n<li>nprogress    </li>\n<li>antv&#x2F;g2</li>\n</ul>\n<h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┌── public                     </span><br><span class=\"line\">│   ├── index.html             // html模板</span><br><span class=\"line\">│   ├── favicon.ico            // favicon图标</span><br><span class=\"line\">│ </span><br><span class=\"line\">├── src                        // 源代码</span><br><span class=\"line\">│   ├── api                    // 所有请求</span><br><span class=\"line\">│   ├── assets                 // 静态资源</span><br><span class=\"line\">│   ├── components             // 全局公用组件</span><br><span class=\"line\">│   ├── config                 // 配置文件</span><br><span class=\"line\">│   ├── libs                   // 全局公用方法</span><br><span class=\"line\">│   ├── locale                 // 国际化 </span><br><span class=\"line\">│   ├── mock                   // 模拟数据</span><br><span class=\"line\">│   ├── plugin                 // vue插件</span><br><span class=\"line\">│   ├── router                 // 路由</span><br><span class=\"line\">│   ├── store                  // 全局 store管理</span><br><span class=\"line\">│   ├── views                  // view</span><br><span class=\"line\">│   ├── App.vue                // 入口页面</span><br><span class=\"line\">│   ├── index.less             // 全局样式</span><br><span class=\"line\">│   ├── main.js                // 入口 加载组件 初始化等</span><br><span class=\"line\">│ </span><br><span class=\"line\">├── vue.config.js              // vue-cli 配置</span><br><span class=\"line\">├── .gitignore                 // git 忽略项</span><br><span class=\"line\">└── package.json               // package.json</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p><a href=\"//ml13.gitee.io/admin-template\">演示地址</a>   <a href=\"//gitee.com/ml13/admin-template\">项目地址</a></p>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"/images/posts/admin_template/CEt1w5WJrs.gif\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><em>示例</em></p>\n","excerpt":"<p>闲来没事，又开始造轮子玩玩了，用vue + element-ui 撸个后台模板。</p>","more":"<h2 id=\"主要用的使用依赖\"><a href=\"#主要用的使用依赖\" class=\"headerlink\" title=\"主要用的使用依赖\"></a>主要用的使用依赖</h2><ul>\n<li>vue          </li>\n<li>vuex         </li>\n<li>vue-router   </li>\n<li>vue-i18n     </li>\n<li>axios        </li>\n<li>element-ui   </li>\n<li>nprogress    </li>\n<li>antv&#x2F;g2</li>\n</ul>\n<h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┌── public                     </span><br><span class=\"line\">│   ├── index.html             // html模板</span><br><span class=\"line\">│   ├── favicon.ico            // favicon图标</span><br><span class=\"line\">│ </span><br><span class=\"line\">├── src                        // 源代码</span><br><span class=\"line\">│   ├── api                    // 所有请求</span><br><span class=\"line\">│   ├── assets                 // 静态资源</span><br><span class=\"line\">│   ├── components             // 全局公用组件</span><br><span class=\"line\">│   ├── config                 // 配置文件</span><br><span class=\"line\">│   ├── libs                   // 全局公用方法</span><br><span class=\"line\">│   ├── locale                 // 国际化 </span><br><span class=\"line\">│   ├── mock                   // 模拟数据</span><br><span class=\"line\">│   ├── plugin                 // vue插件</span><br><span class=\"line\">│   ├── router                 // 路由</span><br><span class=\"line\">│   ├── store                  // 全局 store管理</span><br><span class=\"line\">│   ├── views                  // view</span><br><span class=\"line\">│   ├── App.vue                // 入口页面</span><br><span class=\"line\">│   ├── index.less             // 全局样式</span><br><span class=\"line\">│   ├── main.js                // 入口 加载组件 初始化等</span><br><span class=\"line\">│ </span><br><span class=\"line\">├── vue.config.js              // vue-cli 配置</span><br><span class=\"line\">├── .gitignore                 // git 忽略项</span><br><span class=\"line\">└── package.json               // package.json</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p><a href=\"//ml13.gitee.io/admin-template\">演示地址</a>   <a href=\"//gitee.com/ml13/admin-template\">项目地址</a></p>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"/images/posts/admin_template/CEt1w5WJrs.gif\"><em>示例</em></p>"},{"title":"前端数组转树形结构","comments":1,"date":"2021-10-28T12:08:29.000Z","description":null,"keywords":"前端,js,tree","_content":"数组转树形结构这种情况还是很常见的，有时候后端就只给你一个数组，需要前端自己处理。一般情况下一个递归就搞定了，但是数据量很多的时候就有点 hot 不住了。\n<!-- more -->\n例如：\n``` js\nconst list = [\n  { id: '1', name: '节点1' },\n  { id: '1_1', parentId: '1', name: '节点1-1' },\n  { id: '1_1_1', parentId: '1_1', name: '节点1-1-1' },\n  { id: '2', name: '节点2' },\n  { id: '2_1', parentId: '2', name: '节点2-1' },\n  ...\n]\n```\n## 使用递归处理\n遍历查找当前 parentId 的子级，然后在递归查找子级的子级。\n``` js\nconst convertToTree = (list = [], parentId) => {\n    const arr = []\n    list.forEach((item) => {\n        if (item.parentId === parentId) {\n            arr.push({\n                ...item,\n                children: convertToTree(list, item.id)\n            })\n        }\n    })\n    return arr\n}\n\nconvertToTree(list)\n```\n分析代码看到每一次 **convertToTree** 调用都是对 list 一次遍历，加上第一次调用，可以看出该实现的时间复杂度为 **O(n^2+n)**。\n\n## 使用非递归实现\n\n可以巧妙的应用了对象保存的是引用的特点，将id作为key 创建一个 map 去存储数据，然后根据 parentId 去找对应父级，添加到对应的 children 里面去。\n``` js\nconst convertToTree = (list = []) => {\n    const res = []\n\n    let itemMap = {}\n    list.forEach(item => {\n        itemMap[item.id] = { ...item, children: [] }\n    })\n\n    list.forEach(item => {\n        const treeItem = itemMap[item.id]; //获取当前项\n        const pItem = itemMap[item.parentId]; // 获取父级\n\n        if (pItem) {\n            pItem.children.push(treeItem)\n        } else {\n            // 如果没有父级说明在顶层\n            res.push(treeItem)\n        }\n    })\n    return res\n}\n\nconvertToTree(list)\n```\n可以看到我们只需要循环两次，其时间复杂度为 **O(2n)**，因为额外对数据进行一次存储想要的内存消耗会有一定增加。\n\n还可以对上面进一步进行优化，可以在一个循环里解决，这样其时间复杂度为 **O(n)**。\n``` js\nconst convertToTree = (list = []) => {\n    const res = []\n\n    let itemMap = {}\n    list.forEach(item => {\n        let id = item.id\n        let pid = item.parentId\n\n        if (!itemMap[id]) {\n            itemMap[id] = {\n                children: []\n            }\n        }\n\n        itemMap[id] = {\n            ...item,\n            children: itemMap[id].children \n        }\n\n        if (pid === undefined) {\n            res.push(itemMap[id])\n        } else {\n            if (!itemMap[pid]) { // 没有父级 先创建一个\n                itemMap[pid] = {\n                    children: []\n                }\n            }\n            itemMap[pid].children.push(itemMap[id])\n        }\n    })\n    return res\n}\n\nconvertToTree(list)\n```\n## 总结\n从上面时间复杂度来看，随数据量增大的走势可以看出，当数据越来越大时，递归算法的耗时将远远大于非递归算法。有时候还是需要选择合适的算法来处理数据，会比你一时图个方便写的算法的性能有质的提升。","source":"_posts/array_to_tree.md","raw":"---\ntitle: 前端数组转树形结构\ncomments: true\ndate: 2021-10-28 20:08:29\ntags: [JavaScript]\ncategories: 记录类\ndescription:\nkeywords: 前端,js,tree\n---\n数组转树形结构这种情况还是很常见的，有时候后端就只给你一个数组，需要前端自己处理。一般情况下一个递归就搞定了，但是数据量很多的时候就有点 hot 不住了。\n<!-- more -->\n例如：\n``` js\nconst list = [\n  { id: '1', name: '节点1' },\n  { id: '1_1', parentId: '1', name: '节点1-1' },\n  { id: '1_1_1', parentId: '1_1', name: '节点1-1-1' },\n  { id: '2', name: '节点2' },\n  { id: '2_1', parentId: '2', name: '节点2-1' },\n  ...\n]\n```\n## 使用递归处理\n遍历查找当前 parentId 的子级，然后在递归查找子级的子级。\n``` js\nconst convertToTree = (list = [], parentId) => {\n    const arr = []\n    list.forEach((item) => {\n        if (item.parentId === parentId) {\n            arr.push({\n                ...item,\n                children: convertToTree(list, item.id)\n            })\n        }\n    })\n    return arr\n}\n\nconvertToTree(list)\n```\n分析代码看到每一次 **convertToTree** 调用都是对 list 一次遍历，加上第一次调用，可以看出该实现的时间复杂度为 **O(n^2+n)**。\n\n## 使用非递归实现\n\n可以巧妙的应用了对象保存的是引用的特点，将id作为key 创建一个 map 去存储数据，然后根据 parentId 去找对应父级，添加到对应的 children 里面去。\n``` js\nconst convertToTree = (list = []) => {\n    const res = []\n\n    let itemMap = {}\n    list.forEach(item => {\n        itemMap[item.id] = { ...item, children: [] }\n    })\n\n    list.forEach(item => {\n        const treeItem = itemMap[item.id]; //获取当前项\n        const pItem = itemMap[item.parentId]; // 获取父级\n\n        if (pItem) {\n            pItem.children.push(treeItem)\n        } else {\n            // 如果没有父级说明在顶层\n            res.push(treeItem)\n        }\n    })\n    return res\n}\n\nconvertToTree(list)\n```\n可以看到我们只需要循环两次，其时间复杂度为 **O(2n)**，因为额外对数据进行一次存储想要的内存消耗会有一定增加。\n\n还可以对上面进一步进行优化，可以在一个循环里解决，这样其时间复杂度为 **O(n)**。\n``` js\nconst convertToTree = (list = []) => {\n    const res = []\n\n    let itemMap = {}\n    list.forEach(item => {\n        let id = item.id\n        let pid = item.parentId\n\n        if (!itemMap[id]) {\n            itemMap[id] = {\n                children: []\n            }\n        }\n\n        itemMap[id] = {\n            ...item,\n            children: itemMap[id].children \n        }\n\n        if (pid === undefined) {\n            res.push(itemMap[id])\n        } else {\n            if (!itemMap[pid]) { // 没有父级 先创建一个\n                itemMap[pid] = {\n                    children: []\n                }\n            }\n            itemMap[pid].children.push(itemMap[id])\n        }\n    })\n    return res\n}\n\nconvertToTree(list)\n```\n## 总结\n从上面时间复杂度来看，随数据量增大的走势可以看出，当数据越来越大时，递归算法的耗时将远远大于非递归算法。有时候还是需要选择合适的算法来处理数据，会比你一时图个方便写的算法的性能有质的提升。","slug":"array_to_tree","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vqh000598lghjkl6z84","content":"<p>数组转树形结构这种情况还是很常见的，有时候后端就只给你一个数组，需要前端自己处理。一般情况下一个递归就搞定了，但是数据量很多的时候就有点 hot 不住了。</p>\n<span id=\"more\"></span>\n<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;节点1&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;1_1&#x27;</span>, <span class=\"attr\">parentId</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;节点1-1&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;1_1_1&#x27;</span>, <span class=\"attr\">parentId</span>: <span class=\"string\">&#x27;1_1&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;节点1-1-1&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;节点2&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;2_1&#x27;</span>, <span class=\"attr\">parentId</span>: <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;节点2-1&#x27;</span> &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用递归处理\"><a href=\"#使用递归处理\" class=\"headerlink\" title=\"使用递归处理\"></a>使用递归处理</h2><p>遍历查找当前 parentId 的子级，然后在递归查找子级的子级。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">convertToTree</span> = (<span class=\"params\">list = [], parentId</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = []</span><br><span class=\"line\">    list.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.<span class=\"property\">parentId</span> === parentId) &#123;</span><br><span class=\"line\">            arr.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">                ...item,</span><br><span class=\"line\">                <span class=\"attr\">children</span>: <span class=\"title function_\">convertToTree</span>(list, item.<span class=\"property\">id</span>)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">convertToTree</span>(list)</span><br></pre></td></tr></table></figure>\n<p>分析代码看到每一次 <strong>convertToTree</strong> 调用都是对 list 一次遍历，加上第一次调用，可以看出该实现的时间复杂度为 **O(n^2+n)**。</p>\n<h2 id=\"使用非递归实现\"><a href=\"#使用非递归实现\" class=\"headerlink\" title=\"使用非递归实现\"></a>使用非递归实现</h2><p>可以巧妙的应用了对象保存的是引用的特点，将id作为key 创建一个 map 去存储数据，然后根据 parentId 去找对应父级，添加到对应的 children 里面去。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">convertToTree</span> = (<span class=\"params\">list = []</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> itemMap = &#123;&#125;</span><br><span class=\"line\">    list.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        itemMap[item.<span class=\"property\">id</span>] = &#123; ...item, <span class=\"attr\">children</span>: [] &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    list.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> treeItem = itemMap[item.<span class=\"property\">id</span>]; <span class=\"comment\">//获取当前项</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> pItem = itemMap[item.<span class=\"property\">parentId</span>]; <span class=\"comment\">// 获取父级</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pItem) &#123;</span><br><span class=\"line\">            pItem.<span class=\"property\">children</span>.<span class=\"title function_\">push</span>(treeItem)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果没有父级说明在顶层</span></span><br><span class=\"line\">            res.<span class=\"title function_\">push</span>(treeItem)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">convertToTree</span>(list)</span><br></pre></td></tr></table></figure>\n<p>可以看到我们只需要循环两次，其时间复杂度为 **O(2n)**，因为额外对数据进行一次存储想要的内存消耗会有一定增加。</p>\n<p>还可以对上面进一步进行优化，可以在一个循环里解决，这样其时间复杂度为 **O(n)**。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">convertToTree</span> = (<span class=\"params\">list = []</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> itemMap = &#123;&#125;</span><br><span class=\"line\">    list.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> id = item.<span class=\"property\">id</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> pid = item.<span class=\"property\">parentId</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!itemMap[id]) &#123;</span><br><span class=\"line\">            itemMap[id] = &#123;</span><br><span class=\"line\">                <span class=\"attr\">children</span>: []</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        itemMap[id] = &#123;</span><br><span class=\"line\">            ...item,</span><br><span class=\"line\">            <span class=\"attr\">children</span>: itemMap[id].<span class=\"property\">children</span> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pid === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">            res.<span class=\"title function_\">push</span>(itemMap[id])</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!itemMap[pid]) &#123; <span class=\"comment\">// 没有父级 先创建一个</span></span><br><span class=\"line\">                itemMap[pid] = &#123;</span><br><span class=\"line\">                    <span class=\"attr\">children</span>: []</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            itemMap[pid].<span class=\"property\">children</span>.<span class=\"title function_\">push</span>(itemMap[id])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">convertToTree</span>(list)</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>从上面时间复杂度来看，随数据量增大的走势可以看出，当数据越来越大时，递归算法的耗时将远远大于非递归算法。有时候还是需要选择合适的算法来处理数据，会比你一时图个方便写的算法的性能有质的提升。</p>\n","excerpt":"<p>数组转树形结构这种情况还是很常见的，有时候后端就只给你一个数组，需要前端自己处理。一般情况下一个递归就搞定了，但是数据量很多的时候就有点 hot 不住了。</p>","more":"<p>例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;节点1&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;1_1&#x27;</span>, <span class=\"attr\">parentId</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;节点1-1&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;1_1_1&#x27;</span>, <span class=\"attr\">parentId</span>: <span class=\"string\">&#x27;1_1&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;节点1-1-1&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;节点2&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;2_1&#x27;</span>, <span class=\"attr\">parentId</span>: <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;节点2-1&#x27;</span> &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用递归处理\"><a href=\"#使用递归处理\" class=\"headerlink\" title=\"使用递归处理\"></a>使用递归处理</h2><p>遍历查找当前 parentId 的子级，然后在递归查找子级的子级。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">convertToTree</span> = (<span class=\"params\">list = [], parentId</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> arr = []</span><br><span class=\"line\">    list.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.<span class=\"property\">parentId</span> === parentId) &#123;</span><br><span class=\"line\">            arr.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">                ...item,</span><br><span class=\"line\">                <span class=\"attr\">children</span>: <span class=\"title function_\">convertToTree</span>(list, item.<span class=\"property\">id</span>)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">convertToTree</span>(list)</span><br></pre></td></tr></table></figure>\n<p>分析代码看到每一次 <strong>convertToTree</strong> 调用都是对 list 一次遍历，加上第一次调用，可以看出该实现的时间复杂度为 **O(n^2+n)**。</p>\n<h2 id=\"使用非递归实现\"><a href=\"#使用非递归实现\" class=\"headerlink\" title=\"使用非递归实现\"></a>使用非递归实现</h2><p>可以巧妙的应用了对象保存的是引用的特点，将id作为key 创建一个 map 去存储数据，然后根据 parentId 去找对应父级，添加到对应的 children 里面去。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">convertToTree</span> = (<span class=\"params\">list = []</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> itemMap = &#123;&#125;</span><br><span class=\"line\">    list.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        itemMap[item.<span class=\"property\">id</span>] = &#123; ...item, <span class=\"attr\">children</span>: [] &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    list.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> treeItem = itemMap[item.<span class=\"property\">id</span>]; <span class=\"comment\">//获取当前项</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> pItem = itemMap[item.<span class=\"property\">parentId</span>]; <span class=\"comment\">// 获取父级</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pItem) &#123;</span><br><span class=\"line\">            pItem.<span class=\"property\">children</span>.<span class=\"title function_\">push</span>(treeItem)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果没有父级说明在顶层</span></span><br><span class=\"line\">            res.<span class=\"title function_\">push</span>(treeItem)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">convertToTree</span>(list)</span><br></pre></td></tr></table></figure>\n<p>可以看到我们只需要循环两次，其时间复杂度为 **O(2n)**，因为额外对数据进行一次存储想要的内存消耗会有一定增加。</p>\n<p>还可以对上面进一步进行优化，可以在一个循环里解决，这样其时间复杂度为 **O(n)**。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">convertToTree</span> = (<span class=\"params\">list = []</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> itemMap = &#123;&#125;</span><br><span class=\"line\">    list.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> id = item.<span class=\"property\">id</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> pid = item.<span class=\"property\">parentId</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!itemMap[id]) &#123;</span><br><span class=\"line\">            itemMap[id] = &#123;</span><br><span class=\"line\">                <span class=\"attr\">children</span>: []</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        itemMap[id] = &#123;</span><br><span class=\"line\">            ...item,</span><br><span class=\"line\">            <span class=\"attr\">children</span>: itemMap[id].<span class=\"property\">children</span> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pid === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">            res.<span class=\"title function_\">push</span>(itemMap[id])</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!itemMap[pid]) &#123; <span class=\"comment\">// 没有父级 先创建一个</span></span><br><span class=\"line\">                itemMap[pid] = &#123;</span><br><span class=\"line\">                    <span class=\"attr\">children</span>: []</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            itemMap[pid].<span class=\"property\">children</span>.<span class=\"title function_\">push</span>(itemMap[id])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">convertToTree</span>(list)</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>从上面时间复杂度来看，随数据量增大的走势可以看出，当数据越来越大时，递归算法的耗时将远远大于非递归算法。有时候还是需要选择合适的算法来处理数据，会比你一时图个方便写的算法的性能有质的提升。</p>"},{"title":"基于 devenv 实现自动化编译,生成测试文件","date":"2020-01-02T02:16:09.000Z","comments":1,"keywords":"build,devenv,csc.exe,MSbuild","_content":"\n想要实现自动化编译并生产打包替换文件，首要的对项目进行编译生成。一般编译 donnet 项目有三种方式 csc.exe，MSbuild(不需要安装vs)，devenv(需要安装vs)。因为自己已经安装了 vs 了，所以直接使用 devenv 去编译程序了。\n\n<!--more -->\n\n大致流程如下\n\n![](/images/posts/aotubuild/20200102105829.png)_流程图_\n\n# SVN 更新提交文件 #\n\nSVN 工具使用 TortoiseSVN，为了简化操这里直接使用 TortoiseProc.exe(TortoiseSVN的GUI程序) 所提供的命令行，对项目进行更新等操作。\n使用 Demo \n\n```\nTortoiseProc.exe /command:commit\n                 /path:\"c:\\svn_wc\\file1.txt*c:\\svn_wc\\file2.txt\"\n                 /logmsg:\"test log message\" /closeonend:2\n\n参数大概意思\n\n/closeonend:2 如果没发生错误和冲突则自动关闭对话框\n/command    执行的操作\n        :update 更新\n        :commit 提交\n/path   路径\n/logmsg 提交备注信息\n\n```\n\n具体的使用方式可以在 TortoiseSVN 提供帮助文档里去查看。\n\n![](/images/posts/aotubuild/20200102174220.png)\n\n# 动态去修改程序版本和日期 #\n\n因为项目的日期和版本是写死在了程序里的，每次给测试生产替换文件时候都得去修改程序日期.大致思路是通过正则去修改文件。考虑到需要后面可能需要修改的地方较多，目前是通过 Json 去配置需要修改文件 和 对应正则 和 调用的方法(获取的值)。为了提供修改灵活性，目前是通过 CSharpCodeProvider 去编译 C# 文件，来方便随时修改获取新的值得规则。\n\n大致流程如下\n![](/images/posts/aotubuild/20200102162138.png)\n\njson 配置文件如下\n\n``` json\n{\n    \"FilePath\": \"C:\\\\Test.cs\",//路径\n    \"Pattern\": \".* string SerEdition .*\",//正则规则\n    \"FunctionName\": \"GetEditDataTime\", //以及需要调用的方法\n    \"Params\": [] //参数\n}\n```\n\n假如 Test.cs 文件需要修改内如下\n\n```C# \n    public static string SerVer = \"V7.6.0\";\n\n    public static string SerEdition = \"2019.12.25\";\n```\n\n新增一个 Units.cs(用于动态编译) 文件，生成操作改为内容，不参与编译。\n\n``` c#\n//Units.cs 文件\n\nusing System;\nnamespace DynamicRunCode\n{\n    public class Units\n    {\n        public string GetEditDataTime()\n        {\n            return \"        public static string SerEdition = \\\"\" + DateTime.Now.ToString(\"yyyy.MM.dd\") + \"\\\";\";\n        }\n    }\n\n    // 可自己在这添加方法\n}\n\n```\n\n对 CSharpCodeProvider 进行简单封装，CSharpRunCode 类 主要是对 C# 字符串进行编译，和提供一个可以调用 C# 字符串中方法。\n\n``` c#\npublic class CSharpRunCode\n{\n    CompilerResults cr;\n    /// <summary>\n    /// 编译 C# Code 字符串\n    /// </summary>\n    /// <param name=\"csharpStr\"></param>\n    /// <returns>返回编译结果</returns>\n    public CSharpRunCode (string csharpStr)\n    {\n        CSharpCodeProvider cs = new CSharpCodeProvider();\n        CompilerParameters cp = new CompilerParameters\n        {\n            GenerateInMemory = true,//设定在内存中创建程序集\n            GenerateExecutable = false//设定是否创建可执行文件,也就是exe文件或者dll文件\n        };\n        cr = cs.CompileAssemblyFromSource(cp, csharpStr);\n        if (cr.Errors.HasErrors)\n        {\n            foreach (CompilerError item in cr.Errors)\n            {\n                Console.WriteLine(item.ToString());\n            }\n        }\n    }\n\n    /// <summary>\n    /// 调用方法\n    /// </summary>\n    /// <param name=\"typeName\"></param>\n    /// <param name=\"functionName\"></param>\n    /// <param name=\"pars\"></param>\n    /// <returns></returns>\n    public object RunFunctino(string typeName, string functionName, params object[] pars)\n    {\n        Assembly ass = cr.CompiledAssembly;\n        object obj = ass.CreateInstance(typeName);\n        MethodInfo mi = obj.GetType().GetMethod(functionName);\n        return mi.Invoke(obj, pars);\n    }\n}\n```\n\n使用方法\n\n``` c#\n//FunctionName 配置中函数名\n//FilePath 文件路径\n//Pattern 正则规则\n\nCSharpRunCode runCode = new CSharpRunCode(File.ReadAllText(\"xxx\\\\Units.cs\"));\nstring result = (string)runCode.RunFunctino(\"DynamicRunCode.Units\", FunctionName);\nstring fileText = File.ReadAllText(FilePath);\nList<string> fileTextArr = File.ReadAllLines(FilePath).ToList();\nvar matches = Regex.Matches(fileText, Pattern);\nFile.WriteAllText(FilePath, Regex.Replace(fileText, Pattern, result));\n\nConsole.WriteLine($\"{Environment.NewLine}文件路径:【{FilePath}】\");\nConsole.WriteLine($\"替换【{matches.Count}】处\");\nConsole.ForegroundColor = ConsoleColor.Yellow;\n\nforeach (Match match in matches)\n{\n    int rowNum = fileTextArr.FindIndex(t => t.Contains(match.Value.Trim()));\n    if (rowNum>-1)\n    {\n        fileTextArr[rowNum]=\"\";\n    }\n    Console.WriteLine($\"原值:【{match.Value.Replace(\"\\r\", \"\")}】行号:【{rowNum + 1}】\");\n}\n\nConsole.ForegroundColor = ConsoleColor.Green;\nConsole.WriteLine($\"新值:【{result}】\");\nConsole.ForegroundColor = ConsoleColor.White;\n```\n\n执行结果\n![](/images/posts/aotubuild/20200102163249.png)\n\n# 使用 devenv 进行编译 #\n\nVS 安装的是 2017，devenv 正常路径应该是 [C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\Common7\\IDE] 下，网上一堆动态查找 devenv 路径的方法.最后感觉通过注册表方式比较靠谱，[参考这篇](https://www.cnblogs.com/lovecsharp094/p/8952327.html)\n![](/images/posts/aotubuild/20200102152424.png)\n\n具体实现\n\n``` C#\nclass DevenvOpt\n{\n\n    /// <summary>\n    /// 是否安装VS\n    /// </summary>\n    public bool IsFindDevenv { get; set; } = false;\n    /// <summary>\n    /// devenv 路径\n    /// </summary>\n    public string DevenvExePath { get; set; }\n    /// <summary>\n    /// devenv 所在目录路径\n    /// </summary>\n    public string DevenvDirPath { get; set; }\n    /// <summary>\n    /// 版本\n    /// </summary>\n    public int Version { get; set; }\n\n    public DevenvOpt()\n    {\n        string path = FindDevenv();\n        if (!string.IsNullOrWhiteSpace(path))\n        {\n            IsFindDevenv = true;\n            DevenvExePath = path;\n            DevenvDirPath = path.Replace(\"devenv.exe\", \"\");\n        }\n    }\n\n    private string FindDevenv()\n    {\n        string registryPath = @\"SOFTWARE\\Wow6432Node\\Microsoft\\VisualStudio\\SxS\\VS7\";\n        var localMachineRegistry = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32);\n        Dictionary<string, string> vsPaths = ReadRegistryInfo(localMachineRegistry, registryPath);\n        string highestVSdevenvPath = string.Empty;\n        if (vsPaths != null && vsPaths.Any())\n        {\n            \n            var tempVersion = 0;\n            foreach (KeyValuePair<string, string> kvp in vsPaths)\n            {\n                var devenvExePath = Path.Combine(kvp.Value, @\"Common7\\IDE\\devenv.exe\");\n                if (File.Exists(devenvExePath))\n                {\n                    var currentVersion = Convert.ToInt32(kvp.Key.Split('.')[0]);\n                    if (currentVersion > tempVersion)\n                    {\n                        Version = currentVersion;\n                        highestVSdevenvPath = devenvExePath;\n                    }\n                }\n            }\n        }\n        return highestVSdevenvPath;\n    }\n\n    private Dictionary<string, string> ReadRegistryInfo(RegistryKey registryKey, string registryInfoPath)\n    {\n        if (registryKey == null || string.IsNullOrEmpty(registryInfoPath)) return null;\n        try\n        {\n            RegistryKey rsg = registryKey.OpenSubKey(registryInfoPath, false);\n            if (rsg != null)\n            {\n                var keyNameArray = rsg?.GetValueNames();\n                var result = new Dictionary<string, string>();\n                foreach (var name in keyNameArray)\n                {\n                    string keyValue = (string)rsg.GetValue(name);\n                    result.Add(name, keyValue);\n                }\n                rsg.Close();\n                return result;\n            }\n            return null;\n        }\n        catch\n        {\n            return null;\n        }\n    }\n}\n```\n\n找到了路径后接下来就是，将路径写入环境变量(或者执行 devenv 先调转到目录)，调用 CMD 然后去执行 devenv 程序去编译项目操作了。\n对调用 CMD 简单封装下\n\n``` C#\nclass CMD\n{\n        private static readonly string CmdPath = @\"cmd.exe\";\n\n        /// <summary>\n        /// 执行cmd命令 \n        /// <param name=\"cmd\">执行的命令</param>\n        public static CMD_RES RunCmd(params string[] cmds)\n        {\n            CMD_RES res = new CMD_RES();\n\n            using (Process p = new Process())\n            {\n                p.StartInfo.FileName = CmdPath;\n                p.StartInfo.UseShellExecute = false;        \n                p.StartInfo.RedirectStandardInput = true;   \n                p.StartInfo.RedirectStandardOutput = true;  \n                p.StartInfo.RedirectStandardError = true;   \n                p.StartInfo.CreateNoWindow = true;          \n                try\n                {\n                    p.Start();\n\n                    //向cmd窗口写入命令\n                    foreach (string cmd in cmds) \n                        p.StandardInput.WriteLine(cmd);\n\n                    //关闭写入流\n                    p.StandardInput.Close();\n\n                    //获取cmd窗口的输出信息\n                    string output = p.StandardOutput.ReadToEnd();\n                    string error = p.StandardError.ReadToEnd();\n                    //等待程序执行完退出进程\n                    p.WaitForExit();\n                    res.ToRes(output, error);\n                }\n\n                catch (System.Exception e)\n                {\n                    System.Console.WriteLine(e.Message);\n                }\n                finally\n                {\n                    p.Close();\n                    p.Dispose();\n                }\n                return res;\n            }\n        }\n    }\n\n    class CMD_RES\n    {\n        /// <summary>\n        /// 状态\n        /// </summary>\n        public bool State { get; set; } = true;\n        /// <summary>\n        /// 输出信息\n        /// </summary>\n        public string Text { get; set; }\n        /// <summary>\n        /// 错误信息\n        /// </summary>\n        public string Error { get; set; }\n\n        public void ToRes(string output, string error)\n        {\n            State = string.IsNullOrWhiteSpace(error);\n            Text = output;\n            Error = error;\n        }\n    }\n```\n\ndevenv 具体参数可以参考[微软官网文档](https://docs.microsoft.com/zh-CN/visualstudio/ide/reference/devenv-command-line-switches?view=vs-2017)\n示例\n\n``` c#\n//DevenvDirPath devenv 所在目录\nCMD_RES res = CMD.RunCmd(\"@echo off \", $\"{DevenvDirPath.Substring(0,1)}:\",$\"cd {DevenvDirPath}\",$\"devenv 项目路径  /rebuild Release\");\n```\n\ndevenv 回输出，然后判断是否全部编译成功\n\n```\n成功x个        失败x个        跳过x个\n```\n\n文件编译好之后，就是对文件的拷贝操作了这里就不描述了\n\n效果如下\n![](/images/posts/aotubuild/20200102175312.png)","source":"_posts/aotubuild.md","raw":"---\ntitle: 基于 devenv 实现自动化编译,生成测试文件\ndate: 2020-01-02 10:16:09\ntags: [devenv]\ncategories: 创作类\ncomments: true\nkeywords: build,devenv,csc.exe,MSbuild\n---\n\n想要实现自动化编译并生产打包替换文件，首要的对项目进行编译生成。一般编译 donnet 项目有三种方式 csc.exe，MSbuild(不需要安装vs)，devenv(需要安装vs)。因为自己已经安装了 vs 了，所以直接使用 devenv 去编译程序了。\n\n<!--more -->\n\n大致流程如下\n\n![](/images/posts/aotubuild/20200102105829.png)_流程图_\n\n# SVN 更新提交文件 #\n\nSVN 工具使用 TortoiseSVN，为了简化操这里直接使用 TortoiseProc.exe(TortoiseSVN的GUI程序) 所提供的命令行，对项目进行更新等操作。\n使用 Demo \n\n```\nTortoiseProc.exe /command:commit\n                 /path:\"c:\\svn_wc\\file1.txt*c:\\svn_wc\\file2.txt\"\n                 /logmsg:\"test log message\" /closeonend:2\n\n参数大概意思\n\n/closeonend:2 如果没发生错误和冲突则自动关闭对话框\n/command    执行的操作\n        :update 更新\n        :commit 提交\n/path   路径\n/logmsg 提交备注信息\n\n```\n\n具体的使用方式可以在 TortoiseSVN 提供帮助文档里去查看。\n\n![](/images/posts/aotubuild/20200102174220.png)\n\n# 动态去修改程序版本和日期 #\n\n因为项目的日期和版本是写死在了程序里的，每次给测试生产替换文件时候都得去修改程序日期.大致思路是通过正则去修改文件。考虑到需要后面可能需要修改的地方较多，目前是通过 Json 去配置需要修改文件 和 对应正则 和 调用的方法(获取的值)。为了提供修改灵活性，目前是通过 CSharpCodeProvider 去编译 C# 文件，来方便随时修改获取新的值得规则。\n\n大致流程如下\n![](/images/posts/aotubuild/20200102162138.png)\n\njson 配置文件如下\n\n``` json\n{\n    \"FilePath\": \"C:\\\\Test.cs\",//路径\n    \"Pattern\": \".* string SerEdition .*\",//正则规则\n    \"FunctionName\": \"GetEditDataTime\", //以及需要调用的方法\n    \"Params\": [] //参数\n}\n```\n\n假如 Test.cs 文件需要修改内如下\n\n```C# \n    public static string SerVer = \"V7.6.0\";\n\n    public static string SerEdition = \"2019.12.25\";\n```\n\n新增一个 Units.cs(用于动态编译) 文件，生成操作改为内容，不参与编译。\n\n``` c#\n//Units.cs 文件\n\nusing System;\nnamespace DynamicRunCode\n{\n    public class Units\n    {\n        public string GetEditDataTime()\n        {\n            return \"        public static string SerEdition = \\\"\" + DateTime.Now.ToString(\"yyyy.MM.dd\") + \"\\\";\";\n        }\n    }\n\n    // 可自己在这添加方法\n}\n\n```\n\n对 CSharpCodeProvider 进行简单封装，CSharpRunCode 类 主要是对 C# 字符串进行编译，和提供一个可以调用 C# 字符串中方法。\n\n``` c#\npublic class CSharpRunCode\n{\n    CompilerResults cr;\n    /// <summary>\n    /// 编译 C# Code 字符串\n    /// </summary>\n    /// <param name=\"csharpStr\"></param>\n    /// <returns>返回编译结果</returns>\n    public CSharpRunCode (string csharpStr)\n    {\n        CSharpCodeProvider cs = new CSharpCodeProvider();\n        CompilerParameters cp = new CompilerParameters\n        {\n            GenerateInMemory = true,//设定在内存中创建程序集\n            GenerateExecutable = false//设定是否创建可执行文件,也就是exe文件或者dll文件\n        };\n        cr = cs.CompileAssemblyFromSource(cp, csharpStr);\n        if (cr.Errors.HasErrors)\n        {\n            foreach (CompilerError item in cr.Errors)\n            {\n                Console.WriteLine(item.ToString());\n            }\n        }\n    }\n\n    /// <summary>\n    /// 调用方法\n    /// </summary>\n    /// <param name=\"typeName\"></param>\n    /// <param name=\"functionName\"></param>\n    /// <param name=\"pars\"></param>\n    /// <returns></returns>\n    public object RunFunctino(string typeName, string functionName, params object[] pars)\n    {\n        Assembly ass = cr.CompiledAssembly;\n        object obj = ass.CreateInstance(typeName);\n        MethodInfo mi = obj.GetType().GetMethod(functionName);\n        return mi.Invoke(obj, pars);\n    }\n}\n```\n\n使用方法\n\n``` c#\n//FunctionName 配置中函数名\n//FilePath 文件路径\n//Pattern 正则规则\n\nCSharpRunCode runCode = new CSharpRunCode(File.ReadAllText(\"xxx\\\\Units.cs\"));\nstring result = (string)runCode.RunFunctino(\"DynamicRunCode.Units\", FunctionName);\nstring fileText = File.ReadAllText(FilePath);\nList<string> fileTextArr = File.ReadAllLines(FilePath).ToList();\nvar matches = Regex.Matches(fileText, Pattern);\nFile.WriteAllText(FilePath, Regex.Replace(fileText, Pattern, result));\n\nConsole.WriteLine($\"{Environment.NewLine}文件路径:【{FilePath}】\");\nConsole.WriteLine($\"替换【{matches.Count}】处\");\nConsole.ForegroundColor = ConsoleColor.Yellow;\n\nforeach (Match match in matches)\n{\n    int rowNum = fileTextArr.FindIndex(t => t.Contains(match.Value.Trim()));\n    if (rowNum>-1)\n    {\n        fileTextArr[rowNum]=\"\";\n    }\n    Console.WriteLine($\"原值:【{match.Value.Replace(\"\\r\", \"\")}】行号:【{rowNum + 1}】\");\n}\n\nConsole.ForegroundColor = ConsoleColor.Green;\nConsole.WriteLine($\"新值:【{result}】\");\nConsole.ForegroundColor = ConsoleColor.White;\n```\n\n执行结果\n![](/images/posts/aotubuild/20200102163249.png)\n\n# 使用 devenv 进行编译 #\n\nVS 安装的是 2017，devenv 正常路径应该是 [C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\Common7\\IDE] 下，网上一堆动态查找 devenv 路径的方法.最后感觉通过注册表方式比较靠谱，[参考这篇](https://www.cnblogs.com/lovecsharp094/p/8952327.html)\n![](/images/posts/aotubuild/20200102152424.png)\n\n具体实现\n\n``` C#\nclass DevenvOpt\n{\n\n    /// <summary>\n    /// 是否安装VS\n    /// </summary>\n    public bool IsFindDevenv { get; set; } = false;\n    /// <summary>\n    /// devenv 路径\n    /// </summary>\n    public string DevenvExePath { get; set; }\n    /// <summary>\n    /// devenv 所在目录路径\n    /// </summary>\n    public string DevenvDirPath { get; set; }\n    /// <summary>\n    /// 版本\n    /// </summary>\n    public int Version { get; set; }\n\n    public DevenvOpt()\n    {\n        string path = FindDevenv();\n        if (!string.IsNullOrWhiteSpace(path))\n        {\n            IsFindDevenv = true;\n            DevenvExePath = path;\n            DevenvDirPath = path.Replace(\"devenv.exe\", \"\");\n        }\n    }\n\n    private string FindDevenv()\n    {\n        string registryPath = @\"SOFTWARE\\Wow6432Node\\Microsoft\\VisualStudio\\SxS\\VS7\";\n        var localMachineRegistry = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32);\n        Dictionary<string, string> vsPaths = ReadRegistryInfo(localMachineRegistry, registryPath);\n        string highestVSdevenvPath = string.Empty;\n        if (vsPaths != null && vsPaths.Any())\n        {\n            \n            var tempVersion = 0;\n            foreach (KeyValuePair<string, string> kvp in vsPaths)\n            {\n                var devenvExePath = Path.Combine(kvp.Value, @\"Common7\\IDE\\devenv.exe\");\n                if (File.Exists(devenvExePath))\n                {\n                    var currentVersion = Convert.ToInt32(kvp.Key.Split('.')[0]);\n                    if (currentVersion > tempVersion)\n                    {\n                        Version = currentVersion;\n                        highestVSdevenvPath = devenvExePath;\n                    }\n                }\n            }\n        }\n        return highestVSdevenvPath;\n    }\n\n    private Dictionary<string, string> ReadRegistryInfo(RegistryKey registryKey, string registryInfoPath)\n    {\n        if (registryKey == null || string.IsNullOrEmpty(registryInfoPath)) return null;\n        try\n        {\n            RegistryKey rsg = registryKey.OpenSubKey(registryInfoPath, false);\n            if (rsg != null)\n            {\n                var keyNameArray = rsg?.GetValueNames();\n                var result = new Dictionary<string, string>();\n                foreach (var name in keyNameArray)\n                {\n                    string keyValue = (string)rsg.GetValue(name);\n                    result.Add(name, keyValue);\n                }\n                rsg.Close();\n                return result;\n            }\n            return null;\n        }\n        catch\n        {\n            return null;\n        }\n    }\n}\n```\n\n找到了路径后接下来就是，将路径写入环境变量(或者执行 devenv 先调转到目录)，调用 CMD 然后去执行 devenv 程序去编译项目操作了。\n对调用 CMD 简单封装下\n\n``` C#\nclass CMD\n{\n        private static readonly string CmdPath = @\"cmd.exe\";\n\n        /// <summary>\n        /// 执行cmd命令 \n        /// <param name=\"cmd\">执行的命令</param>\n        public static CMD_RES RunCmd(params string[] cmds)\n        {\n            CMD_RES res = new CMD_RES();\n\n            using (Process p = new Process())\n            {\n                p.StartInfo.FileName = CmdPath;\n                p.StartInfo.UseShellExecute = false;        \n                p.StartInfo.RedirectStandardInput = true;   \n                p.StartInfo.RedirectStandardOutput = true;  \n                p.StartInfo.RedirectStandardError = true;   \n                p.StartInfo.CreateNoWindow = true;          \n                try\n                {\n                    p.Start();\n\n                    //向cmd窗口写入命令\n                    foreach (string cmd in cmds) \n                        p.StandardInput.WriteLine(cmd);\n\n                    //关闭写入流\n                    p.StandardInput.Close();\n\n                    //获取cmd窗口的输出信息\n                    string output = p.StandardOutput.ReadToEnd();\n                    string error = p.StandardError.ReadToEnd();\n                    //等待程序执行完退出进程\n                    p.WaitForExit();\n                    res.ToRes(output, error);\n                }\n\n                catch (System.Exception e)\n                {\n                    System.Console.WriteLine(e.Message);\n                }\n                finally\n                {\n                    p.Close();\n                    p.Dispose();\n                }\n                return res;\n            }\n        }\n    }\n\n    class CMD_RES\n    {\n        /// <summary>\n        /// 状态\n        /// </summary>\n        public bool State { get; set; } = true;\n        /// <summary>\n        /// 输出信息\n        /// </summary>\n        public string Text { get; set; }\n        /// <summary>\n        /// 错误信息\n        /// </summary>\n        public string Error { get; set; }\n\n        public void ToRes(string output, string error)\n        {\n            State = string.IsNullOrWhiteSpace(error);\n            Text = output;\n            Error = error;\n        }\n    }\n```\n\ndevenv 具体参数可以参考[微软官网文档](https://docs.microsoft.com/zh-CN/visualstudio/ide/reference/devenv-command-line-switches?view=vs-2017)\n示例\n\n``` c#\n//DevenvDirPath devenv 所在目录\nCMD_RES res = CMD.RunCmd(\"@echo off \", $\"{DevenvDirPath.Substring(0,1)}:\",$\"cd {DevenvDirPath}\",$\"devenv 项目路径  /rebuild Release\");\n```\n\ndevenv 回输出，然后判断是否全部编译成功\n\n```\n成功x个        失败x个        跳过x个\n```\n\n文件编译好之后，就是对文件的拷贝操作了这里就不描述了\n\n效果如下\n![](/images/posts/aotubuild/20200102175312.png)","slug":"aotubuild","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vqm000998lgbvzi7ndx","content":"<p>想要实现自动化编译并生产打包替换文件，首要的对项目进行编译生成。一般编译 donnet 项目有三种方式 csc.exe，MSbuild(不需要安装vs)，devenv(需要安装vs)。因为自己已经安装了 vs 了，所以直接使用 devenv 去编译程序了。</p>\n<span id=\"more\"></span>\n\n<p>大致流程如下</p>\n<p><img src=\"/images/posts/aotubuild/20200102105829.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><em>流程图</em></p>\n<h1 id=\"SVN-更新提交文件\"><a href=\"#SVN-更新提交文件\" class=\"headerlink\" title=\"SVN 更新提交文件\"></a>SVN 更新提交文件</h1><p>SVN 工具使用 TortoiseSVN，为了简化操这里直接使用 TortoiseProc.exe(TortoiseSVN的GUI程序) 所提供的命令行，对项目进行更新等操作。<br>使用 Demo </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TortoiseProc.exe /command:commit</span><br><span class=\"line\">                 /path:&quot;c:\\svn_wc\\file1.txt*c:\\svn_wc\\file2.txt&quot;</span><br><span class=\"line\">                 /logmsg:&quot;test log message&quot; /closeonend:2</span><br><span class=\"line\"></span><br><span class=\"line\">参数大概意思</span><br><span class=\"line\"></span><br><span class=\"line\">/closeonend:2 如果没发生错误和冲突则自动关闭对话框</span><br><span class=\"line\">/command    执行的操作</span><br><span class=\"line\">        :update 更新</span><br><span class=\"line\">        :commit 提交</span><br><span class=\"line\">/path   路径</span><br><span class=\"line\">/logmsg 提交备注信息</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>具体的使用方式可以在 TortoiseSVN 提供帮助文档里去查看。</p>\n<p><img src=\"/images/posts/aotubuild/20200102174220.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<h1 id=\"动态去修改程序版本和日期\"><a href=\"#动态去修改程序版本和日期\" class=\"headerlink\" title=\"动态去修改程序版本和日期\"></a>动态去修改程序版本和日期</h1><p>因为项目的日期和版本是写死在了程序里的，每次给测试生产替换文件时候都得去修改程序日期.大致思路是通过正则去修改文件。考虑到需要后面可能需要修改的地方较多，目前是通过 Json 去配置需要修改文件 和 对应正则 和 调用的方法(获取的值)。为了提供修改灵活性，目前是通过 CSharpCodeProvider 去编译 C# 文件，来方便随时修改获取新的值得规则。</p>\n<p>大致流程如下<br><img src=\"/images/posts/aotubuild/20200102162138.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<p>json 配置文件如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;FilePath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C:\\\\Test.cs&quot;</span><span class=\"punctuation\">,</span><span class=\"comment\">//路径</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Pattern&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;.* string SerEdition .*&quot;</span><span class=\"punctuation\">,</span><span class=\"comment\">//正则规则</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;FunctionName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;GetEditDataTime&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//以及需要调用的方法</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Params&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span> <span class=\"comment\">//参数</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>假如 Test.cs 文件需要修改内如下</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> SerVer = <span class=\"string\">&quot;V7.6.0&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> SerEdition = <span class=\"string\">&quot;2019.12.25&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>新增一个 Units.cs(用于动态编译) 文件，生成操作改为内容，不参与编译。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Units.cs 文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DynamicRunCode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Units</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetEditDataTime</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;        public static string SerEdition = \\&quot;&quot;</span> + DateTime.Now.ToString(<span class=\"string\">&quot;yyyy.MM.dd&quot;</span>) + <span class=\"string\">&quot;\\&quot;;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 可自己在这添加方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对 CSharpCodeProvider 进行简单封装，CSharpRunCode 类 主要是对 C# 字符串进行编译，和提供一个可以调用 C# 字符串中方法。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CSharpRunCode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    CompilerResults cr;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 编译 C# Code 字符串</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;csharpStr&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>返回编译结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CSharpRunCode</span> (<span class=\"params\"><span class=\"built_in\">string</span> csharpStr</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        CSharpCodeProvider cs = <span class=\"keyword\">new</span> CSharpCodeProvider();</span><br><span class=\"line\">        CompilerParameters cp = <span class=\"keyword\">new</span> CompilerParameters</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            GenerateInMemory = <span class=\"literal\">true</span>,<span class=\"comment\">//设定在内存中创建程序集</span></span><br><span class=\"line\">            GenerateExecutable = <span class=\"literal\">false</span><span class=\"comment\">//设定是否创建可执行文件,也就是exe文件或者dll文件</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        cr = cs.CompileAssemblyFromSource(cp, csharpStr);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cr.Errors.HasErrors)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (CompilerError item <span class=\"keyword\">in</span> cr.Errors)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.WriteLine(item.ToString());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 调用方法</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;typeName&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;functionName&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;pars&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">object</span> <span class=\"title\">RunFunctino</span>(<span class=\"params\"><span class=\"built_in\">string</span> typeName, <span class=\"built_in\">string</span> functionName, <span class=\"keyword\">params</span> <span class=\"built_in\">object</span>[] pars</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Assembly ass = cr.CompiledAssembly;</span><br><span class=\"line\">        <span class=\"built_in\">object</span> obj = ass.CreateInstance(typeName);</span><br><span class=\"line\">        MethodInfo mi = obj.GetType().GetMethod(functionName);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mi.Invoke(obj, pars);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用方法</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//FunctionName 配置中函数名</span></span><br><span class=\"line\"><span class=\"comment\">//FilePath 文件路径</span></span><br><span class=\"line\"><span class=\"comment\">//Pattern 正则规则</span></span><br><span class=\"line\"></span><br><span class=\"line\">CSharpRunCode runCode = <span class=\"keyword\">new</span> CSharpRunCode(File.ReadAllText(<span class=\"string\">&quot;xxx\\\\Units.cs&quot;</span>));</span><br><span class=\"line\"><span class=\"built_in\">string</span> result = (<span class=\"built_in\">string</span>)runCode.RunFunctino(<span class=\"string\">&quot;DynamicRunCode.Units&quot;</span>, FunctionName);</span><br><span class=\"line\"><span class=\"built_in\">string</span> fileText = File.ReadAllText(FilePath);</span><br><span class=\"line\">List&lt;<span class=\"built_in\">string</span>&gt; fileTextArr = File.ReadAllLines(FilePath).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> matches = Regex.Matches(fileText, Pattern);</span><br><span class=\"line\">File.WriteAllText(FilePath, Regex.Replace(fileText, Pattern, result));</span><br><span class=\"line\"></span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;Environment.NewLine&#125;</span>文件路径:【<span class=\"subst\">&#123;FilePath&#125;</span>】&quot;</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;替换【<span class=\"subst\">&#123;matches.Count&#125;</span>】处&quot;</span>);</span><br><span class=\"line\">Console.ForegroundColor = ConsoleColor.Yellow;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (Match match <span class=\"keyword\">in</span> matches)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> rowNum = fileTextArr.FindIndex(t =&gt; t.Contains(match.Value.Trim()));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rowNum&gt;<span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fileTextArr[rowNum]=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;原值:【<span class=\"subst\">&#123;match.Value.Replace(<span class=\"string\">&quot;\\r&quot;</span>, <span class=\"string\">&quot;&quot;</span>)&#125;</span>】行号:【<span class=\"subst\">&#123;rowNum + <span class=\"number\">1</span>&#125;</span>】&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Console.ForegroundColor = ConsoleColor.Green;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;新值:【<span class=\"subst\">&#123;result&#125;</span>】&quot;</span>);</span><br><span class=\"line\">Console.ForegroundColor = ConsoleColor.White;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果<br><img src=\"/images/posts/aotubuild/20200102163249.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<h1 id=\"使用-devenv-进行编译\"><a href=\"#使用-devenv-进行编译\" class=\"headerlink\" title=\"使用 devenv 进行编译\"></a>使用 devenv 进行编译</h1><p>VS 安装的是 2017，devenv 正常路径应该是 [C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\Common7\\IDE] 下，网上一堆动态查找 devenv 路径的方法.最后感觉通过注册表方式比较靠谱，<a href=\"https://www.cnblogs.com/lovecsharp094/p/8952327.html\">参考这篇</a><br><img src=\"/images/posts/aotubuild/20200102152424.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<p>具体实现</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">DevenvOpt</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 是否安装VS</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> IsFindDevenv &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> devenv 路径</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> DevenvExePath &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> devenv 所在目录路径</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> DevenvDirPath &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 版本</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Version &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DevenvOpt</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> path = FindDevenv();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrWhiteSpace(path))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            IsFindDevenv = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            DevenvExePath = path;</span><br><span class=\"line\">            DevenvDirPath = path.Replace(<span class=\"string\">&quot;devenv.exe&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">string</span> <span class=\"title\">FindDevenv</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> registryPath = <span class=\"string\">@&quot;SOFTWARE\\Wow6432Node\\Microsoft\\VisualStudio\\SxS\\VS7&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> localMachineRegistry = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32);</span><br><span class=\"line\">        Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; vsPaths = ReadRegistryInfo(localMachineRegistry, registryPath);</span><br><span class=\"line\">        <span class=\"built_in\">string</span> highestVSdevenvPath = <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vsPaths != <span class=\"literal\">null</span> &amp;&amp; vsPaths.Any())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">var</span> tempVersion = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (KeyValuePair&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; kvp <span class=\"keyword\">in</span> vsPaths)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> devenvExePath = Path.Combine(kvp.Value, <span class=\"string\">@&quot;Common7\\IDE\\devenv.exe&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (File.Exists(devenvExePath))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> currentVersion = Convert.ToInt32(kvp.Key.Split(<span class=\"string\">&#x27;.&#x27;</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (currentVersion &gt; tempVersion)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        Version = currentVersion;</span><br><span class=\"line\">                        highestVSdevenvPath = devenvExePath;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> highestVSdevenvPath;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; <span class=\"title\">ReadRegistryInfo</span>(<span class=\"params\">RegistryKey registryKey, <span class=\"built_in\">string</span> registryInfoPath</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (registryKey == <span class=\"literal\">null</span> || <span class=\"built_in\">string</span>.IsNullOrEmpty(registryInfoPath)) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            RegistryKey rsg = registryKey.OpenSubKey(registryInfoPath, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rsg != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> keyNameArray = rsg?.GetValueNames();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> name <span class=\"keyword\">in</span> keyNameArray)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">string</span> keyValue = (<span class=\"built_in\">string</span>)rsg.GetValue(name);</span><br><span class=\"line\">                    result.Add(name, keyValue);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                rsg.Close();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>找到了路径后接下来就是，将路径写入环境变量(或者执行 devenv 先调转到目录)，调用 CMD 然后去执行 devenv 程序去编译项目操作了。<br>对调用 CMD 简单封装下</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">CMD</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> CmdPath = <span class=\"string\">@&quot;cmd.exe&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 执行cmd命令 </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;cmd&quot;&gt;</span>执行的命令<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CMD_RES <span class=\"title\">RunCmd</span>(<span class=\"params\"><span class=\"keyword\">params</span> <span class=\"built_in\">string</span>[] cmds</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            CMD_RES res = <span class=\"keyword\">new</span> CMD_RES();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">using</span> (Process p = <span class=\"keyword\">new</span> Process())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                p.StartInfo.FileName = CmdPath;</span><br><span class=\"line\">                p.StartInfo.UseShellExecute = <span class=\"literal\">false</span>;        </span><br><span class=\"line\">                p.StartInfo.RedirectStandardInput = <span class=\"literal\">true</span>;   </span><br><span class=\"line\">                p.StartInfo.RedirectStandardOutput = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                p.StartInfo.RedirectStandardError = <span class=\"literal\">true</span>;   </span><br><span class=\"line\">                p.StartInfo.CreateNoWindow = <span class=\"literal\">true</span>;          </span><br><span class=\"line\">                <span class=\"keyword\">try</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    p.Start();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//向cmd窗口写入命令</span></span><br><span class=\"line\">                    <span class=\"keyword\">foreach</span> (<span class=\"built_in\">string</span> cmd <span class=\"keyword\">in</span> cmds) </span><br><span class=\"line\">                        p.StandardInput.WriteLine(cmd);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//关闭写入流</span></span><br><span class=\"line\">                    p.StandardInput.Close();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//获取cmd窗口的输出信息</span></span><br><span class=\"line\">                    <span class=\"built_in\">string</span> output = p.StandardOutput.ReadToEnd();</span><br><span class=\"line\">                    <span class=\"built_in\">string</span> error = p.StandardError.ReadToEnd();</span><br><span class=\"line\">                    <span class=\"comment\">//等待程序执行完退出进程</span></span><br><span class=\"line\">                    p.WaitForExit();</span><br><span class=\"line\">                    res.ToRes(output, error);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">catch</span> (System.Exception e)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    System.Console.WriteLine(e.Message);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">finally</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    p.Close();</span><br><span class=\"line\">                    p.Dispose();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">CMD_RES</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 状态</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> State &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 输出信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Text &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 错误信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Error &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ToRes</span>(<span class=\"params\"><span class=\"built_in\">string</span> output, <span class=\"built_in\">string</span> error</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            State = <span class=\"built_in\">string</span>.IsNullOrWhiteSpace(error);</span><br><span class=\"line\">            Text = output;</span><br><span class=\"line\">            Error = error;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>devenv 具体参数可以参考<a href=\"https://docs.microsoft.com/zh-CN/visualstudio/ide/reference/devenv-command-line-switches?view=vs-2017\">微软官网文档</a><br>示例</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//DevenvDirPath devenv 所在目录</span></span><br><span class=\"line\">CMD_RES res = CMD.RunCmd(<span class=\"string\">&quot;@echo off &quot;</span>, <span class=\"string\">$&quot;<span class=\"subst\">&#123;DevenvDirPath.Substring(<span class=\"number\">0</span>,<span class=\"number\">1</span>)&#125;</span>:&quot;</span>,<span class=\"string\">$&quot;cd <span class=\"subst\">&#123;DevenvDirPath&#125;</span>&quot;</span>,<span class=\"string\">$&quot;devenv 项目路径  /rebuild Release&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>devenv 回输出，然后判断是否全部编译成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">成功x个        失败x个        跳过x个</span><br></pre></td></tr></table></figure>\n\n<p>文件编译好之后，就是对文件的拷贝操作了这里就不描述了</p>\n<p>效果如下<br><img src=\"/images/posts/aotubuild/20200102175312.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n","excerpt":"<p>想要实现自动化编译并生产打包替换文件，首要的对项目进行编译生成。一般编译 donnet 项目有三种方式 csc.exe，MSbuild(不需要安装vs)，devenv(需要安装vs)。因为自己已经安装了 vs 了，所以直接使用 devenv 去编译程序了。</p>","more":"<p>大致流程如下</p>\n<p><img src=\"/images/posts/aotubuild/20200102105829.png\"><em>流程图</em></p>\n<h1 id=\"SVN-更新提交文件\"><a href=\"#SVN-更新提交文件\" class=\"headerlink\" title=\"SVN 更新提交文件\"></a>SVN 更新提交文件</h1><p>SVN 工具使用 TortoiseSVN，为了简化操这里直接使用 TortoiseProc.exe(TortoiseSVN的GUI程序) 所提供的命令行，对项目进行更新等操作。<br>使用 Demo </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TortoiseProc.exe /command:commit</span><br><span class=\"line\">                 /path:&quot;c:\\svn_wc\\file1.txt*c:\\svn_wc\\file2.txt&quot;</span><br><span class=\"line\">                 /logmsg:&quot;test log message&quot; /closeonend:2</span><br><span class=\"line\"></span><br><span class=\"line\">参数大概意思</span><br><span class=\"line\"></span><br><span class=\"line\">/closeonend:2 如果没发生错误和冲突则自动关闭对话框</span><br><span class=\"line\">/command    执行的操作</span><br><span class=\"line\">        :update 更新</span><br><span class=\"line\">        :commit 提交</span><br><span class=\"line\">/path   路径</span><br><span class=\"line\">/logmsg 提交备注信息</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>具体的使用方式可以在 TortoiseSVN 提供帮助文档里去查看。</p>\n<p><img src=\"/images/posts/aotubuild/20200102174220.png\"></p>\n<h1 id=\"动态去修改程序版本和日期\"><a href=\"#动态去修改程序版本和日期\" class=\"headerlink\" title=\"动态去修改程序版本和日期\"></a>动态去修改程序版本和日期</h1><p>因为项目的日期和版本是写死在了程序里的，每次给测试生产替换文件时候都得去修改程序日期.大致思路是通过正则去修改文件。考虑到需要后面可能需要修改的地方较多，目前是通过 Json 去配置需要修改文件 和 对应正则 和 调用的方法(获取的值)。为了提供修改灵活性，目前是通过 CSharpCodeProvider 去编译 C# 文件，来方便随时修改获取新的值得规则。</p>\n<p>大致流程如下<br><img src=\"/images/posts/aotubuild/20200102162138.png\"></p>\n<p>json 配置文件如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;FilePath&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;C:\\\\Test.cs&quot;</span><span class=\"punctuation\">,</span><span class=\"comment\">//路径</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Pattern&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;.* string SerEdition .*&quot;</span><span class=\"punctuation\">,</span><span class=\"comment\">//正则规则</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;FunctionName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;GetEditDataTime&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//以及需要调用的方法</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Params&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span> <span class=\"comment\">//参数</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>假如 Test.cs 文件需要修改内如下</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> SerVer = <span class=\"string\">&quot;V7.6.0&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> SerEdition = <span class=\"string\">&quot;2019.12.25&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>新增一个 Units.cs(用于动态编译) 文件，生成操作改为内容，不参与编译。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Units.cs 文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DynamicRunCode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Units</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetEditDataTime</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;        public static string SerEdition = \\&quot;&quot;</span> + DateTime.Now.ToString(<span class=\"string\">&quot;yyyy.MM.dd&quot;</span>) + <span class=\"string\">&quot;\\&quot;;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 可自己在这添加方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对 CSharpCodeProvider 进行简单封装，CSharpRunCode 类 主要是对 C# 字符串进行编译，和提供一个可以调用 C# 字符串中方法。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CSharpRunCode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    CompilerResults cr;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 编译 C# Code 字符串</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;csharpStr&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span>返回编译结果<span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CSharpRunCode</span> (<span class=\"params\"><span class=\"built_in\">string</span> csharpStr</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        CSharpCodeProvider cs = <span class=\"keyword\">new</span> CSharpCodeProvider();</span><br><span class=\"line\">        CompilerParameters cp = <span class=\"keyword\">new</span> CompilerParameters</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            GenerateInMemory = <span class=\"literal\">true</span>,<span class=\"comment\">//设定在内存中创建程序集</span></span><br><span class=\"line\">            GenerateExecutable = <span class=\"literal\">false</span><span class=\"comment\">//设定是否创建可执行文件,也就是exe文件或者dll文件</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        cr = cs.CompileAssemblyFromSource(cp, csharpStr);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cr.Errors.HasErrors)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (CompilerError item <span class=\"keyword\">in</span> cr.Errors)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.WriteLine(item.ToString());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 调用方法</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;typeName&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;functionName&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;pars&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">object</span> <span class=\"title\">RunFunctino</span>(<span class=\"params\"><span class=\"built_in\">string</span> typeName, <span class=\"built_in\">string</span> functionName, <span class=\"keyword\">params</span> <span class=\"built_in\">object</span>[] pars</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Assembly ass = cr.CompiledAssembly;</span><br><span class=\"line\">        <span class=\"built_in\">object</span> obj = ass.CreateInstance(typeName);</span><br><span class=\"line\">        MethodInfo mi = obj.GetType().GetMethod(functionName);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mi.Invoke(obj, pars);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用方法</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//FunctionName 配置中函数名</span></span><br><span class=\"line\"><span class=\"comment\">//FilePath 文件路径</span></span><br><span class=\"line\"><span class=\"comment\">//Pattern 正则规则</span></span><br><span class=\"line\"></span><br><span class=\"line\">CSharpRunCode runCode = <span class=\"keyword\">new</span> CSharpRunCode(File.ReadAllText(<span class=\"string\">&quot;xxx\\\\Units.cs&quot;</span>));</span><br><span class=\"line\"><span class=\"built_in\">string</span> result = (<span class=\"built_in\">string</span>)runCode.RunFunctino(<span class=\"string\">&quot;DynamicRunCode.Units&quot;</span>, FunctionName);</span><br><span class=\"line\"><span class=\"built_in\">string</span> fileText = File.ReadAllText(FilePath);</span><br><span class=\"line\">List&lt;<span class=\"built_in\">string</span>&gt; fileTextArr = File.ReadAllLines(FilePath).ToList();</span><br><span class=\"line\"><span class=\"keyword\">var</span> matches = Regex.Matches(fileText, Pattern);</span><br><span class=\"line\">File.WriteAllText(FilePath, Regex.Replace(fileText, Pattern, result));</span><br><span class=\"line\"></span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;Environment.NewLine&#125;</span>文件路径:【<span class=\"subst\">&#123;FilePath&#125;</span>】&quot;</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;替换【<span class=\"subst\">&#123;matches.Count&#125;</span>】处&quot;</span>);</span><br><span class=\"line\">Console.ForegroundColor = ConsoleColor.Yellow;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (Match match <span class=\"keyword\">in</span> matches)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> rowNum = fileTextArr.FindIndex(t =&gt; t.Contains(match.Value.Trim()));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rowNum&gt;<span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fileTextArr[rowNum]=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;原值:【<span class=\"subst\">&#123;match.Value.Replace(<span class=\"string\">&quot;\\r&quot;</span>, <span class=\"string\">&quot;&quot;</span>)&#125;</span>】行号:【<span class=\"subst\">&#123;rowNum + <span class=\"number\">1</span>&#125;</span>】&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Console.ForegroundColor = ConsoleColor.Green;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$&quot;新值:【<span class=\"subst\">&#123;result&#125;</span>】&quot;</span>);</span><br><span class=\"line\">Console.ForegroundColor = ConsoleColor.White;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果<br><img src=\"/images/posts/aotubuild/20200102163249.png\"></p>\n<h1 id=\"使用-devenv-进行编译\"><a href=\"#使用-devenv-进行编译\" class=\"headerlink\" title=\"使用 devenv 进行编译\"></a>使用 devenv 进行编译</h1><p>VS 安装的是 2017，devenv 正常路径应该是 [C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\Common7\\IDE] 下，网上一堆动态查找 devenv 路径的方法.最后感觉通过注册表方式比较靠谱，<a href=\"https://www.cnblogs.com/lovecsharp094/p/8952327.html\">参考这篇</a><br><img src=\"/images/posts/aotubuild/20200102152424.png\"></p>\n<p>具体实现</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">DevenvOpt</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 是否安装VS</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> IsFindDevenv &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> devenv 路径</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> DevenvExePath &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> devenv 所在目录路径</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> DevenvDirPath &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 版本</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Version &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DevenvOpt</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> path = FindDevenv();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrWhiteSpace(path))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            IsFindDevenv = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            DevenvExePath = path;</span><br><span class=\"line\">            DevenvDirPath = path.Replace(<span class=\"string\">&quot;devenv.exe&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">string</span> <span class=\"title\">FindDevenv</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> registryPath = <span class=\"string\">@&quot;SOFTWARE\\Wow6432Node\\Microsoft\\VisualStudio\\SxS\\VS7&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> localMachineRegistry = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32);</span><br><span class=\"line\">        Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; vsPaths = ReadRegistryInfo(localMachineRegistry, registryPath);</span><br><span class=\"line\">        <span class=\"built_in\">string</span> highestVSdevenvPath = <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vsPaths != <span class=\"literal\">null</span> &amp;&amp; vsPaths.Any())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">var</span> tempVersion = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (KeyValuePair&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; kvp <span class=\"keyword\">in</span> vsPaths)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> devenvExePath = Path.Combine(kvp.Value, <span class=\"string\">@&quot;Common7\\IDE\\devenv.exe&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (File.Exists(devenvExePath))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> currentVersion = Convert.ToInt32(kvp.Key.Split(<span class=\"string\">&#x27;.&#x27;</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (currentVersion &gt; tempVersion)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        Version = currentVersion;</span><br><span class=\"line\">                        highestVSdevenvPath = devenvExePath;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> highestVSdevenvPath;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; <span class=\"title\">ReadRegistryInfo</span>(<span class=\"params\">RegistryKey registryKey, <span class=\"built_in\">string</span> registryInfoPath</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (registryKey == <span class=\"literal\">null</span> || <span class=\"built_in\">string</span>.IsNullOrEmpty(registryInfoPath)) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            RegistryKey rsg = registryKey.OpenSubKey(registryInfoPath, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rsg != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> keyNameArray = rsg?.GetValueNames();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> name <span class=\"keyword\">in</span> keyNameArray)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">string</span> keyValue = (<span class=\"built_in\">string</span>)rsg.GetValue(name);</span><br><span class=\"line\">                    result.Add(name, keyValue);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                rsg.Close();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>找到了路径后接下来就是，将路径写入环境变量(或者执行 devenv 先调转到目录)，调用 CMD 然后去执行 devenv 程序去编译项目操作了。<br>对调用 CMD 简单封装下</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">CMD</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> CmdPath = <span class=\"string\">@&quot;cmd.exe&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 执行cmd命令 </span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;cmd&quot;&gt;</span>执行的命令<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CMD_RES <span class=\"title\">RunCmd</span>(<span class=\"params\"><span class=\"keyword\">params</span> <span class=\"built_in\">string</span>[] cmds</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            CMD_RES res = <span class=\"keyword\">new</span> CMD_RES();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">using</span> (Process p = <span class=\"keyword\">new</span> Process())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                p.StartInfo.FileName = CmdPath;</span><br><span class=\"line\">                p.StartInfo.UseShellExecute = <span class=\"literal\">false</span>;        </span><br><span class=\"line\">                p.StartInfo.RedirectStandardInput = <span class=\"literal\">true</span>;   </span><br><span class=\"line\">                p.StartInfo.RedirectStandardOutput = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                p.StartInfo.RedirectStandardError = <span class=\"literal\">true</span>;   </span><br><span class=\"line\">                p.StartInfo.CreateNoWindow = <span class=\"literal\">true</span>;          </span><br><span class=\"line\">                <span class=\"keyword\">try</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    p.Start();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//向cmd窗口写入命令</span></span><br><span class=\"line\">                    <span class=\"keyword\">foreach</span> (<span class=\"built_in\">string</span> cmd <span class=\"keyword\">in</span> cmds) </span><br><span class=\"line\">                        p.StandardInput.WriteLine(cmd);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//关闭写入流</span></span><br><span class=\"line\">                    p.StandardInput.Close();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//获取cmd窗口的输出信息</span></span><br><span class=\"line\">                    <span class=\"built_in\">string</span> output = p.StandardOutput.ReadToEnd();</span><br><span class=\"line\">                    <span class=\"built_in\">string</span> error = p.StandardError.ReadToEnd();</span><br><span class=\"line\">                    <span class=\"comment\">//等待程序执行完退出进程</span></span><br><span class=\"line\">                    p.WaitForExit();</span><br><span class=\"line\">                    res.ToRes(output, error);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">catch</span> (System.Exception e)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    System.Console.WriteLine(e.Message);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">finally</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    p.Close();</span><br><span class=\"line\">                    p.Dispose();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">CMD_RES</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 状态</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> State &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 输出信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Text &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 错误信息</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Error &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ToRes</span>(<span class=\"params\"><span class=\"built_in\">string</span> output, <span class=\"built_in\">string</span> error</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            State = <span class=\"built_in\">string</span>.IsNullOrWhiteSpace(error);</span><br><span class=\"line\">            Text = output;</span><br><span class=\"line\">            Error = error;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>devenv 具体参数可以参考<a href=\"https://docs.microsoft.com/zh-CN/visualstudio/ide/reference/devenv-command-line-switches?view=vs-2017\">微软官网文档</a><br>示例</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//DevenvDirPath devenv 所在目录</span></span><br><span class=\"line\">CMD_RES res = CMD.RunCmd(<span class=\"string\">&quot;@echo off &quot;</span>, <span class=\"string\">$&quot;<span class=\"subst\">&#123;DevenvDirPath.Substring(<span class=\"number\">0</span>,<span class=\"number\">1</span>)&#125;</span>:&quot;</span>,<span class=\"string\">$&quot;cd <span class=\"subst\">&#123;DevenvDirPath&#125;</span>&quot;</span>,<span class=\"string\">$&quot;devenv 项目路径  /rebuild Release&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>devenv 回输出，然后判断是否全部编译成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">成功x个        失败x个        跳过x个</span><br></pre></td></tr></table></figure>\n\n<p>文件编译好之后，就是对文件的拷贝操作了这里就不描述了</p>\n<p>效果如下<br><img src=\"/images/posts/aotubuild/20200102175312.png\"></p>"},{"title":"前端基建之工具篇","comment":true,"date":"2023-09-19T12:35:39.000Z","description":null,"keywords":null,"_content":"\n随着前端发展的越来越工程化，越来越繁琐复杂，前端能做的事情越来越多，最近几年 **前端基建** 也是越来越火热。但是实际上很多公司并不注重前端，更别谈能会有人来做基建。对于没有基建的前端，我们能做些什么呢？\n\n我个人推荐可以从工具、CLI 入手，因为这些往往是独立，不会像推规范、搞数据埋点、日志上报、整 BFF 那样对团队或者现有代码有入侵性。即便在自己空闲时间也能弄一弄，弄得好可以在团队推广使用，弄得不好也无所谓，可以当作练手提升自己能力。\n\n<!-- more -->\n\n## 什么是前端基建？\n\n**前端基建** 指的是业务团队内的前端工程师执行的一些基础建设，包括了 前端规范文档、前端脚手架、前端模板、前端组件库、前端工具库、前端 BFF、前端 CI/CD 的构建部署、前端数据埋点 等等；\n\n前端基建的好处\n\n-   业务复用；\n-   提升研发效率；\n-   规范研发流程；\n-   团队技术提升；\n-   开源建设；\n\n## 善用工具解放双手\n\n举例：最近接到一个需求，一张简单报表包含增删改查，相信每个公司都有自己封装好的增删改查组件或者 hooks，等接口定义好，直接写 api，配好表单，表格配置完事。但后来接口发生变动，或者查询变动，这个时候就需要手动去调整原来代码。又或者做完这个后又来了个十几个报表需求，又得需要将上面来个十几遍。有些公司甚至连封装都没有，项目里全是 CTRL V + C，重复工作量更是陡增。\n\n这些重复性操作完全可以通过工具自动生成，提交代码准确性，也能解放自己双手（摸点 🐟 不香吗），提高团队效率。\n\n工具能做事情，做的东西有很多，不仅仅只是代码生成这些，一切你觉得重复性工作，都可以尝试通过工具来提高自己效率。\n\n-   代码生成\n-   代码格式检测\n-   智能提示\n-   测试自动化\n-   文档集成\n-   代码调试\n-   ...\n\n工具实现方式有很多种，这取决在团队需求\n\n-   cli\n-   web （比如通过拖拉拽生成代码）\n-   编辑器插件 （比如 vscode 插件）\n-   ...\n\n### 重复代码生成\n\n就以上面例子为例，就可以使用工具去生成 接口的定义、表格配置、表单配置以及组件使用代码，不同需求表单、表格那些都是高度相似的，可以通过代码生成方式来提升自己编码效率。\n\n从接口文档到可用代码，生成的方式大概流程如下：\n\n接口文档 =》 JSON Schema =》 UI 交互（可省略）=》 根据模板生成 || 根据 AST 生成 =》 插入到代码位置\n\n##### 生成 JSON Schema\n\n为了方便后续代码生成，我们需要首先接口文档转换成一个标准通用格式，这样不管后端提供什么样格式 api 文档或者不管后端使用什么框架去生成 api 文档时，只需要将对应格式转换成我们 JSON Schema 格式即可。\n\n##### UI 交互\n\nUI 交互并不是必须的，比如生成 接口定义、类型定义 并不需要交互，直接生成就可以了。但是像表格生成、表单生成这些是需要的，因为接口返回字段并不一定全是需要生成的，可以通过添加适当交互完成这一步骤。\n\n##### 代码片段生成\n\n代码生成方式分两种 **模板**、**AST** 去生成。使用 **模板** 比较简单，也会比较直观，但是缺乏灵活性，使用 **AST** 会更为灵活，但也会复杂的多。\n\n###### 模板\n\n对于一些固定代码片段格式，可以选择通过模板去生成，而不必使用 **AST** 增加代码生成复杂度。\n\n比如你项目中请求方法格式如下，可以直接使用模板去生成，类似这样 **const {0} = (par) => http(\"{1}\", par, \"{2}\");**\n\n```js\nconst apiFn = (par) => http(\"/api/demo\", par, \"post\");\n```\n\n###### AST\n\nAST 是抽象语法树 (Abstract Syntax Tree) 的简称，它是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。\n\n当你生成代码需要根据不同条件生成不同节点，修改不固定时候，可以选择使用 AST 去生成。\n\nAST 生成原理，简单来说说就是将代码生成一个树状结构，其中树中每个节点描述的应就是你实际代码，我们只需要根据需求去操作对应节点，然后再将 AST 转为代码。\n\n不同工具生成 AST 是不一致的，可根据实际需求选择。在线查看 AST 结构工具，可以说很直观方便\n[ast explorer](https://astexplorer.net/)\n[ts ast](https://ts-ast-viewer.com/)\n\n##### 插入代码位置\n\n将生成代码插入到现有代码中，实现方式也有多种不同方式，通过对于简单的结构可以通过正则匹配去替换，对于复杂的结构可以通过 AST 方式去修改插入，如果你是基于编辑器插件去做的，还可以通过获取编辑器光标位置、选中等等操作将代码插入到对于位置。\n\n### 更方便的文档查阅方式\n\n很多公司使用的都是像 yapi、swagger 等那些开源文档管理平台，很多都是 web 在线的，当接口文档字段很多时，需要平凡的来回切换查阅，这样也是比较浪费时间的。可以通过编辑器插件形式集成到我们插件中，这样可以更方便自己开发，也有很多时以及有现成插件可以使用的，但是功能上并不丰富，有些仅仅只能查看，连常见代码都无法生成。\n\n将接口文档集成到编辑器里能做的事情有很多，以 vscode 来说，可以通过文档快速生成接口定义，还可以通过注册语言服务，来识别检测接口定义正确性，也可以做的接口文档发生变更，做到智能提示然后快速自动修改，也可以通过接口文档快速起个 mock 服务，而不需要手动在项目中添加 mock 定义等等。\n\n### 其他\n\n很多繁琐的事情，其实可以尝试通过工具简化这些操作，没有合适的可以尝试自己造个，既可以提升自己能力，又能给团队做一点贡献。","source":"_posts/api_convert.md","raw":"---\ntitle: 前端基建之工具篇\ncomment: true\ndate: 2023-09-19 20:35:39\ntags: [工具, AST]\ndescription:\ncategories: 记录类\nkeywords:\n---\n\n随着前端发展的越来越工程化，越来越繁琐复杂，前端能做的事情越来越多，最近几年 **前端基建** 也是越来越火热。但是实际上很多公司并不注重前端，更别谈能会有人来做基建。对于没有基建的前端，我们能做些什么呢？\n\n我个人推荐可以从工具、CLI 入手，因为这些往往是独立，不会像推规范、搞数据埋点、日志上报、整 BFF 那样对团队或者现有代码有入侵性。即便在自己空闲时间也能弄一弄，弄得好可以在团队推广使用，弄得不好也无所谓，可以当作练手提升自己能力。\n\n<!-- more -->\n\n## 什么是前端基建？\n\n**前端基建** 指的是业务团队内的前端工程师执行的一些基础建设，包括了 前端规范文档、前端脚手架、前端模板、前端组件库、前端工具库、前端 BFF、前端 CI/CD 的构建部署、前端数据埋点 等等；\n\n前端基建的好处\n\n-   业务复用；\n-   提升研发效率；\n-   规范研发流程；\n-   团队技术提升；\n-   开源建设；\n\n## 善用工具解放双手\n\n举例：最近接到一个需求，一张简单报表包含增删改查，相信每个公司都有自己封装好的增删改查组件或者 hooks，等接口定义好，直接写 api，配好表单，表格配置完事。但后来接口发生变动，或者查询变动，这个时候就需要手动去调整原来代码。又或者做完这个后又来了个十几个报表需求，又得需要将上面来个十几遍。有些公司甚至连封装都没有，项目里全是 CTRL V + C，重复工作量更是陡增。\n\n这些重复性操作完全可以通过工具自动生成，提交代码准确性，也能解放自己双手（摸点 🐟 不香吗），提高团队效率。\n\n工具能做事情，做的东西有很多，不仅仅只是代码生成这些，一切你觉得重复性工作，都可以尝试通过工具来提高自己效率。\n\n-   代码生成\n-   代码格式检测\n-   智能提示\n-   测试自动化\n-   文档集成\n-   代码调试\n-   ...\n\n工具实现方式有很多种，这取决在团队需求\n\n-   cli\n-   web （比如通过拖拉拽生成代码）\n-   编辑器插件 （比如 vscode 插件）\n-   ...\n\n### 重复代码生成\n\n就以上面例子为例，就可以使用工具去生成 接口的定义、表格配置、表单配置以及组件使用代码，不同需求表单、表格那些都是高度相似的，可以通过代码生成方式来提升自己编码效率。\n\n从接口文档到可用代码，生成的方式大概流程如下：\n\n接口文档 =》 JSON Schema =》 UI 交互（可省略）=》 根据模板生成 || 根据 AST 生成 =》 插入到代码位置\n\n##### 生成 JSON Schema\n\n为了方便后续代码生成，我们需要首先接口文档转换成一个标准通用格式，这样不管后端提供什么样格式 api 文档或者不管后端使用什么框架去生成 api 文档时，只需要将对应格式转换成我们 JSON Schema 格式即可。\n\n##### UI 交互\n\nUI 交互并不是必须的，比如生成 接口定义、类型定义 并不需要交互，直接生成就可以了。但是像表格生成、表单生成这些是需要的，因为接口返回字段并不一定全是需要生成的，可以通过添加适当交互完成这一步骤。\n\n##### 代码片段生成\n\n代码生成方式分两种 **模板**、**AST** 去生成。使用 **模板** 比较简单，也会比较直观，但是缺乏灵活性，使用 **AST** 会更为灵活，但也会复杂的多。\n\n###### 模板\n\n对于一些固定代码片段格式，可以选择通过模板去生成，而不必使用 **AST** 增加代码生成复杂度。\n\n比如你项目中请求方法格式如下，可以直接使用模板去生成，类似这样 **const {0} = (par) => http(\"{1}\", par, \"{2}\");**\n\n```js\nconst apiFn = (par) => http(\"/api/demo\", par, \"post\");\n```\n\n###### AST\n\nAST 是抽象语法树 (Abstract Syntax Tree) 的简称，它是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。\n\n当你生成代码需要根据不同条件生成不同节点，修改不固定时候，可以选择使用 AST 去生成。\n\nAST 生成原理，简单来说说就是将代码生成一个树状结构，其中树中每个节点描述的应就是你实际代码，我们只需要根据需求去操作对应节点，然后再将 AST 转为代码。\n\n不同工具生成 AST 是不一致的，可根据实际需求选择。在线查看 AST 结构工具，可以说很直观方便\n[ast explorer](https://astexplorer.net/)\n[ts ast](https://ts-ast-viewer.com/)\n\n##### 插入代码位置\n\n将生成代码插入到现有代码中，实现方式也有多种不同方式，通过对于简单的结构可以通过正则匹配去替换，对于复杂的结构可以通过 AST 方式去修改插入，如果你是基于编辑器插件去做的，还可以通过获取编辑器光标位置、选中等等操作将代码插入到对于位置。\n\n### 更方便的文档查阅方式\n\n很多公司使用的都是像 yapi、swagger 等那些开源文档管理平台，很多都是 web 在线的，当接口文档字段很多时，需要平凡的来回切换查阅，这样也是比较浪费时间的。可以通过编辑器插件形式集成到我们插件中，这样可以更方便自己开发，也有很多时以及有现成插件可以使用的，但是功能上并不丰富，有些仅仅只能查看，连常见代码都无法生成。\n\n将接口文档集成到编辑器里能做的事情有很多，以 vscode 来说，可以通过文档快速生成接口定义，还可以通过注册语言服务，来识别检测接口定义正确性，也可以做的接口文档发生变更，做到智能提示然后快速自动修改，也可以通过接口文档快速起个 mock 服务，而不需要手动在项目中添加 mock 定义等等。\n\n### 其他\n\n很多繁琐的事情，其实可以尝试通过工具简化这些操作，没有合适的可以尝试自己造个，既可以提升自己能力，又能给团队做一点贡献。","slug":"api_convert","published":1,"updated":"2024-03-06T07:42:59.000Z","comments":1,"layout":"post","photos":[],"_id":"cltgz7vqo000b98lgh9g9g5sp","content":"<p>随着前端发展的越来越工程化，越来越繁琐复杂，前端能做的事情越来越多，最近几年 <strong>前端基建</strong> 也是越来越火热。但是实际上很多公司并不注重前端，更别谈能会有人来做基建。对于没有基建的前端，我们能做些什么呢？</p>\n<p>我个人推荐可以从工具、CLI 入手，因为这些往往是独立，不会像推规范、搞数据埋点、日志上报、整 BFF 那样对团队或者现有代码有入侵性。即便在自己空闲时间也能弄一弄，弄得好可以在团队推广使用，弄得不好也无所谓，可以当作练手提升自己能力。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"什么是前端基建？\"><a href=\"#什么是前端基建？\" class=\"headerlink\" title=\"什么是前端基建？\"></a>什么是前端基建？</h2><p><strong>前端基建</strong> 指的是业务团队内的前端工程师执行的一些基础建设，包括了 前端规范文档、前端脚手架、前端模板、前端组件库、前端工具库、前端 BFF、前端 CI&#x2F;CD 的构建部署、前端数据埋点 等等；</p>\n<p>前端基建的好处</p>\n<ul>\n<li>业务复用；</li>\n<li>提升研发效率；</li>\n<li>规范研发流程；</li>\n<li>团队技术提升；</li>\n<li>开源建设；</li>\n</ul>\n<h2 id=\"善用工具解放双手\"><a href=\"#善用工具解放双手\" class=\"headerlink\" title=\"善用工具解放双手\"></a>善用工具解放双手</h2><p>举例：最近接到一个需求，一张简单报表包含增删改查，相信每个公司都有自己封装好的增删改查组件或者 hooks，等接口定义好，直接写 api，配好表单，表格配置完事。但后来接口发生变动，或者查询变动，这个时候就需要手动去调整原来代码。又或者做完这个后又来了个十几个报表需求，又得需要将上面来个十几遍。有些公司甚至连封装都没有，项目里全是 CTRL V + C，重复工作量更是陡增。</p>\n<p>这些重复性操作完全可以通过工具自动生成，提交代码准确性，也能解放自己双手（摸点 🐟 不香吗），提高团队效率。</p>\n<p>工具能做事情，做的东西有很多，不仅仅只是代码生成这些，一切你觉得重复性工作，都可以尝试通过工具来提高自己效率。</p>\n<ul>\n<li>代码生成</li>\n<li>代码格式检测</li>\n<li>智能提示</li>\n<li>测试自动化</li>\n<li>文档集成</li>\n<li>代码调试</li>\n<li>…</li>\n</ul>\n<p>工具实现方式有很多种，这取决在团队需求</p>\n<ul>\n<li>cli</li>\n<li>web （比如通过拖拉拽生成代码）</li>\n<li>编辑器插件 （比如 vscode 插件）</li>\n<li>…</li>\n</ul>\n<h3 id=\"重复代码生成\"><a href=\"#重复代码生成\" class=\"headerlink\" title=\"重复代码生成\"></a>重复代码生成</h3><p>就以上面例子为例，就可以使用工具去生成 接口的定义、表格配置、表单配置以及组件使用代码，不同需求表单、表格那些都是高度相似的，可以通过代码生成方式来提升自己编码效率。</p>\n<p>从接口文档到可用代码，生成的方式大概流程如下：</p>\n<p>接口文档 &#x3D;》 JSON Schema &#x3D;》 UI 交互（可省略）&#x3D;》 根据模板生成 || 根据 AST 生成 &#x3D;》 插入到代码位置</p>\n<h5 id=\"生成-JSON-Schema\"><a href=\"#生成-JSON-Schema\" class=\"headerlink\" title=\"生成 JSON Schema\"></a>生成 JSON Schema</h5><p>为了方便后续代码生成，我们需要首先接口文档转换成一个标准通用格式，这样不管后端提供什么样格式 api 文档或者不管后端使用什么框架去生成 api 文档时，只需要将对应格式转换成我们 JSON Schema 格式即可。</p>\n<h5 id=\"UI-交互\"><a href=\"#UI-交互\" class=\"headerlink\" title=\"UI 交互\"></a>UI 交互</h5><p>UI 交互并不是必须的，比如生成 接口定义、类型定义 并不需要交互，直接生成就可以了。但是像表格生成、表单生成这些是需要的，因为接口返回字段并不一定全是需要生成的，可以通过添加适当交互完成这一步骤。</p>\n<h5 id=\"代码片段生成\"><a href=\"#代码片段生成\" class=\"headerlink\" title=\"代码片段生成\"></a>代码片段生成</h5><p>代码生成方式分两种 <strong>模板</strong>、<strong>AST</strong> 去生成。使用 <strong>模板</strong> 比较简单，也会比较直观，但是缺乏灵活性，使用 <strong>AST</strong> 会更为灵活，但也会复杂的多。</p>\n<h6 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h6><p>对于一些固定代码片段格式，可以选择通过模板去生成，而不必使用 <strong>AST</strong> 增加代码生成复杂度。</p>\n<p>比如你项目中请求方法格式如下，可以直接使用模板去生成，类似这样 <strong>const {0} &#x3D; (par) &#x3D;&gt; http(“{1}”, par, “{2}”);</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">apiFn</span> = (<span class=\"params\">par</span>) =&gt; <span class=\"title function_\">http</span>(<span class=\"string\">&quot;/api/demo&quot;</span>, par, <span class=\"string\">&quot;post&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"AST\"><a href=\"#AST\" class=\"headerlink\" title=\"AST\"></a>AST</h6><p>AST 是抽象语法树 (Abstract Syntax Tree) 的简称，它是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。</p>\n<p>当你生成代码需要根据不同条件生成不同节点，修改不固定时候，可以选择使用 AST 去生成。</p>\n<p>AST 生成原理，简单来说说就是将代码生成一个树状结构，其中树中每个节点描述的应就是你实际代码，我们只需要根据需求去操作对应节点，然后再将 AST 转为代码。</p>\n<p>不同工具生成 AST 是不一致的，可根据实际需求选择。在线查看 AST 结构工具，可以说很直观方便<br><a href=\"https://astexplorer.net/\">ast explorer</a><br><a href=\"https://ts-ast-viewer.com/\">ts ast</a></p>\n<h5 id=\"插入代码位置\"><a href=\"#插入代码位置\" class=\"headerlink\" title=\"插入代码位置\"></a>插入代码位置</h5><p>将生成代码插入到现有代码中，实现方式也有多种不同方式，通过对于简单的结构可以通过正则匹配去替换，对于复杂的结构可以通过 AST 方式去修改插入，如果你是基于编辑器插件去做的，还可以通过获取编辑器光标位置、选中等等操作将代码插入到对于位置。</p>\n<h3 id=\"更方便的文档查阅方式\"><a href=\"#更方便的文档查阅方式\" class=\"headerlink\" title=\"更方便的文档查阅方式\"></a>更方便的文档查阅方式</h3><p>很多公司使用的都是像 yapi、swagger 等那些开源文档管理平台，很多都是 web 在线的，当接口文档字段很多时，需要平凡的来回切换查阅，这样也是比较浪费时间的。可以通过编辑器插件形式集成到我们插件中，这样可以更方便自己开发，也有很多时以及有现成插件可以使用的，但是功能上并不丰富，有些仅仅只能查看，连常见代码都无法生成。</p>\n<p>将接口文档集成到编辑器里能做的事情有很多，以 vscode 来说，可以通过文档快速生成接口定义，还可以通过注册语言服务，来识别检测接口定义正确性，也可以做的接口文档发生变更，做到智能提示然后快速自动修改，也可以通过接口文档快速起个 mock 服务，而不需要手动在项目中添加 mock 定义等等。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>很多繁琐的事情，其实可以尝试通过工具简化这些操作，没有合适的可以尝试自己造个，既可以提升自己能力，又能给团队做一点贡献。</p>\n","excerpt":"<p>随着前端发展的越来越工程化，越来越繁琐复杂，前端能做的事情越来越多，最近几年 <strong>前端基建</strong> 也是越来越火热。但是实际上很多公司并不注重前端，更别谈能会有人来做基建。对于没有基建的前端，我们能做些什么呢？</p>\n<p>我个人推荐可以从工具、CLI 入手，因为这些往往是独立，不会像推规范、搞数据埋点、日志上报、整 BFF 那样对团队或者现有代码有入侵性。即便在自己空闲时间也能弄一弄，弄得好可以在团队推广使用，弄得不好也无所谓，可以当作练手提升自己能力。</p>","more":"<h2 id=\"什么是前端基建？\"><a href=\"#什么是前端基建？\" class=\"headerlink\" title=\"什么是前端基建？\"></a>什么是前端基建？</h2><p><strong>前端基建</strong> 指的是业务团队内的前端工程师执行的一些基础建设，包括了 前端规范文档、前端脚手架、前端模板、前端组件库、前端工具库、前端 BFF、前端 CI&#x2F;CD 的构建部署、前端数据埋点 等等；</p>\n<p>前端基建的好处</p>\n<ul>\n<li>业务复用；</li>\n<li>提升研发效率；</li>\n<li>规范研发流程；</li>\n<li>团队技术提升；</li>\n<li>开源建设；</li>\n</ul>\n<h2 id=\"善用工具解放双手\"><a href=\"#善用工具解放双手\" class=\"headerlink\" title=\"善用工具解放双手\"></a>善用工具解放双手</h2><p>举例：最近接到一个需求，一张简单报表包含增删改查，相信每个公司都有自己封装好的增删改查组件或者 hooks，等接口定义好，直接写 api，配好表单，表格配置完事。但后来接口发生变动，或者查询变动，这个时候就需要手动去调整原来代码。又或者做完这个后又来了个十几个报表需求，又得需要将上面来个十几遍。有些公司甚至连封装都没有，项目里全是 CTRL V + C，重复工作量更是陡增。</p>\n<p>这些重复性操作完全可以通过工具自动生成，提交代码准确性，也能解放自己双手（摸点 🐟 不香吗），提高团队效率。</p>\n<p>工具能做事情，做的东西有很多，不仅仅只是代码生成这些，一切你觉得重复性工作，都可以尝试通过工具来提高自己效率。</p>\n<ul>\n<li>代码生成</li>\n<li>代码格式检测</li>\n<li>智能提示</li>\n<li>测试自动化</li>\n<li>文档集成</li>\n<li>代码调试</li>\n<li>…</li>\n</ul>\n<p>工具实现方式有很多种，这取决在团队需求</p>\n<ul>\n<li>cli</li>\n<li>web （比如通过拖拉拽生成代码）</li>\n<li>编辑器插件 （比如 vscode 插件）</li>\n<li>…</li>\n</ul>\n<h3 id=\"重复代码生成\"><a href=\"#重复代码生成\" class=\"headerlink\" title=\"重复代码生成\"></a>重复代码生成</h3><p>就以上面例子为例，就可以使用工具去生成 接口的定义、表格配置、表单配置以及组件使用代码，不同需求表单、表格那些都是高度相似的，可以通过代码生成方式来提升自己编码效率。</p>\n<p>从接口文档到可用代码，生成的方式大概流程如下：</p>\n<p>接口文档 &#x3D;》 JSON Schema &#x3D;》 UI 交互（可省略）&#x3D;》 根据模板生成 || 根据 AST 生成 &#x3D;》 插入到代码位置</p>\n<h5 id=\"生成-JSON-Schema\"><a href=\"#生成-JSON-Schema\" class=\"headerlink\" title=\"生成 JSON Schema\"></a>生成 JSON Schema</h5><p>为了方便后续代码生成，我们需要首先接口文档转换成一个标准通用格式，这样不管后端提供什么样格式 api 文档或者不管后端使用什么框架去生成 api 文档时，只需要将对应格式转换成我们 JSON Schema 格式即可。</p>\n<h5 id=\"UI-交互\"><a href=\"#UI-交互\" class=\"headerlink\" title=\"UI 交互\"></a>UI 交互</h5><p>UI 交互并不是必须的，比如生成 接口定义、类型定义 并不需要交互，直接生成就可以了。但是像表格生成、表单生成这些是需要的，因为接口返回字段并不一定全是需要生成的，可以通过添加适当交互完成这一步骤。</p>\n<h5 id=\"代码片段生成\"><a href=\"#代码片段生成\" class=\"headerlink\" title=\"代码片段生成\"></a>代码片段生成</h5><p>代码生成方式分两种 <strong>模板</strong>、<strong>AST</strong> 去生成。使用 <strong>模板</strong> 比较简单，也会比较直观，但是缺乏灵活性，使用 <strong>AST</strong> 会更为灵活，但也会复杂的多。</p>\n<h6 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h6><p>对于一些固定代码片段格式，可以选择通过模板去生成，而不必使用 <strong>AST</strong> 增加代码生成复杂度。</p>\n<p>比如你项目中请求方法格式如下，可以直接使用模板去生成，类似这样 <strong>const {0} &#x3D; (par) &#x3D;&gt; http(“{1}”, par, “{2}”);</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">apiFn</span> = (<span class=\"params\">par</span>) =&gt; <span class=\"title function_\">http</span>(<span class=\"string\">&quot;/api/demo&quot;</span>, par, <span class=\"string\">&quot;post&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"AST\"><a href=\"#AST\" class=\"headerlink\" title=\"AST\"></a>AST</h6><p>AST 是抽象语法树 (Abstract Syntax Tree) 的简称，它是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。</p>\n<p>当你生成代码需要根据不同条件生成不同节点，修改不固定时候，可以选择使用 AST 去生成。</p>\n<p>AST 生成原理，简单来说说就是将代码生成一个树状结构，其中树中每个节点描述的应就是你实际代码，我们只需要根据需求去操作对应节点，然后再将 AST 转为代码。</p>\n<p>不同工具生成 AST 是不一致的，可根据实际需求选择。在线查看 AST 结构工具，可以说很直观方便<br><a href=\"https://astexplorer.net/\">ast explorer</a><br><a href=\"https://ts-ast-viewer.com/\">ts ast</a></p>\n<h5 id=\"插入代码位置\"><a href=\"#插入代码位置\" class=\"headerlink\" title=\"插入代码位置\"></a>插入代码位置</h5><p>将生成代码插入到现有代码中，实现方式也有多种不同方式，通过对于简单的结构可以通过正则匹配去替换，对于复杂的结构可以通过 AST 方式去修改插入，如果你是基于编辑器插件去做的，还可以通过获取编辑器光标位置、选中等等操作将代码插入到对于位置。</p>\n<h3 id=\"更方便的文档查阅方式\"><a href=\"#更方便的文档查阅方式\" class=\"headerlink\" title=\"更方便的文档查阅方式\"></a>更方便的文档查阅方式</h3><p>很多公司使用的都是像 yapi、swagger 等那些开源文档管理平台，很多都是 web 在线的，当接口文档字段很多时，需要平凡的来回切换查阅，这样也是比较浪费时间的。可以通过编辑器插件形式集成到我们插件中，这样可以更方便自己开发，也有很多时以及有现成插件可以使用的，但是功能上并不丰富，有些仅仅只能查看，连常见代码都无法生成。</p>\n<p>将接口文档集成到编辑器里能做的事情有很多，以 vscode 来说，可以通过文档快速生成接口定义，还可以通过注册语言服务，来识别检测接口定义正确性，也可以做的接口文档发生变更，做到智能提示然后快速自动修改，也可以通过接口文档快速起个 mock 服务，而不需要手动在项目中添加 mock 定义等等。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>很多繁琐的事情，其实可以尝试通过工具简化这些操作，没有合适的可以尝试自己造个，既可以提升自己能力，又能给团队做一点贡献。</p>"},{"title":"做了个壁纸小程序😀","date":"2022-10-18T07:08:29.000Z","description":null,"keywords":"小程序","_content":"\n各种壁纸app，壁纸小程序打开全是各种广告，太影响使用体验，自己整了个壁纸小程序，简单无广告🤣\n\n附上小程序码：\n\n![xcx.jpg](https://img.lkxin.cn/tu/2022/10/18/634e537320ee3.jpg)_壁了个纸_\n\n<!-- more -->","source":"_posts/blgz.md","raw":"---\ntitle: 做了个壁纸小程序😀\ndate: 2022-10-18 15:08:29\ntags: [小程序]\ncategories: 创造类\ndescription:\nkeywords: 小程序\n---\n\n各种壁纸app，壁纸小程序打开全是各种广告，太影响使用体验，自己整了个壁纸小程序，简单无广告🤣\n\n附上小程序码：\n\n![xcx.jpg](https://img.lkxin.cn/tu/2022/10/18/634e537320ee3.jpg)_壁了个纸_\n\n<!-- more -->","slug":"blgz","published":1,"updated":"2024-03-06T07:42:59.000Z","comments":1,"layout":"post","photos":[],"_id":"cltgz7vqp000d98lg43el7zp5","content":"<p>各种壁纸app，壁纸小程序打开全是各种广告，太影响使用体验，自己整了个壁纸小程序，简单无广告🤣</p>\n<p>附上小程序码：</p>\n<p><img src=\"https://img.lkxin.cn/tu/2022/10/18/634e537320ee3.jpg\" alt=\"xcx.jpg\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><em>壁了个纸</em></p>\n<span id=\"more\"></span>","excerpt":"<p>各种壁纸app，壁纸小程序打开全是各种广告，太影响使用体验，自己整了个壁纸小程序，简单无广告🤣</p>\n<p>附上小程序码：</p>\n<p><img src=\"https://img.lkxin.cn/tu/2022/10/18/634e537320ee3.jpg\" alt=\"xcx.jpg\"><em>壁了个纸</em></p>","more":""},{"title":"关于重写评论插件这件事","comments":1,"date":"2022-02-11T02:28:39.000Z","description":null,"keywords":"云开发,CloudBase,BComments,评论插件","_content":"\n因为以前使用的评论插件存在很多 bug 和漏洞，但是也没啥人用，一直没有去修改，最近空闲时间比较多，所以准备对之前插件进行重构一番。原评论插件是使用原生 JS 编写 WebComponents 组件，感觉结构维护起来挺费力的(自己太菜)，决定使用 Vue3 构建 WebComponents 。\n\n<!-- more -->\n\n## 已支持功能\n- 支持回复 \n- 支持插入表情（可禁用）\n- 支持 Ctrl + Enter 快捷回复\n- 评论框内容实时保存草稿，刷新不会丢失\n- 支持私密评论（可禁用）\n- 隐私信息安全（通过云函数控制敏感字段（邮箱、IP、环境配置等）不会泄露）\n- 支持人工审核模式\n- 防 XSS 注入\n- 支持限制每个 IP 每 10 分钟最多发表多少条评论\n- 支持邮件提醒（访客和博主）, 可扩展三方通知方式\n- 支持自定义“博主”标识文字\n- 支持自定义通知邮件模板\n- 支持自定义【昵称】【邮箱】【网址】必填 / 选填\n- 支持自定义代码高亮主题\n- 支持自定义配置主题 (使用css变量)\n- 通过邮箱登录快捷回复管理\n- 内嵌式管理面板，通过邮箱登录，可方便地查看评论、回复评论、删除评论、修改配置、站点统计信息\n\n## 踩坑记录\n\n### 组件样式问题\nvue-loader 在 customElement 模式下，当使用子组件时候，并不会将子组件样式插入到 shadow-root 里，默认只有父组件的样式，需要我们自己处理下。[参考这里](https://www.imalun.com/vue_web_components)\n\n### style和svg问题\n直接使用打包后都是默认插入到 dom 里的，而没有插入到 customElement 需要我们对这里插入的数据进行一些处理。css 可以配合使用 to-string-loader 在挂载时候手工插入，svg 处理方法也类似这样。\n\n### contenteditable 光标问题\n使用 contenteditable 作为输入框时，当需要插入表情或者粘贴文本到光标处时候，需要存储光标信息，但是在 Can I Use 上看到 ShadowRoot Api: getSelection 的兼容性，可以看到除了 chromium 其他几乎都是不支持的。\n\n### 弹出层问题\n当在 customElement 里实现 Popover 组件，点击其他区域需要关闭弹出层时候，一般情况下我们都是判断当前点击事件触发对象 (target) 是不是我们 Popover 本身来决定我们是否关闭，但是当我们点击在 customElement 上时候 document 事件的 target 是自定义元素本身，不会到自定义元素内部去，所以我们需要在 customElement 和 document 都做一个监听。\n\n### 跨 customElement 数据共享问题\n在评论插件里，com-a(评论组件) 和 com-b(评论管理组件) 是使用的两个 **自定义元素**，但我们在 com-a 登录后，在使用 com-b 也需要有登录状态，这时候我们可能需要共享登录信息。\n\n如果我们是用 js 去编写 customElement 去共享数据是很麻烦的事，还好在 vue3 还是比较好解决的，可以使用 **reactive** 去实现一个简易 store 去共享数据，实现一个 customElement 修改数据多个地方同时修改。\n\n示例\n``` js\nconst store = {\n    state: {\n        // 用户\n        user: reactive({\n            data: null\n        }),\n    }\n}\n\nexport default store\n```\n\n### 给 customElement 添加方法\nvue3 提供 **defineCustomElement** 是没有将可以将函数暴露到 customElement 上的，只能通过元素上的 **_instance** (vue创建 customElement 创建实例) 去调用，需要我们自己对 **defineCustomElement** 做下改造。[参考这里](https://www.imalun.com/vue_web_components)\n\n## 总结\n重构过程中，发现坑还是挺多的，还好大部分还是有解决方法的。重写服务端时候，发现腾讯云云开发的数据库文档还是挺坑的，一些 MongDB 操作在里面也没有，调试也很麻烦。","source":"_posts/cloudbase_comment_two.md","raw":"---\ntitle: 关于重写评论插件这件事\ncomments: true\ndate: 2022-02-11 10:28:39\ntags: [node]\ncategories: 记录类\ndescription: \nkeywords: 云开发,CloudBase,BComments,评论插件\n---\n\n因为以前使用的评论插件存在很多 bug 和漏洞，但是也没啥人用，一直没有去修改，最近空闲时间比较多，所以准备对之前插件进行重构一番。原评论插件是使用原生 JS 编写 WebComponents 组件，感觉结构维护起来挺费力的(自己太菜)，决定使用 Vue3 构建 WebComponents 。\n\n<!-- more -->\n\n## 已支持功能\n- 支持回复 \n- 支持插入表情（可禁用）\n- 支持 Ctrl + Enter 快捷回复\n- 评论框内容实时保存草稿，刷新不会丢失\n- 支持私密评论（可禁用）\n- 隐私信息安全（通过云函数控制敏感字段（邮箱、IP、环境配置等）不会泄露）\n- 支持人工审核模式\n- 防 XSS 注入\n- 支持限制每个 IP 每 10 分钟最多发表多少条评论\n- 支持邮件提醒（访客和博主）, 可扩展三方通知方式\n- 支持自定义“博主”标识文字\n- 支持自定义通知邮件模板\n- 支持自定义【昵称】【邮箱】【网址】必填 / 选填\n- 支持自定义代码高亮主题\n- 支持自定义配置主题 (使用css变量)\n- 通过邮箱登录快捷回复管理\n- 内嵌式管理面板，通过邮箱登录，可方便地查看评论、回复评论、删除评论、修改配置、站点统计信息\n\n## 踩坑记录\n\n### 组件样式问题\nvue-loader 在 customElement 模式下，当使用子组件时候，并不会将子组件样式插入到 shadow-root 里，默认只有父组件的样式，需要我们自己处理下。[参考这里](https://www.imalun.com/vue_web_components)\n\n### style和svg问题\n直接使用打包后都是默认插入到 dom 里的，而没有插入到 customElement 需要我们对这里插入的数据进行一些处理。css 可以配合使用 to-string-loader 在挂载时候手工插入，svg 处理方法也类似这样。\n\n### contenteditable 光标问题\n使用 contenteditable 作为输入框时，当需要插入表情或者粘贴文本到光标处时候，需要存储光标信息，但是在 Can I Use 上看到 ShadowRoot Api: getSelection 的兼容性，可以看到除了 chromium 其他几乎都是不支持的。\n\n### 弹出层问题\n当在 customElement 里实现 Popover 组件，点击其他区域需要关闭弹出层时候，一般情况下我们都是判断当前点击事件触发对象 (target) 是不是我们 Popover 本身来决定我们是否关闭，但是当我们点击在 customElement 上时候 document 事件的 target 是自定义元素本身，不会到自定义元素内部去，所以我们需要在 customElement 和 document 都做一个监听。\n\n### 跨 customElement 数据共享问题\n在评论插件里，com-a(评论组件) 和 com-b(评论管理组件) 是使用的两个 **自定义元素**，但我们在 com-a 登录后，在使用 com-b 也需要有登录状态，这时候我们可能需要共享登录信息。\n\n如果我们是用 js 去编写 customElement 去共享数据是很麻烦的事，还好在 vue3 还是比较好解决的，可以使用 **reactive** 去实现一个简易 store 去共享数据，实现一个 customElement 修改数据多个地方同时修改。\n\n示例\n``` js\nconst store = {\n    state: {\n        // 用户\n        user: reactive({\n            data: null\n        }),\n    }\n}\n\nexport default store\n```\n\n### 给 customElement 添加方法\nvue3 提供 **defineCustomElement** 是没有将可以将函数暴露到 customElement 上的，只能通过元素上的 **_instance** (vue创建 customElement 创建实例) 去调用，需要我们自己对 **defineCustomElement** 做下改造。[参考这里](https://www.imalun.com/vue_web_components)\n\n## 总结\n重构过程中，发现坑还是挺多的，还好大部分还是有解决方法的。重写服务端时候，发现腾讯云云开发的数据库文档还是挺坑的，一些 MongDB 操作在里面也没有，调试也很麻烦。","slug":"cloudbase_comment_two","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vqw000h98lgainighj3","content":"<p>因为以前使用的评论插件存在很多 bug 和漏洞，但是也没啥人用，一直没有去修改，最近空闲时间比较多，所以准备对之前插件进行重构一番。原评论插件是使用原生 JS 编写 WebComponents 组件，感觉结构维护起来挺费力的(自己太菜)，决定使用 Vue3 构建 WebComponents 。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"已支持功能\"><a href=\"#已支持功能\" class=\"headerlink\" title=\"已支持功能\"></a>已支持功能</h2><ul>\n<li>支持回复 </li>\n<li>支持插入表情（可禁用）</li>\n<li>支持 Ctrl + Enter 快捷回复</li>\n<li>评论框内容实时保存草稿，刷新不会丢失</li>\n<li>支持私密评论（可禁用）</li>\n<li>隐私信息安全（通过云函数控制敏感字段（邮箱、IP、环境配置等）不会泄露）</li>\n<li>支持人工审核模式</li>\n<li>防 XSS 注入</li>\n<li>支持限制每个 IP 每 10 分钟最多发表多少条评论</li>\n<li>支持邮件提醒（访客和博主）, 可扩展三方通知方式</li>\n<li>支持自定义“博主”标识文字</li>\n<li>支持自定义通知邮件模板</li>\n<li>支持自定义【昵称】【邮箱】【网址】必填 &#x2F; 选填</li>\n<li>支持自定义代码高亮主题</li>\n<li>支持自定义配置主题 (使用css变量)</li>\n<li>通过邮箱登录快捷回复管理</li>\n<li>内嵌式管理面板，通过邮箱登录，可方便地查看评论、回复评论、删除评论、修改配置、站点统计信息</li>\n</ul>\n<h2 id=\"踩坑记录\"><a href=\"#踩坑记录\" class=\"headerlink\" title=\"踩坑记录\"></a>踩坑记录</h2><h3 id=\"组件样式问题\"><a href=\"#组件样式问题\" class=\"headerlink\" title=\"组件样式问题\"></a>组件样式问题</h3><p>vue-loader 在 customElement 模式下，当使用子组件时候，并不会将子组件样式插入到 shadow-root 里，默认只有父组件的样式，需要我们自己处理下。<a href=\"https://www.imalun.com/vue_web_components\">参考这里</a></p>\n<h3 id=\"style和svg问题\"><a href=\"#style和svg问题\" class=\"headerlink\" title=\"style和svg问题\"></a>style和svg问题</h3><p>直接使用打包后都是默认插入到 dom 里的，而没有插入到 customElement 需要我们对这里插入的数据进行一些处理。css 可以配合使用 to-string-loader 在挂载时候手工插入，svg 处理方法也类似这样。</p>\n<h3 id=\"contenteditable-光标问题\"><a href=\"#contenteditable-光标问题\" class=\"headerlink\" title=\"contenteditable 光标问题\"></a>contenteditable 光标问题</h3><p>使用 contenteditable 作为输入框时，当需要插入表情或者粘贴文本到光标处时候，需要存储光标信息，但是在 Can I Use 上看到 ShadowRoot Api: getSelection 的兼容性，可以看到除了 chromium 其他几乎都是不支持的。</p>\n<h3 id=\"弹出层问题\"><a href=\"#弹出层问题\" class=\"headerlink\" title=\"弹出层问题\"></a>弹出层问题</h3><p>当在 customElement 里实现 Popover 组件，点击其他区域需要关闭弹出层时候，一般情况下我们都是判断当前点击事件触发对象 (target) 是不是我们 Popover 本身来决定我们是否关闭，但是当我们点击在 customElement 上时候 document 事件的 target 是自定义元素本身，不会到自定义元素内部去，所以我们需要在 customElement 和 document 都做一个监听。</p>\n<h3 id=\"跨-customElement-数据共享问题\"><a href=\"#跨-customElement-数据共享问题\" class=\"headerlink\" title=\"跨 customElement 数据共享问题\"></a>跨 customElement 数据共享问题</h3><p>在评论插件里，com-a(评论组件) 和 com-b(评论管理组件) 是使用的两个 <strong>自定义元素</strong>，但我们在 com-a 登录后，在使用 com-b 也需要有登录状态，这时候我们可能需要共享登录信息。</p>\n<p>如果我们是用 js 去编写 customElement 去共享数据是很麻烦的事，还好在 vue3 还是比较好解决的，可以使用 <strong>reactive</strong> 去实现一个简易 store 去共享数据，实现一个 customElement 修改数据多个地方同时修改。</p>\n<p>示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = &#123;</span><br><span class=\"line\">    <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用户</span></span><br><span class=\"line\">        <span class=\"attr\">user</span>: <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">data</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给-customElement-添加方法\"><a href=\"#给-customElement-添加方法\" class=\"headerlink\" title=\"给 customElement 添加方法\"></a>给 customElement 添加方法</h3><p>vue3 提供 <strong>defineCustomElement</strong> 是没有将可以将函数暴露到 customElement 上的，只能通过元素上的 <strong>_instance</strong> (vue创建 customElement 创建实例) 去调用，需要我们自己对 <strong>defineCustomElement</strong> 做下改造。<a href=\"https://www.imalun.com/vue_web_components\">参考这里</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>重构过程中，发现坑还是挺多的，还好大部分还是有解决方法的。重写服务端时候，发现腾讯云云开发的数据库文档还是挺坑的，一些 MongDB 操作在里面也没有，调试也很麻烦。</p>\n","excerpt":"<p>因为以前使用的评论插件存在很多 bug 和漏洞，但是也没啥人用，一直没有去修改，最近空闲时间比较多，所以准备对之前插件进行重构一番。原评论插件是使用原生 JS 编写 WebComponents 组件，感觉结构维护起来挺费力的(自己太菜)，决定使用 Vue3 构建 WebComponents 。</p>","more":"<h2 id=\"已支持功能\"><a href=\"#已支持功能\" class=\"headerlink\" title=\"已支持功能\"></a>已支持功能</h2><ul>\n<li>支持回复 </li>\n<li>支持插入表情（可禁用）</li>\n<li>支持 Ctrl + Enter 快捷回复</li>\n<li>评论框内容实时保存草稿，刷新不会丢失</li>\n<li>支持私密评论（可禁用）</li>\n<li>隐私信息安全（通过云函数控制敏感字段（邮箱、IP、环境配置等）不会泄露）</li>\n<li>支持人工审核模式</li>\n<li>防 XSS 注入</li>\n<li>支持限制每个 IP 每 10 分钟最多发表多少条评论</li>\n<li>支持邮件提醒（访客和博主）, 可扩展三方通知方式</li>\n<li>支持自定义“博主”标识文字</li>\n<li>支持自定义通知邮件模板</li>\n<li>支持自定义【昵称】【邮箱】【网址】必填 &#x2F; 选填</li>\n<li>支持自定义代码高亮主题</li>\n<li>支持自定义配置主题 (使用css变量)</li>\n<li>通过邮箱登录快捷回复管理</li>\n<li>内嵌式管理面板，通过邮箱登录，可方便地查看评论、回复评论、删除评论、修改配置、站点统计信息</li>\n</ul>\n<h2 id=\"踩坑记录\"><a href=\"#踩坑记录\" class=\"headerlink\" title=\"踩坑记录\"></a>踩坑记录</h2><h3 id=\"组件样式问题\"><a href=\"#组件样式问题\" class=\"headerlink\" title=\"组件样式问题\"></a>组件样式问题</h3><p>vue-loader 在 customElement 模式下，当使用子组件时候，并不会将子组件样式插入到 shadow-root 里，默认只有父组件的样式，需要我们自己处理下。<a href=\"https://www.imalun.com/vue_web_components\">参考这里</a></p>\n<h3 id=\"style和svg问题\"><a href=\"#style和svg问题\" class=\"headerlink\" title=\"style和svg问题\"></a>style和svg问题</h3><p>直接使用打包后都是默认插入到 dom 里的，而没有插入到 customElement 需要我们对这里插入的数据进行一些处理。css 可以配合使用 to-string-loader 在挂载时候手工插入，svg 处理方法也类似这样。</p>\n<h3 id=\"contenteditable-光标问题\"><a href=\"#contenteditable-光标问题\" class=\"headerlink\" title=\"contenteditable 光标问题\"></a>contenteditable 光标问题</h3><p>使用 contenteditable 作为输入框时，当需要插入表情或者粘贴文本到光标处时候，需要存储光标信息，但是在 Can I Use 上看到 ShadowRoot Api: getSelection 的兼容性，可以看到除了 chromium 其他几乎都是不支持的。</p>\n<h3 id=\"弹出层问题\"><a href=\"#弹出层问题\" class=\"headerlink\" title=\"弹出层问题\"></a>弹出层问题</h3><p>当在 customElement 里实现 Popover 组件，点击其他区域需要关闭弹出层时候，一般情况下我们都是判断当前点击事件触发对象 (target) 是不是我们 Popover 本身来决定我们是否关闭，但是当我们点击在 customElement 上时候 document 事件的 target 是自定义元素本身，不会到自定义元素内部去，所以我们需要在 customElement 和 document 都做一个监听。</p>\n<h3 id=\"跨-customElement-数据共享问题\"><a href=\"#跨-customElement-数据共享问题\" class=\"headerlink\" title=\"跨 customElement 数据共享问题\"></a>跨 customElement 数据共享问题</h3><p>在评论插件里，com-a(评论组件) 和 com-b(评论管理组件) 是使用的两个 <strong>自定义元素</strong>，但我们在 com-a 登录后，在使用 com-b 也需要有登录状态，这时候我们可能需要共享登录信息。</p>\n<p>如果我们是用 js 去编写 customElement 去共享数据是很麻烦的事，还好在 vue3 还是比较好解决的，可以使用 <strong>reactive</strong> 去实现一个简易 store 去共享数据，实现一个 customElement 修改数据多个地方同时修改。</p>\n<p>示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = &#123;</span><br><span class=\"line\">    <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 用户</span></span><br><span class=\"line\">        <span class=\"attr\">user</span>: <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">data</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给-customElement-添加方法\"><a href=\"#给-customElement-添加方法\" class=\"headerlink\" title=\"给 customElement 添加方法\"></a>给 customElement 添加方法</h3><p>vue3 提供 <strong>defineCustomElement</strong> 是没有将可以将函数暴露到 customElement 上的，只能通过元素上的 <strong>_instance</strong> (vue创建 customElement 创建实例) 去调用，需要我们自己对 <strong>defineCustomElement</strong> 做下改造。<a href=\"https://www.imalun.com/vue_web_components\">参考这里</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>重构过程中，发现坑还是挺多的，还好大部分还是有解决方法的。重写服务端时候，发现腾讯云云开发的数据库文档还是挺坑的，一些 MongDB 操作在里面也没有，调试也很麻烦。</p>"},{"title":"基于 CloudBase 实现静态博客评论 （一）","comments":1,"date":"2020-06-08T14:50:29.000Z","description":null,"keywords":"云开发,CloudBase","_content":"\n使用 CloudBase 给静态博客添加评论功能。\n\n<!-- more -->\n\n## 申请 CloudBase ##\n\n新建CloudBase环境\n\n![](/images/posts/cloudbase/20200615242451.png)\n\n选中包年包月，选择基础版1 (或者选择按量计费，开启免费额度)\n\n![](/images/posts/cloudbase/20200615232440.png)\n\n在安全配置->Web安全域名 将自己得域名添加进去\n\n![](/images/posts/cloudbase/20200615234334.png)\n\n\n## 评论大致流程 ##\n\n![](/images/posts/cloudbase/20200615221122.png)\n\n## 数据结构 ##\n\n```json\n{\n    \"id\":\"唯一ID\",\n    \"articleID\":\"文章ID\",\n    \"nick\":\"昵称\",\n    \"email\":\"邮箱\",\n    \"url\":\"链接\",\n    \"date\":\"时间\",\n    \"content\":\"评论内容\",\n    \"top\":\"置顶\",\n    \"childer\":[\n        {\n            \"id\":\"唯一ID\",\n            \"nick\":\"昵称\",\n            \"email\":\"邮箱\",\n            \"url\":\"链接\",\n            \"date\":\"时间\",\n            \"content\":\"评论内容\",\n            \"at\":{ //回复\n                \"nick\":\"昵称\",\n                \"email\":\"邮箱\",\n            }\n        },\n        {\n            \"id\":\"唯一ID\",\n            \"nick\":\"昵称\",\n            \"email\":\"邮箱\",\n            \"url\":\"链接\",\n            \"date\":\"时间\",\n            \"content\":\"评论内容\",\n            \"at\":{\n                \"nick\":\"昵称\",\n                \"email\":\"邮箱\",\n            }\n        }\n    ]\n}\n```\n\n\n## CloudBase 开发 ##\n\n在 VS Code  安装 tencentcloud.cloudbase-toolkit 插件，直接在 VS Code 上去创建、编写、部署。[参考地址](https://www.cloudbase.net/)\n常用操作。\n![](/images/posts/cloudbase/20200616162909.png)\n\n### 创建集合 ###\n在数据库新增两个集合 article,comments 。\n![](/images/posts/cloudbase/20200616162356.png)\n\n### 云函数 ###\n\n目前云函数支持 Node，PHP，Python 三种，本文使用 Node 为云函数环境\n\n#### 获取文章ID ####\n\n新建一个云函数 GetArticleID,代码如下\n\n``` js\n'use strict';\nconst tcb = require('tcb-admin-node');\nconst app = tcb.init({ env: '环境ID' });\nconst db = app.database();\nconst articleDb = db.collection('article');\n\nexports.main = async (event) => {\n    try {\n        let { hash, url } = event;\n        //根据 hash 获取 article id\n        let { data } = await articleDb.field({ _id: 1 }).where({ hash }).get();\n        let articleID = '';\n        if (data.length === 0) {\n            //不存在  新增一条 article 数据\n            let { id } = await articleDb.add({ date: new Date(), url, hash, })\n            articleID = id;\n        } else {\n            let { _id } = data[0]\n            articleID = _id;\n        }\n\n        return {\n            success: true,\n            data: articleID\n        }\n    } catch (error) {\n        return {\n            success: false,\n            data: error\n        }\n    }\n}\n```\n\n#### 获取评论列表 ####\n\n新建一个云函数 GetComments，代码如下\n\n``` js\n'use strict';\nconst tcb = require('tcb-admin-node');\nconst app = tcb.init({ env:\"环境ID\" });\nconst db = app.database();\nconst _ = db.command;\nconst $ = _.aggregate;\nconst commentsDB = db.collection('comments');\n\nexports.main = async (event, context) => {\n    let { pagesize, articleID = '' } = event;\n    if (isNaN(parseInt(pagesize)) || pagesize < 1) {\n        return []\n    }\n\n    let { data: list } = await commentsDB\n        .aggregate()\n        //查询条件\n        .match({ articleID })\n        //排序\n        .sort({\n            top: -1,\n            date: -1\n        })\n        //分页\n        .skip((pagesize - 1) * 10)\n        .limit(10)\n        //指定需要查询字段\n        .project({\n            _id: 0,\n            id: \"$_id\",\n            articleID: 1,\n            nick: 1,\n            link: 1,\n            date: 1,\n            content: 1,\n            top: 1,\n            childer: {\n                id: 1,\n                nick: 1,\n                link: 1,\n                date: 1,\n                content: 1,\n                at: {\n                    nick: 1,\n                    link: 1,\n                }\n            }\n        })\n        .end()\n\n    return list\n};\n```\n\n#### 新增、回复 ####\n\n新建一个云函数 AddComment，代码如下\n使用 nodemailer 来发送邮件通知，nodemailer [参考文档](https://nodemailer.com/about/)\n\n``` js\n'use strict';\nconst tcb = require('tcb-admin-node');\nconst nodemailer = require('nodemailer');\nconst uuid = require('node-uuid');\nconst app = tcb.init({ env:\"环境ID\" });\nconst db = app.database();\nconst _ = db.command;\nconst $ = _.aggregate\nconst comments = db.collection('comments');\n\n//邮件配置\nconst config = {\n    host: 'smtp.qq.com',\n    port: 465,\n    secure: true,\n    auth: {\n        user: '邮箱@xx.com',\n        pass: '密码或者授权码' //推荐使用授权码\n    }\n};\n\nlet transporter = nodemailer.createTransport(config);\n\n\nexports.main = async (event, context) => {\n    let { articleID = '', url = '',  nick = 'Anonymous', email = '', link = '', content = '', at = false, istop = true, topID = '', userID = '' } = event;\n\n    if (content == '' || articleID == '' || (!istop && topID == '')) {\n        return { success: false, data: '数据格式有误' };\n    }\n\n    let date = new Date();\n    let par = { userID, articleID, content, url, nick, email, link, at, istop, date }\n\n    if (at) {\n        par.id= uuid.v1().replace(/\\-/g,'');\n        let res = await comments.where({ _id: topID }).update({ childer: _.push([par]) })\n\n        let _atemail = await getEmailByID(at.id);\n        if (!!_atemail && _atemail != email) {\n            sendemail(_atemail, nick, content)\n        }\n\n        return { success: true, data: { date } }\n    } else {\n        let { code = false, message, id } = await comments.add(par)\n        return { success: !code, data: !code ? { id, date } : message }\n    }\n};\n\n/*\n*根据回复id获取 对应人 邮箱\n*/\nasync function getEmailByID(id) {\n    let { data } = await comments.where({ _id: id }).get()\n    if (data.length === 0) {\n        let { data } = await comments\n            .aggregate()\n            .match({ 'childer.id': id })\n            .project({\n                _id: 0,\n                item: $.filter({\n                    input: '$childer',\n                    as: 'item',\n                    cond: $.eq(['$$item.id', id])\n                })\n            })\n            .end();\n        console.log(JSON.stringify(data))\n        if (data.length > 0) return data[0].item[0].email\n        return ''\n    } else {\n        return data[0].email;\n    }\n}\n\n/**\n * \n * email 收件人邮箱\n * nick 评论人昵称\n * content 评论类容\n*/\nasync function sendemail(email, nick, content) {\n    let date = new Date();\n    let str = `${date.getFullYear()}年${date.getMonth() + 1}月${date.getDate()}日 ${date.getHours()}时${date.getMinutes()}分${date.getSeconds()}秒`;\n    let mail = {\n        from: '白云苍狗 <xxxxx@qq.com>',\n        subject: '[白云苍狗][博客] 收到新的回复',\n        to: email,\n        html: `\n        <h2>${nick} ${str} 回复了您<h2>\n        ${content}\n        `\n    }\n    return transporter.sendMail(mail);\n};\n```\n\n## web 端 ##\n对 tcb 做一个简单封装\n``` js\nexport default class tcbComment {\n\n    constructor(env, hash) {\n        if (!env) {\n            console.error(\"未设置CloudBase环境id:env\");\n            return;\n        }\n        if (!hash) {\n            console.error(\"未设置当前Comment的hash值\");\n            return;\n        }\n        this.env = env;\n        this.skip = 1\n        this.hash = hash;\n    }\n\n    /**\n     * 初始化\n     */\n    async _init() {\n        let tcb = await TcbLoader()\n        this.app = tcb.init({ env: this.env });\n        let auth = this.app.auth({\n            persistence: \"local\"\n        });\n        if (!auth.hasLoginState()) {\n            await auth.anonymousAuthProvider().signIn()\n        }\n\n        await this.getArticleID(this.hash)\n    }\n\n    //获取\n    async getArticleID(hash) {\n        let res = await this.app.callFunction({\n            name: 'getArticleID',\n            data: {\n                hash,\n                url: location.pathname,\n            }\n        })\n        let { result: { success, data } } = res;\n        if (success) {\n            this.articleID = data;\n        }\n    }\n\n    //获取评论列表\n    async getComment() {\n        let res = await this.app.callFunction({\n            name: 'getComments',\n            data: {\n                pagesize: this.skip++,\n                articleID: this.articleID\n            }\n        })\n        return res.result;\n    }\n\n    //新增\n    async addComment(parm) {\n        let res = await this.app.callFunction({\n            name: 'addComment',\n            data: {\n                articleID: this.articleID,\n                ...parm\n            }\n        })\n        return res;\n    }\n}\n\n/**\n* 加载tcb-js-jdk\n*/\nconst TcbLoader = function (v = '1.6.0') {\n    return new Promise((resolve, reject) => {\n        if (window.tcb) {\n            resolve(window.tcb)\n        } else {\n            var script = document.createElement('script')\n            script.type = 'text/javascript'\n            script.async = true\n            script.src = `//imgcache.qq.com/qcloud/tcbjs/${v}/tcb.js`\n            script.onerror = reject\n            script.onload = () => resolve(window.tcb)\n            document.head.appendChild(script)\n        }\n    })\n}\n```\n\n## 小结 ##\n弄完cloudbase 云函数，和对 web 端简单使用封装，剩下得就是页面上弄个评论列表组件和评论组件了","source":"_posts/cloudbase_comment.md","raw":"---\ntitle: 基于 CloudBase 实现静态博客评论 （一）\ncomments: true\ndate: 2020-06-08 22:50:29\ntags: [node]\ncategories: 记录类\ndescription: \nkeywords: 云开发,CloudBase\n---\n\n使用 CloudBase 给静态博客添加评论功能。\n\n<!-- more -->\n\n## 申请 CloudBase ##\n\n新建CloudBase环境\n\n![](/images/posts/cloudbase/20200615242451.png)\n\n选中包年包月，选择基础版1 (或者选择按量计费，开启免费额度)\n\n![](/images/posts/cloudbase/20200615232440.png)\n\n在安全配置->Web安全域名 将自己得域名添加进去\n\n![](/images/posts/cloudbase/20200615234334.png)\n\n\n## 评论大致流程 ##\n\n![](/images/posts/cloudbase/20200615221122.png)\n\n## 数据结构 ##\n\n```json\n{\n    \"id\":\"唯一ID\",\n    \"articleID\":\"文章ID\",\n    \"nick\":\"昵称\",\n    \"email\":\"邮箱\",\n    \"url\":\"链接\",\n    \"date\":\"时间\",\n    \"content\":\"评论内容\",\n    \"top\":\"置顶\",\n    \"childer\":[\n        {\n            \"id\":\"唯一ID\",\n            \"nick\":\"昵称\",\n            \"email\":\"邮箱\",\n            \"url\":\"链接\",\n            \"date\":\"时间\",\n            \"content\":\"评论内容\",\n            \"at\":{ //回复\n                \"nick\":\"昵称\",\n                \"email\":\"邮箱\",\n            }\n        },\n        {\n            \"id\":\"唯一ID\",\n            \"nick\":\"昵称\",\n            \"email\":\"邮箱\",\n            \"url\":\"链接\",\n            \"date\":\"时间\",\n            \"content\":\"评论内容\",\n            \"at\":{\n                \"nick\":\"昵称\",\n                \"email\":\"邮箱\",\n            }\n        }\n    ]\n}\n```\n\n\n## CloudBase 开发 ##\n\n在 VS Code  安装 tencentcloud.cloudbase-toolkit 插件，直接在 VS Code 上去创建、编写、部署。[参考地址](https://www.cloudbase.net/)\n常用操作。\n![](/images/posts/cloudbase/20200616162909.png)\n\n### 创建集合 ###\n在数据库新增两个集合 article,comments 。\n![](/images/posts/cloudbase/20200616162356.png)\n\n### 云函数 ###\n\n目前云函数支持 Node，PHP，Python 三种，本文使用 Node 为云函数环境\n\n#### 获取文章ID ####\n\n新建一个云函数 GetArticleID,代码如下\n\n``` js\n'use strict';\nconst tcb = require('tcb-admin-node');\nconst app = tcb.init({ env: '环境ID' });\nconst db = app.database();\nconst articleDb = db.collection('article');\n\nexports.main = async (event) => {\n    try {\n        let { hash, url } = event;\n        //根据 hash 获取 article id\n        let { data } = await articleDb.field({ _id: 1 }).where({ hash }).get();\n        let articleID = '';\n        if (data.length === 0) {\n            //不存在  新增一条 article 数据\n            let { id } = await articleDb.add({ date: new Date(), url, hash, })\n            articleID = id;\n        } else {\n            let { _id } = data[0]\n            articleID = _id;\n        }\n\n        return {\n            success: true,\n            data: articleID\n        }\n    } catch (error) {\n        return {\n            success: false,\n            data: error\n        }\n    }\n}\n```\n\n#### 获取评论列表 ####\n\n新建一个云函数 GetComments，代码如下\n\n``` js\n'use strict';\nconst tcb = require('tcb-admin-node');\nconst app = tcb.init({ env:\"环境ID\" });\nconst db = app.database();\nconst _ = db.command;\nconst $ = _.aggregate;\nconst commentsDB = db.collection('comments');\n\nexports.main = async (event, context) => {\n    let { pagesize, articleID = '' } = event;\n    if (isNaN(parseInt(pagesize)) || pagesize < 1) {\n        return []\n    }\n\n    let { data: list } = await commentsDB\n        .aggregate()\n        //查询条件\n        .match({ articleID })\n        //排序\n        .sort({\n            top: -1,\n            date: -1\n        })\n        //分页\n        .skip((pagesize - 1) * 10)\n        .limit(10)\n        //指定需要查询字段\n        .project({\n            _id: 0,\n            id: \"$_id\",\n            articleID: 1,\n            nick: 1,\n            link: 1,\n            date: 1,\n            content: 1,\n            top: 1,\n            childer: {\n                id: 1,\n                nick: 1,\n                link: 1,\n                date: 1,\n                content: 1,\n                at: {\n                    nick: 1,\n                    link: 1,\n                }\n            }\n        })\n        .end()\n\n    return list\n};\n```\n\n#### 新增、回复 ####\n\n新建一个云函数 AddComment，代码如下\n使用 nodemailer 来发送邮件通知，nodemailer [参考文档](https://nodemailer.com/about/)\n\n``` js\n'use strict';\nconst tcb = require('tcb-admin-node');\nconst nodemailer = require('nodemailer');\nconst uuid = require('node-uuid');\nconst app = tcb.init({ env:\"环境ID\" });\nconst db = app.database();\nconst _ = db.command;\nconst $ = _.aggregate\nconst comments = db.collection('comments');\n\n//邮件配置\nconst config = {\n    host: 'smtp.qq.com',\n    port: 465,\n    secure: true,\n    auth: {\n        user: '邮箱@xx.com',\n        pass: '密码或者授权码' //推荐使用授权码\n    }\n};\n\nlet transporter = nodemailer.createTransport(config);\n\n\nexports.main = async (event, context) => {\n    let { articleID = '', url = '',  nick = 'Anonymous', email = '', link = '', content = '', at = false, istop = true, topID = '', userID = '' } = event;\n\n    if (content == '' || articleID == '' || (!istop && topID == '')) {\n        return { success: false, data: '数据格式有误' };\n    }\n\n    let date = new Date();\n    let par = { userID, articleID, content, url, nick, email, link, at, istop, date }\n\n    if (at) {\n        par.id= uuid.v1().replace(/\\-/g,'');\n        let res = await comments.where({ _id: topID }).update({ childer: _.push([par]) })\n\n        let _atemail = await getEmailByID(at.id);\n        if (!!_atemail && _atemail != email) {\n            sendemail(_atemail, nick, content)\n        }\n\n        return { success: true, data: { date } }\n    } else {\n        let { code = false, message, id } = await comments.add(par)\n        return { success: !code, data: !code ? { id, date } : message }\n    }\n};\n\n/*\n*根据回复id获取 对应人 邮箱\n*/\nasync function getEmailByID(id) {\n    let { data } = await comments.where({ _id: id }).get()\n    if (data.length === 0) {\n        let { data } = await comments\n            .aggregate()\n            .match({ 'childer.id': id })\n            .project({\n                _id: 0,\n                item: $.filter({\n                    input: '$childer',\n                    as: 'item',\n                    cond: $.eq(['$$item.id', id])\n                })\n            })\n            .end();\n        console.log(JSON.stringify(data))\n        if (data.length > 0) return data[0].item[0].email\n        return ''\n    } else {\n        return data[0].email;\n    }\n}\n\n/**\n * \n * email 收件人邮箱\n * nick 评论人昵称\n * content 评论类容\n*/\nasync function sendemail(email, nick, content) {\n    let date = new Date();\n    let str = `${date.getFullYear()}年${date.getMonth() + 1}月${date.getDate()}日 ${date.getHours()}时${date.getMinutes()}分${date.getSeconds()}秒`;\n    let mail = {\n        from: '白云苍狗 <xxxxx@qq.com>',\n        subject: '[白云苍狗][博客] 收到新的回复',\n        to: email,\n        html: `\n        <h2>${nick} ${str} 回复了您<h2>\n        ${content}\n        `\n    }\n    return transporter.sendMail(mail);\n};\n```\n\n## web 端 ##\n对 tcb 做一个简单封装\n``` js\nexport default class tcbComment {\n\n    constructor(env, hash) {\n        if (!env) {\n            console.error(\"未设置CloudBase环境id:env\");\n            return;\n        }\n        if (!hash) {\n            console.error(\"未设置当前Comment的hash值\");\n            return;\n        }\n        this.env = env;\n        this.skip = 1\n        this.hash = hash;\n    }\n\n    /**\n     * 初始化\n     */\n    async _init() {\n        let tcb = await TcbLoader()\n        this.app = tcb.init({ env: this.env });\n        let auth = this.app.auth({\n            persistence: \"local\"\n        });\n        if (!auth.hasLoginState()) {\n            await auth.anonymousAuthProvider().signIn()\n        }\n\n        await this.getArticleID(this.hash)\n    }\n\n    //获取\n    async getArticleID(hash) {\n        let res = await this.app.callFunction({\n            name: 'getArticleID',\n            data: {\n                hash,\n                url: location.pathname,\n            }\n        })\n        let { result: { success, data } } = res;\n        if (success) {\n            this.articleID = data;\n        }\n    }\n\n    //获取评论列表\n    async getComment() {\n        let res = await this.app.callFunction({\n            name: 'getComments',\n            data: {\n                pagesize: this.skip++,\n                articleID: this.articleID\n            }\n        })\n        return res.result;\n    }\n\n    //新增\n    async addComment(parm) {\n        let res = await this.app.callFunction({\n            name: 'addComment',\n            data: {\n                articleID: this.articleID,\n                ...parm\n            }\n        })\n        return res;\n    }\n}\n\n/**\n* 加载tcb-js-jdk\n*/\nconst TcbLoader = function (v = '1.6.0') {\n    return new Promise((resolve, reject) => {\n        if (window.tcb) {\n            resolve(window.tcb)\n        } else {\n            var script = document.createElement('script')\n            script.type = 'text/javascript'\n            script.async = true\n            script.src = `//imgcache.qq.com/qcloud/tcbjs/${v}/tcb.js`\n            script.onerror = reject\n            script.onload = () => resolve(window.tcb)\n            document.head.appendChild(script)\n        }\n    })\n}\n```\n\n## 小结 ##\n弄完cloudbase 云函数，和对 web 端简单使用封装，剩下得就是页面上弄个评论列表组件和评论组件了","slug":"cloudbase_comment","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vqx000j98lg3dixeriq","content":"<p>使用 CloudBase 给静态博客添加评论功能。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"申请-CloudBase\"><a href=\"#申请-CloudBase\" class=\"headerlink\" title=\"申请 CloudBase\"></a>申请 CloudBase</h2><p>新建CloudBase环境</p>\n<p><img src=\"/images/posts/cloudbase/20200615242451.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<p>选中包年包月，选择基础版1 (或者选择按量计费，开启免费额度)</p>\n<p><img src=\"/images/posts/cloudbase/20200615232440.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<p>在安全配置-&gt;Web安全域名 将自己得域名添加进去</p>\n<p><img src=\"/images/posts/cloudbase/20200615234334.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<h2 id=\"评论大致流程\"><a href=\"#评论大致流程\" class=\"headerlink\" title=\"评论大致流程\"></a>评论大致流程</h2><p><img src=\"/images/posts/cloudbase/20200615221122.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;唯一ID&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;articleID&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;文章ID&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;nick&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;昵称&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;邮箱&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;链接&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;时间&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;评论内容&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;top&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;置顶&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;childer&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;唯一ID&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;nick&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;昵称&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;邮箱&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;链接&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;时间&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;评论内容&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;at&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">//回复</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;nick&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;昵称&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;邮箱&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;唯一ID&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;nick&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;昵称&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;邮箱&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;链接&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;时间&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;评论内容&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;at&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;nick&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;昵称&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;邮箱&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"CloudBase-开发\"><a href=\"#CloudBase-开发\" class=\"headerlink\" title=\"CloudBase 开发\"></a>CloudBase 开发</h2><p>在 VS Code  安装 tencentcloud.cloudbase-toolkit 插件，直接在 VS Code 上去创建、编写、部署。<a href=\"https://www.cloudbase.net/\">参考地址</a><br>常用操作。<br><img src=\"/images/posts/cloudbase/20200616162909.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<h3 id=\"创建集合\"><a href=\"#创建集合\" class=\"headerlink\" title=\"创建集合\"></a>创建集合</h3><p>在数据库新增两个集合 article,comments 。<br><img src=\"/images/posts/cloudbase/20200616162356.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<h3 id=\"云函数\"><a href=\"#云函数\" class=\"headerlink\" title=\"云函数\"></a>云函数</h3><p>目前云函数支持 Node，PHP，Python 三种，本文使用 Node 为云函数环境</p>\n<h4 id=\"获取文章ID\"><a href=\"#获取文章ID\" class=\"headerlink\" title=\"获取文章ID\"></a>获取文章ID</h4><p>新建一个云函数 GetArticleID,代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> tcb = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tcb-admin-node&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = tcb.<span class=\"title function_\">init</span>(&#123; <span class=\"attr\">env</span>: <span class=\"string\">&#x27;环境ID&#x27;</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> db = app.<span class=\"title function_\">database</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> articleDb = db.<span class=\"title function_\">collection</span>(<span class=\"string\">&#x27;article&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">main</span> = <span class=\"keyword\">async</span> (event) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123; hash, url &#125; = event;</span><br><span class=\"line\">        <span class=\"comment\">//根据 hash 获取 article id</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123; data &#125; = <span class=\"keyword\">await</span> articleDb.<span class=\"title function_\">field</span>(&#123; <span class=\"attr\">_id</span>: <span class=\"number\">1</span> &#125;).<span class=\"title function_\">where</span>(&#123; hash &#125;).<span class=\"title function_\">get</span>();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> articleID = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//不存在  新增一条 article 数据</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> &#123; id &#125; = <span class=\"keyword\">await</span> articleDb.<span class=\"title function_\">add</span>(&#123; <span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(), url, hash, &#125;)</span><br><span class=\"line\">            articleID = id;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> &#123; _id &#125; = data[<span class=\"number\">0</span>]</span><br><span class=\"line\">            articleID = _id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">success</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: articleID</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">success</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: error</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取评论列表\"><a href=\"#获取评论列表\" class=\"headerlink\" title=\"获取评论列表\"></a>获取评论列表</h4><p>新建一个云函数 GetComments，代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> tcb = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tcb-admin-node&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = tcb.<span class=\"title function_\">init</span>(&#123; <span class=\"attr\">env</span>:<span class=\"string\">&quot;环境ID&quot;</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> db = app.<span class=\"title function_\">database</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> _ = db.<span class=\"property\">command</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> $ = _.<span class=\"property\">aggregate</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> commentsDB = db.<span class=\"title function_\">collection</span>(<span class=\"string\">&#x27;comments&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">main</span> = <span class=\"keyword\">async</span> (event, context) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; pagesize, articleID = <span class=\"string\">&#x27;&#x27;</span> &#125; = event;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(<span class=\"built_in\">parseInt</span>(pagesize)) || pagesize &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; <span class=\"attr\">data</span>: list &#125; = <span class=\"keyword\">await</span> commentsDB</span><br><span class=\"line\">        .<span class=\"title function_\">aggregate</span>()</span><br><span class=\"line\">        <span class=\"comment\">//查询条件</span></span><br><span class=\"line\">        .<span class=\"title function_\">match</span>(&#123; articleID &#125;)</span><br><span class=\"line\">        <span class=\"comment\">//排序</span></span><br><span class=\"line\">        .<span class=\"title function_\">sort</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">top</span>: -<span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">date</span>: -<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">//分页</span></span><br><span class=\"line\">        .<span class=\"title function_\">skip</span>((pagesize - <span class=\"number\">1</span>) * <span class=\"number\">10</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">limit</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"comment\">//指定需要查询字段</span></span><br><span class=\"line\">        .<span class=\"title function_\">project</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">_id</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">id</span>: <span class=\"string\">&quot;$_id&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">articleID</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">nick</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">link</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">date</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">content</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">top</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">childer</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">nick</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">link</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">date</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">content</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">at</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">nick</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                    <span class=\"attr\">link</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">end</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新增、回复\"><a href=\"#新增、回复\" class=\"headerlink\" title=\"新增、回复\"></a>新增、回复</h4><p>新建一个云函数 AddComment，代码如下<br>使用 nodemailer 来发送邮件通知，nodemailer <a href=\"https://nodemailer.com/about/\">参考文档</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> tcb = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tcb-admin-node&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> nodemailer = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;nodemailer&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> uuid = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;node-uuid&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = tcb.<span class=\"title function_\">init</span>(&#123; <span class=\"attr\">env</span>:<span class=\"string\">&quot;环境ID&quot;</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> db = app.<span class=\"title function_\">database</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> _ = db.<span class=\"property\">command</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> $ = _.<span class=\"property\">aggregate</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> comments = db.<span class=\"title function_\">collection</span>(<span class=\"string\">&#x27;comments&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//邮件配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&#x27;smtp.qq.com&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">465</span>,</span><br><span class=\"line\">    <span class=\"attr\">secure</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">auth</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">user</span>: <span class=\"string\">&#x27;邮箱@xx.com&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">pass</span>: <span class=\"string\">&#x27;密码或者授权码&#x27;</span> <span class=\"comment\">//推荐使用授权码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> transporter = nodemailer.<span class=\"title function_\">createTransport</span>(config);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">main</span> = <span class=\"keyword\">async</span> (event, context) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; articleID = <span class=\"string\">&#x27;&#x27;</span>, url = <span class=\"string\">&#x27;&#x27;</span>,  nick = <span class=\"string\">&#x27;Anonymous&#x27;</span>, email = <span class=\"string\">&#x27;&#x27;</span>, link = <span class=\"string\">&#x27;&#x27;</span>, content = <span class=\"string\">&#x27;&#x27;</span>, at = <span class=\"literal\">false</span>, istop = <span class=\"literal\">true</span>, topID = <span class=\"string\">&#x27;&#x27;</span>, userID = <span class=\"string\">&#x27;&#x27;</span> &#125; = event;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (content == <span class=\"string\">&#x27;&#x27;</span> || articleID == <span class=\"string\">&#x27;&#x27;</span> || (!istop &amp;&amp; topID == <span class=\"string\">&#x27;&#x27;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">success</span>: <span class=\"literal\">false</span>, <span class=\"attr\">data</span>: <span class=\"string\">&#x27;数据格式有误&#x27;</span> &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> par = &#123; userID, articleID, content, url, nick, email, link, at, istop, date &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (at) &#123;</span><br><span class=\"line\">        par.<span class=\"property\">id</span>= uuid.<span class=\"title function_\">v1</span>().<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\-/g</span>,<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> comments.<span class=\"title function_\">where</span>(&#123; <span class=\"attr\">_id</span>: topID &#125;).<span class=\"title function_\">update</span>(&#123; <span class=\"attr\">childer</span>: _.<span class=\"title function_\">push</span>([par]) &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> _atemail = <span class=\"keyword\">await</span> <span class=\"title function_\">getEmailByID</span>(at.<span class=\"property\">id</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!_atemail &amp;&amp; _atemail != email) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">sendemail</span>(_atemail, nick, content)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">success</span>: <span class=\"literal\">true</span>, <span class=\"attr\">data</span>: &#123; date &#125; &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123; code = <span class=\"literal\">false</span>, message, id &#125; = <span class=\"keyword\">await</span> comments.<span class=\"title function_\">add</span>(par)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">success</span>: !code, <span class=\"attr\">data</span>: !code ? &#123; id, date &#125; : message &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*根据回复id获取 对应人 邮箱</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getEmailByID</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; data &#125; = <span class=\"keyword\">await</span> comments.<span class=\"title function_\">where</span>(&#123; <span class=\"attr\">_id</span>: id &#125;).<span class=\"title function_\">get</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123; data &#125; = <span class=\"keyword\">await</span> comments</span><br><span class=\"line\">            .<span class=\"title function_\">aggregate</span>()</span><br><span class=\"line\">            .<span class=\"title function_\">match</span>(&#123; <span class=\"string\">&#x27;childer.id&#x27;</span>: id &#125;)</span><br><span class=\"line\">            .<span class=\"title function_\">project</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">_id</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"attr\">item</span>: $.<span class=\"title function_\">filter</span>(&#123;</span><br><span class=\"line\">                    <span class=\"attr\">input</span>: <span class=\"string\">&#x27;$childer&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">as</span>: <span class=\"string\">&#x27;item&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">cond</span>: $.<span class=\"title function_\">eq</span>([<span class=\"string\">&#x27;$$item.id&#x27;</span>, id])</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .<span class=\"title function_\">end</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(data))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> data[<span class=\"number\">0</span>].<span class=\"property\">item</span>[<span class=\"number\">0</span>].<span class=\"property\">email</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[<span class=\"number\">0</span>].<span class=\"property\">email</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * email 收件人邮箱</span></span><br><span class=\"line\"><span class=\"comment\"> * nick 评论人昵称</span></span><br><span class=\"line\"><span class=\"comment\"> * content 评论类容</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">sendemail</span>(<span class=\"params\">email, nick, content</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">`<span class=\"subst\">$&#123;date.getFullYear()&#125;</span>年<span class=\"subst\">$&#123;date.getMonth() + <span class=\"number\">1</span>&#125;</span>月<span class=\"subst\">$&#123;date.getDate()&#125;</span>日 <span class=\"subst\">$&#123;date.getHours()&#125;</span>时<span class=\"subst\">$&#123;date.getMinutes()&#125;</span>分<span class=\"subst\">$&#123;date.getSeconds()&#125;</span>秒`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mail = &#123;</span><br><span class=\"line\">        <span class=\"attr\">from</span>: <span class=\"string\">&#x27;白云苍狗 &lt;xxxxx@qq.com&gt;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;[白云苍狗][博客] 收到新的回复&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">to</span>: email,</span><br><span class=\"line\">        <span class=\"attr\">html</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;h2&gt;<span class=\"subst\">$&#123;nick&#125;</span> <span class=\"subst\">$&#123;str&#125;</span> 回复了您&lt;h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">        <span class=\"subst\">$&#123;content&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">        `</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> transporter.<span class=\"title function_\">sendMail</span>(mail);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"web-端\"><a href=\"#web-端\" class=\"headerlink\" title=\"web 端\"></a>web 端</h2><p>对 tcb 做一个简单封装</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">tcbComment</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">env, hash</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!env) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;未设置CloudBase环境id:env&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hash) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;未设置当前Comment的hash值&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">env</span> = env;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">skip</span> = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">hash</span> = hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">_init</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> tcb = <span class=\"keyword\">await</span> <span class=\"title class_\">TcbLoader</span>()</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">app</span> = tcb.<span class=\"title function_\">init</span>(&#123; <span class=\"attr\">env</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">env</span> &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> auth = <span class=\"variable language_\">this</span>.<span class=\"property\">app</span>.<span class=\"title function_\">auth</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">persistence</span>: <span class=\"string\">&quot;local&quot;</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!auth.<span class=\"title function_\">hasLoginState</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> auth.<span class=\"title function_\">anonymousAuthProvider</span>().<span class=\"title function_\">signIn</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getArticleID</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">hash</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">getArticleID</span>(<span class=\"params\">hash</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">app</span>.<span class=\"title function_\">callFunction</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;getArticleID&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">                hash,</span><br><span class=\"line\">                <span class=\"attr\">url</span>: location.<span class=\"property\">pathname</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123; <span class=\"attr\">result</span>: &#123; success, data &#125; &#125; = res;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">articleID</span> = data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取评论列表</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">getComment</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">app</span>.<span class=\"title function_\">callFunction</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;getComments&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">pagesize</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">skip</span>++,</span><br><span class=\"line\">                <span class=\"attr\">articleID</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">articleID</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.<span class=\"property\">result</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//新增</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">addComment</span>(<span class=\"params\">parm</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">app</span>.<span class=\"title function_\">callFunction</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;addComment&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">articleID</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">articleID</span>,</span><br><span class=\"line\">                ...parm</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 加载tcb-js-jdk</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TcbLoader</span> = <span class=\"keyword\">function</span> (<span class=\"params\">v = <span class=\"string\">&#x27;1.6.0&#x27;</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">tcb</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">tcb</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> script = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>)</span><br><span class=\"line\">            script.<span class=\"property\">type</span> = <span class=\"string\">&#x27;text/javascript&#x27;</span></span><br><span class=\"line\">            script.<span class=\"property\">async</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">            script.<span class=\"property\">src</span> = <span class=\"string\">`//imgcache.qq.com/qcloud/tcbjs/<span class=\"subst\">$&#123;v&#125;</span>/tcb.js`</span></span><br><span class=\"line\">            script.<span class=\"property\">onerror</span> = reject</span><br><span class=\"line\">            script.<span class=\"property\">onload</span> = <span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">tcb</span>)</span><br><span class=\"line\">            <span class=\"variable language_\">document</span>.<span class=\"property\">head</span>.<span class=\"title function_\">appendChild</span>(script)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>弄完cloudbase 云函数，和对 web 端简单使用封装，剩下得就是页面上弄个评论列表组件和评论组件了</p>\n","excerpt":"<p>使用 CloudBase 给静态博客添加评论功能。</p>","more":"<h2 id=\"申请-CloudBase\"><a href=\"#申请-CloudBase\" class=\"headerlink\" title=\"申请 CloudBase\"></a>申请 CloudBase</h2><p>新建CloudBase环境</p>\n<p><img src=\"/images/posts/cloudbase/20200615242451.png\"></p>\n<p>选中包年包月，选择基础版1 (或者选择按量计费，开启免费额度)</p>\n<p><img src=\"/images/posts/cloudbase/20200615232440.png\"></p>\n<p>在安全配置-&gt;Web安全域名 将自己得域名添加进去</p>\n<p><img src=\"/images/posts/cloudbase/20200615234334.png\"></p>\n<h2 id=\"评论大致流程\"><a href=\"#评论大致流程\" class=\"headerlink\" title=\"评论大致流程\"></a>评论大致流程</h2><p><img src=\"/images/posts/cloudbase/20200615221122.png\"></p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;唯一ID&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;articleID&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;文章ID&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;nick&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;昵称&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;邮箱&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;链接&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;时间&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;评论内容&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;top&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;置顶&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;childer&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;唯一ID&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;nick&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;昵称&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;邮箱&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;链接&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;时间&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;评论内容&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;at&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span> <span class=\"comment\">//回复</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;nick&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;昵称&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;邮箱&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;唯一ID&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;nick&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;昵称&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;邮箱&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;链接&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;date&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;时间&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;评论内容&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;at&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;nick&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;昵称&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;邮箱&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"CloudBase-开发\"><a href=\"#CloudBase-开发\" class=\"headerlink\" title=\"CloudBase 开发\"></a>CloudBase 开发</h2><p>在 VS Code  安装 tencentcloud.cloudbase-toolkit 插件，直接在 VS Code 上去创建、编写、部署。<a href=\"https://www.cloudbase.net/\">参考地址</a><br>常用操作。<br><img src=\"/images/posts/cloudbase/20200616162909.png\"></p>\n<h3 id=\"创建集合\"><a href=\"#创建集合\" class=\"headerlink\" title=\"创建集合\"></a>创建集合</h3><p>在数据库新增两个集合 article,comments 。<br><img src=\"/images/posts/cloudbase/20200616162356.png\"></p>\n<h3 id=\"云函数\"><a href=\"#云函数\" class=\"headerlink\" title=\"云函数\"></a>云函数</h3><p>目前云函数支持 Node，PHP，Python 三种，本文使用 Node 为云函数环境</p>\n<h4 id=\"获取文章ID\"><a href=\"#获取文章ID\" class=\"headerlink\" title=\"获取文章ID\"></a>获取文章ID</h4><p>新建一个云函数 GetArticleID,代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> tcb = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tcb-admin-node&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = tcb.<span class=\"title function_\">init</span>(&#123; <span class=\"attr\">env</span>: <span class=\"string\">&#x27;环境ID&#x27;</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> db = app.<span class=\"title function_\">database</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> articleDb = db.<span class=\"title function_\">collection</span>(<span class=\"string\">&#x27;article&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">main</span> = <span class=\"keyword\">async</span> (event) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123; hash, url &#125; = event;</span><br><span class=\"line\">        <span class=\"comment\">//根据 hash 获取 article id</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123; data &#125; = <span class=\"keyword\">await</span> articleDb.<span class=\"title function_\">field</span>(&#123; <span class=\"attr\">_id</span>: <span class=\"number\">1</span> &#125;).<span class=\"title function_\">where</span>(&#123; hash &#125;).<span class=\"title function_\">get</span>();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> articleID = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//不存在  新增一条 article 数据</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> &#123; id &#125; = <span class=\"keyword\">await</span> articleDb.<span class=\"title function_\">add</span>(&#123; <span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(), url, hash, &#125;)</span><br><span class=\"line\">            articleID = id;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> &#123; _id &#125; = data[<span class=\"number\">0</span>]</span><br><span class=\"line\">            articleID = _id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">success</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: articleID</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">success</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: error</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取评论列表\"><a href=\"#获取评论列表\" class=\"headerlink\" title=\"获取评论列表\"></a>获取评论列表</h4><p>新建一个云函数 GetComments，代码如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> tcb = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tcb-admin-node&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = tcb.<span class=\"title function_\">init</span>(&#123; <span class=\"attr\">env</span>:<span class=\"string\">&quot;环境ID&quot;</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> db = app.<span class=\"title function_\">database</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> _ = db.<span class=\"property\">command</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> $ = _.<span class=\"property\">aggregate</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> commentsDB = db.<span class=\"title function_\">collection</span>(<span class=\"string\">&#x27;comments&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">main</span> = <span class=\"keyword\">async</span> (event, context) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; pagesize, articleID = <span class=\"string\">&#x27;&#x27;</span> &#125; = event;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(<span class=\"built_in\">parseInt</span>(pagesize)) || pagesize &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; <span class=\"attr\">data</span>: list &#125; = <span class=\"keyword\">await</span> commentsDB</span><br><span class=\"line\">        .<span class=\"title function_\">aggregate</span>()</span><br><span class=\"line\">        <span class=\"comment\">//查询条件</span></span><br><span class=\"line\">        .<span class=\"title function_\">match</span>(&#123; articleID &#125;)</span><br><span class=\"line\">        <span class=\"comment\">//排序</span></span><br><span class=\"line\">        .<span class=\"title function_\">sort</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">top</span>: -<span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">date</span>: -<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">//分页</span></span><br><span class=\"line\">        .<span class=\"title function_\">skip</span>((pagesize - <span class=\"number\">1</span>) * <span class=\"number\">10</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">limit</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"comment\">//指定需要查询字段</span></span><br><span class=\"line\">        .<span class=\"title function_\">project</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">_id</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">id</span>: <span class=\"string\">&quot;$_id&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">articleID</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">nick</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">link</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">date</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">content</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">top</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">childer</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">nick</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">link</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">date</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">content</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">at</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">nick</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                    <span class=\"attr\">link</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">end</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新增、回复\"><a href=\"#新增、回复\" class=\"headerlink\" title=\"新增、回复\"></a>新增、回复</h4><p>新建一个云函数 AddComment，代码如下<br>使用 nodemailer 来发送邮件通知，nodemailer <a href=\"https://nodemailer.com/about/\">参考文档</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> tcb = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;tcb-admin-node&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> nodemailer = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;nodemailer&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> uuid = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;node-uuid&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = tcb.<span class=\"title function_\">init</span>(&#123; <span class=\"attr\">env</span>:<span class=\"string\">&quot;环境ID&quot;</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> db = app.<span class=\"title function_\">database</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> _ = db.<span class=\"property\">command</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> $ = _.<span class=\"property\">aggregate</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> comments = db.<span class=\"title function_\">collection</span>(<span class=\"string\">&#x27;comments&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//邮件配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&#x27;smtp.qq.com&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">465</span>,</span><br><span class=\"line\">    <span class=\"attr\">secure</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">auth</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">user</span>: <span class=\"string\">&#x27;邮箱@xx.com&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">pass</span>: <span class=\"string\">&#x27;密码或者授权码&#x27;</span> <span class=\"comment\">//推荐使用授权码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> transporter = nodemailer.<span class=\"title function_\">createTransport</span>(config);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">main</span> = <span class=\"keyword\">async</span> (event, context) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; articleID = <span class=\"string\">&#x27;&#x27;</span>, url = <span class=\"string\">&#x27;&#x27;</span>,  nick = <span class=\"string\">&#x27;Anonymous&#x27;</span>, email = <span class=\"string\">&#x27;&#x27;</span>, link = <span class=\"string\">&#x27;&#x27;</span>, content = <span class=\"string\">&#x27;&#x27;</span>, at = <span class=\"literal\">false</span>, istop = <span class=\"literal\">true</span>, topID = <span class=\"string\">&#x27;&#x27;</span>, userID = <span class=\"string\">&#x27;&#x27;</span> &#125; = event;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (content == <span class=\"string\">&#x27;&#x27;</span> || articleID == <span class=\"string\">&#x27;&#x27;</span> || (!istop &amp;&amp; topID == <span class=\"string\">&#x27;&#x27;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">success</span>: <span class=\"literal\">false</span>, <span class=\"attr\">data</span>: <span class=\"string\">&#x27;数据格式有误&#x27;</span> &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> par = &#123; userID, articleID, content, url, nick, email, link, at, istop, date &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (at) &#123;</span><br><span class=\"line\">        par.<span class=\"property\">id</span>= uuid.<span class=\"title function_\">v1</span>().<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\-/g</span>,<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> comments.<span class=\"title function_\">where</span>(&#123; <span class=\"attr\">_id</span>: topID &#125;).<span class=\"title function_\">update</span>(&#123; <span class=\"attr\">childer</span>: _.<span class=\"title function_\">push</span>([par]) &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> _atemail = <span class=\"keyword\">await</span> <span class=\"title function_\">getEmailByID</span>(at.<span class=\"property\">id</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!!_atemail &amp;&amp; _atemail != email) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">sendemail</span>(_atemail, nick, content)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">success</span>: <span class=\"literal\">true</span>, <span class=\"attr\">data</span>: &#123; date &#125; &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123; code = <span class=\"literal\">false</span>, message, id &#125; = <span class=\"keyword\">await</span> comments.<span class=\"title function_\">add</span>(par)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">success</span>: !code, <span class=\"attr\">data</span>: !code ? &#123; id, date &#125; : message &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*根据回复id获取 对应人 邮箱</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getEmailByID</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; data &#125; = <span class=\"keyword\">await</span> comments.<span class=\"title function_\">where</span>(&#123; <span class=\"attr\">_id</span>: id &#125;).<span class=\"title function_\">get</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123; data &#125; = <span class=\"keyword\">await</span> comments</span><br><span class=\"line\">            .<span class=\"title function_\">aggregate</span>()</span><br><span class=\"line\">            .<span class=\"title function_\">match</span>(&#123; <span class=\"string\">&#x27;childer.id&#x27;</span>: id &#125;)</span><br><span class=\"line\">            .<span class=\"title function_\">project</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">_id</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"attr\">item</span>: $.<span class=\"title function_\">filter</span>(&#123;</span><br><span class=\"line\">                    <span class=\"attr\">input</span>: <span class=\"string\">&#x27;$childer&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">as</span>: <span class=\"string\">&#x27;item&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">cond</span>: $.<span class=\"title function_\">eq</span>([<span class=\"string\">&#x27;$$item.id&#x27;</span>, id])</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .<span class=\"title function_\">end</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(data))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> data[<span class=\"number\">0</span>].<span class=\"property\">item</span>[<span class=\"number\">0</span>].<span class=\"property\">email</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[<span class=\"number\">0</span>].<span class=\"property\">email</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * email 收件人邮箱</span></span><br><span class=\"line\"><span class=\"comment\"> * nick 评论人昵称</span></span><br><span class=\"line\"><span class=\"comment\"> * content 评论类容</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">sendemail</span>(<span class=\"params\">email, nick, content</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">`<span class=\"subst\">$&#123;date.getFullYear()&#125;</span>年<span class=\"subst\">$&#123;date.getMonth() + <span class=\"number\">1</span>&#125;</span>月<span class=\"subst\">$&#123;date.getDate()&#125;</span>日 <span class=\"subst\">$&#123;date.getHours()&#125;</span>时<span class=\"subst\">$&#123;date.getMinutes()&#125;</span>分<span class=\"subst\">$&#123;date.getSeconds()&#125;</span>秒`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mail = &#123;</span><br><span class=\"line\">        <span class=\"attr\">from</span>: <span class=\"string\">&#x27;白云苍狗 &lt;xxxxx@qq.com&gt;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">subject</span>: <span class=\"string\">&#x27;[白云苍狗][博客] 收到新的回复&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">to</span>: email,</span><br><span class=\"line\">        <span class=\"attr\">html</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;h2&gt;<span class=\"subst\">$&#123;nick&#125;</span> <span class=\"subst\">$&#123;str&#125;</span> 回复了您&lt;h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">        <span class=\"subst\">$&#123;content&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">        `</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> transporter.<span class=\"title function_\">sendMail</span>(mail);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"web-端\"><a href=\"#web-端\" class=\"headerlink\" title=\"web 端\"></a>web 端</h2><p>对 tcb 做一个简单封装</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">tcbComment</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">env, hash</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!env) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;未设置CloudBase环境id:env&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hash) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;未设置当前Comment的hash值&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">env</span> = env;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">skip</span> = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">hash</span> = hash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">_init</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> tcb = <span class=\"keyword\">await</span> <span class=\"title class_\">TcbLoader</span>()</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">app</span> = tcb.<span class=\"title function_\">init</span>(&#123; <span class=\"attr\">env</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">env</span> &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> auth = <span class=\"variable language_\">this</span>.<span class=\"property\">app</span>.<span class=\"title function_\">auth</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">persistence</span>: <span class=\"string\">&quot;local&quot;</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!auth.<span class=\"title function_\">hasLoginState</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> auth.<span class=\"title function_\">anonymousAuthProvider</span>().<span class=\"title function_\">signIn</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getArticleID</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">hash</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">getArticleID</span>(<span class=\"params\">hash</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">app</span>.<span class=\"title function_\">callFunction</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;getArticleID&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">                hash,</span><br><span class=\"line\">                <span class=\"attr\">url</span>: location.<span class=\"property\">pathname</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> &#123; <span class=\"attr\">result</span>: &#123; success, data &#125; &#125; = res;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">articleID</span> = data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取评论列表</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">getComment</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">app</span>.<span class=\"title function_\">callFunction</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;getComments&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">pagesize</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">skip</span>++,</span><br><span class=\"line\">                <span class=\"attr\">articleID</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">articleID</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.<span class=\"property\">result</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//新增</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">addComment</span>(<span class=\"params\">parm</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">app</span>.<span class=\"title function_\">callFunction</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&#x27;addComment&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">articleID</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">articleID</span>,</span><br><span class=\"line\">                ...parm</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 加载tcb-js-jdk</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TcbLoader</span> = <span class=\"keyword\">function</span> (<span class=\"params\">v = <span class=\"string\">&#x27;1.6.0&#x27;</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">tcb</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">tcb</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> script = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>)</span><br><span class=\"line\">            script.<span class=\"property\">type</span> = <span class=\"string\">&#x27;text/javascript&#x27;</span></span><br><span class=\"line\">            script.<span class=\"property\">async</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">            script.<span class=\"property\">src</span> = <span class=\"string\">`//imgcache.qq.com/qcloud/tcbjs/<span class=\"subst\">$&#123;v&#125;</span>/tcb.js`</span></span><br><span class=\"line\">            script.<span class=\"property\">onerror</span> = reject</span><br><span class=\"line\">            script.<span class=\"property\">onload</span> = <span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">tcb</span>)</span><br><span class=\"line\">            <span class=\"variable language_\">document</span>.<span class=\"property\">head</span>.<span class=\"title function_\">appendChild</span>(script)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>弄完cloudbase 云函数，和对 web 端简单使用封装，剩下得就是页面上弄个评论列表组件和评论组件了</p>"},{"title":"css 实现网页灰度","comments":1,"date":"2020-04-04T12:38:27.000Z","keywords":"css,filter","_content":"今天为表达全国各族人民对抗击新冠肺炎疫情斗争牺牲烈士和逝世同胞的深切哀悼，各大网站也纷纷将界面弄成黑白以示哀悼。\n<!--more -->\n实现网页黑白办法其实很简单，只需要设置 filter 滤镜为 grayscale 就可以了。\n\n``` css\n    html{\n         filter: grayscale(100%); \n        -webkit-filter: grayscale(100%); \n    }\n```\n常用几个值\ngrayscale ：将图像转换为灰度图像。\nblur：可以实现高斯模糊效果。\nSaturate ：设置饱和度。\nInvert : 颜色反转。\nContrast  ：设置对比度。\n\n<style>\n    html{\n         filter: grayscale(100%); \n        -webkit-filter: grayscale(100%); \n        -moz-filter: grayscale(100%); \n        -ms-filter: grayscale(100%); \n        -o-filter: grayscale(100%); \n        -webkit-filter: grayscale(1);\n    }\n</style>","source":"_posts/css_filter.md","raw":"---\ntitle: css 实现网页灰度 \ncomments: true\ndate: 2020-04-04 20:38:27\ntags: [css]\ncategories: 记录类\nkeywords: css,filter\n---\n今天为表达全国各族人民对抗击新冠肺炎疫情斗争牺牲烈士和逝世同胞的深切哀悼，各大网站也纷纷将界面弄成黑白以示哀悼。\n<!--more -->\n实现网页黑白办法其实很简单，只需要设置 filter 滤镜为 grayscale 就可以了。\n\n``` css\n    html{\n         filter: grayscale(100%); \n        -webkit-filter: grayscale(100%); \n    }\n```\n常用几个值\ngrayscale ：将图像转换为灰度图像。\nblur：可以实现高斯模糊效果。\nSaturate ：设置饱和度。\nInvert : 颜色反转。\nContrast  ：设置对比度。\n\n<style>\n    html{\n         filter: grayscale(100%); \n        -webkit-filter: grayscale(100%); \n        -moz-filter: grayscale(100%); \n        -ms-filter: grayscale(100%); \n        -o-filter: grayscale(100%); \n        -webkit-filter: grayscale(1);\n    }\n</style>","slug":"css_filter","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vr0000n98lgdef1ed5n","content":"<p>今天为表达全国各族人民对抗击新冠肺炎疫情斗争牺牲烈士和逝世同胞的深切哀悼，各大网站也纷纷将界面弄成黑白以示哀悼。</p>\n<span id=\"more\"></span>\n<p>实现网页黑白办法其实很简单，只需要设置 filter 滤镜为 grayscale 就可以了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">filter</span>: <span class=\"built_in\">grayscale</span>(<span class=\"number\">100%</span>); </span><br><span class=\"line\">    -webkit-<span class=\"attribute\">filter</span>: <span class=\"built_in\">grayscale</span>(<span class=\"number\">100%</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>常用几个值<br>grayscale ：将图像转换为灰度图像。<br>blur：可以实现高斯模糊效果。<br>Saturate ：设置饱和度。<br>Invert : 颜色反转。<br>Contrast  ：设置对比度。</p>\n<style>\n    html{\n         filter: grayscale(100%); \n        -webkit-filter: grayscale(100%); \n        -moz-filter: grayscale(100%); \n        -ms-filter: grayscale(100%); \n        -o-filter: grayscale(100%); \n        -webkit-filter: grayscale(1);\n    }\n</style>","excerpt":"<p>今天为表达全国各族人民对抗击新冠肺炎疫情斗争牺牲烈士和逝世同胞的深切哀悼，各大网站也纷纷将界面弄成黑白以示哀悼。</p>","more":"<p>实现网页黑白办法其实很简单，只需要设置 filter 滤镜为 grayscale 就可以了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">filter</span>: <span class=\"built_in\">grayscale</span>(<span class=\"number\">100%</span>); </span><br><span class=\"line\">    -webkit-<span class=\"attribute\">filter</span>: <span class=\"built_in\">grayscale</span>(<span class=\"number\">100%</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>常用几个值<br>grayscale ：将图像转换为灰度图像。<br>blur：可以实现高斯模糊效果。<br>Saturate ：设置饱和度。<br>Invert : 颜色反转。<br>Contrast  ：设置对比度。</p>\n<style>\n    html{\n         filter: grayscale(100%); \n        -webkit-filter: grayscale(100%); \n        -moz-filter: grayscale(100%); \n        -ms-filter: grayscale(100%); \n        -o-filter: grayscale(100%); \n        -webkit-filter: grayscale(1);\n    }\n</style>"},{"title":"css 实现换肤几种方式","comments":1,"date":"2020-08-21T08:53:51.000Z","description":null,"keywords":"css,换肤","_content":"\n说起换肤功能，前端肯定不陌生，其实就是颜色值的更换，实现方式有很多，也各有优缺点。\n\n<!--more-->\n\n## 一、可供选择的换肤\n对于只提供几种主题方案，让用户来选择的，一般就简单粗暴的写多套主题。\n-  一个全局 class 控制样式切换，直接更改全局class\n\n``` html\n<body class='dark'></body>\n```\n\n- 使用js去修改 link 的 href\n\n``` html\n<link id='link_theme'  href=\"skin.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script>\n    document.getElementById('link_theme').href='skin-dark.css'\n</script>\n```\n\n\n## 二、动态色值换肤的实现\n\n- 全局替换颜色值\n可以参看 [Element-UI](https://elementui.github.io/theme-preview/#/zh-CN) 的换肤实现，就是先把样式中颜色全部替换后在塞到\\<style\\>标签里面。\n- 使用 less 的 modifyVars 动态修改\nmodifyVars 方法是是基于 less 在浏览器中的编译来实现。所以在引入 less 文件的时候需要通过 link 方式引入，然后基于 less.js 中的方法来进行修改变量。\n\n```less\n// styles.less\n@color: red;\n.card {\n    color: @color;\n}\n```\n``` html\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n    <link rel=\"stylesheet/less\" type=\"text/css\" href=\"styles.less\" />\n    <script src=\"//cdn.jsdelivr.net/npm/less\"></script>\n</head>\n\n<body>\n    <div class=\"card\">\n        card\n    </div>\n    <button id=\"themeBtn\">更改颜色</button>\n</body>\n<script>\n    document.getElementById(\"themeBtn\").addEventListener('click', function () {\n        let color = '#' + Math.floor(Math.random() * 256 * 1000000000).toString(16).slice(0, 6)\n        less.modifyVars({\n            '@color': color\n        }).then(() => {\n            console.log(`color: ${color}F`);\n        });\n    })\n</script>\n```\n\n- css 变量(var)\n\ncss 原生变量 [兼容性](https://www.caniuse.com/#search=--var),大部分主流浏览器还是支持的，而且主要是操作起来够简便。\n\n定义变量\n```css\n// 加上前缀 -- 就可以了 \n:root{\n    --color:red;\n}\n//使用 当--color 不生效的时候会使用后面参数替代\nbody:{\n    color:var(--color,#000)\n}\n```\n使用 js 去修改\n```js\n// 获取根\nlet root = document.documentElement;\nroot.style.setProperty('--color', '#f00');\n```\n\n## 三、总结\n如果需要动态替换颜色主题，使用第二种比较合适也方便.如果每套主题有很大差异性不仅仅只是颜色的替换，第一种的方式就好了很多，使用第二种就不太合适了.如果都需要满足也可以两种相结合使用。\n","source":"_posts/css_theme.md","raw":"---\ntitle: css 实现换肤几种方式\ncomments: true\ndate: 2020-08-21 16:53:51\ntags: [css]\ncategories: 记录类\ndescription:\nkeywords: css,换肤\n---\n\n说起换肤功能，前端肯定不陌生，其实就是颜色值的更换，实现方式有很多，也各有优缺点。\n\n<!--more-->\n\n## 一、可供选择的换肤\n对于只提供几种主题方案，让用户来选择的，一般就简单粗暴的写多套主题。\n-  一个全局 class 控制样式切换，直接更改全局class\n\n``` html\n<body class='dark'></body>\n```\n\n- 使用js去修改 link 的 href\n\n``` html\n<link id='link_theme'  href=\"skin.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script>\n    document.getElementById('link_theme').href='skin-dark.css'\n</script>\n```\n\n\n## 二、动态色值换肤的实现\n\n- 全局替换颜色值\n可以参看 [Element-UI](https://elementui.github.io/theme-preview/#/zh-CN) 的换肤实现，就是先把样式中颜色全部替换后在塞到\\<style\\>标签里面。\n- 使用 less 的 modifyVars 动态修改\nmodifyVars 方法是是基于 less 在浏览器中的编译来实现。所以在引入 less 文件的时候需要通过 link 方式引入，然后基于 less.js 中的方法来进行修改变量。\n\n```less\n// styles.less\n@color: red;\n.card {\n    color: @color;\n}\n```\n``` html\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n    <link rel=\"stylesheet/less\" type=\"text/css\" href=\"styles.less\" />\n    <script src=\"//cdn.jsdelivr.net/npm/less\"></script>\n</head>\n\n<body>\n    <div class=\"card\">\n        card\n    </div>\n    <button id=\"themeBtn\">更改颜色</button>\n</body>\n<script>\n    document.getElementById(\"themeBtn\").addEventListener('click', function () {\n        let color = '#' + Math.floor(Math.random() * 256 * 1000000000).toString(16).slice(0, 6)\n        less.modifyVars({\n            '@color': color\n        }).then(() => {\n            console.log(`color: ${color}F`);\n        });\n    })\n</script>\n```\n\n- css 变量(var)\n\ncss 原生变量 [兼容性](https://www.caniuse.com/#search=--var),大部分主流浏览器还是支持的，而且主要是操作起来够简便。\n\n定义变量\n```css\n// 加上前缀 -- 就可以了 \n:root{\n    --color:red;\n}\n//使用 当--color 不生效的时候会使用后面参数替代\nbody:{\n    color:var(--color,#000)\n}\n```\n使用 js 去修改\n```js\n// 获取根\nlet root = document.documentElement;\nroot.style.setProperty('--color', '#f00');\n```\n\n## 三、总结\n如果需要动态替换颜色主题，使用第二种比较合适也方便.如果每套主题有很大差异性不仅仅只是颜色的替换，第一种的方式就好了很多，使用第二种就不太合适了.如果都需要满足也可以两种相结合使用。\n","slug":"css_theme","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vr1000o98lg3wp9fmy5","content":"<p>说起换肤功能，前端肯定不陌生，其实就是颜色值的更换，实现方式有很多，也各有优缺点。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"一、可供选择的换肤\"><a href=\"#一、可供选择的换肤\" class=\"headerlink\" title=\"一、可供选择的换肤\"></a>一、可供选择的换肤</h2><p>对于只提供几种主题方案，让用户来选择的，一般就简单粗暴的写多套主题。</p>\n<ul>\n<li>一个全局 class 控制样式切换，直接更改全局class</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;dark&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用js去修改 link 的 href</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;link_theme&#x27;</span>  <span class=\"attr\">href</span>=<span class=\"string\">&quot;skin.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;link_theme&#x27;</span>).<span class=\"property\">href</span>=<span class=\"string\">&#x27;skin-dark.css&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"二、动态色值换肤的实现\"><a href=\"#二、动态色值换肤的实现\" class=\"headerlink\" title=\"二、动态色值换肤的实现\"></a>二、动态色值换肤的实现</h2><ul>\n<li>全局替换颜色值<br>可以参看 <a href=\"https://elementui.github.io/theme-preview/#/zh-CN\">Element-UI</a> 的换肤实现，就是先把样式中颜色全部替换后在塞到&lt;style&gt;标签里面。</li>\n<li>使用 less 的 modifyVars 动态修改<br>modifyVars 方法是是基于 less 在浏览器中的编译来实现。所以在引入 less 文件的时候需要通过 link 方式引入，然后基于 less.js 中的方法来进行修改变量。</li>\n</ul>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// styles.less</span></span><br><span class=\"line\"><span class=\"variable\">@color:</span> red;</span><br><span class=\"line\"><span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">@color</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet/less&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;styles.less&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;//cdn.jsdelivr.net/npm/less&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card&quot;</span>&gt;</span></span><br><span class=\"line\">        card</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;themeBtn&quot;</span>&gt;</span>更改颜色<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;themeBtn&quot;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> color = <span class=\"string\">&#x27;#&#x27;</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">256</span> * <span class=\"number\">1000000000</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>).<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"number\">6</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        less.<span class=\"title function_\">modifyVars</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"string\">&#x27;@color&#x27;</span>: color</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`color: <span class=\"subst\">$&#123;color&#125;</span>F`</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>css 变量(var)</li>\n</ul>\n<p>css 原生变量 <a href=\"https://www.caniuse.com/#search=--var\">兼容性</a>,大部分主流浏览器还是支持的，而且主要是操作起来够简便。</p>\n<p>定义变量</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 加上前缀 -- 就可以了 </span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">--color</span>:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//使用 当<span class=\"attr\">--color</span> 不生效的时候会使用后面参数替代</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>:&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"built_in\">var</span>(--color,<span class=\"number\">#000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 js 去修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取根</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> root = <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>;</span><br><span class=\"line\">root.<span class=\"property\">style</span>.<span class=\"title function_\">setProperty</span>(<span class=\"string\">&#x27;--color&#x27;</span>, <span class=\"string\">&#x27;#f00&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h2><p>如果需要动态替换颜色主题，使用第二种比较合适也方便.如果每套主题有很大差异性不仅仅只是颜色的替换，第一种的方式就好了很多，使用第二种就不太合适了.如果都需要满足也可以两种相结合使用。</p>\n","excerpt":"<p>说起换肤功能，前端肯定不陌生，其实就是颜色值的更换，实现方式有很多，也各有优缺点。</p>","more":"<h2 id=\"一、可供选择的换肤\"><a href=\"#一、可供选择的换肤\" class=\"headerlink\" title=\"一、可供选择的换肤\"></a>一、可供选择的换肤</h2><p>对于只提供几种主题方案，让用户来选择的，一般就简单粗暴的写多套主题。</p>\n<ul>\n<li>一个全局 class 控制样式切换，直接更改全局class</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;dark&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用js去修改 link 的 href</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;link_theme&#x27;</span>  <span class=\"attr\">href</span>=<span class=\"string\">&quot;skin.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;link_theme&#x27;</span>).<span class=\"property\">href</span>=<span class=\"string\">&#x27;skin-dark.css&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"二、动态色值换肤的实现\"><a href=\"#二、动态色值换肤的实现\" class=\"headerlink\" title=\"二、动态色值换肤的实现\"></a>二、动态色值换肤的实现</h2><ul>\n<li>全局替换颜色值<br>可以参看 <a href=\"https://elementui.github.io/theme-preview/#/zh-CN\">Element-UI</a> 的换肤实现，就是先把样式中颜色全部替换后在塞到&lt;style&gt;标签里面。</li>\n<li>使用 less 的 modifyVars 动态修改<br>modifyVars 方法是是基于 less 在浏览器中的编译来实现。所以在引入 less 文件的时候需要通过 link 方式引入，然后基于 less.js 中的方法来进行修改变量。</li>\n</ul>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// styles.less</span></span><br><span class=\"line\"><span class=\"variable\">@color:</span> red;</span><br><span class=\"line\"><span class=\"selector-class\">.card</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">@color</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet/less&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;styles.less&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;//cdn.jsdelivr.net/npm/less&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card&quot;</span>&gt;</span></span><br><span class=\"line\">        card</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;themeBtn&quot;</span>&gt;</span>更改颜色<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;themeBtn&quot;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">let</span> color = <span class=\"string\">&#x27;#&#x27;</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">256</span> * <span class=\"number\">1000000000</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>).<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"number\">6</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        less.<span class=\"title function_\">modifyVars</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"string\">&#x27;@color&#x27;</span>: color</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`color: <span class=\"subst\">$&#123;color&#125;</span>F`</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>css 变量(var)</li>\n</ul>\n<p>css 原生变量 <a href=\"https://www.caniuse.com/#search=--var\">兼容性</a>,大部分主流浏览器还是支持的，而且主要是操作起来够简便。</p>\n<p>定义变量</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 加上前缀 -- 就可以了 </span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">--color</span>:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//使用 当<span class=\"attr\">--color</span> 不生效的时候会使用后面参数替代</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>:&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"built_in\">var</span>(--color,<span class=\"number\">#000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 js 去修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取根</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> root = <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>;</span><br><span class=\"line\">root.<span class=\"property\">style</span>.<span class=\"title function_\">setProperty</span>(<span class=\"string\">&#x27;--color&#x27;</span>, <span class=\"string\">&#x27;#f00&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h2><p>如果需要动态替换颜色主题，使用第二种比较合适也方便.如果每套主题有很大差异性不仅仅只是颜色的替换，第一种的方式就好了很多，使用第二种就不太合适了.如果都需要满足也可以两种相结合使用。</p>"},{"title":"Electron 的断点续下载","comments":1,"date":"2020-10-08T02:48:03.000Z","description":null,"keywords":"electron,断点下载","_content":"最近用 Electron 做了个壁纸程序，需要断点续下载，在这里记录一下。<!-- more -->\n\n## HTTP断点下载相关的报文\n\n- Accept-Ranges \n  告诉客户端服务器是否支持断点续传，服务器返回\n- Content-Range\n  在HTTP协议中，响应首部 Content-Range 显示的是一个数据片段在整个文件中的位置。\n- ETag \n  资源标识 非必须 服务器返回\n- Last-Modified \n  资源最后一次更新的时间 非必须 服务器返回\n```\n//响应示例 \naccept-ranges: bytes\nContent-Range: bytes 200-1000/67589 // 返回文件 200字节到1000字节 的数据，总文件大小67589字节\netag: \"5f0dce96-48e\"\nlast-modified: Tue, 14 Jul 2020 15:26:14 GMT\n```\n- Range\n  请求头设置 Range，指定服务器返回指定区域内容，如果不设置 Range 会返回整个文件。服务器片段返回状态码是 206，请求的范围如果无效状态码会是 416，全部返回状态码是 200。\n```\n//示例 \nRange: bytes=0-499 表示第 0-499 字节范围的内容 \nRange: bytes=500-999 表示第 500-999 字节范围的内容 \nRange: bytes=-500 表示最后 500 字节的内容 \nRange: bytes=500- 表示从第 500 字节开始到文件结束部分的内容 \nRange: bytes=0-0,-1 表示第一个和最后一个字节 \nRange: bytes=500-600,601-999 同时指定几个范围\n```\n\n## Electron 断点续下载方式\n\n- 使用 Chromium 的下载功能，在主进程里监听 will-download 事件去处理\n- 使用 Electron 的net模块或者 Node.js 的 http/https 模块自己创建请求，记录已下载位置\n\n### 使用 Chromium 的下载\n可以在渲染进程中和网页一样进行触发下载（例如a标签），也可以在主进程中使用 BrowserWindow.webContents 或 session 的 downloadURL触发下载。\n\n``` js\n//示例\n\n//使用窗体 创建下载事件和监听\nlet win = new BrowserWindow()\nwin.webContents.downloadURL(url)\nwin.webContents.session.on('will-download', (event,  downloadItem, webContents) => {\n event.preventDefault()//可以阻止下载\n //downloadItem 下载项目的 EventEmitter\n})\n\n//或者 使用默认session对象。\nsession.defaultSession.downloadURL(url)\nsession.defaultSession.on('will-download', (event,  downloadItem, webContents) => {\n\n})\n```\n然后可以 will-download 事件中的 downloadItem 实例去存储下载信息。等待程序再次启动时通过 session.createInterruptedDownload 恢复上一次的下载\n大致流程。\n![](/images/posts/onewallhaven/down.png)\n``` js\n//一个简易示例\nlet cacheItem = {}\nsession.defaultSession.on('will-download', (e, item) => {\n    const url = item.getURL()\n    \n    // 获取文件的总大小\n    const totalBytes = item.getTotalBytes();\n    // 设置下载路径\n    const filePath = path.join(app.getPath(\"downloads\"), item.getFilename());\n    item.setSavePath(filePath);\n\n    // 缓存downitem 将这些信息保存下来，\n    cacheItem.path = item.getSavePath();//图片地址\n    cacheItem.eTag = item.getETag();//资源标识\n    cacheItem.urlChain = item.getURLChain();//地址\n    cacheItem.length = totalBytes//资源大小\n    cacheItem.lastModified = item.getLastModifiedTime()//资源最后一次更新的时间\n    cacheItem.startTime = item.getStartTime();\n\n    let lastBytes = 0;\n\n    // 监听下载过程，计算并设置进度条进度\n    item.on('updated', (event, state) => {\n        if (state === 'interrupted') {\n            console.log('下载已经中断，可以恢复')\n        } else if (state === 'progressing') {\n            if (item.isPaused()) {\n                console.log('暂停下载')\n            } else {\n                let offset = item.getReceivedBytes();\n                cacheItem.speedBytes = offset - lastBytes;//下载速度\n                cacheItem.offset = offset//已经下载\n                lastBytes = offset\n                console.log('下载中')\n            }\n        }\n    })\n\n    // \n    item.once('done', (event, state) => {\n        if (state === 'interrupted') {\n            console.log('下载已经中断，无法恢复')\n        }\n        else if (state === 'cancelle') {\n            console.log('下载取消')\n        }\n        else {\n            console.log('下载完成')\n        }\n    })\n\n    //是否可恢复下载\n    if (item.canResume) {\n        item.resume()\n    }\n})\n//程序关闭时将 cacheItem 存储下载\n\n// ===> 程序 再次打开时\n\n// 将上面存储cacheItem信息读取出来 恢复下载\nsession.defaultSession.createInterruptedDownload({\n    path, \n    urlChain, \n    offset, // 下载断点开始位置\n    length, \n    lastModified, //\n    eTag, // \n    startTime\n})\n```\n\n需要注意的一个地方是，Electron 会在程序退出时候删除我们下载一般的文件，我目前处理方案是在 程序退出时，将所有还没有下载完成文件复制一份，等下次继续下载时候还原回去。\n\n相关的文档地址 [BrowserWindow](https://www.electronjs.org/docs/api/browser-window)  ,[Session](https://www.electronjs.org/docs/api/session) , [webContents](https://www.electronjs.org/docs/api/web-contents), [DownloadItem](https://www.electronjs.org/docs/api/download-item)\n\n### 创建请求实现续下载\n大致上和上面是差不多的，记录已下载文件信息，再次请求时候设置从指定位置开始请求数据。\n","source":"_posts/file_download.md","raw":"---\ntitle: Electron 的断点续下载\ncomments: true\ndate: 2020-10-08 10:48:03\ntags: [vue, electron]\ndescription:\ncategories: 记录类\nkeywords: electron,断点下载\n---\n最近用 Electron 做了个壁纸程序，需要断点续下载，在这里记录一下。<!-- more -->\n\n## HTTP断点下载相关的报文\n\n- Accept-Ranges \n  告诉客户端服务器是否支持断点续传，服务器返回\n- Content-Range\n  在HTTP协议中，响应首部 Content-Range 显示的是一个数据片段在整个文件中的位置。\n- ETag \n  资源标识 非必须 服务器返回\n- Last-Modified \n  资源最后一次更新的时间 非必须 服务器返回\n```\n//响应示例 \naccept-ranges: bytes\nContent-Range: bytes 200-1000/67589 // 返回文件 200字节到1000字节 的数据，总文件大小67589字节\netag: \"5f0dce96-48e\"\nlast-modified: Tue, 14 Jul 2020 15:26:14 GMT\n```\n- Range\n  请求头设置 Range，指定服务器返回指定区域内容，如果不设置 Range 会返回整个文件。服务器片段返回状态码是 206，请求的范围如果无效状态码会是 416，全部返回状态码是 200。\n```\n//示例 \nRange: bytes=0-499 表示第 0-499 字节范围的内容 \nRange: bytes=500-999 表示第 500-999 字节范围的内容 \nRange: bytes=-500 表示最后 500 字节的内容 \nRange: bytes=500- 表示从第 500 字节开始到文件结束部分的内容 \nRange: bytes=0-0,-1 表示第一个和最后一个字节 \nRange: bytes=500-600,601-999 同时指定几个范围\n```\n\n## Electron 断点续下载方式\n\n- 使用 Chromium 的下载功能，在主进程里监听 will-download 事件去处理\n- 使用 Electron 的net模块或者 Node.js 的 http/https 模块自己创建请求，记录已下载位置\n\n### 使用 Chromium 的下载\n可以在渲染进程中和网页一样进行触发下载（例如a标签），也可以在主进程中使用 BrowserWindow.webContents 或 session 的 downloadURL触发下载。\n\n``` js\n//示例\n\n//使用窗体 创建下载事件和监听\nlet win = new BrowserWindow()\nwin.webContents.downloadURL(url)\nwin.webContents.session.on('will-download', (event,  downloadItem, webContents) => {\n event.preventDefault()//可以阻止下载\n //downloadItem 下载项目的 EventEmitter\n})\n\n//或者 使用默认session对象。\nsession.defaultSession.downloadURL(url)\nsession.defaultSession.on('will-download', (event,  downloadItem, webContents) => {\n\n})\n```\n然后可以 will-download 事件中的 downloadItem 实例去存储下载信息。等待程序再次启动时通过 session.createInterruptedDownload 恢复上一次的下载\n大致流程。\n![](/images/posts/onewallhaven/down.png)\n``` js\n//一个简易示例\nlet cacheItem = {}\nsession.defaultSession.on('will-download', (e, item) => {\n    const url = item.getURL()\n    \n    // 获取文件的总大小\n    const totalBytes = item.getTotalBytes();\n    // 设置下载路径\n    const filePath = path.join(app.getPath(\"downloads\"), item.getFilename());\n    item.setSavePath(filePath);\n\n    // 缓存downitem 将这些信息保存下来，\n    cacheItem.path = item.getSavePath();//图片地址\n    cacheItem.eTag = item.getETag();//资源标识\n    cacheItem.urlChain = item.getURLChain();//地址\n    cacheItem.length = totalBytes//资源大小\n    cacheItem.lastModified = item.getLastModifiedTime()//资源最后一次更新的时间\n    cacheItem.startTime = item.getStartTime();\n\n    let lastBytes = 0;\n\n    // 监听下载过程，计算并设置进度条进度\n    item.on('updated', (event, state) => {\n        if (state === 'interrupted') {\n            console.log('下载已经中断，可以恢复')\n        } else if (state === 'progressing') {\n            if (item.isPaused()) {\n                console.log('暂停下载')\n            } else {\n                let offset = item.getReceivedBytes();\n                cacheItem.speedBytes = offset - lastBytes;//下载速度\n                cacheItem.offset = offset//已经下载\n                lastBytes = offset\n                console.log('下载中')\n            }\n        }\n    })\n\n    // \n    item.once('done', (event, state) => {\n        if (state === 'interrupted') {\n            console.log('下载已经中断，无法恢复')\n        }\n        else if (state === 'cancelle') {\n            console.log('下载取消')\n        }\n        else {\n            console.log('下载完成')\n        }\n    })\n\n    //是否可恢复下载\n    if (item.canResume) {\n        item.resume()\n    }\n})\n//程序关闭时将 cacheItem 存储下载\n\n// ===> 程序 再次打开时\n\n// 将上面存储cacheItem信息读取出来 恢复下载\nsession.defaultSession.createInterruptedDownload({\n    path, \n    urlChain, \n    offset, // 下载断点开始位置\n    length, \n    lastModified, //\n    eTag, // \n    startTime\n})\n```\n\n需要注意的一个地方是，Electron 会在程序退出时候删除我们下载一般的文件，我目前处理方案是在 程序退出时，将所有还没有下载完成文件复制一份，等下次继续下载时候还原回去。\n\n相关的文档地址 [BrowserWindow](https://www.electronjs.org/docs/api/browser-window)  ,[Session](https://www.electronjs.org/docs/api/session) , [webContents](https://www.electronjs.org/docs/api/web-contents), [DownloadItem](https://www.electronjs.org/docs/api/download-item)\n\n### 创建请求实现续下载\n大致上和上面是差不多的，记录已下载文件信息，再次请求时候设置从指定位置开始请求数据。\n","slug":"file_download","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vr3000s98lg82k82kp2","content":"<p>最近用 Electron 做了个壁纸程序，需要断点续下载，在这里记录一下。<span id=\"more\"></span></p>\n<h2 id=\"HTTP断点下载相关的报文\"><a href=\"#HTTP断点下载相关的报文\" class=\"headerlink\" title=\"HTTP断点下载相关的报文\"></a>HTTP断点下载相关的报文</h2><ul>\n<li>Accept-Ranges<br>告诉客户端服务器是否支持断点续传，服务器返回</li>\n<li>Content-Range<br>在HTTP协议中，响应首部 Content-Range 显示的是一个数据片段在整个文件中的位置。</li>\n<li>ETag<br>资源标识 非必须 服务器返回</li>\n<li>Last-Modified<br>资源最后一次更新的时间 非必须 服务器返回<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//响应示例 </span><br><span class=\"line\">accept-ranges: bytes</span><br><span class=\"line\">Content-Range: bytes 200-1000/67589 // 返回文件 200字节到1000字节 的数据，总文件大小67589字节</span><br><span class=\"line\">etag: &quot;5f0dce96-48e&quot;</span><br><span class=\"line\">last-modified: Tue, 14 Jul 2020 15:26:14 GMT</span><br></pre></td></tr></table></figure></li>\n<li>Range<br>请求头设置 Range，指定服务器返回指定区域内容，如果不设置 Range 会返回整个文件。服务器片段返回状态码是 206，请求的范围如果无效状态码会是 416，全部返回状态码是 200。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//示例 </span><br><span class=\"line\">Range: bytes=0-499 表示第 0-499 字节范围的内容 </span><br><span class=\"line\">Range: bytes=500-999 表示第 500-999 字节范围的内容 </span><br><span class=\"line\">Range: bytes=-500 表示最后 500 字节的内容 </span><br><span class=\"line\">Range: bytes=500- 表示从第 500 字节开始到文件结束部分的内容 </span><br><span class=\"line\">Range: bytes=0-0,-1 表示第一个和最后一个字节 </span><br><span class=\"line\">Range: bytes=500-600,601-999 同时指定几个范围</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Electron-断点续下载方式\"><a href=\"#Electron-断点续下载方式\" class=\"headerlink\" title=\"Electron 断点续下载方式\"></a>Electron 断点续下载方式</h2><ul>\n<li>使用 Chromium 的下载功能，在主进程里监听 will-download 事件去处理</li>\n<li>使用 Electron 的net模块或者 Node.js 的 http&#x2F;https 模块自己创建请求，记录已下载位置</li>\n</ul>\n<h3 id=\"使用-Chromium-的下载\"><a href=\"#使用-Chromium-的下载\" class=\"headerlink\" title=\"使用 Chromium 的下载\"></a>使用 Chromium 的下载</h3><p>可以在渲染进程中和网页一样进行触发下载（例如a标签），也可以在主进程中使用 BrowserWindow.webContents 或 session 的 downloadURL触发下载。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用窗体 创建下载事件和监听</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> win = <span class=\"keyword\">new</span> <span class=\"title class_\">BrowserWindow</span>()</span><br><span class=\"line\">win.<span class=\"property\">webContents</span>.<span class=\"title function_\">downloadURL</span>(url)</span><br><span class=\"line\">win.<span class=\"property\">webContents</span>.<span class=\"property\">session</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;will-download&#x27;</span>, <span class=\"function\">(<span class=\"params\">event,  downloadItem, webContents</span>) =&gt;</span> &#123;</span><br><span class=\"line\"> event.<span class=\"title function_\">preventDefault</span>()<span class=\"comment\">//可以阻止下载</span></span><br><span class=\"line\"> <span class=\"comment\">//downloadItem 下载项目的 EventEmitter</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者 使用默认session对象。</span></span><br><span class=\"line\">session.<span class=\"property\">defaultSession</span>.<span class=\"title function_\">downloadURL</span>(url)</span><br><span class=\"line\">session.<span class=\"property\">defaultSession</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;will-download&#x27;</span>, <span class=\"function\">(<span class=\"params\">event,  downloadItem, webContents</span>) =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>然后可以 will-download 事件中的 downloadItem 实例去存储下载信息。等待程序再次启动时通过 session.createInterruptedDownload 恢复上一次的下载<br>大致流程。<br><img src=\"/images/posts/onewallhaven/down.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个简易示例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cacheItem = &#123;&#125;</span><br><span class=\"line\">session.<span class=\"property\">defaultSession</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;will-download&#x27;</span>, <span class=\"function\">(<span class=\"params\">e, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = item.<span class=\"title function_\">getURL</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取文件的总大小</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> totalBytes = item.<span class=\"title function_\">getTotalBytes</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 设置下载路径</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> filePath = path.<span class=\"title function_\">join</span>(app.<span class=\"title function_\">getPath</span>(<span class=\"string\">&quot;downloads&quot;</span>), item.<span class=\"title function_\">getFilename</span>());</span><br><span class=\"line\">    item.<span class=\"title function_\">setSavePath</span>(filePath);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 缓存downitem 将这些信息保存下来，</span></span><br><span class=\"line\">    cacheItem.<span class=\"property\">path</span> = item.<span class=\"title function_\">getSavePath</span>();<span class=\"comment\">//图片地址</span></span><br><span class=\"line\">    cacheItem.<span class=\"property\">eTag</span> = item.<span class=\"title function_\">getETag</span>();<span class=\"comment\">//资源标识</span></span><br><span class=\"line\">    cacheItem.<span class=\"property\">urlChain</span> = item.<span class=\"title function_\">getURLChain</span>();<span class=\"comment\">//地址</span></span><br><span class=\"line\">    cacheItem.<span class=\"property\">length</span> = totalBytes<span class=\"comment\">//资源大小</span></span><br><span class=\"line\">    cacheItem.<span class=\"property\">lastModified</span> = item.<span class=\"title function_\">getLastModifiedTime</span>()<span class=\"comment\">//资源最后一次更新的时间</span></span><br><span class=\"line\">    cacheItem.<span class=\"property\">startTime</span> = item.<span class=\"title function_\">getStartTime</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> lastBytes = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 监听下载过程，计算并设置进度条进度</span></span><br><span class=\"line\">    item.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;updated&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state === <span class=\"string\">&#x27;interrupted&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;下载已经中断，可以恢复&#x27;</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (state === <span class=\"string\">&#x27;progressing&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item.<span class=\"title function_\">isPaused</span>()) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;暂停下载&#x27;</span>)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> offset = item.<span class=\"title function_\">getReceivedBytes</span>();</span><br><span class=\"line\">                cacheItem.<span class=\"property\">speedBytes</span> = offset - lastBytes;<span class=\"comment\">//下载速度</span></span><br><span class=\"line\">                cacheItem.<span class=\"property\">offset</span> = offset<span class=\"comment\">//已经下载</span></span><br><span class=\"line\">                lastBytes = offset</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;下载中&#x27;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    item.<span class=\"title function_\">once</span>(<span class=\"string\">&#x27;done&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state === <span class=\"string\">&#x27;interrupted&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;下载已经中断，无法恢复&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (state === <span class=\"string\">&#x27;cancelle&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;下载取消&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;下载完成&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//是否可恢复下载</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.<span class=\"property\">canResume</span>) &#123;</span><br><span class=\"line\">        item.<span class=\"title function_\">resume</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//程序关闭时将 cacheItem 存储下载</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ===&gt; 程序 再次打开时</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将上面存储cacheItem信息读取出来 恢复下载</span></span><br><span class=\"line\">session.<span class=\"property\">defaultSession</span>.<span class=\"title function_\">createInterruptedDownload</span>(&#123;</span><br><span class=\"line\">    path, </span><br><span class=\"line\">    urlChain, </span><br><span class=\"line\">    offset, <span class=\"comment\">// 下载断点开始位置</span></span><br><span class=\"line\">    length, </span><br><span class=\"line\">    lastModified, <span class=\"comment\">//</span></span><br><span class=\"line\">    eTag, <span class=\"comment\">// </span></span><br><span class=\"line\">    startTime</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的一个地方是，Electron 会在程序退出时候删除我们下载一般的文件，我目前处理方案是在 程序退出时，将所有还没有下载完成文件复制一份，等下次继续下载时候还原回去。</p>\n<p>相关的文档地址 <a href=\"https://www.electronjs.org/docs/api/browser-window\">BrowserWindow</a>  ,<a href=\"https://www.electronjs.org/docs/api/session\">Session</a> , <a href=\"https://www.electronjs.org/docs/api/web-contents\">webContents</a>, <a href=\"https://www.electronjs.org/docs/api/download-item\">DownloadItem</a></p>\n<h3 id=\"创建请求实现续下载\"><a href=\"#创建请求实现续下载\" class=\"headerlink\" title=\"创建请求实现续下载\"></a>创建请求实现续下载</h3><p>大致上和上面是差不多的，记录已下载文件信息，再次请求时候设置从指定位置开始请求数据。</p>\n","excerpt":"<p>最近用 Electron 做了个壁纸程序，需要断点续下载，在这里记录一下。","more":"</p>\n<h2 id=\"HTTP断点下载相关的报文\"><a href=\"#HTTP断点下载相关的报文\" class=\"headerlink\" title=\"HTTP断点下载相关的报文\"></a>HTTP断点下载相关的报文</h2><ul>\n<li>Accept-Ranges<br>告诉客户端服务器是否支持断点续传，服务器返回</li>\n<li>Content-Range<br>在HTTP协议中，响应首部 Content-Range 显示的是一个数据片段在整个文件中的位置。</li>\n<li>ETag<br>资源标识 非必须 服务器返回</li>\n<li>Last-Modified<br>资源最后一次更新的时间 非必须 服务器返回<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//响应示例 </span><br><span class=\"line\">accept-ranges: bytes</span><br><span class=\"line\">Content-Range: bytes 200-1000/67589 // 返回文件 200字节到1000字节 的数据，总文件大小67589字节</span><br><span class=\"line\">etag: &quot;5f0dce96-48e&quot;</span><br><span class=\"line\">last-modified: Tue, 14 Jul 2020 15:26:14 GMT</span><br></pre></td></tr></table></figure></li>\n<li>Range<br>请求头设置 Range，指定服务器返回指定区域内容，如果不设置 Range 会返回整个文件。服务器片段返回状态码是 206，请求的范围如果无效状态码会是 416，全部返回状态码是 200。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//示例 </span><br><span class=\"line\">Range: bytes=0-499 表示第 0-499 字节范围的内容 </span><br><span class=\"line\">Range: bytes=500-999 表示第 500-999 字节范围的内容 </span><br><span class=\"line\">Range: bytes=-500 表示最后 500 字节的内容 </span><br><span class=\"line\">Range: bytes=500- 表示从第 500 字节开始到文件结束部分的内容 </span><br><span class=\"line\">Range: bytes=0-0,-1 表示第一个和最后一个字节 </span><br><span class=\"line\">Range: bytes=500-600,601-999 同时指定几个范围</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Electron-断点续下载方式\"><a href=\"#Electron-断点续下载方式\" class=\"headerlink\" title=\"Electron 断点续下载方式\"></a>Electron 断点续下载方式</h2><ul>\n<li>使用 Chromium 的下载功能，在主进程里监听 will-download 事件去处理</li>\n<li>使用 Electron 的net模块或者 Node.js 的 http&#x2F;https 模块自己创建请求，记录已下载位置</li>\n</ul>\n<h3 id=\"使用-Chromium-的下载\"><a href=\"#使用-Chromium-的下载\" class=\"headerlink\" title=\"使用 Chromium 的下载\"></a>使用 Chromium 的下载</h3><p>可以在渲染进程中和网页一样进行触发下载（例如a标签），也可以在主进程中使用 BrowserWindow.webContents 或 session 的 downloadURL触发下载。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用窗体 创建下载事件和监听</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> win = <span class=\"keyword\">new</span> <span class=\"title class_\">BrowserWindow</span>()</span><br><span class=\"line\">win.<span class=\"property\">webContents</span>.<span class=\"title function_\">downloadURL</span>(url)</span><br><span class=\"line\">win.<span class=\"property\">webContents</span>.<span class=\"property\">session</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;will-download&#x27;</span>, <span class=\"function\">(<span class=\"params\">event,  downloadItem, webContents</span>) =&gt;</span> &#123;</span><br><span class=\"line\"> event.<span class=\"title function_\">preventDefault</span>()<span class=\"comment\">//可以阻止下载</span></span><br><span class=\"line\"> <span class=\"comment\">//downloadItem 下载项目的 EventEmitter</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者 使用默认session对象。</span></span><br><span class=\"line\">session.<span class=\"property\">defaultSession</span>.<span class=\"title function_\">downloadURL</span>(url)</span><br><span class=\"line\">session.<span class=\"property\">defaultSession</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;will-download&#x27;</span>, <span class=\"function\">(<span class=\"params\">event,  downloadItem, webContents</span>) =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>然后可以 will-download 事件中的 downloadItem 实例去存储下载信息。等待程序再次启动时通过 session.createInterruptedDownload 恢复上一次的下载<br>大致流程。<br><img src=\"/images/posts/onewallhaven/down.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个简易示例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cacheItem = &#123;&#125;</span><br><span class=\"line\">session.<span class=\"property\">defaultSession</span>.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;will-download&#x27;</span>, <span class=\"function\">(<span class=\"params\">e, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = item.<span class=\"title function_\">getURL</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取文件的总大小</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> totalBytes = item.<span class=\"title function_\">getTotalBytes</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 设置下载路径</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> filePath = path.<span class=\"title function_\">join</span>(app.<span class=\"title function_\">getPath</span>(<span class=\"string\">&quot;downloads&quot;</span>), item.<span class=\"title function_\">getFilename</span>());</span><br><span class=\"line\">    item.<span class=\"title function_\">setSavePath</span>(filePath);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 缓存downitem 将这些信息保存下来，</span></span><br><span class=\"line\">    cacheItem.<span class=\"property\">path</span> = item.<span class=\"title function_\">getSavePath</span>();<span class=\"comment\">//图片地址</span></span><br><span class=\"line\">    cacheItem.<span class=\"property\">eTag</span> = item.<span class=\"title function_\">getETag</span>();<span class=\"comment\">//资源标识</span></span><br><span class=\"line\">    cacheItem.<span class=\"property\">urlChain</span> = item.<span class=\"title function_\">getURLChain</span>();<span class=\"comment\">//地址</span></span><br><span class=\"line\">    cacheItem.<span class=\"property\">length</span> = totalBytes<span class=\"comment\">//资源大小</span></span><br><span class=\"line\">    cacheItem.<span class=\"property\">lastModified</span> = item.<span class=\"title function_\">getLastModifiedTime</span>()<span class=\"comment\">//资源最后一次更新的时间</span></span><br><span class=\"line\">    cacheItem.<span class=\"property\">startTime</span> = item.<span class=\"title function_\">getStartTime</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> lastBytes = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 监听下载过程，计算并设置进度条进度</span></span><br><span class=\"line\">    item.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;updated&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state === <span class=\"string\">&#x27;interrupted&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;下载已经中断，可以恢复&#x27;</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (state === <span class=\"string\">&#x27;progressing&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item.<span class=\"title function_\">isPaused</span>()) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;暂停下载&#x27;</span>)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> offset = item.<span class=\"title function_\">getReceivedBytes</span>();</span><br><span class=\"line\">                cacheItem.<span class=\"property\">speedBytes</span> = offset - lastBytes;<span class=\"comment\">//下载速度</span></span><br><span class=\"line\">                cacheItem.<span class=\"property\">offset</span> = offset<span class=\"comment\">//已经下载</span></span><br><span class=\"line\">                lastBytes = offset</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;下载中&#x27;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    item.<span class=\"title function_\">once</span>(<span class=\"string\">&#x27;done&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (state === <span class=\"string\">&#x27;interrupted&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;下载已经中断，无法恢复&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (state === <span class=\"string\">&#x27;cancelle&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;下载取消&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;下载完成&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//是否可恢复下载</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.<span class=\"property\">canResume</span>) &#123;</span><br><span class=\"line\">        item.<span class=\"title function_\">resume</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//程序关闭时将 cacheItem 存储下载</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ===&gt; 程序 再次打开时</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将上面存储cacheItem信息读取出来 恢复下载</span></span><br><span class=\"line\">session.<span class=\"property\">defaultSession</span>.<span class=\"title function_\">createInterruptedDownload</span>(&#123;</span><br><span class=\"line\">    path, </span><br><span class=\"line\">    urlChain, </span><br><span class=\"line\">    offset, <span class=\"comment\">// 下载断点开始位置</span></span><br><span class=\"line\">    length, </span><br><span class=\"line\">    lastModified, <span class=\"comment\">//</span></span><br><span class=\"line\">    eTag, <span class=\"comment\">// </span></span><br><span class=\"line\">    startTime</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的一个地方是，Electron 会在程序退出时候删除我们下载一般的文件，我目前处理方案是在 程序退出时，将所有还没有下载完成文件复制一份，等下次继续下载时候还原回去。</p>\n<p>相关的文档地址 <a href=\"https://www.electronjs.org/docs/api/browser-window\">BrowserWindow</a>  ,<a href=\"https://www.electronjs.org/docs/api/session\">Session</a> , <a href=\"https://www.electronjs.org/docs/api/web-contents\">webContents</a>, <a href=\"https://www.electronjs.org/docs/api/download-item\">DownloadItem</a></p>\n<h3 id=\"创建请求实现续下载\"><a href=\"#创建请求实现续下载\" class=\"headerlink\" title=\"创建请求实现续下载\"></a>创建请求实现续下载</h3><p>大致上和上面是差不多的，记录已下载文件信息，再次请求时候设置从指定位置开始请求数据。</p>"},{"title":"Flutter 中的动画","comments":1,"date":"2021-04-28T07:04:50.000Z","description":null,"keywords":"flutter,animation","_content":"Flutter 中动画的创建有很多种， 需要根据具体的需求选择不同的动画。如果只是简单的布局等的动画直接使用最简单的隐式动画就可以了，因为隐式动画是由框架控制的，所以仅仅只需要更改变需要变化属性就可以了。如果你想自己控制动画的变换则需要使用显示动画，如果需要控制一些列动画组合时使用交织动画去控制。如果内置的满足不了需求的时候，还可以结合画布自绘动画。\n\n<!--more-->\n\n## 动画基础\nFlutter 动画和其他平台动画原理也是一样的，都是在快速更改 UI 实现动画效果。在一个 Flutter 动画中主要包含 Animation（动画）、AnimationController（控制器）、Curve（速度曲线）、Animatable（动画取值范围）、Listeners （监听事件）、Ticker（帧）。\n- Animation  一个抽象类是 Flutter 动画的核心类，主用于保存动画当前插值的和状态，在动画运行时会持续生成介于两个值之间的插入值。例如当宽从 100 变成 200，会在动画第一帧到最后一帧都会生成 100-200 区间的一个值，如果速度是匀速的，这个值就是匀速增加到 200。\n- AnimationController  用来控制动画的状态启动、暂停、反向运行等， 是 Animation 的一个子类\n- Curve  用来定义动画运动的是匀速运动还是匀加速等，和 css 中 animation-timing-function 类似\n- Animatable 用于表明动画值范围值。可以通过调用 animate 方法，返回一个 Animation，常见的 Tween 系列的类都是对他的实现\n- Listener 监听动画状态的变化\n- Ticker 帧回调，在动画执行时候每一帧都会调用其回调，类似与 js 中的 requestAnimationFrame \n\n### 动画组成结构\n![结构图](/images/posts/flutter_animation/gxt.png)\n### 动画选择\n![流程图](/images/posts/flutter_animation/lct.png)\n\n<!-- Flutter 会用 AnimationController 控制执行状态，执行的时候会根据 Animatable，Curve 在每一帧都生成对应的中间插值，插值会保存在 Animation 中，我们 Animation 的插值我们就可以更新每一帧的画面，形成动画（Animation）。不管是隐式还是显示动画都是这样来处理动画的。 -->\n\n## 隐式动画\n隐式动画简单来说就是我们只需要修改对应的属性，Flutter 就是自己帮我们过渡动画，和 css 中过渡有点类似，当我们设置后 transition 后只需要更改对应的 css 属性就会自动过渡到新的值。Flutter 内置了一些常用的隐式动画，可以看到源码里都是对 ImplicitlyAnimatedWidget 的实现，如果需要我们也可以自己实现 ImplicitlyAnimatedWidget 来自定义隐式动画。 \n\n### 内置隐式动画\n\n看个使用例子\n``` dart\n// 首先我们在一个StatefulWidget定义 一个height和color\ndouble heihgt = 100;\nColor color = Colors.yellow[800];\n\n// 在build 怎加一个隐式动画组建 AnimatedContainer，需要个Duration（动画执行时间），其他的参数和Container的基本一致\nAnimatedContainer(\n    duration: Duration(milliseconds: 500), \n    height: heihgt, // 使用我们定义好的值\n    color: color,\n    margin: EdgeInsets.all(8),\n    child: Center(\n        child: Text('AnimatedContainer',\n            style: TextStyle(color: Colors.white, fontSize: 20),\n        ),\n    ),\n)\n\n// 在需要执行动画时候我们修改 height 和 color 值,就会看到 上边的组建会一边变高边过渡到蓝色上\nsetState(() {\n    heihgt = 200;\n    color = Colors.blue;\n});\n\n```\n在 Flutter 内置的隐式动画组件中，一般都是 AnimatedXxxxxx 类似的，后面的 Xxxxxx 都能找到对应的组件。内置的有下面这些 AnimatedContainer、AnimatedPadding、AnimatedAlign、AnimatedPositioned、AnimatedOpacity、SliverAnimatedOpacity、AnimatedDefaultTextStyle、AnimatedPhysicalModel。这些隐式动画的使用和其 Xxxxxx 对应的属性基本一致，只需要额外的指定 duration 就可以了，当然也可以为动画指定动画曲线 curve。\n\n### 自定义隐式动画\n当这内置的满足不了你的时候，你也可以去实现一个隐式动画，只需要实现抽象类 ImplicitlyAnimatedWidget。实现自定义隐式动画仅需要重写 build 和 forEachTween 就可以简单实现了。\n``` dart\n// 直接继承ImplicitlyAnimatedWidget \nclass AnimatedDemo extends ImplicitlyAnimatedWidget {\n  final Color color;\n  final Widget child;\n  final double height;\n\n  AnimatedDemo({\n    this.color,\n    this.height,\n    Curve curve = Curves.linear,\n    this.child,\n    @required Duration duration,\n  }) : super(curve: curve, duration: duration);\n\n  \n  @override\n  _AnimatedDemo createState() => _AnimatedDemo();\n}\n//因为ImplicitlyAnimatedWidget是继承 StatefulWidget 的，所以还需要继承他的状态类 （AnimatedWidgetBaseState 继承自 ImplicitlyAnimatedWidgetState）\nclass _AnimatedDemo extends AnimatedWidgetBaseState<AnimatedDemo> {\n  ColorTween _color;\n  Tween<double> _height;\n \n  // 在动画执行时候会每一帧都调用 build\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      color: _color.evaluate(animation), //使用evaluate可以获取Tween当前帧的状态值\n      height: _height.evaluate(animation),\n      child: widget.child,\n    );\n  }\n\n  //首次build和更新时候会调用，在这里设置动画需要的Tween的开始值和结束值\n  @override\n  void forEachTween(visitor) {\n    //visitor 有三个参数（当前的tween，动画终止状态，一个回调函数（将第一次给定的值设置为Tween的开始值））\n    _color = visitor(_color, widget.color, (value) => ColorTween(begin: value));// 这里value==首次widget.color的值\n    _height = visitor(_height, widget.height, (value) => Tween<double>(begin: value));\n  }\n}\n```\n\n我们可以去看 ImplicitlyAnimatedWidget 是如何控制动画的，在 ImplicitlyAnimatedWidgetState 中会看到其实里面定义了 AnimationController 控制动画。然后可以看到 didUpdateWidget 钩子函数中调用了  _controller.forward() 执行动画，当父 Widget 调用 setState 时候就会触发这个钩子函数的调用。\n\n## 显示动画\n有时候有些动画需要们自己去控制动画的状态，而不是交给框架去处理，这时就需要我们自己去定义前面简介里提到的那几个动画要素了。\n\n### 内置显示动画\n在 Flutter 中内置的显示动画大部分都是 XxxxxxTransition 名称的，我们看个内置显示动画使用例子，RotationTransition 组件需要一个 turns（Animation\\<double\\>）参数,我们可以给它个AnimationController\n``` dart \n// RotationTransition 参数\nRotationTransition(\n   turns: Animation<double>,\n   child: ChildWidget(),\n)\n\n// AnimationController 参数\nAnimationController(\n  double? value, // 初始值\n  this.duration, //动画时间\n  this.reverseDuration, // 反向动画执行的时间\n  this.debugLabel, \n  this.lowerBound = 0.0, //动画开始值\n  this.upperBound = 1.0, //动画结束值\n  this.animationBehavior = AnimationBehavior.normal,\n  required TickerProvider vsync, //垂直同步，需要一个 Ticker ,Flutter 给我们提供了\n)\n```\n使用 RotationTransition，可以看到一个红蓝渐变色方块旋转一周。\n``` dart \nclass RotationTransitionDemo extends StatefulWidget {\n  @override\n  _RotationTransitionDemoState createState() => _RotationTransitionDemoState();\n}\n\nclass _RotationTransitionDemoState extends State<RotationTransitionDemo> with SingleTickerProviderStateMixin {\n  AnimationController _controller;\n\n  @override\n  void initState() {\n    super.initState();\n    // 设置动画时间为1秒\n    _controller = AnimationController(duration: Duration(milliseconds: 1000), vsync: this)\n    ..addListener(() { // 监听动画的状态值发生变化\n        print(_controller.value);\n    })\n    ..addStatusListener((status) { //监听动画状态\n        // dismissed 动画在起始点停止\n        // forward 动画正在正向执行\n        // reverse 动画正在反向执行\n        // completed 动画在终点停止\n        print(status);\n    })\n    ..forward(); // 执行动画\n    // 常用方法\n    // forward() // 正向执行动画\n    // reverse() 反向执行动画\n    // repeat() 重复执行 可以传个参数 是否会反向运动\n    // stop() 停止动画\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('RotationTransition'),\n      ),\n      body: Center(\n        child: RotationTransition(\n          turns: _controller, // 设置 Animation\n          child: Container(\n            height: 300,\n            width: 300,\n            decoration: BoxDecoration(\n              gradient: LinearGradient(colors: [Colors.red, Colors.blue]),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n### 控制器补间和曲线\n在控制器中我们可以看的动画开始值和结束值默认是 0.0 到 1.0，而且是 double 类型的。而实际动画中不可能只是 double 类型的，需要我们自己使用 Animatable 来指定补间范围值。\n修改一下上面的代码\n```dart\n// 通过控制器的drive方法添加\n _controller = AnimationController(duration: Duration(milliseconds: 1000),vsync: this)\n  ..drive(Tween(begin: 1, end: 4)) //使用Tween（Animatable的子类）指定补间范围\n\n// 我也也可以是使用Animatable的animate方法添加到控制器\nTween(begin: 1, end: 4).animate(_controller);\n// 这样写我们可以使用 chain() 叠加多个 Tween\nTween(begin: 1, end: 4)\n.chain(CurveTween(curve: Curves.ease)) //叠加个曲线\n.animate(_controller);\n```\nFlutter 已经内置帮我们实现了很多 Animatable，ColorTween、SizeTween、IntTween、StepTween 等等。\n\n\n### 自定义显示动画\n查看 RotationTransition 的源码，我们可以看到它是对的抽象类 AnimatedWidget 的实现，当内置的满足不了我们的时候，可以直接自己实现 AnimatedWidget 自定义显示动画。先来看看 AnimatedWidget 里面都有些啥。\n``` dart \n// 只摘取主要的部分\nabstract class AnimatedWidget extends StatefulWidget {\n\n  const AnimatedWidget({ Key key,@required this.listenable,  }) : assert(listenable != null), super(key: key);\n\n  @override\n  _AnimatedState createState() => _AnimatedState();\n}\n\nclass _AnimatedState extends State<AnimatedWidget> {\n  @override\n  void initState() {\n    super.initState();\n    widget.listenable.addListener(_handleChange);\n  }\n\n  void _handleChange() {\n    setState(() {\n      // 我们可以看到显示动画是通过控制器监听插值更改 setState 进行重绘。\n    });\n  }\n}\n```\n接下来我自己继承 AnimatedWidget 实现一个自定义显示动画\n\n``` dart \n// 继承 AnimatedWidget\nclass OpacityAnimatedWidget extends AnimatedWidget {\n  final Widget child;\n  Animation<Color> colorAnimation;\n\n  // AnimatedWidget 需要可传递一个 listenable 进去，我们可以传递个 AnimationController\n  OpacityAnimatedWidget(listenable, {this.colorAnimation, this.child}) : super(listenable: listenable);\n\n  @override\n  Widget build(BuildContext context) {\n    Animation<double> animation = listenable;\n    return Opacity(\n      opacity: animation.value,\n      child: Container(\n        color: colorAnimation.value,\n        child: child,\n      ),\n    );\n  }\n}\n\n// 使用 需要在状态类上 混入一个 SingleTickerProviderStateMixin\nAnimationController _controller = AnimationController(duration: Duration(milliseconds: 1000), vsync: this); \n\nOpacityAnimatedWidget(\n  Tween(begin: 1.0, end: .8).animate(_controller),\n  colorAnimation: ColorTween(begin: Colors.red, end: Colors.blue).animate(_controller),\n  child: Container(\n    height: 300,\n    width: 300,\n  ),\n)\n```\nFlutter 内部还提供了一个 AnimatedBuilder 帮助我们简化自定义动画。\n``` dart\n// 只需要三个三参数\nAnimatedBuilder( \n  animation, // 一个listenable\n  child,// 传入个子组件，非必填\n  builder,// (BuildContext context, Widget child){}  这里的第二个参数 child ，就是上面传入的 child\n  // 这么做的好处就是，动画执行的时候只会执行 builder ,如果一个动画只是包裹层需要执行动画，这个时候就可以把包裹的子组件 放到外面传进去\n  // 这样就每次只需要 执行 builder 而方法第二个参数是传递进来的引用，所以可以避免每次都更新，减少开销\n)\n```\n\n### 交织动画\n官方是这么介绍的：交织动画是一个简单的概念：视觉变化是随着一系列的动作发生，而不是一次性的动作。动画可能是纯粹顺序的，一个改变随着一个改变发生，动画也可能是部分或者全部重叠的。动画也可能有间隙，没有变化发生。\n\n简单点说就是一个动画可以分割成很多片段，每个片段都有不同的 Tween，看个使用示例\n``` dart \nclass StaggeredAnimationDemo extends StatefulWidget {\n  @override\n  _StaggeredAnimationDemoState createState() => _StaggeredAnimationDemoState();\n}\n\nclass _StaggeredAnimationDemoState extends State<StaggeredAnimationDemo> with SingleTickerProviderStateMixin {\n  AnimationController _controller;\n  Animation<double> _height;\n  Animation<Color> _color;\n  Animation<double> _borderRadius;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(duration: Duration(milliseconds: 5000), vsync: this);\n\n    _height = Tween(begin: 50.0, end: 300.0).animate(\n      CurvedAnimation(\n        parent: _controller,\n        curve: Interval(0, 0.15), // Interval 范围必须是0-1 指定Tween在哪一段时间执行\n      ),\n    );\n\n    _color = ColorTween(begin: Colors.red, end: Colors.blue).animate(\n      CurvedAnimation(\n        parent: _controller,\n        curve: Interval(0.1, 0.2),\n      ),\n    );\n\n    _borderRadius = Tween(begin: 10.0, end: 150.0).animate(\n      CurvedAnimation(\n        parent: _controller,\n        curve: Interval(0.1, 0.25),\n      ),\n    );\n\n    _controller.forward();\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return BasiceAppLayout(\n      title: '交织动画',\n      body: Center(\n        child: AnimatedBuilder(\n          animation: _controller,\n          builder: (context, child) {\n            return Container(\n              height: _height.value,\n              width: _height.value,\n              decoration: BoxDecoration(\n                color: _color.value,\n                borderRadius: BorderRadius.circular(_borderRadius.value),\n              ),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n```\n\n## Hero动画\nFlutter 叫它主动画，用于不同页面之间切换时候动画，比如有一个商品列表，点击后跳到一个新的页面查看原图，就可以这个动画。使用也很简单，在不同页面使用 Hero 包裹需要动画组件，两个页面的 tag 需要甚至成一直，但是同一个页面需要保持唯一。\n\n``` dart \nHero(\n  tag: \"avatar\", //唯一标记，前后两个路由页Hero的tag必须相同\n  child: ChildWidget(),\n)\n```\n\n<!-- ## 自绘动画 -->","source":"_posts/flutter_animation.md","raw":"---\ntitle: Flutter 中的动画\ncomments: true\ndate: 2021-04-28 15:04:50\ntags: [Flutter]\ncategories: 记录类\ndescription:\nkeywords: flutter,animation\n---\nFlutter 中动画的创建有很多种， 需要根据具体的需求选择不同的动画。如果只是简单的布局等的动画直接使用最简单的隐式动画就可以了，因为隐式动画是由框架控制的，所以仅仅只需要更改变需要变化属性就可以了。如果你想自己控制动画的变换则需要使用显示动画，如果需要控制一些列动画组合时使用交织动画去控制。如果内置的满足不了需求的时候，还可以结合画布自绘动画。\n\n<!--more-->\n\n## 动画基础\nFlutter 动画和其他平台动画原理也是一样的，都是在快速更改 UI 实现动画效果。在一个 Flutter 动画中主要包含 Animation（动画）、AnimationController（控制器）、Curve（速度曲线）、Animatable（动画取值范围）、Listeners （监听事件）、Ticker（帧）。\n- Animation  一个抽象类是 Flutter 动画的核心类，主用于保存动画当前插值的和状态，在动画运行时会持续生成介于两个值之间的插入值。例如当宽从 100 变成 200，会在动画第一帧到最后一帧都会生成 100-200 区间的一个值，如果速度是匀速的，这个值就是匀速增加到 200。\n- AnimationController  用来控制动画的状态启动、暂停、反向运行等， 是 Animation 的一个子类\n- Curve  用来定义动画运动的是匀速运动还是匀加速等，和 css 中 animation-timing-function 类似\n- Animatable 用于表明动画值范围值。可以通过调用 animate 方法，返回一个 Animation，常见的 Tween 系列的类都是对他的实现\n- Listener 监听动画状态的变化\n- Ticker 帧回调，在动画执行时候每一帧都会调用其回调，类似与 js 中的 requestAnimationFrame \n\n### 动画组成结构\n![结构图](/images/posts/flutter_animation/gxt.png)\n### 动画选择\n![流程图](/images/posts/flutter_animation/lct.png)\n\n<!-- Flutter 会用 AnimationController 控制执行状态，执行的时候会根据 Animatable，Curve 在每一帧都生成对应的中间插值，插值会保存在 Animation 中，我们 Animation 的插值我们就可以更新每一帧的画面，形成动画（Animation）。不管是隐式还是显示动画都是这样来处理动画的。 -->\n\n## 隐式动画\n隐式动画简单来说就是我们只需要修改对应的属性，Flutter 就是自己帮我们过渡动画，和 css 中过渡有点类似，当我们设置后 transition 后只需要更改对应的 css 属性就会自动过渡到新的值。Flutter 内置了一些常用的隐式动画，可以看到源码里都是对 ImplicitlyAnimatedWidget 的实现，如果需要我们也可以自己实现 ImplicitlyAnimatedWidget 来自定义隐式动画。 \n\n### 内置隐式动画\n\n看个使用例子\n``` dart\n// 首先我们在一个StatefulWidget定义 一个height和color\ndouble heihgt = 100;\nColor color = Colors.yellow[800];\n\n// 在build 怎加一个隐式动画组建 AnimatedContainer，需要个Duration（动画执行时间），其他的参数和Container的基本一致\nAnimatedContainer(\n    duration: Duration(milliseconds: 500), \n    height: heihgt, // 使用我们定义好的值\n    color: color,\n    margin: EdgeInsets.all(8),\n    child: Center(\n        child: Text('AnimatedContainer',\n            style: TextStyle(color: Colors.white, fontSize: 20),\n        ),\n    ),\n)\n\n// 在需要执行动画时候我们修改 height 和 color 值,就会看到 上边的组建会一边变高边过渡到蓝色上\nsetState(() {\n    heihgt = 200;\n    color = Colors.blue;\n});\n\n```\n在 Flutter 内置的隐式动画组件中，一般都是 AnimatedXxxxxx 类似的，后面的 Xxxxxx 都能找到对应的组件。内置的有下面这些 AnimatedContainer、AnimatedPadding、AnimatedAlign、AnimatedPositioned、AnimatedOpacity、SliverAnimatedOpacity、AnimatedDefaultTextStyle、AnimatedPhysicalModel。这些隐式动画的使用和其 Xxxxxx 对应的属性基本一致，只需要额外的指定 duration 就可以了，当然也可以为动画指定动画曲线 curve。\n\n### 自定义隐式动画\n当这内置的满足不了你的时候，你也可以去实现一个隐式动画，只需要实现抽象类 ImplicitlyAnimatedWidget。实现自定义隐式动画仅需要重写 build 和 forEachTween 就可以简单实现了。\n``` dart\n// 直接继承ImplicitlyAnimatedWidget \nclass AnimatedDemo extends ImplicitlyAnimatedWidget {\n  final Color color;\n  final Widget child;\n  final double height;\n\n  AnimatedDemo({\n    this.color,\n    this.height,\n    Curve curve = Curves.linear,\n    this.child,\n    @required Duration duration,\n  }) : super(curve: curve, duration: duration);\n\n  \n  @override\n  _AnimatedDemo createState() => _AnimatedDemo();\n}\n//因为ImplicitlyAnimatedWidget是继承 StatefulWidget 的，所以还需要继承他的状态类 （AnimatedWidgetBaseState 继承自 ImplicitlyAnimatedWidgetState）\nclass _AnimatedDemo extends AnimatedWidgetBaseState<AnimatedDemo> {\n  ColorTween _color;\n  Tween<double> _height;\n \n  // 在动画执行时候会每一帧都调用 build\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      color: _color.evaluate(animation), //使用evaluate可以获取Tween当前帧的状态值\n      height: _height.evaluate(animation),\n      child: widget.child,\n    );\n  }\n\n  //首次build和更新时候会调用，在这里设置动画需要的Tween的开始值和结束值\n  @override\n  void forEachTween(visitor) {\n    //visitor 有三个参数（当前的tween，动画终止状态，一个回调函数（将第一次给定的值设置为Tween的开始值））\n    _color = visitor(_color, widget.color, (value) => ColorTween(begin: value));// 这里value==首次widget.color的值\n    _height = visitor(_height, widget.height, (value) => Tween<double>(begin: value));\n  }\n}\n```\n\n我们可以去看 ImplicitlyAnimatedWidget 是如何控制动画的，在 ImplicitlyAnimatedWidgetState 中会看到其实里面定义了 AnimationController 控制动画。然后可以看到 didUpdateWidget 钩子函数中调用了  _controller.forward() 执行动画，当父 Widget 调用 setState 时候就会触发这个钩子函数的调用。\n\n## 显示动画\n有时候有些动画需要们自己去控制动画的状态，而不是交给框架去处理，这时就需要我们自己去定义前面简介里提到的那几个动画要素了。\n\n### 内置显示动画\n在 Flutter 中内置的显示动画大部分都是 XxxxxxTransition 名称的，我们看个内置显示动画使用例子，RotationTransition 组件需要一个 turns（Animation\\<double\\>）参数,我们可以给它个AnimationController\n``` dart \n// RotationTransition 参数\nRotationTransition(\n   turns: Animation<double>,\n   child: ChildWidget(),\n)\n\n// AnimationController 参数\nAnimationController(\n  double? value, // 初始值\n  this.duration, //动画时间\n  this.reverseDuration, // 反向动画执行的时间\n  this.debugLabel, \n  this.lowerBound = 0.0, //动画开始值\n  this.upperBound = 1.0, //动画结束值\n  this.animationBehavior = AnimationBehavior.normal,\n  required TickerProvider vsync, //垂直同步，需要一个 Ticker ,Flutter 给我们提供了\n)\n```\n使用 RotationTransition，可以看到一个红蓝渐变色方块旋转一周。\n``` dart \nclass RotationTransitionDemo extends StatefulWidget {\n  @override\n  _RotationTransitionDemoState createState() => _RotationTransitionDemoState();\n}\n\nclass _RotationTransitionDemoState extends State<RotationTransitionDemo> with SingleTickerProviderStateMixin {\n  AnimationController _controller;\n\n  @override\n  void initState() {\n    super.initState();\n    // 设置动画时间为1秒\n    _controller = AnimationController(duration: Duration(milliseconds: 1000), vsync: this)\n    ..addListener(() { // 监听动画的状态值发生变化\n        print(_controller.value);\n    })\n    ..addStatusListener((status) { //监听动画状态\n        // dismissed 动画在起始点停止\n        // forward 动画正在正向执行\n        // reverse 动画正在反向执行\n        // completed 动画在终点停止\n        print(status);\n    })\n    ..forward(); // 执行动画\n    // 常用方法\n    // forward() // 正向执行动画\n    // reverse() 反向执行动画\n    // repeat() 重复执行 可以传个参数 是否会反向运动\n    // stop() 停止动画\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('RotationTransition'),\n      ),\n      body: Center(\n        child: RotationTransition(\n          turns: _controller, // 设置 Animation\n          child: Container(\n            height: 300,\n            width: 300,\n            decoration: BoxDecoration(\n              gradient: LinearGradient(colors: [Colors.red, Colors.blue]),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n### 控制器补间和曲线\n在控制器中我们可以看的动画开始值和结束值默认是 0.0 到 1.0，而且是 double 类型的。而实际动画中不可能只是 double 类型的，需要我们自己使用 Animatable 来指定补间范围值。\n修改一下上面的代码\n```dart\n// 通过控制器的drive方法添加\n _controller = AnimationController(duration: Duration(milliseconds: 1000),vsync: this)\n  ..drive(Tween(begin: 1, end: 4)) //使用Tween（Animatable的子类）指定补间范围\n\n// 我也也可以是使用Animatable的animate方法添加到控制器\nTween(begin: 1, end: 4).animate(_controller);\n// 这样写我们可以使用 chain() 叠加多个 Tween\nTween(begin: 1, end: 4)\n.chain(CurveTween(curve: Curves.ease)) //叠加个曲线\n.animate(_controller);\n```\nFlutter 已经内置帮我们实现了很多 Animatable，ColorTween、SizeTween、IntTween、StepTween 等等。\n\n\n### 自定义显示动画\n查看 RotationTransition 的源码，我们可以看到它是对的抽象类 AnimatedWidget 的实现，当内置的满足不了我们的时候，可以直接自己实现 AnimatedWidget 自定义显示动画。先来看看 AnimatedWidget 里面都有些啥。\n``` dart \n// 只摘取主要的部分\nabstract class AnimatedWidget extends StatefulWidget {\n\n  const AnimatedWidget({ Key key,@required this.listenable,  }) : assert(listenable != null), super(key: key);\n\n  @override\n  _AnimatedState createState() => _AnimatedState();\n}\n\nclass _AnimatedState extends State<AnimatedWidget> {\n  @override\n  void initState() {\n    super.initState();\n    widget.listenable.addListener(_handleChange);\n  }\n\n  void _handleChange() {\n    setState(() {\n      // 我们可以看到显示动画是通过控制器监听插值更改 setState 进行重绘。\n    });\n  }\n}\n```\n接下来我自己继承 AnimatedWidget 实现一个自定义显示动画\n\n``` dart \n// 继承 AnimatedWidget\nclass OpacityAnimatedWidget extends AnimatedWidget {\n  final Widget child;\n  Animation<Color> colorAnimation;\n\n  // AnimatedWidget 需要可传递一个 listenable 进去，我们可以传递个 AnimationController\n  OpacityAnimatedWidget(listenable, {this.colorAnimation, this.child}) : super(listenable: listenable);\n\n  @override\n  Widget build(BuildContext context) {\n    Animation<double> animation = listenable;\n    return Opacity(\n      opacity: animation.value,\n      child: Container(\n        color: colorAnimation.value,\n        child: child,\n      ),\n    );\n  }\n}\n\n// 使用 需要在状态类上 混入一个 SingleTickerProviderStateMixin\nAnimationController _controller = AnimationController(duration: Duration(milliseconds: 1000), vsync: this); \n\nOpacityAnimatedWidget(\n  Tween(begin: 1.0, end: .8).animate(_controller),\n  colorAnimation: ColorTween(begin: Colors.red, end: Colors.blue).animate(_controller),\n  child: Container(\n    height: 300,\n    width: 300,\n  ),\n)\n```\nFlutter 内部还提供了一个 AnimatedBuilder 帮助我们简化自定义动画。\n``` dart\n// 只需要三个三参数\nAnimatedBuilder( \n  animation, // 一个listenable\n  child,// 传入个子组件，非必填\n  builder,// (BuildContext context, Widget child){}  这里的第二个参数 child ，就是上面传入的 child\n  // 这么做的好处就是，动画执行的时候只会执行 builder ,如果一个动画只是包裹层需要执行动画，这个时候就可以把包裹的子组件 放到外面传进去\n  // 这样就每次只需要 执行 builder 而方法第二个参数是传递进来的引用，所以可以避免每次都更新，减少开销\n)\n```\n\n### 交织动画\n官方是这么介绍的：交织动画是一个简单的概念：视觉变化是随着一系列的动作发生，而不是一次性的动作。动画可能是纯粹顺序的，一个改变随着一个改变发生，动画也可能是部分或者全部重叠的。动画也可能有间隙，没有变化发生。\n\n简单点说就是一个动画可以分割成很多片段，每个片段都有不同的 Tween，看个使用示例\n``` dart \nclass StaggeredAnimationDemo extends StatefulWidget {\n  @override\n  _StaggeredAnimationDemoState createState() => _StaggeredAnimationDemoState();\n}\n\nclass _StaggeredAnimationDemoState extends State<StaggeredAnimationDemo> with SingleTickerProviderStateMixin {\n  AnimationController _controller;\n  Animation<double> _height;\n  Animation<Color> _color;\n  Animation<double> _borderRadius;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(duration: Duration(milliseconds: 5000), vsync: this);\n\n    _height = Tween(begin: 50.0, end: 300.0).animate(\n      CurvedAnimation(\n        parent: _controller,\n        curve: Interval(0, 0.15), // Interval 范围必须是0-1 指定Tween在哪一段时间执行\n      ),\n    );\n\n    _color = ColorTween(begin: Colors.red, end: Colors.blue).animate(\n      CurvedAnimation(\n        parent: _controller,\n        curve: Interval(0.1, 0.2),\n      ),\n    );\n\n    _borderRadius = Tween(begin: 10.0, end: 150.0).animate(\n      CurvedAnimation(\n        parent: _controller,\n        curve: Interval(0.1, 0.25),\n      ),\n    );\n\n    _controller.forward();\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return BasiceAppLayout(\n      title: '交织动画',\n      body: Center(\n        child: AnimatedBuilder(\n          animation: _controller,\n          builder: (context, child) {\n            return Container(\n              height: _height.value,\n              width: _height.value,\n              decoration: BoxDecoration(\n                color: _color.value,\n                borderRadius: BorderRadius.circular(_borderRadius.value),\n              ),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n```\n\n## Hero动画\nFlutter 叫它主动画，用于不同页面之间切换时候动画，比如有一个商品列表，点击后跳到一个新的页面查看原图，就可以这个动画。使用也很简单，在不同页面使用 Hero 包裹需要动画组件，两个页面的 tag 需要甚至成一直，但是同一个页面需要保持唯一。\n\n``` dart \nHero(\n  tag: \"avatar\", //唯一标记，前后两个路由页Hero的tag必须相同\n  child: ChildWidget(),\n)\n```\n\n<!-- ## 自绘动画 -->","slug":"flutter_animation","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vr4000u98lgfofd3d05","content":"<p>Flutter 中动画的创建有很多种， 需要根据具体的需求选择不同的动画。如果只是简单的布局等的动画直接使用最简单的隐式动画就可以了，因为隐式动画是由框架控制的，所以仅仅只需要更改变需要变化属性就可以了。如果你想自己控制动画的变换则需要使用显示动画，如果需要控制一些列动画组合时使用交织动画去控制。如果内置的满足不了需求的时候，还可以结合画布自绘动画。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"动画基础\"><a href=\"#动画基础\" class=\"headerlink\" title=\"动画基础\"></a>动画基础</h2><p>Flutter 动画和其他平台动画原理也是一样的，都是在快速更改 UI 实现动画效果。在一个 Flutter 动画中主要包含 Animation（动画）、AnimationController（控制器）、Curve（速度曲线）、Animatable（动画取值范围）、Listeners （监听事件）、Ticker（帧）。</p>\n<ul>\n<li>Animation  一个抽象类是 Flutter 动画的核心类，主用于保存动画当前插值的和状态，在动画运行时会持续生成介于两个值之间的插入值。例如当宽从 100 变成 200，会在动画第一帧到最后一帧都会生成 100-200 区间的一个值，如果速度是匀速的，这个值就是匀速增加到 200。</li>\n<li>AnimationController  用来控制动画的状态启动、暂停、反向运行等， 是 Animation 的一个子类</li>\n<li>Curve  用来定义动画运动的是匀速运动还是匀加速等，和 css 中 animation-timing-function 类似</li>\n<li>Animatable 用于表明动画值范围值。可以通过调用 animate 方法，返回一个 Animation，常见的 Tween 系列的类都是对他的实现</li>\n<li>Listener 监听动画状态的变化</li>\n<li>Ticker 帧回调，在动画执行时候每一帧都会调用其回调，类似与 js 中的 requestAnimationFrame</li>\n</ul>\n<h3 id=\"动画组成结构\"><a href=\"#动画组成结构\" class=\"headerlink\" title=\"动画组成结构\"></a>动画组成结构</h3><p><img src=\"/images/posts/flutter_animation/gxt.png\" alt=\"结构图\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<h3 id=\"动画选择\"><a href=\"#动画选择\" class=\"headerlink\" title=\"动画选择\"></a>动画选择</h3><p><img src=\"/images/posts/flutter_animation/lct.png\" alt=\"流程图\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<!-- Flutter 会用 AnimationController 控制执行状态，执行的时候会根据 Animatable，Curve 在每一帧都生成对应的中间插值，插值会保存在 Animation 中，我们 Animation 的插值我们就可以更新每一帧的画面，形成动画（Animation）。不管是隐式还是显示动画都是这样来处理动画的。 -->\n\n<h2 id=\"隐式动画\"><a href=\"#隐式动画\" class=\"headerlink\" title=\"隐式动画\"></a>隐式动画</h2><p>隐式动画简单来说就是我们只需要修改对应的属性，Flutter 就是自己帮我们过渡动画，和 css 中过渡有点类似，当我们设置后 transition 后只需要更改对应的 css 属性就会自动过渡到新的值。Flutter 内置了一些常用的隐式动画，可以看到源码里都是对 ImplicitlyAnimatedWidget 的实现，如果需要我们也可以自己实现 ImplicitlyAnimatedWidget 来自定义隐式动画。 </p>\n<h3 id=\"内置隐式动画\"><a href=\"#内置隐式动画\" class=\"headerlink\" title=\"内置隐式动画\"></a>内置隐式动画</h3><p>看个使用例子</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先我们在一个StatefulWidget定义 一个height和color</span></span><br><span class=\"line\"><span class=\"built_in\">double</span> heihgt = <span class=\"number\">100</span>;</span><br><span class=\"line\">Color color = Colors.yellow[<span class=\"number\">800</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在build 怎加一个隐式动画组建 AnimatedContainer，需要个Duration（动画执行时间），其他的参数和Container的基本一致</span></span><br><span class=\"line\">AnimatedContainer(</span><br><span class=\"line\">    duration: <span class=\"built_in\">Duration</span>(milliseconds: <span class=\"number\">500</span>), </span><br><span class=\"line\">    height: heihgt, <span class=\"comment\">// 使用我们定义好的值</span></span><br><span class=\"line\">    color: color,</span><br><span class=\"line\">    margin: EdgeInsets.all(<span class=\"number\">8</span>),</span><br><span class=\"line\">    child: Center(</span><br><span class=\"line\">        child: Text(<span class=\"string\">&#x27;AnimatedContainer&#x27;</span>,</span><br><span class=\"line\">            style: TextStyle(color: Colors.white, fontSize: <span class=\"number\">20</span>),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在需要执行动画时候我们修改 height 和 color 值,就会看到 上边的组建会一边变高边过渡到蓝色上</span></span><br><span class=\"line\">setState(() &#123;</span><br><span class=\"line\">    heihgt = <span class=\"number\">200</span>;</span><br><span class=\"line\">    color = Colors.blue;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在 Flutter 内置的隐式动画组件中，一般都是 AnimatedXxxxxx 类似的，后面的 Xxxxxx 都能找到对应的组件。内置的有下面这些 AnimatedContainer、AnimatedPadding、AnimatedAlign、AnimatedPositioned、AnimatedOpacity、SliverAnimatedOpacity、AnimatedDefaultTextStyle、AnimatedPhysicalModel。这些隐式动画的使用和其 Xxxxxx 对应的属性基本一致，只需要额外的指定 duration 就可以了，当然也可以为动画指定动画曲线 curve。</p>\n<h3 id=\"自定义隐式动画\"><a href=\"#自定义隐式动画\" class=\"headerlink\" title=\"自定义隐式动画\"></a>自定义隐式动画</h3><p>当这内置的满足不了你的时候，你也可以去实现一个隐式动画，只需要实现抽象类 ImplicitlyAnimatedWidget。实现自定义隐式动画仅需要重写 build 和 forEachTween 就可以简单实现了。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 直接继承ImplicitlyAnimatedWidget </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimatedDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">ImplicitlyAnimatedWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Color color;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Widget child;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">double</span> height;</span><br><span class=\"line\"></span><br><span class=\"line\">  AnimatedDemo(&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.height,</span><br><span class=\"line\">    Curve curve = Curves.linear,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.child,</span><br><span class=\"line\">    <span class=\"meta\">@required</span> <span class=\"built_in\">Duration</span> duration,</span><br><span class=\"line\">  &#125;) : <span class=\"keyword\">super</span>(curve: curve, duration: duration);</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _AnimatedDemo createState() =&gt; _AnimatedDemo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//因为ImplicitlyAnimatedWidget是继承 StatefulWidget 的，所以还需要继承他的状态类 （AnimatedWidgetBaseState 继承自 ImplicitlyAnimatedWidgetState）</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_AnimatedDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">AnimatedWidgetBaseState</span>&lt;<span class=\"title\">AnimatedDemo</span>&gt; </span>&#123;</span><br><span class=\"line\">  ColorTween _color;</span><br><span class=\"line\">  Tween&lt;<span class=\"built_in\">double</span>&gt; _height;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 在动画执行时候会每一帧都调用 build</span></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Container(</span><br><span class=\"line\">      color: _color.evaluate(animation), <span class=\"comment\">//使用evaluate可以获取Tween当前帧的状态值</span></span><br><span class=\"line\">      height: _height.evaluate(animation),</span><br><span class=\"line\">      child: widget.child,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//首次build和更新时候会调用，在这里设置动画需要的Tween的开始值和结束值</span></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> forEachTween(visitor) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//visitor 有三个参数（当前的tween，动画终止状态，一个回调函数（将第一次给定的值设置为Tween的开始值））</span></span><br><span class=\"line\">    _color = visitor(_color, widget.color, (value) =&gt; ColorTween(begin: value));<span class=\"comment\">// 这里value==首次widget.color的值</span></span><br><span class=\"line\">    _height = visitor(_height, widget.height, (value) =&gt; Tween&lt;<span class=\"built_in\">double</span>&gt;(begin: value));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以去看 ImplicitlyAnimatedWidget 是如何控制动画的，在 ImplicitlyAnimatedWidgetState 中会看到其实里面定义了 AnimationController 控制动画。然后可以看到 didUpdateWidget 钩子函数中调用了  _controller.forward() 执行动画，当父 Widget 调用 setState 时候就会触发这个钩子函数的调用。</p>\n<h2 id=\"显示动画\"><a href=\"#显示动画\" class=\"headerlink\" title=\"显示动画\"></a>显示动画</h2><p>有时候有些动画需要们自己去控制动画的状态，而不是交给框架去处理，这时就需要我们自己去定义前面简介里提到的那几个动画要素了。</p>\n<h3 id=\"内置显示动画\"><a href=\"#内置显示动画\" class=\"headerlink\" title=\"内置显示动画\"></a>内置显示动画</h3><p>在 Flutter 中内置的显示动画大部分都是 XxxxxxTransition 名称的，我们看个内置显示动画使用例子，RotationTransition 组件需要一个 turns（Animation&lt;double&gt;）参数,我们可以给它个AnimationController</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RotationTransition 参数</span></span><br><span class=\"line\">RotationTransition(</span><br><span class=\"line\">   turns: Animation&lt;<span class=\"built_in\">double</span>&gt;,</span><br><span class=\"line\">   child: ChildWidget(),</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AnimationController 参数</span></span><br><span class=\"line\">AnimationController(</span><br><span class=\"line\">  <span class=\"built_in\">double?</span> value, <span class=\"comment\">// 初始值</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.duration, <span class=\"comment\">//动画时间</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.reverseDuration, <span class=\"comment\">// 反向动画执行的时间</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.debugLabel, </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.lowerBound = <span class=\"number\">0.0</span>, <span class=\"comment\">//动画开始值</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.upperBound = <span class=\"number\">1.0</span>, <span class=\"comment\">//动画结束值</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.animationBehavior = AnimationBehavior.normal,</span><br><span class=\"line\">  <span class=\"keyword\">required</span> TickerProvider vsync, <span class=\"comment\">//垂直同步，需要一个 Ticker ,Flutter 给我们提供了</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>使用 RotationTransition，可以看到一个红蓝渐变色方块旋转一周。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RotationTransitionDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _RotationTransitionDemoState createState() =&gt; _RotationTransitionDemoState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_RotationTransitionDemoState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">RotationTransitionDemo</span>&gt; <span class=\"title\">with</span> <span class=\"title\">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class=\"line\">  AnimationController _controller;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    <span class=\"comment\">// 设置动画时间为1秒</span></span><br><span class=\"line\">    _controller = AnimationController(duration: <span class=\"built_in\">Duration</span>(milliseconds: <span class=\"number\">1000</span>), vsync: <span class=\"keyword\">this</span>)</span><br><span class=\"line\">    ..addListener(() &#123; <span class=\"comment\">// 监听动画的状态值发生变化</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(_controller.value);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ..addStatusListener((status) &#123; <span class=\"comment\">//监听动画状态</span></span><br><span class=\"line\">        <span class=\"comment\">// dismissed 动画在起始点停止</span></span><br><span class=\"line\">        <span class=\"comment\">// forward 动画正在正向执行</span></span><br><span class=\"line\">        <span class=\"comment\">// reverse 动画正在反向执行</span></span><br><span class=\"line\">        <span class=\"comment\">// completed 动画在终点停止</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(status);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ..forward(); <span class=\"comment\">// 执行动画</span></span><br><span class=\"line\">    <span class=\"comment\">// 常用方法</span></span><br><span class=\"line\">    <span class=\"comment\">// forward() // 正向执行动画</span></span><br><span class=\"line\">    <span class=\"comment\">// reverse() 反向执行动画</span></span><br><span class=\"line\">    <span class=\"comment\">// repeat() 重复执行 可以传个参数 是否会反向运动</span></span><br><span class=\"line\">    <span class=\"comment\">// stop() 停止动画</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> dispose() &#123;</span><br><span class=\"line\">    _controller.dispose();</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.dispose();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(<span class=\"string\">&#x27;RotationTransition&#x27;</span>),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: Center(</span><br><span class=\"line\">        child: RotationTransition(</span><br><span class=\"line\">          turns: _controller, <span class=\"comment\">// 设置 Animation</span></span><br><span class=\"line\">          child: Container(</span><br><span class=\"line\">            height: <span class=\"number\">300</span>,</span><br><span class=\"line\">            width: <span class=\"number\">300</span>,</span><br><span class=\"line\">            decoration: BoxDecoration(</span><br><span class=\"line\">              gradient: LinearGradient(colors: [Colors.red, Colors.blue]),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制器补间和曲线\"><a href=\"#控制器补间和曲线\" class=\"headerlink\" title=\"控制器补间和曲线\"></a>控制器补间和曲线</h3><p>在控制器中我们可以看的动画开始值和结束值默认是 0.0 到 1.0，而且是 double 类型的。而实际动画中不可能只是 double 类型的，需要我们自己使用 Animatable 来指定补间范围值。<br>修改一下上面的代码</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过控制器的drive方法添加</span></span><br><span class=\"line\"> _controller = AnimationController(duration: <span class=\"built_in\">Duration</span>(milliseconds: <span class=\"number\">1000</span>),vsync: <span class=\"keyword\">this</span>)</span><br><span class=\"line\">  ..drive(Tween(begin: <span class=\"number\">1</span>, end: <span class=\"number\">4</span>)) <span class=\"comment\">//使用Tween（Animatable的子类）指定补间范围</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我也也可以是使用Animatable的animate方法添加到控制器</span></span><br><span class=\"line\">Tween(begin: <span class=\"number\">1</span>, end: <span class=\"number\">4</span>).animate(_controller);</span><br><span class=\"line\"><span class=\"comment\">// 这样写我们可以使用 chain() 叠加多个 Tween</span></span><br><span class=\"line\">Tween(begin: <span class=\"number\">1</span>, end: <span class=\"number\">4</span>)</span><br><span class=\"line\">.chain(CurveTween(curve: Curves.ease)) <span class=\"comment\">//叠加个曲线</span></span><br><span class=\"line\">.animate(_controller);</span><br></pre></td></tr></table></figure>\n<p>Flutter 已经内置帮我们实现了很多 Animatable，ColorTween、SizeTween、IntTween、StepTween 等等。</p>\n<h3 id=\"自定义显示动画\"><a href=\"#自定义显示动画\" class=\"headerlink\" title=\"自定义显示动画\"></a>自定义显示动画</h3><p>查看 RotationTransition 的源码，我们可以看到它是对的抽象类 AnimatedWidget 的实现，当内置的满足不了我们的时候，可以直接自己实现 AnimatedWidget 自定义显示动画。先来看看 AnimatedWidget 里面都有些啥。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只摘取主要的部分</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimatedWidget</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> AnimatedWidget(&#123; Key key,<span class=\"meta\">@required</span> <span class=\"keyword\">this</span>.listenable,  &#125;) : <span class=\"keyword\">assert</span>(listenable != <span class=\"keyword\">null</span>), <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _AnimatedState createState() =&gt; _AnimatedState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_AnimatedState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">AnimatedWidget</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    widget.listenable.addListener(_handleChange);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> _handleChange() &#123;</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 我们可以看到显示动画是通过控制器监听插值更改 setState 进行重绘。</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来我自己继承 AnimatedWidget 实现一个自定义显示动画</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 继承 AnimatedWidget</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpacityAnimatedWidget</span> <span class=\"keyword\">extends</span> <span class=\"title\">AnimatedWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Widget child;</span><br><span class=\"line\">  Animation&lt;Color&gt; colorAnimation;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// AnimatedWidget 需要可传递一个 listenable 进去，我们可以传递个 AnimationController</span></span><br><span class=\"line\">  OpacityAnimatedWidget(listenable, &#123;<span class=\"keyword\">this</span>.colorAnimation, <span class=\"keyword\">this</span>.child&#125;) : <span class=\"keyword\">super</span>(listenable: listenable);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    Animation&lt;<span class=\"built_in\">double</span>&gt; animation = listenable;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Opacity(</span><br><span class=\"line\">      opacity: animation.value,</span><br><span class=\"line\">      child: Container(</span><br><span class=\"line\">        color: colorAnimation.value,</span><br><span class=\"line\">        child: child,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 需要在状态类上 混入一个 SingleTickerProviderStateMixin</span></span><br><span class=\"line\">AnimationController _controller = AnimationController(duration: <span class=\"built_in\">Duration</span>(milliseconds: <span class=\"number\">1000</span>), vsync: <span class=\"keyword\">this</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">OpacityAnimatedWidget(</span><br><span class=\"line\">  Tween(begin: <span class=\"number\">1.0</span>, end: <span class=\"number\">.8</span>).animate(_controller),</span><br><span class=\"line\">  colorAnimation: ColorTween(begin: Colors.red, end: Colors.blue).animate(_controller),</span><br><span class=\"line\">  child: Container(</span><br><span class=\"line\">    height: <span class=\"number\">300</span>,</span><br><span class=\"line\">    width: <span class=\"number\">300</span>,</span><br><span class=\"line\">  ),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>Flutter 内部还提供了一个 AnimatedBuilder 帮助我们简化自定义动画。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只需要三个三参数</span></span><br><span class=\"line\">AnimatedBuilder( </span><br><span class=\"line\">  animation, <span class=\"comment\">// 一个listenable</span></span><br><span class=\"line\">  child,<span class=\"comment\">// 传入个子组件，非必填</span></span><br><span class=\"line\">  builder,<span class=\"comment\">// (BuildContext context, Widget child)&#123;&#125;  这里的第二个参数 child ，就是上面传入的 child</span></span><br><span class=\"line\">  <span class=\"comment\">// 这么做的好处就是，动画执行的时候只会执行 builder ,如果一个动画只是包裹层需要执行动画，这个时候就可以把包裹的子组件 放到外面传进去</span></span><br><span class=\"line\">  <span class=\"comment\">// 这样就每次只需要 执行 builder 而方法第二个参数是传递进来的引用，所以可以避免每次都更新，减少开销</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"交织动画\"><a href=\"#交织动画\" class=\"headerlink\" title=\"交织动画\"></a>交织动画</h3><p>官方是这么介绍的：交织动画是一个简单的概念：视觉变化是随着一系列的动作发生，而不是一次性的动作。动画可能是纯粹顺序的，一个改变随着一个改变发生，动画也可能是部分或者全部重叠的。动画也可能有间隙，没有变化发生。</p>\n<p>简单点说就是一个动画可以分割成很多片段，每个片段都有不同的 Tween，看个使用示例</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaggeredAnimationDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _StaggeredAnimationDemoState createState() =&gt; _StaggeredAnimationDemoState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_StaggeredAnimationDemoState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">StaggeredAnimationDemo</span>&gt; <span class=\"title\">with</span> <span class=\"title\">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class=\"line\">  AnimationController _controller;</span><br><span class=\"line\">  Animation&lt;<span class=\"built_in\">double</span>&gt; _height;</span><br><span class=\"line\">  Animation&lt;Color&gt; _color;</span><br><span class=\"line\">  Animation&lt;<span class=\"built_in\">double</span>&gt; _borderRadius;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    _controller = AnimationController(duration: <span class=\"built_in\">Duration</span>(milliseconds: <span class=\"number\">5000</span>), vsync: <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    _height = Tween(begin: <span class=\"number\">50.0</span>, end: <span class=\"number\">300.0</span>).animate(</span><br><span class=\"line\">      CurvedAnimation(</span><br><span class=\"line\">        parent: _controller,</span><br><span class=\"line\">        curve: Interval(<span class=\"number\">0</span>, <span class=\"number\">0.15</span>), <span class=\"comment\">// Interval 范围必须是0-1 指定Tween在哪一段时间执行</span></span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    _color = ColorTween(begin: Colors.red, end: Colors.blue).animate(</span><br><span class=\"line\">      CurvedAnimation(</span><br><span class=\"line\">        parent: _controller,</span><br><span class=\"line\">        curve: Interval(<span class=\"number\">0.1</span>, <span class=\"number\">0.2</span>),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    _borderRadius = Tween(begin: <span class=\"number\">10.0</span>, end: <span class=\"number\">150.0</span>).animate(</span><br><span class=\"line\">      CurvedAnimation(</span><br><span class=\"line\">        parent: _controller,</span><br><span class=\"line\">        curve: Interval(<span class=\"number\">0.1</span>, <span class=\"number\">0.25</span>),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    _controller.forward();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> dispose() &#123;</span><br><span class=\"line\">    _controller.dispose();</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.dispose();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BasiceAppLayout(</span><br><span class=\"line\">      title: <span class=\"string\">&#x27;交织动画&#x27;</span>,</span><br><span class=\"line\">      body: Center(</span><br><span class=\"line\">        child: AnimatedBuilder(</span><br><span class=\"line\">          animation: _controller,</span><br><span class=\"line\">          builder: (context, child) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Container(</span><br><span class=\"line\">              height: _height.value,</span><br><span class=\"line\">              width: _height.value,</span><br><span class=\"line\">              decoration: BoxDecoration(</span><br><span class=\"line\">                color: _color.value,</span><br><span class=\"line\">                borderRadius: BorderRadius.circular(_borderRadius.value),</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            );</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hero动画\"><a href=\"#Hero动画\" class=\"headerlink\" title=\"Hero动画\"></a>Hero动画</h2><p>Flutter 叫它主动画，用于不同页面之间切换时候动画，比如有一个商品列表，点击后跳到一个新的页面查看原图，就可以这个动画。使用也很简单，在不同页面使用 Hero 包裹需要动画组件，两个页面的 tag 需要甚至成一直，但是同一个页面需要保持唯一。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hero(</span><br><span class=\"line\">  tag: <span class=\"string\">&quot;avatar&quot;</span>, <span class=\"comment\">//唯一标记，前后两个路由页Hero的tag必须相同</span></span><br><span class=\"line\">  child: ChildWidget(),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<!-- ## 自绘动画 -->","excerpt":"<p>Flutter 中动画的创建有很多种， 需要根据具体的需求选择不同的动画。如果只是简单的布局等的动画直接使用最简单的隐式动画就可以了，因为隐式动画是由框架控制的，所以仅仅只需要更改变需要变化属性就可以了。如果你想自己控制动画的变换则需要使用显示动画，如果需要控制一些列动画组合时使用交织动画去控制。如果内置的满足不了需求的时候，还可以结合画布自绘动画。</p>","more":"<h2 id=\"动画基础\"><a href=\"#动画基础\" class=\"headerlink\" title=\"动画基础\"></a>动画基础</h2><p>Flutter 动画和其他平台动画原理也是一样的，都是在快速更改 UI 实现动画效果。在一个 Flutter 动画中主要包含 Animation（动画）、AnimationController（控制器）、Curve（速度曲线）、Animatable（动画取值范围）、Listeners （监听事件）、Ticker（帧）。</p>\n<ul>\n<li>Animation  一个抽象类是 Flutter 动画的核心类，主用于保存动画当前插值的和状态，在动画运行时会持续生成介于两个值之间的插入值。例如当宽从 100 变成 200，会在动画第一帧到最后一帧都会生成 100-200 区间的一个值，如果速度是匀速的，这个值就是匀速增加到 200。</li>\n<li>AnimationController  用来控制动画的状态启动、暂停、反向运行等， 是 Animation 的一个子类</li>\n<li>Curve  用来定义动画运动的是匀速运动还是匀加速等，和 css 中 animation-timing-function 类似</li>\n<li>Animatable 用于表明动画值范围值。可以通过调用 animate 方法，返回一个 Animation，常见的 Tween 系列的类都是对他的实现</li>\n<li>Listener 监听动画状态的变化</li>\n<li>Ticker 帧回调，在动画执行时候每一帧都会调用其回调，类似与 js 中的 requestAnimationFrame</li>\n</ul>\n<h3 id=\"动画组成结构\"><a href=\"#动画组成结构\" class=\"headerlink\" title=\"动画组成结构\"></a>动画组成结构</h3><p><img src=\"/images/posts/flutter_animation/gxt.png\" alt=\"结构图\"></p>\n<h3 id=\"动画选择\"><a href=\"#动画选择\" class=\"headerlink\" title=\"动画选择\"></a>动画选择</h3><p><img src=\"/images/posts/flutter_animation/lct.png\" alt=\"流程图\"></p>\n<!-- Flutter 会用 AnimationController 控制执行状态，执行的时候会根据 Animatable，Curve 在每一帧都生成对应的中间插值，插值会保存在 Animation 中，我们 Animation 的插值我们就可以更新每一帧的画面，形成动画（Animation）。不管是隐式还是显示动画都是这样来处理动画的。 -->\n\n<h2 id=\"隐式动画\"><a href=\"#隐式动画\" class=\"headerlink\" title=\"隐式动画\"></a>隐式动画</h2><p>隐式动画简单来说就是我们只需要修改对应的属性，Flutter 就是自己帮我们过渡动画，和 css 中过渡有点类似，当我们设置后 transition 后只需要更改对应的 css 属性就会自动过渡到新的值。Flutter 内置了一些常用的隐式动画，可以看到源码里都是对 ImplicitlyAnimatedWidget 的实现，如果需要我们也可以自己实现 ImplicitlyAnimatedWidget 来自定义隐式动画。 </p>\n<h3 id=\"内置隐式动画\"><a href=\"#内置隐式动画\" class=\"headerlink\" title=\"内置隐式动画\"></a>内置隐式动画</h3><p>看个使用例子</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 首先我们在一个StatefulWidget定义 一个height和color</span></span><br><span class=\"line\"><span class=\"built_in\">double</span> heihgt = <span class=\"number\">100</span>;</span><br><span class=\"line\">Color color = Colors.yellow[<span class=\"number\">800</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在build 怎加一个隐式动画组建 AnimatedContainer，需要个Duration（动画执行时间），其他的参数和Container的基本一致</span></span><br><span class=\"line\">AnimatedContainer(</span><br><span class=\"line\">    duration: <span class=\"built_in\">Duration</span>(milliseconds: <span class=\"number\">500</span>), </span><br><span class=\"line\">    height: heihgt, <span class=\"comment\">// 使用我们定义好的值</span></span><br><span class=\"line\">    color: color,</span><br><span class=\"line\">    margin: EdgeInsets.all(<span class=\"number\">8</span>),</span><br><span class=\"line\">    child: Center(</span><br><span class=\"line\">        child: Text(<span class=\"string\">&#x27;AnimatedContainer&#x27;</span>,</span><br><span class=\"line\">            style: TextStyle(color: Colors.white, fontSize: <span class=\"number\">20</span>),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在需要执行动画时候我们修改 height 和 color 值,就会看到 上边的组建会一边变高边过渡到蓝色上</span></span><br><span class=\"line\">setState(() &#123;</span><br><span class=\"line\">    heihgt = <span class=\"number\">200</span>;</span><br><span class=\"line\">    color = Colors.blue;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在 Flutter 内置的隐式动画组件中，一般都是 AnimatedXxxxxx 类似的，后面的 Xxxxxx 都能找到对应的组件。内置的有下面这些 AnimatedContainer、AnimatedPadding、AnimatedAlign、AnimatedPositioned、AnimatedOpacity、SliverAnimatedOpacity、AnimatedDefaultTextStyle、AnimatedPhysicalModel。这些隐式动画的使用和其 Xxxxxx 对应的属性基本一致，只需要额外的指定 duration 就可以了，当然也可以为动画指定动画曲线 curve。</p>\n<h3 id=\"自定义隐式动画\"><a href=\"#自定义隐式动画\" class=\"headerlink\" title=\"自定义隐式动画\"></a>自定义隐式动画</h3><p>当这内置的满足不了你的时候，你也可以去实现一个隐式动画，只需要实现抽象类 ImplicitlyAnimatedWidget。实现自定义隐式动画仅需要重写 build 和 forEachTween 就可以简单实现了。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 直接继承ImplicitlyAnimatedWidget </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimatedDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">ImplicitlyAnimatedWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Color color;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Widget child;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">double</span> height;</span><br><span class=\"line\"></span><br><span class=\"line\">  AnimatedDemo(&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.height,</span><br><span class=\"line\">    Curve curve = Curves.linear,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.child,</span><br><span class=\"line\">    <span class=\"meta\">@required</span> <span class=\"built_in\">Duration</span> duration,</span><br><span class=\"line\">  &#125;) : <span class=\"keyword\">super</span>(curve: curve, duration: duration);</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _AnimatedDemo createState() =&gt; _AnimatedDemo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//因为ImplicitlyAnimatedWidget是继承 StatefulWidget 的，所以还需要继承他的状态类 （AnimatedWidgetBaseState 继承自 ImplicitlyAnimatedWidgetState）</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_AnimatedDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">AnimatedWidgetBaseState</span>&lt;<span class=\"title\">AnimatedDemo</span>&gt; </span>&#123;</span><br><span class=\"line\">  ColorTween _color;</span><br><span class=\"line\">  Tween&lt;<span class=\"built_in\">double</span>&gt; _height;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 在动画执行时候会每一帧都调用 build</span></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Container(</span><br><span class=\"line\">      color: _color.evaluate(animation), <span class=\"comment\">//使用evaluate可以获取Tween当前帧的状态值</span></span><br><span class=\"line\">      height: _height.evaluate(animation),</span><br><span class=\"line\">      child: widget.child,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//首次build和更新时候会调用，在这里设置动画需要的Tween的开始值和结束值</span></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> forEachTween(visitor) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//visitor 有三个参数（当前的tween，动画终止状态，一个回调函数（将第一次给定的值设置为Tween的开始值））</span></span><br><span class=\"line\">    _color = visitor(_color, widget.color, (value) =&gt; ColorTween(begin: value));<span class=\"comment\">// 这里value==首次widget.color的值</span></span><br><span class=\"line\">    _height = visitor(_height, widget.height, (value) =&gt; Tween&lt;<span class=\"built_in\">double</span>&gt;(begin: value));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以去看 ImplicitlyAnimatedWidget 是如何控制动画的，在 ImplicitlyAnimatedWidgetState 中会看到其实里面定义了 AnimationController 控制动画。然后可以看到 didUpdateWidget 钩子函数中调用了  _controller.forward() 执行动画，当父 Widget 调用 setState 时候就会触发这个钩子函数的调用。</p>\n<h2 id=\"显示动画\"><a href=\"#显示动画\" class=\"headerlink\" title=\"显示动画\"></a>显示动画</h2><p>有时候有些动画需要们自己去控制动画的状态，而不是交给框架去处理，这时就需要我们自己去定义前面简介里提到的那几个动画要素了。</p>\n<h3 id=\"内置显示动画\"><a href=\"#内置显示动画\" class=\"headerlink\" title=\"内置显示动画\"></a>内置显示动画</h3><p>在 Flutter 中内置的显示动画大部分都是 XxxxxxTransition 名称的，我们看个内置显示动画使用例子，RotationTransition 组件需要一个 turns（Animation&lt;double&gt;）参数,我们可以给它个AnimationController</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RotationTransition 参数</span></span><br><span class=\"line\">RotationTransition(</span><br><span class=\"line\">   turns: Animation&lt;<span class=\"built_in\">double</span>&gt;,</span><br><span class=\"line\">   child: ChildWidget(),</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// AnimationController 参数</span></span><br><span class=\"line\">AnimationController(</span><br><span class=\"line\">  <span class=\"built_in\">double?</span> value, <span class=\"comment\">// 初始值</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.duration, <span class=\"comment\">//动画时间</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.reverseDuration, <span class=\"comment\">// 反向动画执行的时间</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.debugLabel, </span><br><span class=\"line\">  <span class=\"keyword\">this</span>.lowerBound = <span class=\"number\">0.0</span>, <span class=\"comment\">//动画开始值</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.upperBound = <span class=\"number\">1.0</span>, <span class=\"comment\">//动画结束值</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.animationBehavior = AnimationBehavior.normal,</span><br><span class=\"line\">  <span class=\"keyword\">required</span> TickerProvider vsync, <span class=\"comment\">//垂直同步，需要一个 Ticker ,Flutter 给我们提供了</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>使用 RotationTransition，可以看到一个红蓝渐变色方块旋转一周。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RotationTransitionDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _RotationTransitionDemoState createState() =&gt; _RotationTransitionDemoState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_RotationTransitionDemoState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">RotationTransitionDemo</span>&gt; <span class=\"title\">with</span> <span class=\"title\">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class=\"line\">  AnimationController _controller;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    <span class=\"comment\">// 设置动画时间为1秒</span></span><br><span class=\"line\">    _controller = AnimationController(duration: <span class=\"built_in\">Duration</span>(milliseconds: <span class=\"number\">1000</span>), vsync: <span class=\"keyword\">this</span>)</span><br><span class=\"line\">    ..addListener(() &#123; <span class=\"comment\">// 监听动画的状态值发生变化</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(_controller.value);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ..addStatusListener((status) &#123; <span class=\"comment\">//监听动画状态</span></span><br><span class=\"line\">        <span class=\"comment\">// dismissed 动画在起始点停止</span></span><br><span class=\"line\">        <span class=\"comment\">// forward 动画正在正向执行</span></span><br><span class=\"line\">        <span class=\"comment\">// reverse 动画正在反向执行</span></span><br><span class=\"line\">        <span class=\"comment\">// completed 动画在终点停止</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(status);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    ..forward(); <span class=\"comment\">// 执行动画</span></span><br><span class=\"line\">    <span class=\"comment\">// 常用方法</span></span><br><span class=\"line\">    <span class=\"comment\">// forward() // 正向执行动画</span></span><br><span class=\"line\">    <span class=\"comment\">// reverse() 反向执行动画</span></span><br><span class=\"line\">    <span class=\"comment\">// repeat() 重复执行 可以传个参数 是否会反向运动</span></span><br><span class=\"line\">    <span class=\"comment\">// stop() 停止动画</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> dispose() &#123;</span><br><span class=\"line\">    _controller.dispose();</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.dispose();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(<span class=\"string\">&#x27;RotationTransition&#x27;</span>),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: Center(</span><br><span class=\"line\">        child: RotationTransition(</span><br><span class=\"line\">          turns: _controller, <span class=\"comment\">// 设置 Animation</span></span><br><span class=\"line\">          child: Container(</span><br><span class=\"line\">            height: <span class=\"number\">300</span>,</span><br><span class=\"line\">            width: <span class=\"number\">300</span>,</span><br><span class=\"line\">            decoration: BoxDecoration(</span><br><span class=\"line\">              gradient: LinearGradient(colors: [Colors.red, Colors.blue]),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制器补间和曲线\"><a href=\"#控制器补间和曲线\" class=\"headerlink\" title=\"控制器补间和曲线\"></a>控制器补间和曲线</h3><p>在控制器中我们可以看的动画开始值和结束值默认是 0.0 到 1.0，而且是 double 类型的。而实际动画中不可能只是 double 类型的，需要我们自己使用 Animatable 来指定补间范围值。<br>修改一下上面的代码</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过控制器的drive方法添加</span></span><br><span class=\"line\"> _controller = AnimationController(duration: <span class=\"built_in\">Duration</span>(milliseconds: <span class=\"number\">1000</span>),vsync: <span class=\"keyword\">this</span>)</span><br><span class=\"line\">  ..drive(Tween(begin: <span class=\"number\">1</span>, end: <span class=\"number\">4</span>)) <span class=\"comment\">//使用Tween（Animatable的子类）指定补间范围</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我也也可以是使用Animatable的animate方法添加到控制器</span></span><br><span class=\"line\">Tween(begin: <span class=\"number\">1</span>, end: <span class=\"number\">4</span>).animate(_controller);</span><br><span class=\"line\"><span class=\"comment\">// 这样写我们可以使用 chain() 叠加多个 Tween</span></span><br><span class=\"line\">Tween(begin: <span class=\"number\">1</span>, end: <span class=\"number\">4</span>)</span><br><span class=\"line\">.chain(CurveTween(curve: Curves.ease)) <span class=\"comment\">//叠加个曲线</span></span><br><span class=\"line\">.animate(_controller);</span><br></pre></td></tr></table></figure>\n<p>Flutter 已经内置帮我们实现了很多 Animatable，ColorTween、SizeTween、IntTween、StepTween 等等。</p>\n<h3 id=\"自定义显示动画\"><a href=\"#自定义显示动画\" class=\"headerlink\" title=\"自定义显示动画\"></a>自定义显示动画</h3><p>查看 RotationTransition 的源码，我们可以看到它是对的抽象类 AnimatedWidget 的实现，当内置的满足不了我们的时候，可以直接自己实现 AnimatedWidget 自定义显示动画。先来看看 AnimatedWidget 里面都有些啥。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只摘取主要的部分</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimatedWidget</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> AnimatedWidget(&#123; Key key,<span class=\"meta\">@required</span> <span class=\"keyword\">this</span>.listenable,  &#125;) : <span class=\"keyword\">assert</span>(listenable != <span class=\"keyword\">null</span>), <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _AnimatedState createState() =&gt; _AnimatedState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_AnimatedState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">AnimatedWidget</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    widget.listenable.addListener(_handleChange);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> _handleChange() &#123;</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 我们可以看到显示动画是通过控制器监听插值更改 setState 进行重绘。</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来我自己继承 AnimatedWidget 实现一个自定义显示动画</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 继承 AnimatedWidget</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpacityAnimatedWidget</span> <span class=\"keyword\">extends</span> <span class=\"title\">AnimatedWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Widget child;</span><br><span class=\"line\">  Animation&lt;Color&gt; colorAnimation;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// AnimatedWidget 需要可传递一个 listenable 进去，我们可以传递个 AnimationController</span></span><br><span class=\"line\">  OpacityAnimatedWidget(listenable, &#123;<span class=\"keyword\">this</span>.colorAnimation, <span class=\"keyword\">this</span>.child&#125;) : <span class=\"keyword\">super</span>(listenable: listenable);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    Animation&lt;<span class=\"built_in\">double</span>&gt; animation = listenable;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Opacity(</span><br><span class=\"line\">      opacity: animation.value,</span><br><span class=\"line\">      child: Container(</span><br><span class=\"line\">        color: colorAnimation.value,</span><br><span class=\"line\">        child: child,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 需要在状态类上 混入一个 SingleTickerProviderStateMixin</span></span><br><span class=\"line\">AnimationController _controller = AnimationController(duration: <span class=\"built_in\">Duration</span>(milliseconds: <span class=\"number\">1000</span>), vsync: <span class=\"keyword\">this</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">OpacityAnimatedWidget(</span><br><span class=\"line\">  Tween(begin: <span class=\"number\">1.0</span>, end: <span class=\"number\">.8</span>).animate(_controller),</span><br><span class=\"line\">  colorAnimation: ColorTween(begin: Colors.red, end: Colors.blue).animate(_controller),</span><br><span class=\"line\">  child: Container(</span><br><span class=\"line\">    height: <span class=\"number\">300</span>,</span><br><span class=\"line\">    width: <span class=\"number\">300</span>,</span><br><span class=\"line\">  ),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>Flutter 内部还提供了一个 AnimatedBuilder 帮助我们简化自定义动画。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 只需要三个三参数</span></span><br><span class=\"line\">AnimatedBuilder( </span><br><span class=\"line\">  animation, <span class=\"comment\">// 一个listenable</span></span><br><span class=\"line\">  child,<span class=\"comment\">// 传入个子组件，非必填</span></span><br><span class=\"line\">  builder,<span class=\"comment\">// (BuildContext context, Widget child)&#123;&#125;  这里的第二个参数 child ，就是上面传入的 child</span></span><br><span class=\"line\">  <span class=\"comment\">// 这么做的好处就是，动画执行的时候只会执行 builder ,如果一个动画只是包裹层需要执行动画，这个时候就可以把包裹的子组件 放到外面传进去</span></span><br><span class=\"line\">  <span class=\"comment\">// 这样就每次只需要 执行 builder 而方法第二个参数是传递进来的引用，所以可以避免每次都更新，减少开销</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"交织动画\"><a href=\"#交织动画\" class=\"headerlink\" title=\"交织动画\"></a>交织动画</h3><p>官方是这么介绍的：交织动画是一个简单的概念：视觉变化是随着一系列的动作发生，而不是一次性的动作。动画可能是纯粹顺序的，一个改变随着一个改变发生，动画也可能是部分或者全部重叠的。动画也可能有间隙，没有变化发生。</p>\n<p>简单点说就是一个动画可以分割成很多片段，每个片段都有不同的 Tween，看个使用示例</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaggeredAnimationDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _StaggeredAnimationDemoState createState() =&gt; _StaggeredAnimationDemoState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_StaggeredAnimationDemoState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">StaggeredAnimationDemo</span>&gt; <span class=\"title\">with</span> <span class=\"title\">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class=\"line\">  AnimationController _controller;</span><br><span class=\"line\">  Animation&lt;<span class=\"built_in\">double</span>&gt; _height;</span><br><span class=\"line\">  Animation&lt;Color&gt; _color;</span><br><span class=\"line\">  Animation&lt;<span class=\"built_in\">double</span>&gt; _borderRadius;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">    _controller = AnimationController(duration: <span class=\"built_in\">Duration</span>(milliseconds: <span class=\"number\">5000</span>), vsync: <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    _height = Tween(begin: <span class=\"number\">50.0</span>, end: <span class=\"number\">300.0</span>).animate(</span><br><span class=\"line\">      CurvedAnimation(</span><br><span class=\"line\">        parent: _controller,</span><br><span class=\"line\">        curve: Interval(<span class=\"number\">0</span>, <span class=\"number\">0.15</span>), <span class=\"comment\">// Interval 范围必须是0-1 指定Tween在哪一段时间执行</span></span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    _color = ColorTween(begin: Colors.red, end: Colors.blue).animate(</span><br><span class=\"line\">      CurvedAnimation(</span><br><span class=\"line\">        parent: _controller,</span><br><span class=\"line\">        curve: Interval(<span class=\"number\">0.1</span>, <span class=\"number\">0.2</span>),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    _borderRadius = Tween(begin: <span class=\"number\">10.0</span>, end: <span class=\"number\">150.0</span>).animate(</span><br><span class=\"line\">      CurvedAnimation(</span><br><span class=\"line\">        parent: _controller,</span><br><span class=\"line\">        curve: Interval(<span class=\"number\">0.1</span>, <span class=\"number\">0.25</span>),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    _controller.forward();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> dispose() &#123;</span><br><span class=\"line\">    _controller.dispose();</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.dispose();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BasiceAppLayout(</span><br><span class=\"line\">      title: <span class=\"string\">&#x27;交织动画&#x27;</span>,</span><br><span class=\"line\">      body: Center(</span><br><span class=\"line\">        child: AnimatedBuilder(</span><br><span class=\"line\">          animation: _controller,</span><br><span class=\"line\">          builder: (context, child) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Container(</span><br><span class=\"line\">              height: _height.value,</span><br><span class=\"line\">              width: _height.value,</span><br><span class=\"line\">              decoration: BoxDecoration(</span><br><span class=\"line\">                color: _color.value,</span><br><span class=\"line\">                borderRadius: BorderRadius.circular(_borderRadius.value),</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            );</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hero动画\"><a href=\"#Hero动画\" class=\"headerlink\" title=\"Hero动画\"></a>Hero动画</h2><p>Flutter 叫它主动画，用于不同页面之间切换时候动画，比如有一个商品列表，点击后跳到一个新的页面查看原图，就可以这个动画。使用也很简单，在不同页面使用 Hero 包裹需要动画组件，两个页面的 tag 需要甚至成一直，但是同一个页面需要保持唯一。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hero(</span><br><span class=\"line\">  tag: <span class=\"string\">&quot;avatar&quot;</span>, <span class=\"comment\">//唯一标记，前后两个路由页Hero的tag必须相同</span></span><br><span class=\"line\">  child: ChildWidget(),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<!-- ## 自绘动画 -->"},{"title":"Flutter 常用小部件(一)","comments":1,"date":"2021-01-08T14:23:18.000Z","description":null,"keywords":"flutter,widget","_content":"\nFlutter 中所有的UI界面都是widget构建的。widget用来描述元素配置数据,然后会被渲染成对应UI界面。 当widget的状态修改时, 它会重新渲染UI。\n\n<!--more-->\n\n## widget \nFlutter 官网对 widget 描述\n> Flutter从React中吸取灵感，通过现代化框架创建出精美的组件。它的核心思想是用widget来构建你的UI界面。 Widget描述了在当前的配置和状态下视图所应该呈现的样子。当widget的状态改变时，它会重新构建其描述（展示的 UI），框架则会对比前后变化的不同，以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。\n\n一个新的组件通常是继承 StatelessWidget 或 StatefulWidget\n- StatelessWidget 是状态不可变的 widget， 其中的展示内容不会随着数据的变化而变化（非响应式）。\n- StatefulWidget 可以进行状态管理， 数据更新， 页面中的内容可以随之变化（响应式）。\n\n使用 StatefulWidget 时候， 对状态进行更改时候， 会触发 build 方法对组件进行重绘， 也会连同子组件的一起触发。当一个组件数据中途不需要更改的时候，尽可能的使用 StatelessWidget， 对性能有较好提升。或者将需要更新部分尽可能拆分成子节点。\n## 基础 widget\n### Text\nText使用还是比较常用的，用于显示简单样式文本。\n``` dart\n Text(\n    '要显示文本', \n    //style 设置文本样式\n    style: TextStyle(\n        color: Colors.blue,\n        fontSize: 18.0,\n        height: 1.2,  \n    ),\n    //textAlign 设置对齐方式\n    //maxLines 最大行数\n    //overflow 超出显示方式\n    //softWrap 设置换行\n )\n```\n使用自定义字体\n```yaml\n# 定义好自定义字体文件 pubspec.yaml\nflutter:\n - family: Mango\n    fonts:\n      - asset: asset/fonts/Mango-Regular-2.otf\n```\n``` dart\n// 使用字体\nText(\n    '自定义字体 hello Flutter',\n    style: TextStyle(fontFamily: 'Mango', color: Colors.white),\n    textAlign: TextAlign.center,\n)\n```\n有时我们还会需要一段文本中，可能需要不同的字体样式。这个时候可以使用 Text.rich 或者 RichText\n```dart\nText.rich(\n    TextSpan(\n        style: TextStyle(fontSize: 18, color: Colors.white),\n        children: <TextSpan>[\n            TextSpan(text: ' 天上'),\n            TextSpan(text: ' 白玉京',style: TextStyle(fontWeight: FontWeight.bold,color: Colors.red,fontSize: 20,)),\n            TextSpan(text: ' ，'),\n            TextSpan(text: ' 十二楼五城。'),\n            TextSpan(text: '仙人 ', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.red, fontSize: 20)),\n            TextSpan(text: '抚我顶，结发受长生。'),\n        ],\n    )\n)\n// 或者 两个效果是一样的 都是需要一个 InlineSpan 类型, maxLines,overflow等这些可以在外层设置, 单独样式在TextSpan的style设置\nRichText(\n    text: TextSpan(\n        style: TextStyle(fontSize: 18, color: Colors.white),\n        children: <TextSpan>[\n            TextSpan(text: ' 天上'),\n            TextSpan(text: ' 白玉京',style: TextStyle(fontWeight: FontWeight.bold,color: Colors.red,fontSize: 20,)),\n            TextSpan(text: ' ，'),\n            TextSpan(text: ' 十二楼五城。'),\n            TextSpan(text: '仙人 ', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.red, fontSize: 20)),\n            TextSpan(text: '抚我顶，结发受长生。'),\n        ],\n    ),\n)\n```\n### Button\nFlutter 内置了很多按钮，Material 中大致分为 RawMaterialButton 和 IconButton 两类\n``` dart\n// RawMaterialButton 常见的有 RaisedButton / FlatButton / OutlineButton /FlatButton\nRawMaterialButton({\n    Key key,\n    @required this.onPressed,\n    this.onHighlightChanged,            // 高亮变化的回调\n    this.textStyle,                     // 文字属性\n    this.fillColor,                     // 填充颜色\n    this.highlightColor,                // 背景高亮颜色\n    this.splashColor,                   // 水波纹颜色\n    this.elevation = 2.0,               // 阴影\n    this.highlightElevation = 8.0,      // 高亮时阴影\n    this.disabledElevation = 0.0,       // 不可点击时阴影\n    this.padding = EdgeInsets.zero,     // 内容周围边距\n    this.constraints = const BoxConstraints(minWidth: 88.0, minHeight: 36.0),   // 默认按钮尺寸\n    this.shape = const RoundedRectangleBorder(),    // 形状样式\n    this.animationDuration = kThemeChangeDuration,  // 动画效果持续时长\n    this.clipBehavior = Clip.none,                  // 抗锯齿剪切效果\n    MaterialTapTargetSize materialTapTargetSize,    // 点击目标的最小尺寸\n    this.child,\n})\n\n//IconButton类型的按钮\n// IconButton 常见的有 BackButton(返回上一个页面)/CloseButton(关闭当前页面)\nIconButton({\n    Key key,\n    this.iconSize = 24.0,   // 图标大小\n    this.padding = const EdgeInsets.all(8.0),   // 图标周围间距\n    this.alignment = Alignment.center,          // 图标位置\n    @required this.icon,    // 图标资源\n    this.color,             // 图标颜色\n    this.highlightColor,    // 点击高亮颜色\n    this.splashColor,       // 水波纹颜色\n    this.disabledColor,     // 不可点击时高亮颜色\n    @required this.onPressed,\n    this.tooltip            // 长按提示\n})\n\n// 其他按钮\n//FloatingActionButton 悬浮\n//TextButton 文本按钮\n//CupertinoButton iOS风格按钮\n```\n\n### Image\nImage 日常开发中的使用频率也非常高，Image 可以加载本地，网络，缓存的图片。\n```dart\n// 本地加载图片 需要在 pubspec.yaml 添加图片资源\nImage(\n    image: AssetImage('asset/images/demo.png'), //本地图片\n    // 在线图片\n    // image: NetworkImage('https://dev-file.iviewui.com/ttkIjNPlVDuv4lUTvRX8GIlM2QqSe0jg/middle'),\n    height: 100.0,\n    width: 100.0,\n    fit: BoxFit.fill, // 填充方式和Web上差不多\n)\n// Image 也提供了 Image.asset 和 Image.network 构造函数的快捷方式\n```\n### Icon\n使用内置图标，Flutter 内置提供了一套 material-icon 图标\n```dart \n//需要一个IconData类型图标数据\nIcon(\n    Icons.thirteen_mp, //material-icon 都定义在 Icons 类中\n    size: 30,\n    color: Colors.black,\n)\n```\n使用自定义图标\n- 下载好图标文件\n- 加入在项目中\n- 在pubspec.yaml中引入字体文件ttf(不同版本的flutter可能有差异)\n``` yaml\n#pubspec.yaml\nflutter:\n fonts:\n  - family: IconFont\n    fonts:\n      - asset: asset/fonts/iconfont.ttf\n```\n- 编写自定义 IconData 类型\n``` dart\n//IconFont:是引入时候设置字体名称,0xe611 为对应图标的Unicode\nIconData li = IconData(0xe611, fontFamily: 'IconFont') // 设置自定义IconData\nIcon(\n    li,\n    size: 30,\n    color: Colors.black,\n)\n```\n\n### AppBar\nAppBar 是一个顶端导航栏 \n```dart\n AppBar({\n    this.leading, //左侧按钮 可以自定义,在其他页时候 回显示返回按钮\n    this.automaticallyImplyLeading = true,//leading为null，是否自动实现默认的leading按钮\n    this.title, // 标题,是一个Widget\n    this.actions, //  一个Widget列表,显示在右侧,\n    this.flexibleSpace,//显示在 AppBar 下方的控件，高度和 AppBar 高度一样 可是定制些特殊效果\n    this.bottom,// 一个PreferredSizeWidget,可以用来放TabBar\n    this.elevation,//控件的 z 坐标顺序 为0可以隐藏阴影\n    this.shadowColor,// 阴影颜色\n    this.shape,\n    this.backgroundColor, // 背景色\n    this.brightness, //设置状态栏颜色 light:文字是黑色 dark:文字是白色\n    this.iconTheme,//\n    this.actionsIconTheme,\n    this.textTheme, //文字样式\n    this.primary = true, //为false时候会在屏幕顶部,不保留状态栏\n    this.centerTitle, //标题是否居中显示\n    this.excludeHeaderSemantics = false,\n    this.titleSpacing = NavigationToolbar.kMiddleSpacing, //水平标题间距\n    this.toolbarOpacity = 1.0,//透明度\n    this.bottomOpacity = 1.0,//透明度\n    this.toolbarHeight, //高度\n    this.leadingWidth,// 左侧按钮宽度\n})\n\n//示例\nAppBar(\n    automaticallyImplyLeading: false,\n    title: Text(\"去掉阴影和左侧默认按钮\"),\n    elevation: 0.0,\n    actions: [\n        IconButton(\n            icon: Icon(Icons.search, color: Colors.white),\n            onPressed: null,\n        ),\n    ],\n)\n\n// 示例AppBar+TabBar\nDefaultTabController(\n    length: 2,\n    child: Scaffold(\n        appBar: AppBar(\n                automaticallyImplyLeading: false,\n                title: Text(\"AppBar+TabBar\"),\n                centerTitle: true,\n                elevation: 0.0,\n                bottom: TabBar(\n                    unselectedLabelColor: Colors.white60,\n                    indicatorColor: Colors.white,\n                    indicatorSize: TabBarIndicatorSize.label,\n                    indicatorWeight: 2.0,\n                    tabs: <Widget>[\n                        Tab(text: 'tab1'),\n                        Tab(text: 'tab2'),\n                    ],\n                ),\n            ),\n        body: TabBarView(\n            children: [\n                Container(\n                    color: Colors.black12,\n                    child: Center(child: Text('tab1')),\n                ),\n                Container(\n                    color: Colors.yellow[50],\n                    child: Center(child: Text('tab2')),\n                ),\n            ],\n        ),\n    ),\n)\n```\n<!-- ### Tabs -->\n\n## 布局类 widget\n常用布局 widget 有 Row、Column、Flex、Warp、Flow、Stack、Positioned 等。\n\n### 弹性布局\nFlutter 使用的 Flex 模型基本上跟 CSS 类似。\n\n``` dart\n//Row\nRow(\n    // 主轴对齐方式(水平方向)\n    mainAxisAlignment: MainAxisAlignment.spaceBetween,\n    //CrossAxisAlignment 负轴(垂直方向)\n    children: [\n        Text(\" Row1 \"),\n        Text(\" Row2 \"),\n        // 占用剩余空间\n        Expanded(\n            flex: 1, // 设置占比\n            child: Text(\" Row3 \"),\n        ),\n        Expanded(\n            flex: 2,\n            child: Text(\" Row4 \"),\n        ),\n    ],\n)\n\n//Column\nColumn(\n    // 主轴对齐方式(垂直方向)\n    mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n     //CrossAxisAlignment 负轴(水平方向)\n    children: List.generate(3, (e) {\n        return Container(\n            margin: EdgeInsets.symmetric(vertical: 8),\n            height: 50,\n            color: Colors.black12,\n            child: Center(\n                child: Text('Column'),\n            ),\n        );\n    }).toList(),\n)\n\n//Flex 与 Column,Row 使用方式类似\n Flex(\n    //设置方向 水平和垂直\n    direction: Axis.vertical,\n    mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n    children: List.generate(3, (e) {\n        return Container(\n            margin: EdgeInsets.symmetric(vertical: 8),\n            height: 50,\n            color: Colors.black12,\n            child: Center(\n            child: Text('vertical'),\n            ),\n        );\n    }).toList(),\n)\n```\n\n### 流式布局\n在介绍 Row 和 Colum 时，如果子 widget 超出屏幕范围， 则会报溢出错误， 并不会自动换行。Flutter 中提供了 Wrap 和 Flow 来支持溢出部分后会自动折行。\n``` dart \n// Wrap 的示例\nWrap(\n    spacing: 8.0, // 主轴(水平)方向间距\n    runSpacing: 4.0, // 纵轴（垂直）方向间距\n    alignment: WrapAlignment.center, //沿主轴方向居中\n    //runAlignment 纵轴方向的对齐方式\n    children: List.generate(12, (e) {\n        return Container(\n            decoration: BoxDecoration(\n                color: Color(0xff38acfa),\n                borderRadius: BorderRadius.circular(5),\n            ),\n            padding: EdgeInsets.symmetric(horizontal: 10, vertical: 5),\n            child: Text('tag$e', style: TextStyle(color: Colors.white)),\n        );\n    }).toList(),\n)\n```\nFlow 布局需要一个 FlowDelegate 类型的 delegate 对象， 但是 Flutter 没有现成实现的类， 需要我们自己实现。\n``` dart\n//继承FlowDelegate   只需要实现paintChildren 和 shouldRepaint\nclass TestFlowDelegate extends FlowDelegate {\n\n  // 用来绘制子组件\n  @override\n  void paintChildren(FlowPaintingContext context) {\n    //FlowPaintingContext 绘制上下文信息\n    // size 父组件大小\n    // childCount 子组件个数\n    // getChildSize 获取子组件大小\n    // paintChild 绘制子组件\n\n    for (int i = 0; i < context.childCount; i++) {\n      //paintChild 三个参数 一个指定第几个子组件 一个表示位置信息 一个是透明度\n      context.paintChild(i, transform: Matrix4.translationValues(i * 20.0, i * 20.0, 0.0), opacity: 0.6);\n    }\n  }\n    \n  @override\n  bool shouldRepaint(FlowDelegate oldDelegate) {\n    return oldDelegate != this;\n  }\n}\n\nFlow(\n  delegate: TestFlowDelegate(),\n  children: List.generate(9, (index) {\n      return Container(width: 80.0, height: 80.0, color: Colors.red[index * 100]);\n  }).toList(),\n)\n```\n\n### 叠层布局\nStack 结合 Positioned 进行叠层布局，和 css 中的绝对定位类似。Positioned 组件通过 left，top ，right，bottom 四个方向上的属性值来决定其在 Stack 中的位置。\n\n``` dart\nStack(\n    children: <Widget>[\n        Container(\n            child: Text(\"Stack\", style: TextStyle(color: Colors.white),\n            color: Colors.red,\n        ),\n        Positioned(\n            left: 18.0,\n            top: 80,\n            child: Text(\"I am Jack\"),\n        ),\n        Positioned(\n            right: 36.0,\n            bottom: 200,\n            child: Text(\"Your friend\"),\n        )\n    ],\n)\n```\n### 对齐和相对定位\nAlign 组件可以调整子组件位置，同过一个 AlignmentGeometry 类型的值，表示子组件在父组件中的起始位\n```dart\nContainer(\n  height: 120.0,\n  width: 120.0,\n  color: Colors.blue[50],\n  child: Align(\n    alignment: Alignment.topRight, //Alignment 一个AlignmentGeometry的实现类\n    child: Text('topRight'),\n  ),\n)\n```\n```\nAlignment 对应坐标系,\ntopRight对应着(-1,-1),中心坐标center就是(0,0),\n\n  -1,-1        1,-1\n    -------------\n    |           |\n    |           |\n    |    0,0    |\n    |           |\n    |           |\n    -------------\n  -1,1          1,1\n\n自定义时候对应公式  x,y 就是上面对应坐标值,  childWidth childHeight 容器宽高\n(Alignment.x*childWidth/2+childWidth/2, Alignment.y*childHeight/2+childHeight/2)\n\nAlignment(2,0.0) =>  180,60\n```\n\n## 容器类型\n### Container\nContainer 是一个组合类容器的组装的多功能容器。了解一个 Container 其他也就很清楚了\n```dart\nContainer({\n    Key key,\n    this.alignment, //对齐方式  =>对应 Align\n\n\n    this.padding, // 内间距，是个 EdgeInsetsGeometry 抽象类  =>对应  Padding \n    // FLutter 提供了是个 EdgeInsetsGeometry 实现类 EdgeInsets，提供了下面四个方法\n    // fromLTRB(double left， double top，double right， double bottom)：分别指定四个方向的填充。\n    // all(double value) : 所有方向均使用相同数值的填充。\n    // only({left， top， right ，bottom })：可以设置具体某个方向的填充(可以同时指定多个方向)。\n    // symmetric({ vertical， horizontal })：用于设置对称方向的填充，vertical 指 top 和 bottom，horizontal 指 left 和 right。\n\n    this.color, //背景色\n    this.decoration,  // 背景装饰，设置了decoration，外面的color属性将不可用，需要在decoration内设置   =>对应  DecoratedBox\n    this.foregroundDecoration,// 前景装饰\n    // DecoratedBox 提供的样式属性\n    // color, //背景颜色\n    // image,//背景图片\n    // border, //边框\n    // borderRadius, //圆角\n    // boxShadow, //阴影,可以指定多个\n    // gradient, //渐变\n    // backgroundBlendMode, //背景混合模式\n    // shape //形状\n    \n\n    double width, // 宽度\n    double height,// 高度\n    BoxConstraints constraints, //设置限制 =>对应  ConstrainedBox，与其相反的是 UnconstrainedBox(取消限制)\n    // ConstrainedBox 提供属性 都是double类型\n    // minWidth //最小宽度\n    // maxWidth //最大宽度\n    // minHeight//最小高度\n    // maxHeight//最大高度\n\n    this.margin, // 外间距 和padding 使用方式一样\n    this.transform, //变形 需要一个Matrix4类,具体可以看Matrix4源码,提供了很多不同变形构造方法 =>对应 Transform \n    this.child,\n    this.clipBehavior = Clip.none,\n})\n```\n### 其他容器类\n - SizedBox 固定宽高\n - AspectRatio 宽高比\n - UnconstrainedBox 取消限制","source":"_posts/flutter_basic_widget.md","raw":"---\ntitle: Flutter 常用小部件(一)\ncomments: true\ndate: 2021-01-08 22:23:18\ntags: [Flutter]\ndescription:\ncategories: 记录类\nkeywords: flutter,widget\n---\n\nFlutter 中所有的UI界面都是widget构建的。widget用来描述元素配置数据,然后会被渲染成对应UI界面。 当widget的状态修改时, 它会重新渲染UI。\n\n<!--more-->\n\n## widget \nFlutter 官网对 widget 描述\n> Flutter从React中吸取灵感，通过现代化框架创建出精美的组件。它的核心思想是用widget来构建你的UI界面。 Widget描述了在当前的配置和状态下视图所应该呈现的样子。当widget的状态改变时，它会重新构建其描述（展示的 UI），框架则会对比前后变化的不同，以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。\n\n一个新的组件通常是继承 StatelessWidget 或 StatefulWidget\n- StatelessWidget 是状态不可变的 widget， 其中的展示内容不会随着数据的变化而变化（非响应式）。\n- StatefulWidget 可以进行状态管理， 数据更新， 页面中的内容可以随之变化（响应式）。\n\n使用 StatefulWidget 时候， 对状态进行更改时候， 会触发 build 方法对组件进行重绘， 也会连同子组件的一起触发。当一个组件数据中途不需要更改的时候，尽可能的使用 StatelessWidget， 对性能有较好提升。或者将需要更新部分尽可能拆分成子节点。\n## 基础 widget\n### Text\nText使用还是比较常用的，用于显示简单样式文本。\n``` dart\n Text(\n    '要显示文本', \n    //style 设置文本样式\n    style: TextStyle(\n        color: Colors.blue,\n        fontSize: 18.0,\n        height: 1.2,  \n    ),\n    //textAlign 设置对齐方式\n    //maxLines 最大行数\n    //overflow 超出显示方式\n    //softWrap 设置换行\n )\n```\n使用自定义字体\n```yaml\n# 定义好自定义字体文件 pubspec.yaml\nflutter:\n - family: Mango\n    fonts:\n      - asset: asset/fonts/Mango-Regular-2.otf\n```\n``` dart\n// 使用字体\nText(\n    '自定义字体 hello Flutter',\n    style: TextStyle(fontFamily: 'Mango', color: Colors.white),\n    textAlign: TextAlign.center,\n)\n```\n有时我们还会需要一段文本中，可能需要不同的字体样式。这个时候可以使用 Text.rich 或者 RichText\n```dart\nText.rich(\n    TextSpan(\n        style: TextStyle(fontSize: 18, color: Colors.white),\n        children: <TextSpan>[\n            TextSpan(text: ' 天上'),\n            TextSpan(text: ' 白玉京',style: TextStyle(fontWeight: FontWeight.bold,color: Colors.red,fontSize: 20,)),\n            TextSpan(text: ' ，'),\n            TextSpan(text: ' 十二楼五城。'),\n            TextSpan(text: '仙人 ', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.red, fontSize: 20)),\n            TextSpan(text: '抚我顶，结发受长生。'),\n        ],\n    )\n)\n// 或者 两个效果是一样的 都是需要一个 InlineSpan 类型, maxLines,overflow等这些可以在外层设置, 单独样式在TextSpan的style设置\nRichText(\n    text: TextSpan(\n        style: TextStyle(fontSize: 18, color: Colors.white),\n        children: <TextSpan>[\n            TextSpan(text: ' 天上'),\n            TextSpan(text: ' 白玉京',style: TextStyle(fontWeight: FontWeight.bold,color: Colors.red,fontSize: 20,)),\n            TextSpan(text: ' ，'),\n            TextSpan(text: ' 十二楼五城。'),\n            TextSpan(text: '仙人 ', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.red, fontSize: 20)),\n            TextSpan(text: '抚我顶，结发受长生。'),\n        ],\n    ),\n)\n```\n### Button\nFlutter 内置了很多按钮，Material 中大致分为 RawMaterialButton 和 IconButton 两类\n``` dart\n// RawMaterialButton 常见的有 RaisedButton / FlatButton / OutlineButton /FlatButton\nRawMaterialButton({\n    Key key,\n    @required this.onPressed,\n    this.onHighlightChanged,            // 高亮变化的回调\n    this.textStyle,                     // 文字属性\n    this.fillColor,                     // 填充颜色\n    this.highlightColor,                // 背景高亮颜色\n    this.splashColor,                   // 水波纹颜色\n    this.elevation = 2.0,               // 阴影\n    this.highlightElevation = 8.0,      // 高亮时阴影\n    this.disabledElevation = 0.0,       // 不可点击时阴影\n    this.padding = EdgeInsets.zero,     // 内容周围边距\n    this.constraints = const BoxConstraints(minWidth: 88.0, minHeight: 36.0),   // 默认按钮尺寸\n    this.shape = const RoundedRectangleBorder(),    // 形状样式\n    this.animationDuration = kThemeChangeDuration,  // 动画效果持续时长\n    this.clipBehavior = Clip.none,                  // 抗锯齿剪切效果\n    MaterialTapTargetSize materialTapTargetSize,    // 点击目标的最小尺寸\n    this.child,\n})\n\n//IconButton类型的按钮\n// IconButton 常见的有 BackButton(返回上一个页面)/CloseButton(关闭当前页面)\nIconButton({\n    Key key,\n    this.iconSize = 24.0,   // 图标大小\n    this.padding = const EdgeInsets.all(8.0),   // 图标周围间距\n    this.alignment = Alignment.center,          // 图标位置\n    @required this.icon,    // 图标资源\n    this.color,             // 图标颜色\n    this.highlightColor,    // 点击高亮颜色\n    this.splashColor,       // 水波纹颜色\n    this.disabledColor,     // 不可点击时高亮颜色\n    @required this.onPressed,\n    this.tooltip            // 长按提示\n})\n\n// 其他按钮\n//FloatingActionButton 悬浮\n//TextButton 文本按钮\n//CupertinoButton iOS风格按钮\n```\n\n### Image\nImage 日常开发中的使用频率也非常高，Image 可以加载本地，网络，缓存的图片。\n```dart\n// 本地加载图片 需要在 pubspec.yaml 添加图片资源\nImage(\n    image: AssetImage('asset/images/demo.png'), //本地图片\n    // 在线图片\n    // image: NetworkImage('https://dev-file.iviewui.com/ttkIjNPlVDuv4lUTvRX8GIlM2QqSe0jg/middle'),\n    height: 100.0,\n    width: 100.0,\n    fit: BoxFit.fill, // 填充方式和Web上差不多\n)\n// Image 也提供了 Image.asset 和 Image.network 构造函数的快捷方式\n```\n### Icon\n使用内置图标，Flutter 内置提供了一套 material-icon 图标\n```dart \n//需要一个IconData类型图标数据\nIcon(\n    Icons.thirteen_mp, //material-icon 都定义在 Icons 类中\n    size: 30,\n    color: Colors.black,\n)\n```\n使用自定义图标\n- 下载好图标文件\n- 加入在项目中\n- 在pubspec.yaml中引入字体文件ttf(不同版本的flutter可能有差异)\n``` yaml\n#pubspec.yaml\nflutter:\n fonts:\n  - family: IconFont\n    fonts:\n      - asset: asset/fonts/iconfont.ttf\n```\n- 编写自定义 IconData 类型\n``` dart\n//IconFont:是引入时候设置字体名称,0xe611 为对应图标的Unicode\nIconData li = IconData(0xe611, fontFamily: 'IconFont') // 设置自定义IconData\nIcon(\n    li,\n    size: 30,\n    color: Colors.black,\n)\n```\n\n### AppBar\nAppBar 是一个顶端导航栏 \n```dart\n AppBar({\n    this.leading, //左侧按钮 可以自定义,在其他页时候 回显示返回按钮\n    this.automaticallyImplyLeading = true,//leading为null，是否自动实现默认的leading按钮\n    this.title, // 标题,是一个Widget\n    this.actions, //  一个Widget列表,显示在右侧,\n    this.flexibleSpace,//显示在 AppBar 下方的控件，高度和 AppBar 高度一样 可是定制些特殊效果\n    this.bottom,// 一个PreferredSizeWidget,可以用来放TabBar\n    this.elevation,//控件的 z 坐标顺序 为0可以隐藏阴影\n    this.shadowColor,// 阴影颜色\n    this.shape,\n    this.backgroundColor, // 背景色\n    this.brightness, //设置状态栏颜色 light:文字是黑色 dark:文字是白色\n    this.iconTheme,//\n    this.actionsIconTheme,\n    this.textTheme, //文字样式\n    this.primary = true, //为false时候会在屏幕顶部,不保留状态栏\n    this.centerTitle, //标题是否居中显示\n    this.excludeHeaderSemantics = false,\n    this.titleSpacing = NavigationToolbar.kMiddleSpacing, //水平标题间距\n    this.toolbarOpacity = 1.0,//透明度\n    this.bottomOpacity = 1.0,//透明度\n    this.toolbarHeight, //高度\n    this.leadingWidth,// 左侧按钮宽度\n})\n\n//示例\nAppBar(\n    automaticallyImplyLeading: false,\n    title: Text(\"去掉阴影和左侧默认按钮\"),\n    elevation: 0.0,\n    actions: [\n        IconButton(\n            icon: Icon(Icons.search, color: Colors.white),\n            onPressed: null,\n        ),\n    ],\n)\n\n// 示例AppBar+TabBar\nDefaultTabController(\n    length: 2,\n    child: Scaffold(\n        appBar: AppBar(\n                automaticallyImplyLeading: false,\n                title: Text(\"AppBar+TabBar\"),\n                centerTitle: true,\n                elevation: 0.0,\n                bottom: TabBar(\n                    unselectedLabelColor: Colors.white60,\n                    indicatorColor: Colors.white,\n                    indicatorSize: TabBarIndicatorSize.label,\n                    indicatorWeight: 2.0,\n                    tabs: <Widget>[\n                        Tab(text: 'tab1'),\n                        Tab(text: 'tab2'),\n                    ],\n                ),\n            ),\n        body: TabBarView(\n            children: [\n                Container(\n                    color: Colors.black12,\n                    child: Center(child: Text('tab1')),\n                ),\n                Container(\n                    color: Colors.yellow[50],\n                    child: Center(child: Text('tab2')),\n                ),\n            ],\n        ),\n    ),\n)\n```\n<!-- ### Tabs -->\n\n## 布局类 widget\n常用布局 widget 有 Row、Column、Flex、Warp、Flow、Stack、Positioned 等。\n\n### 弹性布局\nFlutter 使用的 Flex 模型基本上跟 CSS 类似。\n\n``` dart\n//Row\nRow(\n    // 主轴对齐方式(水平方向)\n    mainAxisAlignment: MainAxisAlignment.spaceBetween,\n    //CrossAxisAlignment 负轴(垂直方向)\n    children: [\n        Text(\" Row1 \"),\n        Text(\" Row2 \"),\n        // 占用剩余空间\n        Expanded(\n            flex: 1, // 设置占比\n            child: Text(\" Row3 \"),\n        ),\n        Expanded(\n            flex: 2,\n            child: Text(\" Row4 \"),\n        ),\n    ],\n)\n\n//Column\nColumn(\n    // 主轴对齐方式(垂直方向)\n    mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n     //CrossAxisAlignment 负轴(水平方向)\n    children: List.generate(3, (e) {\n        return Container(\n            margin: EdgeInsets.symmetric(vertical: 8),\n            height: 50,\n            color: Colors.black12,\n            child: Center(\n                child: Text('Column'),\n            ),\n        );\n    }).toList(),\n)\n\n//Flex 与 Column,Row 使用方式类似\n Flex(\n    //设置方向 水平和垂直\n    direction: Axis.vertical,\n    mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n    children: List.generate(3, (e) {\n        return Container(\n            margin: EdgeInsets.symmetric(vertical: 8),\n            height: 50,\n            color: Colors.black12,\n            child: Center(\n            child: Text('vertical'),\n            ),\n        );\n    }).toList(),\n)\n```\n\n### 流式布局\n在介绍 Row 和 Colum 时，如果子 widget 超出屏幕范围， 则会报溢出错误， 并不会自动换行。Flutter 中提供了 Wrap 和 Flow 来支持溢出部分后会自动折行。\n``` dart \n// Wrap 的示例\nWrap(\n    spacing: 8.0, // 主轴(水平)方向间距\n    runSpacing: 4.0, // 纵轴（垂直）方向间距\n    alignment: WrapAlignment.center, //沿主轴方向居中\n    //runAlignment 纵轴方向的对齐方式\n    children: List.generate(12, (e) {\n        return Container(\n            decoration: BoxDecoration(\n                color: Color(0xff38acfa),\n                borderRadius: BorderRadius.circular(5),\n            ),\n            padding: EdgeInsets.symmetric(horizontal: 10, vertical: 5),\n            child: Text('tag$e', style: TextStyle(color: Colors.white)),\n        );\n    }).toList(),\n)\n```\nFlow 布局需要一个 FlowDelegate 类型的 delegate 对象， 但是 Flutter 没有现成实现的类， 需要我们自己实现。\n``` dart\n//继承FlowDelegate   只需要实现paintChildren 和 shouldRepaint\nclass TestFlowDelegate extends FlowDelegate {\n\n  // 用来绘制子组件\n  @override\n  void paintChildren(FlowPaintingContext context) {\n    //FlowPaintingContext 绘制上下文信息\n    // size 父组件大小\n    // childCount 子组件个数\n    // getChildSize 获取子组件大小\n    // paintChild 绘制子组件\n\n    for (int i = 0; i < context.childCount; i++) {\n      //paintChild 三个参数 一个指定第几个子组件 一个表示位置信息 一个是透明度\n      context.paintChild(i, transform: Matrix4.translationValues(i * 20.0, i * 20.0, 0.0), opacity: 0.6);\n    }\n  }\n    \n  @override\n  bool shouldRepaint(FlowDelegate oldDelegate) {\n    return oldDelegate != this;\n  }\n}\n\nFlow(\n  delegate: TestFlowDelegate(),\n  children: List.generate(9, (index) {\n      return Container(width: 80.0, height: 80.0, color: Colors.red[index * 100]);\n  }).toList(),\n)\n```\n\n### 叠层布局\nStack 结合 Positioned 进行叠层布局，和 css 中的绝对定位类似。Positioned 组件通过 left，top ，right，bottom 四个方向上的属性值来决定其在 Stack 中的位置。\n\n``` dart\nStack(\n    children: <Widget>[\n        Container(\n            child: Text(\"Stack\", style: TextStyle(color: Colors.white),\n            color: Colors.red,\n        ),\n        Positioned(\n            left: 18.0,\n            top: 80,\n            child: Text(\"I am Jack\"),\n        ),\n        Positioned(\n            right: 36.0,\n            bottom: 200,\n            child: Text(\"Your friend\"),\n        )\n    ],\n)\n```\n### 对齐和相对定位\nAlign 组件可以调整子组件位置，同过一个 AlignmentGeometry 类型的值，表示子组件在父组件中的起始位\n```dart\nContainer(\n  height: 120.0,\n  width: 120.0,\n  color: Colors.blue[50],\n  child: Align(\n    alignment: Alignment.topRight, //Alignment 一个AlignmentGeometry的实现类\n    child: Text('topRight'),\n  ),\n)\n```\n```\nAlignment 对应坐标系,\ntopRight对应着(-1,-1),中心坐标center就是(0,0),\n\n  -1,-1        1,-1\n    -------------\n    |           |\n    |           |\n    |    0,0    |\n    |           |\n    |           |\n    -------------\n  -1,1          1,1\n\n自定义时候对应公式  x,y 就是上面对应坐标值,  childWidth childHeight 容器宽高\n(Alignment.x*childWidth/2+childWidth/2, Alignment.y*childHeight/2+childHeight/2)\n\nAlignment(2,0.0) =>  180,60\n```\n\n## 容器类型\n### Container\nContainer 是一个组合类容器的组装的多功能容器。了解一个 Container 其他也就很清楚了\n```dart\nContainer({\n    Key key,\n    this.alignment, //对齐方式  =>对应 Align\n\n\n    this.padding, // 内间距，是个 EdgeInsetsGeometry 抽象类  =>对应  Padding \n    // FLutter 提供了是个 EdgeInsetsGeometry 实现类 EdgeInsets，提供了下面四个方法\n    // fromLTRB(double left， double top，double right， double bottom)：分别指定四个方向的填充。\n    // all(double value) : 所有方向均使用相同数值的填充。\n    // only({left， top， right ，bottom })：可以设置具体某个方向的填充(可以同时指定多个方向)。\n    // symmetric({ vertical， horizontal })：用于设置对称方向的填充，vertical 指 top 和 bottom，horizontal 指 left 和 right。\n\n    this.color, //背景色\n    this.decoration,  // 背景装饰，设置了decoration，外面的color属性将不可用，需要在decoration内设置   =>对应  DecoratedBox\n    this.foregroundDecoration,// 前景装饰\n    // DecoratedBox 提供的样式属性\n    // color, //背景颜色\n    // image,//背景图片\n    // border, //边框\n    // borderRadius, //圆角\n    // boxShadow, //阴影,可以指定多个\n    // gradient, //渐变\n    // backgroundBlendMode, //背景混合模式\n    // shape //形状\n    \n\n    double width, // 宽度\n    double height,// 高度\n    BoxConstraints constraints, //设置限制 =>对应  ConstrainedBox，与其相反的是 UnconstrainedBox(取消限制)\n    // ConstrainedBox 提供属性 都是double类型\n    // minWidth //最小宽度\n    // maxWidth //最大宽度\n    // minHeight//最小高度\n    // maxHeight//最大高度\n\n    this.margin, // 外间距 和padding 使用方式一样\n    this.transform, //变形 需要一个Matrix4类,具体可以看Matrix4源码,提供了很多不同变形构造方法 =>对应 Transform \n    this.child,\n    this.clipBehavior = Clip.none,\n})\n```\n### 其他容器类\n - SizedBox 固定宽高\n - AspectRatio 宽高比\n - UnconstrainedBox 取消限制","slug":"flutter_basic_widget","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vr6000y98lgahhmcbvl","content":"<p>Flutter 中所有的UI界面都是widget构建的。widget用来描述元素配置数据,然后会被渲染成对应UI界面。 当widget的状态修改时, 它会重新渲染UI。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"widget\"><a href=\"#widget\" class=\"headerlink\" title=\"widget\"></a>widget</h2><p>Flutter 官网对 widget 描述</p>\n<blockquote>\n<p>Flutter从React中吸取灵感，通过现代化框架创建出精美的组件。它的核心思想是用widget来构建你的UI界面。 Widget描述了在当前的配置和状态下视图所应该呈现的样子。当widget的状态改变时，它会重新构建其描述（展示的 UI），框架则会对比前后变化的不同，以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。</p>\n</blockquote>\n<p>一个新的组件通常是继承 StatelessWidget 或 StatefulWidget</p>\n<ul>\n<li>StatelessWidget 是状态不可变的 widget， 其中的展示内容不会随着数据的变化而变化（非响应式）。</li>\n<li>StatefulWidget 可以进行状态管理， 数据更新， 页面中的内容可以随之变化（响应式）。</li>\n</ul>\n<p>使用 StatefulWidget 时候， 对状态进行更改时候， 会触发 build 方法对组件进行重绘， 也会连同子组件的一起触发。当一个组件数据中途不需要更改的时候，尽可能的使用 StatelessWidget， 对性能有较好提升。或者将需要更新部分尽可能拆分成子节点。</p>\n<h2 id=\"基础-widget\"><a href=\"#基础-widget\" class=\"headerlink\" title=\"基础 widget\"></a>基础 widget</h2><h3 id=\"Text\"><a href=\"#Text\" class=\"headerlink\" title=\"Text\"></a>Text</h3><p>Text使用还是比较常用的，用于显示简单样式文本。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Text(</span><br><span class=\"line\">   <span class=\"string\">&#x27;要显示文本&#x27;</span>, </span><br><span class=\"line\">   <span class=\"comment\">//style 设置文本样式</span></span><br><span class=\"line\">   style: TextStyle(</span><br><span class=\"line\">       color: Colors.blue,</span><br><span class=\"line\">       fontSize: <span class=\"number\">18.0</span>,</span><br><span class=\"line\">       height: <span class=\"number\">1.2</span>,  </span><br><span class=\"line\">   ),</span><br><span class=\"line\">   <span class=\"comment\">//textAlign 设置对齐方式</span></span><br><span class=\"line\">   <span class=\"comment\">//maxLines 最大行数</span></span><br><span class=\"line\">   <span class=\"comment\">//overflow 超出显示方式</span></span><br><span class=\"line\">   <span class=\"comment\">//softWrap 设置换行</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>使用自定义字体</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义好自定义字体文件 pubspec.yaml</span></span><br><span class=\"line\"><span class=\"attr\">flutter:</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"attr\">family:</span> <span class=\"string\">Mango</span></span><br><span class=\"line\">    <span class=\"attr\">fonts:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">asset:</span> <span class=\"string\">asset/fonts/Mango-Regular-2.otf</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用字体</span></span><br><span class=\"line\">Text(</span><br><span class=\"line\">    <span class=\"string\">&#x27;自定义字体 hello Flutter&#x27;</span>,</span><br><span class=\"line\">    style: TextStyle(fontFamily: <span class=\"string\">&#x27;Mango&#x27;</span>, color: Colors.white),</span><br><span class=\"line\">    textAlign: TextAlign.center,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>有时我们还会需要一段文本中，可能需要不同的字体样式。这个时候可以使用 Text.rich 或者 RichText</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Text.rich(</span><br><span class=\"line\">    TextSpan(</span><br><span class=\"line\">        style: TextStyle(fontSize: <span class=\"number\">18</span>, color: Colors.white),</span><br><span class=\"line\">        children: &lt;TextSpan&gt;[</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27; 天上&#x27;</span>),</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27; 白玉京&#x27;</span>,style: TextStyle(fontWeight: FontWeight.bold,color: Colors.red,fontSize: <span class=\"number\">20</span>,)),</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27; ，&#x27;</span>),</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27; 十二楼五城。&#x27;</span>),</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27;仙人 &#x27;</span>, style: TextStyle(fontWeight: FontWeight.bold, color: Colors.red, fontSize: <span class=\"number\">20</span>)),</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27;抚我顶，结发受长生。&#x27;</span>),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// 或者 两个效果是一样的 都是需要一个 InlineSpan 类型, maxLines,overflow等这些可以在外层设置, 单独样式在TextSpan的style设置</span></span><br><span class=\"line\">RichText(</span><br><span class=\"line\">    text: TextSpan(</span><br><span class=\"line\">        style: TextStyle(fontSize: <span class=\"number\">18</span>, color: Colors.white),</span><br><span class=\"line\">        children: &lt;TextSpan&gt;[</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27; 天上&#x27;</span>),</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27; 白玉京&#x27;</span>,style: TextStyle(fontWeight: FontWeight.bold,color: Colors.red,fontSize: <span class=\"number\">20</span>,)),</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27; ，&#x27;</span>),</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27; 十二楼五城。&#x27;</span>),</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27;仙人 &#x27;</span>, style: TextStyle(fontWeight: FontWeight.bold, color: Colors.red, fontSize: <span class=\"number\">20</span>)),</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27;抚我顶，结发受长生。&#x27;</span>),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    ),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h3><p>Flutter 内置了很多按钮，Material 中大致分为 RawMaterialButton 和 IconButton 两类</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RawMaterialButton 常见的有 RaisedButton / FlatButton / OutlineButton /FlatButton</span></span><br><span class=\"line\">RawMaterialButton(&#123;</span><br><span class=\"line\">    Key key,</span><br><span class=\"line\">    <span class=\"meta\">@required</span> <span class=\"keyword\">this</span>.onPressed,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onHighlightChanged,            <span class=\"comment\">// 高亮变化的回调</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.textStyle,                     <span class=\"comment\">// 文字属性</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fillColor,                     <span class=\"comment\">// 填充颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.highlightColor,                <span class=\"comment\">// 背景高亮颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.splashColor,                   <span class=\"comment\">// 水波纹颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.elevation = <span class=\"number\">2.0</span>,               <span class=\"comment\">// 阴影</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.highlightElevation = <span class=\"number\">8.0</span>,      <span class=\"comment\">// 高亮时阴影</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.disabledElevation = <span class=\"number\">0.0</span>,       <span class=\"comment\">// 不可点击时阴影</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.padding = EdgeInsets.zero,     <span class=\"comment\">// 内容周围边距</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.constraints = <span class=\"keyword\">const</span> BoxConstraints(minWidth: <span class=\"number\">88.0</span>, minHeight: <span class=\"number\">36.0</span>),   <span class=\"comment\">// 默认按钮尺寸</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.shape = <span class=\"keyword\">const</span> RoundedRectangleBorder(),    <span class=\"comment\">// 形状样式</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.animationDuration = kThemeChangeDuration,  <span class=\"comment\">// 动画效果持续时长</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.clipBehavior = Clip.none,                  <span class=\"comment\">// 抗锯齿剪切效果</span></span><br><span class=\"line\">    MaterialTapTargetSize materialTapTargetSize,    <span class=\"comment\">// 点击目标的最小尺寸</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.child,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//IconButton类型的按钮</span></span><br><span class=\"line\"><span class=\"comment\">// IconButton 常见的有 BackButton(返回上一个页面)/CloseButton(关闭当前页面)</span></span><br><span class=\"line\">IconButton(&#123;</span><br><span class=\"line\">    Key key,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.iconSize = <span class=\"number\">24.0</span>,   <span class=\"comment\">// 图标大小</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.padding = <span class=\"keyword\">const</span> EdgeInsets.all(<span class=\"number\">8.0</span>),   <span class=\"comment\">// 图标周围间距</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.alignment = Alignment.center,          <span class=\"comment\">// 图标位置</span></span><br><span class=\"line\">    <span class=\"meta\">@required</span> <span class=\"keyword\">this</span>.icon,    <span class=\"comment\">// 图标资源</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color,             <span class=\"comment\">// 图标颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.highlightColor,    <span class=\"comment\">// 点击高亮颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.splashColor,       <span class=\"comment\">// 水波纹颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.disabledColor,     <span class=\"comment\">// 不可点击时高亮颜色</span></span><br><span class=\"line\">    <span class=\"meta\">@required</span> <span class=\"keyword\">this</span>.onPressed,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tooltip            <span class=\"comment\">// 长按提示</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其他按钮</span></span><br><span class=\"line\"><span class=\"comment\">//FloatingActionButton 悬浮</span></span><br><span class=\"line\"><span class=\"comment\">//TextButton 文本按钮</span></span><br><span class=\"line\"><span class=\"comment\">//CupertinoButton iOS风格按钮</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Image\"><a href=\"#Image\" class=\"headerlink\" title=\"Image\"></a>Image</h3><p>Image 日常开发中的使用频率也非常高，Image 可以加载本地，网络，缓存的图片。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 本地加载图片 需要在 pubspec.yaml 添加图片资源</span></span><br><span class=\"line\">Image(</span><br><span class=\"line\">    image: AssetImage(<span class=\"string\">&#x27;asset/images/demo.png&#x27;</span>), <span class=\"comment\">//本地图片</span></span><br><span class=\"line\">    <span class=\"comment\">// 在线图片</span></span><br><span class=\"line\">    <span class=\"comment\">// image: NetworkImage(&#x27;https://dev-file.iviewui.com/ttkIjNPlVDuv4lUTvRX8GIlM2QqSe0jg/middle&#x27;),</span></span><br><span class=\"line\">    height: <span class=\"number\">100.0</span>,</span><br><span class=\"line\">    width: <span class=\"number\">100.0</span>,</span><br><span class=\"line\">    fit: BoxFit.fill, <span class=\"comment\">// 填充方式和Web上差不多</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// Image 也提供了 Image.asset 和 Image.network 构造函数的快捷方式</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Icon\"><a href=\"#Icon\" class=\"headerlink\" title=\"Icon\"></a>Icon</h3><p>使用内置图标，Flutter 内置提供了一套 material-icon 图标</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//需要一个IconData类型图标数据</span></span><br><span class=\"line\">Icon(</span><br><span class=\"line\">    Icons.thirteen_mp, <span class=\"comment\">//material-icon 都定义在 Icons 类中</span></span><br><span class=\"line\">    size: <span class=\"number\">30</span>,</span><br><span class=\"line\">    color: Colors.black,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>使用自定义图标</p>\n<ul>\n<li>下载好图标文件</li>\n<li>加入在项目中</li>\n<li>在pubspec.yaml中引入字体文件ttf(不同版本的flutter可能有差异)<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#pubspec.yaml</span></span><br><span class=\"line\"><span class=\"attr\">flutter:</span></span><br><span class=\"line\"> <span class=\"attr\">fonts:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">family:</span> <span class=\"string\">IconFont</span></span><br><span class=\"line\">    <span class=\"attr\">fonts:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">asset:</span> <span class=\"string\">asset/fonts/iconfont.ttf</span></span><br></pre></td></tr></table></figure></li>\n<li>编写自定义 IconData 类型<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//IconFont:是引入时候设置字体名称,0xe611 为对应图标的Unicode</span></span><br><span class=\"line\">IconData li = IconData(<span class=\"number\">0xe611</span>, fontFamily: <span class=\"string\">&#x27;IconFont&#x27;</span>) <span class=\"comment\">// 设置自定义IconData</span></span><br><span class=\"line\">Icon(</span><br><span class=\"line\">    li,</span><br><span class=\"line\">    size: <span class=\"number\">30</span>,</span><br><span class=\"line\">    color: Colors.black,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"AppBar\"><a href=\"#AppBar\" class=\"headerlink\" title=\"AppBar\"></a>AppBar</h3><p>AppBar 是一个顶端导航栏 </p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> AppBar(&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.leading, <span class=\"comment\">//左侧按钮 可以自定义,在其他页时候 回显示返回按钮</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.automaticallyImplyLeading = <span class=\"keyword\">true</span>,<span class=\"comment\">//leading为null，是否自动实现默认的leading按钮</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.title, <span class=\"comment\">// 标题,是一个Widget</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.actions, <span class=\"comment\">//  一个Widget列表,显示在右侧,</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.flexibleSpace,<span class=\"comment\">//显示在 AppBar 下方的控件，高度和 AppBar 高度一样 可是定制些特殊效果</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bottom,<span class=\"comment\">// 一个PreferredSizeWidget,可以用来放TabBar</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.elevation,<span class=\"comment\">//控件的 z 坐标顺序 为0可以隐藏阴影</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.shadowColor,<span class=\"comment\">// 阴影颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.shape,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.backgroundColor, <span class=\"comment\">// 背景色</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.brightness, <span class=\"comment\">//设置状态栏颜色 light:文字是黑色 dark:文字是白色</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.iconTheme,<span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.actionsIconTheme,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.textTheme, <span class=\"comment\">//文字样式</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.primary = <span class=\"keyword\">true</span>, <span class=\"comment\">//为false时候会在屏幕顶部,不保留状态栏</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.centerTitle, <span class=\"comment\">//标题是否居中显示</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.excludeHeaderSemantics = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.titleSpacing = NavigationToolbar.kMiddleSpacing, <span class=\"comment\">//水平标题间距</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.toolbarOpacity = <span class=\"number\">1.0</span>,<span class=\"comment\">//透明度</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bottomOpacity = <span class=\"number\">1.0</span>,<span class=\"comment\">//透明度</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.toolbarHeight, <span class=\"comment\">//高度</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.leadingWidth,<span class=\"comment\">// 左侧按钮宽度</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//示例</span></span><br><span class=\"line\">AppBar(</span><br><span class=\"line\">    automaticallyImplyLeading: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    title: Text(<span class=\"string\">&quot;去掉阴影和左侧默认按钮&quot;</span>),</span><br><span class=\"line\">    elevation: <span class=\"number\">0.0</span>,</span><br><span class=\"line\">    actions: [</span><br><span class=\"line\">        IconButton(</span><br><span class=\"line\">            icon: Icon(Icons.search, color: Colors.white),</span><br><span class=\"line\">            onPressed: <span class=\"keyword\">null</span>,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例AppBar+TabBar</span></span><br><span class=\"line\">DefaultTabController(</span><br><span class=\"line\">    length: <span class=\"number\">2</span>,</span><br><span class=\"line\">    child: Scaffold(</span><br><span class=\"line\">        appBar: AppBar(</span><br><span class=\"line\">                automaticallyImplyLeading: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">                title: Text(<span class=\"string\">&quot;AppBar+TabBar&quot;</span>),</span><br><span class=\"line\">                centerTitle: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">                elevation: <span class=\"number\">0.0</span>,</span><br><span class=\"line\">                bottom: TabBar(</span><br><span class=\"line\">                    unselectedLabelColor: Colors.white60,</span><br><span class=\"line\">                    indicatorColor: Colors.white,</span><br><span class=\"line\">                    indicatorSize: TabBarIndicatorSize.label,</span><br><span class=\"line\">                    indicatorWeight: <span class=\"number\">2.0</span>,</span><br><span class=\"line\">                    tabs: &lt;Widget&gt;[</span><br><span class=\"line\">                        Tab(text: <span class=\"string\">&#x27;tab1&#x27;</span>),</span><br><span class=\"line\">                        Tab(text: <span class=\"string\">&#x27;tab2&#x27;</span>),</span><br><span class=\"line\">                    ],</span><br><span class=\"line\">                ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">        body: TabBarView(</span><br><span class=\"line\">            children: [</span><br><span class=\"line\">                Container(</span><br><span class=\"line\">                    color: Colors.black12,</span><br><span class=\"line\">                    child: Center(child: Text(<span class=\"string\">&#x27;tab1&#x27;</span>)),</span><br><span class=\"line\">                ),</span><br><span class=\"line\">                Container(</span><br><span class=\"line\">                    color: Colors.yellow[<span class=\"number\">50</span>],</span><br><span class=\"line\">                    child: Center(child: Text(<span class=\"string\">&#x27;tab2&#x27;</span>)),</span><br><span class=\"line\">                ),</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<!-- ### Tabs -->\n\n<h2 id=\"布局类-widget\"><a href=\"#布局类-widget\" class=\"headerlink\" title=\"布局类 widget\"></a>布局类 widget</h2><p>常用布局 widget 有 Row、Column、Flex、Warp、Flow、Stack、Positioned 等。</p>\n<h3 id=\"弹性布局\"><a href=\"#弹性布局\" class=\"headerlink\" title=\"弹性布局\"></a>弹性布局</h3><p>Flutter 使用的 Flex 模型基本上跟 CSS 类似。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Row</span></span><br><span class=\"line\">Row(</span><br><span class=\"line\">    <span class=\"comment\">// 主轴对齐方式(水平方向)</span></span><br><span class=\"line\">    mainAxisAlignment: MainAxisAlignment.spaceBetween,</span><br><span class=\"line\">    <span class=\"comment\">//CrossAxisAlignment 负轴(垂直方向)</span></span><br><span class=\"line\">    children: [</span><br><span class=\"line\">        Text(<span class=\"string\">&quot; Row1 &quot;</span>),</span><br><span class=\"line\">        Text(<span class=\"string\">&quot; Row2 &quot;</span>),</span><br><span class=\"line\">        <span class=\"comment\">// 占用剩余空间</span></span><br><span class=\"line\">        Expanded(</span><br><span class=\"line\">            flex: <span class=\"number\">1</span>, <span class=\"comment\">// 设置占比</span></span><br><span class=\"line\">            child: Text(<span class=\"string\">&quot; Row3 &quot;</span>),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        Expanded(</span><br><span class=\"line\">            flex: <span class=\"number\">2</span>,</span><br><span class=\"line\">            child: Text(<span class=\"string\">&quot; Row4 &quot;</span>),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Column</span></span><br><span class=\"line\">Column(</span><br><span class=\"line\">    <span class=\"comment\">// 主轴对齐方式(垂直方向)</span></span><br><span class=\"line\">    mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class=\"line\">     <span class=\"comment\">//CrossAxisAlignment 负轴(水平方向)</span></span><br><span class=\"line\">    children: <span class=\"built_in\">List</span>.generate(<span class=\"number\">3</span>, (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Container(</span><br><span class=\"line\">            margin: EdgeInsets.symmetric(vertical: <span class=\"number\">8</span>),</span><br><span class=\"line\">            height: <span class=\"number\">50</span>,</span><br><span class=\"line\">            color: Colors.black12,</span><br><span class=\"line\">            child: Center(</span><br><span class=\"line\">                child: Text(<span class=\"string\">&#x27;Column&#x27;</span>),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;).toList(),</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Flex 与 Column,Row 使用方式类似</span></span><br><span class=\"line\"> Flex(</span><br><span class=\"line\">    <span class=\"comment\">//设置方向 水平和垂直</span></span><br><span class=\"line\">    direction: Axis.vertical,</span><br><span class=\"line\">    mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class=\"line\">    children: <span class=\"built_in\">List</span>.generate(<span class=\"number\">3</span>, (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Container(</span><br><span class=\"line\">            margin: EdgeInsets.symmetric(vertical: <span class=\"number\">8</span>),</span><br><span class=\"line\">            height: <span class=\"number\">50</span>,</span><br><span class=\"line\">            color: Colors.black12,</span><br><span class=\"line\">            child: Center(</span><br><span class=\"line\">            child: Text(<span class=\"string\">&#x27;vertical&#x27;</span>),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;).toList(),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"流式布局\"><a href=\"#流式布局\" class=\"headerlink\" title=\"流式布局\"></a>流式布局</h3><p>在介绍 Row 和 Colum 时，如果子 widget 超出屏幕范围， 则会报溢出错误， 并不会自动换行。Flutter 中提供了 Wrap 和 Flow 来支持溢出部分后会自动折行。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Wrap 的示例</span></span><br><span class=\"line\">Wrap(</span><br><span class=\"line\">    spacing: <span class=\"number\">8.0</span>, <span class=\"comment\">// 主轴(水平)方向间距</span></span><br><span class=\"line\">    runSpacing: <span class=\"number\">4.0</span>, <span class=\"comment\">// 纵轴（垂直）方向间距</span></span><br><span class=\"line\">    alignment: WrapAlignment.center, <span class=\"comment\">//沿主轴方向居中</span></span><br><span class=\"line\">    <span class=\"comment\">//runAlignment 纵轴方向的对齐方式</span></span><br><span class=\"line\">    children: <span class=\"built_in\">List</span>.generate(<span class=\"number\">12</span>, (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Container(</span><br><span class=\"line\">            decoration: BoxDecoration(</span><br><span class=\"line\">                color: Color(<span class=\"number\">0xff38acfa</span>),</span><br><span class=\"line\">                borderRadius: BorderRadius.circular(<span class=\"number\">5</span>),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            padding: EdgeInsets.symmetric(horizontal: <span class=\"number\">10</span>, vertical: <span class=\"number\">5</span>),</span><br><span class=\"line\">            child: Text(<span class=\"string\">&#x27;tag<span class=\"subst\">$e</span>&#x27;</span>, style: TextStyle(color: Colors.white)),</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;).toList(),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>Flow 布局需要一个 FlowDelegate 类型的 delegate 对象， 但是 Flutter 没有现成实现的类， 需要我们自己实现。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//继承FlowDelegate   只需要实现paintChildren 和 shouldRepaint</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFlowDelegate</span> <span class=\"keyword\">extends</span> <span class=\"title\">FlowDelegate</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用来绘制子组件</span></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> paintChildren(FlowPaintingContext context) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//FlowPaintingContext 绘制上下文信息</span></span><br><span class=\"line\">    <span class=\"comment\">// size 父组件大小</span></span><br><span class=\"line\">    <span class=\"comment\">// childCount 子组件个数</span></span><br><span class=\"line\">    <span class=\"comment\">// getChildSize 获取子组件大小</span></span><br><span class=\"line\">    <span class=\"comment\">// paintChild 绘制子组件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; context.childCount; i++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//paintChild 三个参数 一个指定第几个子组件 一个表示位置信息 一个是透明度</span></span><br><span class=\"line\">      context.paintChild(i, transform: Matrix4.translationValues(i * <span class=\"number\">20.0</span>, i * <span class=\"number\">20.0</span>, <span class=\"number\">0.0</span>), opacity: <span class=\"number\">0.6</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> shouldRepaint(FlowDelegate oldDelegate) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> oldDelegate != <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Flow(</span><br><span class=\"line\">  delegate: TestFlowDelegate(),</span><br><span class=\"line\">  children: <span class=\"built_in\">List</span>.generate(<span class=\"number\">9</span>, (index) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Container(width: <span class=\"number\">80.0</span>, height: <span class=\"number\">80.0</span>, color: Colors.red[index * <span class=\"number\">100</span>]);</span><br><span class=\"line\">  &#125;).toList(),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"叠层布局\"><a href=\"#叠层布局\" class=\"headerlink\" title=\"叠层布局\"></a>叠层布局</h3><p>Stack 结合 Positioned 进行叠层布局，和 css 中的绝对定位类似。Positioned 组件通过 left，top ，right，bottom 四个方向上的属性值来决定其在 Stack 中的位置。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stack(</span><br><span class=\"line\">    children: &lt;Widget&gt;[</span><br><span class=\"line\">        Container(</span><br><span class=\"line\">            child: Text(<span class=\"string\">&quot;Stack&quot;</span>, style: TextStyle(color: Colors.white),</span><br><span class=\"line\">            color: Colors.red,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        Positioned(</span><br><span class=\"line\">            left: <span class=\"number\">18.0</span>,</span><br><span class=\"line\">            top: <span class=\"number\">80</span>,</span><br><span class=\"line\">            child: Text(<span class=\"string\">&quot;I am Jack&quot;</span>),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        Positioned(</span><br><span class=\"line\">            right: <span class=\"number\">36.0</span>,</span><br><span class=\"line\">            bottom: <span class=\"number\">200</span>,</span><br><span class=\"line\">            child: Text(<span class=\"string\">&quot;Your friend&quot;</span>),</span><br><span class=\"line\">        )</span><br><span class=\"line\">    ],</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"对齐和相对定位\"><a href=\"#对齐和相对定位\" class=\"headerlink\" title=\"对齐和相对定位\"></a>对齐和相对定位</h3><p>Align 组件可以调整子组件位置，同过一个 AlignmentGeometry 类型的值，表示子组件在父组件中的起始位</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Container(</span><br><span class=\"line\">  height: <span class=\"number\">120.0</span>,</span><br><span class=\"line\">  width: <span class=\"number\">120.0</span>,</span><br><span class=\"line\">  color: Colors.blue[<span class=\"number\">50</span>],</span><br><span class=\"line\">  child: Align(</span><br><span class=\"line\">    alignment: Alignment.topRight, <span class=\"comment\">//Alignment 一个AlignmentGeometry的实现类</span></span><br><span class=\"line\">    child: Text(<span class=\"string\">&#x27;topRight&#x27;</span>),</span><br><span class=\"line\">  ),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Alignment 对应坐标系,</span><br><span class=\"line\">topRight对应着(-1,-1),中心坐标center就是(0,0),</span><br><span class=\"line\"></span><br><span class=\"line\">  -1,-1        1,-1</span><br><span class=\"line\">    -------------</span><br><span class=\"line\">    |           |</span><br><span class=\"line\">    |           |</span><br><span class=\"line\">    |    0,0    |</span><br><span class=\"line\">    |           |</span><br><span class=\"line\">    |           |</span><br><span class=\"line\">    -------------</span><br><span class=\"line\">  -1,1          1,1</span><br><span class=\"line\"></span><br><span class=\"line\">自定义时候对应公式  x,y 就是上面对应坐标值,  childWidth childHeight 容器宽高</span><br><span class=\"line\">(Alignment.x*childWidth/2+childWidth/2, Alignment.y*childHeight/2+childHeight/2)</span><br><span class=\"line\"></span><br><span class=\"line\">Alignment(2,0.0) =&gt;  180,60</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"容器类型\"><a href=\"#容器类型\" class=\"headerlink\" title=\"容器类型\"></a>容器类型</h2><h3 id=\"Container\"><a href=\"#Container\" class=\"headerlink\" title=\"Container\"></a>Container</h3><p>Container 是一个组合类容器的组装的多功能容器。了解一个 Container 其他也就很清楚了</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Container(&#123;</span><br><span class=\"line\">    Key key,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.alignment, <span class=\"comment\">//对齐方式  =&gt;对应 Align</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.padding, <span class=\"comment\">// 内间距，是个 EdgeInsetsGeometry 抽象类  =&gt;对应  Padding </span></span><br><span class=\"line\">    <span class=\"comment\">// FLutter 提供了是个 EdgeInsetsGeometry 实现类 EdgeInsets，提供了下面四个方法</span></span><br><span class=\"line\">    <span class=\"comment\">// fromLTRB(double left， double top，double right， double bottom)：分别指定四个方向的填充。</span></span><br><span class=\"line\">    <span class=\"comment\">// all(double value) : 所有方向均使用相同数值的填充。</span></span><br><span class=\"line\">    <span class=\"comment\">// only(&#123;left， top， right ，bottom &#125;)：可以设置具体某个方向的填充(可以同时指定多个方向)。</span></span><br><span class=\"line\">    <span class=\"comment\">// symmetric(&#123; vertical， horizontal &#125;)：用于设置对称方向的填充，vertical 指 top 和 bottom，horizontal 指 left 和 right。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color, <span class=\"comment\">//背景色</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.decoration,  <span class=\"comment\">// 背景装饰，设置了decoration，外面的color属性将不可用，需要在decoration内设置   =&gt;对应  DecoratedBox</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.foregroundDecoration,<span class=\"comment\">// 前景装饰</span></span><br><span class=\"line\">    <span class=\"comment\">// DecoratedBox 提供的样式属性</span></span><br><span class=\"line\">    <span class=\"comment\">// color, //背景颜色</span></span><br><span class=\"line\">    <span class=\"comment\">// image,//背景图片</span></span><br><span class=\"line\">    <span class=\"comment\">// border, //边框</span></span><br><span class=\"line\">    <span class=\"comment\">// borderRadius, //圆角</span></span><br><span class=\"line\">    <span class=\"comment\">// boxShadow, //阴影,可以指定多个</span></span><br><span class=\"line\">    <span class=\"comment\">// gradient, //渐变</span></span><br><span class=\"line\">    <span class=\"comment\">// backgroundBlendMode, //背景混合模式</span></span><br><span class=\"line\">    <span class=\"comment\">// shape //形状</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">double</span> width, <span class=\"comment\">// 宽度</span></span><br><span class=\"line\">    <span class=\"built_in\">double</span> height,<span class=\"comment\">// 高度</span></span><br><span class=\"line\">    BoxConstraints constraints, <span class=\"comment\">//设置限制 =&gt;对应  ConstrainedBox，与其相反的是 UnconstrainedBox(取消限制)</span></span><br><span class=\"line\">    <span class=\"comment\">// ConstrainedBox 提供属性 都是double类型</span></span><br><span class=\"line\">    <span class=\"comment\">// minWidth //最小宽度</span></span><br><span class=\"line\">    <span class=\"comment\">// maxWidth //最大宽度</span></span><br><span class=\"line\">    <span class=\"comment\">// minHeight//最小高度</span></span><br><span class=\"line\">    <span class=\"comment\">// maxHeight//最大高度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.margin, <span class=\"comment\">// 外间距 和padding 使用方式一样</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transform, <span class=\"comment\">//变形 需要一个Matrix4类,具体可以看Matrix4源码,提供了很多不同变形构造方法 =&gt;对应 Transform </span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.child,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.clipBehavior = Clip.none,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他容器类\"><a href=\"#其他容器类\" class=\"headerlink\" title=\"其他容器类\"></a>其他容器类</h3><ul>\n<li>SizedBox 固定宽高</li>\n<li>AspectRatio 宽高比</li>\n<li>UnconstrainedBox 取消限制</li>\n</ul>\n","excerpt":"<p>Flutter 中所有的UI界面都是widget构建的。widget用来描述元素配置数据,然后会被渲染成对应UI界面。 当widget的状态修改时, 它会重新渲染UI。</p>","more":"<h2 id=\"widget\"><a href=\"#widget\" class=\"headerlink\" title=\"widget\"></a>widget</h2><p>Flutter 官网对 widget 描述</p>\n<blockquote>\n<p>Flutter从React中吸取灵感，通过现代化框架创建出精美的组件。它的核心思想是用widget来构建你的UI界面。 Widget描述了在当前的配置和状态下视图所应该呈现的样子。当widget的状态改变时，它会重新构建其描述（展示的 UI），框架则会对比前后变化的不同，以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。</p>\n</blockquote>\n<p>一个新的组件通常是继承 StatelessWidget 或 StatefulWidget</p>\n<ul>\n<li>StatelessWidget 是状态不可变的 widget， 其中的展示内容不会随着数据的变化而变化（非响应式）。</li>\n<li>StatefulWidget 可以进行状态管理， 数据更新， 页面中的内容可以随之变化（响应式）。</li>\n</ul>\n<p>使用 StatefulWidget 时候， 对状态进行更改时候， 会触发 build 方法对组件进行重绘， 也会连同子组件的一起触发。当一个组件数据中途不需要更改的时候，尽可能的使用 StatelessWidget， 对性能有较好提升。或者将需要更新部分尽可能拆分成子节点。</p>\n<h2 id=\"基础-widget\"><a href=\"#基础-widget\" class=\"headerlink\" title=\"基础 widget\"></a>基础 widget</h2><h3 id=\"Text\"><a href=\"#Text\" class=\"headerlink\" title=\"Text\"></a>Text</h3><p>Text使用还是比较常用的，用于显示简单样式文本。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Text(</span><br><span class=\"line\">   <span class=\"string\">&#x27;要显示文本&#x27;</span>, </span><br><span class=\"line\">   <span class=\"comment\">//style 设置文本样式</span></span><br><span class=\"line\">   style: TextStyle(</span><br><span class=\"line\">       color: Colors.blue,</span><br><span class=\"line\">       fontSize: <span class=\"number\">18.0</span>,</span><br><span class=\"line\">       height: <span class=\"number\">1.2</span>,  </span><br><span class=\"line\">   ),</span><br><span class=\"line\">   <span class=\"comment\">//textAlign 设置对齐方式</span></span><br><span class=\"line\">   <span class=\"comment\">//maxLines 最大行数</span></span><br><span class=\"line\">   <span class=\"comment\">//overflow 超出显示方式</span></span><br><span class=\"line\">   <span class=\"comment\">//softWrap 设置换行</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>使用自定义字体</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义好自定义字体文件 pubspec.yaml</span></span><br><span class=\"line\"><span class=\"attr\">flutter:</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"attr\">family:</span> <span class=\"string\">Mango</span></span><br><span class=\"line\">    <span class=\"attr\">fonts:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">asset:</span> <span class=\"string\">asset/fonts/Mango-Regular-2.otf</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用字体</span></span><br><span class=\"line\">Text(</span><br><span class=\"line\">    <span class=\"string\">&#x27;自定义字体 hello Flutter&#x27;</span>,</span><br><span class=\"line\">    style: TextStyle(fontFamily: <span class=\"string\">&#x27;Mango&#x27;</span>, color: Colors.white),</span><br><span class=\"line\">    textAlign: TextAlign.center,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>有时我们还会需要一段文本中，可能需要不同的字体样式。这个时候可以使用 Text.rich 或者 RichText</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Text.rich(</span><br><span class=\"line\">    TextSpan(</span><br><span class=\"line\">        style: TextStyle(fontSize: <span class=\"number\">18</span>, color: Colors.white),</span><br><span class=\"line\">        children: &lt;TextSpan&gt;[</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27; 天上&#x27;</span>),</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27; 白玉京&#x27;</span>,style: TextStyle(fontWeight: FontWeight.bold,color: Colors.red,fontSize: <span class=\"number\">20</span>,)),</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27; ，&#x27;</span>),</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27; 十二楼五城。&#x27;</span>),</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27;仙人 &#x27;</span>, style: TextStyle(fontWeight: FontWeight.bold, color: Colors.red, fontSize: <span class=\"number\">20</span>)),</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27;抚我顶，结发受长生。&#x27;</span>),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// 或者 两个效果是一样的 都是需要一个 InlineSpan 类型, maxLines,overflow等这些可以在外层设置, 单独样式在TextSpan的style设置</span></span><br><span class=\"line\">RichText(</span><br><span class=\"line\">    text: TextSpan(</span><br><span class=\"line\">        style: TextStyle(fontSize: <span class=\"number\">18</span>, color: Colors.white),</span><br><span class=\"line\">        children: &lt;TextSpan&gt;[</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27; 天上&#x27;</span>),</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27; 白玉京&#x27;</span>,style: TextStyle(fontWeight: FontWeight.bold,color: Colors.red,fontSize: <span class=\"number\">20</span>,)),</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27; ，&#x27;</span>),</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27; 十二楼五城。&#x27;</span>),</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27;仙人 &#x27;</span>, style: TextStyle(fontWeight: FontWeight.bold, color: Colors.red, fontSize: <span class=\"number\">20</span>)),</span><br><span class=\"line\">            TextSpan(text: <span class=\"string\">&#x27;抚我顶，结发受长生。&#x27;</span>),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    ),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h3><p>Flutter 内置了很多按钮，Material 中大致分为 RawMaterialButton 和 IconButton 两类</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RawMaterialButton 常见的有 RaisedButton / FlatButton / OutlineButton /FlatButton</span></span><br><span class=\"line\">RawMaterialButton(&#123;</span><br><span class=\"line\">    Key key,</span><br><span class=\"line\">    <span class=\"meta\">@required</span> <span class=\"keyword\">this</span>.onPressed,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onHighlightChanged,            <span class=\"comment\">// 高亮变化的回调</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.textStyle,                     <span class=\"comment\">// 文字属性</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fillColor,                     <span class=\"comment\">// 填充颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.highlightColor,                <span class=\"comment\">// 背景高亮颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.splashColor,                   <span class=\"comment\">// 水波纹颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.elevation = <span class=\"number\">2.0</span>,               <span class=\"comment\">// 阴影</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.highlightElevation = <span class=\"number\">8.0</span>,      <span class=\"comment\">// 高亮时阴影</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.disabledElevation = <span class=\"number\">0.0</span>,       <span class=\"comment\">// 不可点击时阴影</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.padding = EdgeInsets.zero,     <span class=\"comment\">// 内容周围边距</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.constraints = <span class=\"keyword\">const</span> BoxConstraints(minWidth: <span class=\"number\">88.0</span>, minHeight: <span class=\"number\">36.0</span>),   <span class=\"comment\">// 默认按钮尺寸</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.shape = <span class=\"keyword\">const</span> RoundedRectangleBorder(),    <span class=\"comment\">// 形状样式</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.animationDuration = kThemeChangeDuration,  <span class=\"comment\">// 动画效果持续时长</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.clipBehavior = Clip.none,                  <span class=\"comment\">// 抗锯齿剪切效果</span></span><br><span class=\"line\">    MaterialTapTargetSize materialTapTargetSize,    <span class=\"comment\">// 点击目标的最小尺寸</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.child,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//IconButton类型的按钮</span></span><br><span class=\"line\"><span class=\"comment\">// IconButton 常见的有 BackButton(返回上一个页面)/CloseButton(关闭当前页面)</span></span><br><span class=\"line\">IconButton(&#123;</span><br><span class=\"line\">    Key key,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.iconSize = <span class=\"number\">24.0</span>,   <span class=\"comment\">// 图标大小</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.padding = <span class=\"keyword\">const</span> EdgeInsets.all(<span class=\"number\">8.0</span>),   <span class=\"comment\">// 图标周围间距</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.alignment = Alignment.center,          <span class=\"comment\">// 图标位置</span></span><br><span class=\"line\">    <span class=\"meta\">@required</span> <span class=\"keyword\">this</span>.icon,    <span class=\"comment\">// 图标资源</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color,             <span class=\"comment\">// 图标颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.highlightColor,    <span class=\"comment\">// 点击高亮颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.splashColor,       <span class=\"comment\">// 水波纹颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.disabledColor,     <span class=\"comment\">// 不可点击时高亮颜色</span></span><br><span class=\"line\">    <span class=\"meta\">@required</span> <span class=\"keyword\">this</span>.onPressed,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tooltip            <span class=\"comment\">// 长按提示</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其他按钮</span></span><br><span class=\"line\"><span class=\"comment\">//FloatingActionButton 悬浮</span></span><br><span class=\"line\"><span class=\"comment\">//TextButton 文本按钮</span></span><br><span class=\"line\"><span class=\"comment\">//CupertinoButton iOS风格按钮</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Image\"><a href=\"#Image\" class=\"headerlink\" title=\"Image\"></a>Image</h3><p>Image 日常开发中的使用频率也非常高，Image 可以加载本地，网络，缓存的图片。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 本地加载图片 需要在 pubspec.yaml 添加图片资源</span></span><br><span class=\"line\">Image(</span><br><span class=\"line\">    image: AssetImage(<span class=\"string\">&#x27;asset/images/demo.png&#x27;</span>), <span class=\"comment\">//本地图片</span></span><br><span class=\"line\">    <span class=\"comment\">// 在线图片</span></span><br><span class=\"line\">    <span class=\"comment\">// image: NetworkImage(&#x27;https://dev-file.iviewui.com/ttkIjNPlVDuv4lUTvRX8GIlM2QqSe0jg/middle&#x27;),</span></span><br><span class=\"line\">    height: <span class=\"number\">100.0</span>,</span><br><span class=\"line\">    width: <span class=\"number\">100.0</span>,</span><br><span class=\"line\">    fit: BoxFit.fill, <span class=\"comment\">// 填充方式和Web上差不多</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// Image 也提供了 Image.asset 和 Image.network 构造函数的快捷方式</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Icon\"><a href=\"#Icon\" class=\"headerlink\" title=\"Icon\"></a>Icon</h3><p>使用内置图标，Flutter 内置提供了一套 material-icon 图标</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//需要一个IconData类型图标数据</span></span><br><span class=\"line\">Icon(</span><br><span class=\"line\">    Icons.thirteen_mp, <span class=\"comment\">//material-icon 都定义在 Icons 类中</span></span><br><span class=\"line\">    size: <span class=\"number\">30</span>,</span><br><span class=\"line\">    color: Colors.black,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>使用自定义图标</p>\n<ul>\n<li>下载好图标文件</li>\n<li>加入在项目中</li>\n<li>在pubspec.yaml中引入字体文件ttf(不同版本的flutter可能有差异)<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#pubspec.yaml</span></span><br><span class=\"line\"><span class=\"attr\">flutter:</span></span><br><span class=\"line\"> <span class=\"attr\">fonts:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">family:</span> <span class=\"string\">IconFont</span></span><br><span class=\"line\">    <span class=\"attr\">fonts:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">asset:</span> <span class=\"string\">asset/fonts/iconfont.ttf</span></span><br></pre></td></tr></table></figure></li>\n<li>编写自定义 IconData 类型<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//IconFont:是引入时候设置字体名称,0xe611 为对应图标的Unicode</span></span><br><span class=\"line\">IconData li = IconData(<span class=\"number\">0xe611</span>, fontFamily: <span class=\"string\">&#x27;IconFont&#x27;</span>) <span class=\"comment\">// 设置自定义IconData</span></span><br><span class=\"line\">Icon(</span><br><span class=\"line\">    li,</span><br><span class=\"line\">    size: <span class=\"number\">30</span>,</span><br><span class=\"line\">    color: Colors.black,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"AppBar\"><a href=\"#AppBar\" class=\"headerlink\" title=\"AppBar\"></a>AppBar</h3><p>AppBar 是一个顶端导航栏 </p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> AppBar(&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.leading, <span class=\"comment\">//左侧按钮 可以自定义,在其他页时候 回显示返回按钮</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.automaticallyImplyLeading = <span class=\"keyword\">true</span>,<span class=\"comment\">//leading为null，是否自动实现默认的leading按钮</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.title, <span class=\"comment\">// 标题,是一个Widget</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.actions, <span class=\"comment\">//  一个Widget列表,显示在右侧,</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.flexibleSpace,<span class=\"comment\">//显示在 AppBar 下方的控件，高度和 AppBar 高度一样 可是定制些特殊效果</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bottom,<span class=\"comment\">// 一个PreferredSizeWidget,可以用来放TabBar</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.elevation,<span class=\"comment\">//控件的 z 坐标顺序 为0可以隐藏阴影</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.shadowColor,<span class=\"comment\">// 阴影颜色</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.shape,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.backgroundColor, <span class=\"comment\">// 背景色</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.brightness, <span class=\"comment\">//设置状态栏颜色 light:文字是黑色 dark:文字是白色</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.iconTheme,<span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.actionsIconTheme,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.textTheme, <span class=\"comment\">//文字样式</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.primary = <span class=\"keyword\">true</span>, <span class=\"comment\">//为false时候会在屏幕顶部,不保留状态栏</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.centerTitle, <span class=\"comment\">//标题是否居中显示</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.excludeHeaderSemantics = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.titleSpacing = NavigationToolbar.kMiddleSpacing, <span class=\"comment\">//水平标题间距</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.toolbarOpacity = <span class=\"number\">1.0</span>,<span class=\"comment\">//透明度</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.bottomOpacity = <span class=\"number\">1.0</span>,<span class=\"comment\">//透明度</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.toolbarHeight, <span class=\"comment\">//高度</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.leadingWidth,<span class=\"comment\">// 左侧按钮宽度</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//示例</span></span><br><span class=\"line\">AppBar(</span><br><span class=\"line\">    automaticallyImplyLeading: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    title: Text(<span class=\"string\">&quot;去掉阴影和左侧默认按钮&quot;</span>),</span><br><span class=\"line\">    elevation: <span class=\"number\">0.0</span>,</span><br><span class=\"line\">    actions: [</span><br><span class=\"line\">        IconButton(</span><br><span class=\"line\">            icon: Icon(Icons.search, color: Colors.white),</span><br><span class=\"line\">            onPressed: <span class=\"keyword\">null</span>,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例AppBar+TabBar</span></span><br><span class=\"line\">DefaultTabController(</span><br><span class=\"line\">    length: <span class=\"number\">2</span>,</span><br><span class=\"line\">    child: Scaffold(</span><br><span class=\"line\">        appBar: AppBar(</span><br><span class=\"line\">                automaticallyImplyLeading: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">                title: Text(<span class=\"string\">&quot;AppBar+TabBar&quot;</span>),</span><br><span class=\"line\">                centerTitle: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">                elevation: <span class=\"number\">0.0</span>,</span><br><span class=\"line\">                bottom: TabBar(</span><br><span class=\"line\">                    unselectedLabelColor: Colors.white60,</span><br><span class=\"line\">                    indicatorColor: Colors.white,</span><br><span class=\"line\">                    indicatorSize: TabBarIndicatorSize.label,</span><br><span class=\"line\">                    indicatorWeight: <span class=\"number\">2.0</span>,</span><br><span class=\"line\">                    tabs: &lt;Widget&gt;[</span><br><span class=\"line\">                        Tab(text: <span class=\"string\">&#x27;tab1&#x27;</span>),</span><br><span class=\"line\">                        Tab(text: <span class=\"string\">&#x27;tab2&#x27;</span>),</span><br><span class=\"line\">                    ],</span><br><span class=\"line\">                ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">        body: TabBarView(</span><br><span class=\"line\">            children: [</span><br><span class=\"line\">                Container(</span><br><span class=\"line\">                    color: Colors.black12,</span><br><span class=\"line\">                    child: Center(child: Text(<span class=\"string\">&#x27;tab1&#x27;</span>)),</span><br><span class=\"line\">                ),</span><br><span class=\"line\">                Container(</span><br><span class=\"line\">                    color: Colors.yellow[<span class=\"number\">50</span>],</span><br><span class=\"line\">                    child: Center(child: Text(<span class=\"string\">&#x27;tab2&#x27;</span>)),</span><br><span class=\"line\">                ),</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<!-- ### Tabs -->\n\n<h2 id=\"布局类-widget\"><a href=\"#布局类-widget\" class=\"headerlink\" title=\"布局类 widget\"></a>布局类 widget</h2><p>常用布局 widget 有 Row、Column、Flex、Warp、Flow、Stack、Positioned 等。</p>\n<h3 id=\"弹性布局\"><a href=\"#弹性布局\" class=\"headerlink\" title=\"弹性布局\"></a>弹性布局</h3><p>Flutter 使用的 Flex 模型基本上跟 CSS 类似。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Row</span></span><br><span class=\"line\">Row(</span><br><span class=\"line\">    <span class=\"comment\">// 主轴对齐方式(水平方向)</span></span><br><span class=\"line\">    mainAxisAlignment: MainAxisAlignment.spaceBetween,</span><br><span class=\"line\">    <span class=\"comment\">//CrossAxisAlignment 负轴(垂直方向)</span></span><br><span class=\"line\">    children: [</span><br><span class=\"line\">        Text(<span class=\"string\">&quot; Row1 &quot;</span>),</span><br><span class=\"line\">        Text(<span class=\"string\">&quot; Row2 &quot;</span>),</span><br><span class=\"line\">        <span class=\"comment\">// 占用剩余空间</span></span><br><span class=\"line\">        Expanded(</span><br><span class=\"line\">            flex: <span class=\"number\">1</span>, <span class=\"comment\">// 设置占比</span></span><br><span class=\"line\">            child: Text(<span class=\"string\">&quot; Row3 &quot;</span>),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        Expanded(</span><br><span class=\"line\">            flex: <span class=\"number\">2</span>,</span><br><span class=\"line\">            child: Text(<span class=\"string\">&quot; Row4 &quot;</span>),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Column</span></span><br><span class=\"line\">Column(</span><br><span class=\"line\">    <span class=\"comment\">// 主轴对齐方式(垂直方向)</span></span><br><span class=\"line\">    mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class=\"line\">     <span class=\"comment\">//CrossAxisAlignment 负轴(水平方向)</span></span><br><span class=\"line\">    children: <span class=\"built_in\">List</span>.generate(<span class=\"number\">3</span>, (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Container(</span><br><span class=\"line\">            margin: EdgeInsets.symmetric(vertical: <span class=\"number\">8</span>),</span><br><span class=\"line\">            height: <span class=\"number\">50</span>,</span><br><span class=\"line\">            color: Colors.black12,</span><br><span class=\"line\">            child: Center(</span><br><span class=\"line\">                child: Text(<span class=\"string\">&#x27;Column&#x27;</span>),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;).toList(),</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Flex 与 Column,Row 使用方式类似</span></span><br><span class=\"line\"> Flex(</span><br><span class=\"line\">    <span class=\"comment\">//设置方向 水平和垂直</span></span><br><span class=\"line\">    direction: Axis.vertical,</span><br><span class=\"line\">    mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class=\"line\">    children: <span class=\"built_in\">List</span>.generate(<span class=\"number\">3</span>, (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Container(</span><br><span class=\"line\">            margin: EdgeInsets.symmetric(vertical: <span class=\"number\">8</span>),</span><br><span class=\"line\">            height: <span class=\"number\">50</span>,</span><br><span class=\"line\">            color: Colors.black12,</span><br><span class=\"line\">            child: Center(</span><br><span class=\"line\">            child: Text(<span class=\"string\">&#x27;vertical&#x27;</span>),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;).toList(),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"流式布局\"><a href=\"#流式布局\" class=\"headerlink\" title=\"流式布局\"></a>流式布局</h3><p>在介绍 Row 和 Colum 时，如果子 widget 超出屏幕范围， 则会报溢出错误， 并不会自动换行。Flutter 中提供了 Wrap 和 Flow 来支持溢出部分后会自动折行。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Wrap 的示例</span></span><br><span class=\"line\">Wrap(</span><br><span class=\"line\">    spacing: <span class=\"number\">8.0</span>, <span class=\"comment\">// 主轴(水平)方向间距</span></span><br><span class=\"line\">    runSpacing: <span class=\"number\">4.0</span>, <span class=\"comment\">// 纵轴（垂直）方向间距</span></span><br><span class=\"line\">    alignment: WrapAlignment.center, <span class=\"comment\">//沿主轴方向居中</span></span><br><span class=\"line\">    <span class=\"comment\">//runAlignment 纵轴方向的对齐方式</span></span><br><span class=\"line\">    children: <span class=\"built_in\">List</span>.generate(<span class=\"number\">12</span>, (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Container(</span><br><span class=\"line\">            decoration: BoxDecoration(</span><br><span class=\"line\">                color: Color(<span class=\"number\">0xff38acfa</span>),</span><br><span class=\"line\">                borderRadius: BorderRadius.circular(<span class=\"number\">5</span>),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            padding: EdgeInsets.symmetric(horizontal: <span class=\"number\">10</span>, vertical: <span class=\"number\">5</span>),</span><br><span class=\"line\">            child: Text(<span class=\"string\">&#x27;tag<span class=\"subst\">$e</span>&#x27;</span>, style: TextStyle(color: Colors.white)),</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;).toList(),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>Flow 布局需要一个 FlowDelegate 类型的 delegate 对象， 但是 Flutter 没有现成实现的类， 需要我们自己实现。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//继承FlowDelegate   只需要实现paintChildren 和 shouldRepaint</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFlowDelegate</span> <span class=\"keyword\">extends</span> <span class=\"title\">FlowDelegate</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用来绘制子组件</span></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> paintChildren(FlowPaintingContext context) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//FlowPaintingContext 绘制上下文信息</span></span><br><span class=\"line\">    <span class=\"comment\">// size 父组件大小</span></span><br><span class=\"line\">    <span class=\"comment\">// childCount 子组件个数</span></span><br><span class=\"line\">    <span class=\"comment\">// getChildSize 获取子组件大小</span></span><br><span class=\"line\">    <span class=\"comment\">// paintChild 绘制子组件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; context.childCount; i++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//paintChild 三个参数 一个指定第几个子组件 一个表示位置信息 一个是透明度</span></span><br><span class=\"line\">      context.paintChild(i, transform: Matrix4.translationValues(i * <span class=\"number\">20.0</span>, i * <span class=\"number\">20.0</span>, <span class=\"number\">0.0</span>), opacity: <span class=\"number\">0.6</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> shouldRepaint(FlowDelegate oldDelegate) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> oldDelegate != <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Flow(</span><br><span class=\"line\">  delegate: TestFlowDelegate(),</span><br><span class=\"line\">  children: <span class=\"built_in\">List</span>.generate(<span class=\"number\">9</span>, (index) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> Container(width: <span class=\"number\">80.0</span>, height: <span class=\"number\">80.0</span>, color: Colors.red[index * <span class=\"number\">100</span>]);</span><br><span class=\"line\">  &#125;).toList(),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"叠层布局\"><a href=\"#叠层布局\" class=\"headerlink\" title=\"叠层布局\"></a>叠层布局</h3><p>Stack 结合 Positioned 进行叠层布局，和 css 中的绝对定位类似。Positioned 组件通过 left，top ，right，bottom 四个方向上的属性值来决定其在 Stack 中的位置。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stack(</span><br><span class=\"line\">    children: &lt;Widget&gt;[</span><br><span class=\"line\">        Container(</span><br><span class=\"line\">            child: Text(<span class=\"string\">&quot;Stack&quot;</span>, style: TextStyle(color: Colors.white),</span><br><span class=\"line\">            color: Colors.red,</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        Positioned(</span><br><span class=\"line\">            left: <span class=\"number\">18.0</span>,</span><br><span class=\"line\">            top: <span class=\"number\">80</span>,</span><br><span class=\"line\">            child: Text(<span class=\"string\">&quot;I am Jack&quot;</span>),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        Positioned(</span><br><span class=\"line\">            right: <span class=\"number\">36.0</span>,</span><br><span class=\"line\">            bottom: <span class=\"number\">200</span>,</span><br><span class=\"line\">            child: Text(<span class=\"string\">&quot;Your friend&quot;</span>),</span><br><span class=\"line\">        )</span><br><span class=\"line\">    ],</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"对齐和相对定位\"><a href=\"#对齐和相对定位\" class=\"headerlink\" title=\"对齐和相对定位\"></a>对齐和相对定位</h3><p>Align 组件可以调整子组件位置，同过一个 AlignmentGeometry 类型的值，表示子组件在父组件中的起始位</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Container(</span><br><span class=\"line\">  height: <span class=\"number\">120.0</span>,</span><br><span class=\"line\">  width: <span class=\"number\">120.0</span>,</span><br><span class=\"line\">  color: Colors.blue[<span class=\"number\">50</span>],</span><br><span class=\"line\">  child: Align(</span><br><span class=\"line\">    alignment: Alignment.topRight, <span class=\"comment\">//Alignment 一个AlignmentGeometry的实现类</span></span><br><span class=\"line\">    child: Text(<span class=\"string\">&#x27;topRight&#x27;</span>),</span><br><span class=\"line\">  ),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Alignment 对应坐标系,</span><br><span class=\"line\">topRight对应着(-1,-1),中心坐标center就是(0,0),</span><br><span class=\"line\"></span><br><span class=\"line\">  -1,-1        1,-1</span><br><span class=\"line\">    -------------</span><br><span class=\"line\">    |           |</span><br><span class=\"line\">    |           |</span><br><span class=\"line\">    |    0,0    |</span><br><span class=\"line\">    |           |</span><br><span class=\"line\">    |           |</span><br><span class=\"line\">    -------------</span><br><span class=\"line\">  -1,1          1,1</span><br><span class=\"line\"></span><br><span class=\"line\">自定义时候对应公式  x,y 就是上面对应坐标值,  childWidth childHeight 容器宽高</span><br><span class=\"line\">(Alignment.x*childWidth/2+childWidth/2, Alignment.y*childHeight/2+childHeight/2)</span><br><span class=\"line\"></span><br><span class=\"line\">Alignment(2,0.0) =&gt;  180,60</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"容器类型\"><a href=\"#容器类型\" class=\"headerlink\" title=\"容器类型\"></a>容器类型</h2><h3 id=\"Container\"><a href=\"#Container\" class=\"headerlink\" title=\"Container\"></a>Container</h3><p>Container 是一个组合类容器的组装的多功能容器。了解一个 Container 其他也就很清楚了</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Container(&#123;</span><br><span class=\"line\">    Key key,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.alignment, <span class=\"comment\">//对齐方式  =&gt;对应 Align</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.padding, <span class=\"comment\">// 内间距，是个 EdgeInsetsGeometry 抽象类  =&gt;对应  Padding </span></span><br><span class=\"line\">    <span class=\"comment\">// FLutter 提供了是个 EdgeInsetsGeometry 实现类 EdgeInsets，提供了下面四个方法</span></span><br><span class=\"line\">    <span class=\"comment\">// fromLTRB(double left， double top，double right， double bottom)：分别指定四个方向的填充。</span></span><br><span class=\"line\">    <span class=\"comment\">// all(double value) : 所有方向均使用相同数值的填充。</span></span><br><span class=\"line\">    <span class=\"comment\">// only(&#123;left， top， right ，bottom &#125;)：可以设置具体某个方向的填充(可以同时指定多个方向)。</span></span><br><span class=\"line\">    <span class=\"comment\">// symmetric(&#123; vertical， horizontal &#125;)：用于设置对称方向的填充，vertical 指 top 和 bottom，horizontal 指 left 和 right。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color, <span class=\"comment\">//背景色</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.decoration,  <span class=\"comment\">// 背景装饰，设置了decoration，外面的color属性将不可用，需要在decoration内设置   =&gt;对应  DecoratedBox</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.foregroundDecoration,<span class=\"comment\">// 前景装饰</span></span><br><span class=\"line\">    <span class=\"comment\">// DecoratedBox 提供的样式属性</span></span><br><span class=\"line\">    <span class=\"comment\">// color, //背景颜色</span></span><br><span class=\"line\">    <span class=\"comment\">// image,//背景图片</span></span><br><span class=\"line\">    <span class=\"comment\">// border, //边框</span></span><br><span class=\"line\">    <span class=\"comment\">// borderRadius, //圆角</span></span><br><span class=\"line\">    <span class=\"comment\">// boxShadow, //阴影,可以指定多个</span></span><br><span class=\"line\">    <span class=\"comment\">// gradient, //渐变</span></span><br><span class=\"line\">    <span class=\"comment\">// backgroundBlendMode, //背景混合模式</span></span><br><span class=\"line\">    <span class=\"comment\">// shape //形状</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">double</span> width, <span class=\"comment\">// 宽度</span></span><br><span class=\"line\">    <span class=\"built_in\">double</span> height,<span class=\"comment\">// 高度</span></span><br><span class=\"line\">    BoxConstraints constraints, <span class=\"comment\">//设置限制 =&gt;对应  ConstrainedBox，与其相反的是 UnconstrainedBox(取消限制)</span></span><br><span class=\"line\">    <span class=\"comment\">// ConstrainedBox 提供属性 都是double类型</span></span><br><span class=\"line\">    <span class=\"comment\">// minWidth //最小宽度</span></span><br><span class=\"line\">    <span class=\"comment\">// maxWidth //最大宽度</span></span><br><span class=\"line\">    <span class=\"comment\">// minHeight//最小高度</span></span><br><span class=\"line\">    <span class=\"comment\">// maxHeight//最大高度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.margin, <span class=\"comment\">// 外间距 和padding 使用方式一样</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.transform, <span class=\"comment\">//变形 需要一个Matrix4类,具体可以看Matrix4源码,提供了很多不同变形构造方法 =&gt;对应 Transform </span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.child,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.clipBehavior = Clip.none,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他容器类\"><a href=\"#其他容器类\" class=\"headerlink\" title=\"其他容器类\"></a>其他容器类</h3><ul>\n<li>SizedBox 固定宽高</li>\n<li>AspectRatio 宽高比</li>\n<li>UnconstrainedBox 取消限制</li>\n</ul>"},{"title":"打造自己的Vue组件文档生成工具","comments":1,"date":"2021-07-29T02:44:00.000Z","keywords":"vue,ast,文档生成","_content":"\n程序员最讨厌的两件事情，第一种是写文档，另一种是别人没有写文档。有没有直接根据 vue 组件生成文档的呢？当然是有的的。但第三方使用起来不一定能和现有项目结合使用，往往需要额外的注释用来标记提取信息。<!--more -->\n使用第三方的一些比较常见问题\n- 文档提取信息不全面，可能有些信息你需要提取但是它又不支持。这种情况下就只能修改三方的插件源码了。\n- 需要额为的注释信息来标记，例如 **vuese** 需要给方法 打 **@vuese**、**@arg** 等标记来提供方法信息。\n\n俗话说自己动手丰衣足食，打造自己的 vue 文档生成工具与自己项目结合使用。一个组件文档大致需要提供 **组件名称和描述(name)**、**组件属性(props)**、**组件方法(methods)**、**组件事件(event)**、**插槽(slot)** 这几个部分，以及还需要这个几个部分的注释组成生成描述信息。接下来一步步实现对着几个部分的提取实现。\n\n##  解析.vue 文件\n\n一般一个 .vue 文件分三个部分 **template**、**script**、**style**、**style**部分的内容我们不需要，我们需要分别提取出 **template** 和 **script** 内容。Vue官方开发了 **Vue-template-compiler** 库专门用于 Vue 解析，我们可以直接使用它来解析提取 .vue 文件， **Vue-template-compiler**  提供了一个 **parseComponent** 方法可以对原始的 Vue 文件进行处理。\n\n``` js\nconst compiler = require('vue-template-compiler')\nconst result = compiler.parseComponent(vueStr, [options])\n\n// parseComponent 返回  template、script、style内容，\nexport interface SFCDescriptor {\n  template: SFCBlock | undefined;\n  script: SFCBlock | undefined;\n  styles: SFCBlock[];\n  customBlocks: SFCBlock[];\n}\n```\n\n拿到各个部分文本后，还需要将它转成 ast(抽象语法树)，**template** 部分内容可以直接使用 **Vue-template-compiler** 提供的 **compile** 方法直接生成ast， **script**部分需要借助其他的生成 ast了，这里使用 **babel** 的模块来处理 js 文本。\n\n``` js\nconst compiler = require('vue-template-compiler')\n//vueStr .vue 文件内容\nconst vue = compiler.parseComponent(vueStr)\n\n//生成html部分的 ast \nlet template = compiler.compile(vue.template.content, {\n    preserveWhitespace: false,\n    comments: true // 生成注释信息\n})\n```\n\n使用 **@babel/parser**（Babel解析器,是Babel中使用的JavaScript解析器）来处理 js 文本内容。\n\n``` js\nconst parse = require('@babel/parser');\n\n//生成js部分的 ast\nlet jsAst = parse.parse(vue.script.content, {\n    allowImportExportEverywhere: true \n})\n```\n\n## 提取文档信息\n\n通过上一步的文件解析工作，我们成功获取到了 Vue 的模板 ast 和 script 中的 js 的 ast，下一步我们就可以从中获取我们想要的信息了。这里需要使用到 **@babel/traverse** 这个工具，用来遍历 js ast 的节点工具。可以在这里查看 [ast](https://astexplorer.net/) 的生成内容，方便查看各种节点信息。\n\n``` js\nconst traverse = require('@babel/traverse');\ntraverse.default(jsAst, {\n  enter(path){ // 开始\n\n  },\n  // 支持自定义节点 比如当节点类型 为 ExportDefaultDeclaration 时掉这个方法\n  ExportDefaultDeclaration(){\n\n  }\n})\n```\n\n### 提取组件名称、描述、props、methods、model\n\n**export default** 生成的对应节点类型是 ExportDefaultDeclaration，**declaration** 属性就是对应的组件的 options 了，遍历 declaration 的属性可以获取到 **name**、**props**、**methods**、**model** 等节点信息。\n\n![ast](/images/posts/vue_docs/pic_1627612369570.png)_AST_\n\n示例 \n\n``` js\nlet componentInfo = {}\ntraverse.default(jsAst, {\n  ExportDefaultDeclaration(path){\n    path.node.declaration.properties.forEach(item => {\n        switch (item.key.name) {\n            case 'props':\n                componentInfo.props = extractProps(item) // 提取 props\n                break;\n            case 'methods':\n                componentInfo.methods = extractMethods(item)  // 提取 methods\n                break\n            case 'name':\n                componentInfo.name = item.value.value // 获取组件名称\n                break\n            case 'model':\n                componentInfo.model = extractModel(item)  // 提取 model\n                break\n            default:\n                break;\n        }\n    });\n  }\n})\n```\n\n#### 提取描述\n\njs 中注释分为单行和多行两种，生成 ast 也会生成不同类型的，可以看下面例子。\n\n``` js\n/** \n * 多行备注\n * 用来上传文档信息\n */\n// 单行备注\nexport default {\n}\n// 结尾注释\n```\n\n可以看到会 CommentBlock、 CommentLine 两种类型的节点，还有头部的会放在 leadingComments 里，底部的注释在 trailingComments 里。\n\n![ast](/images/posts/vue_docs/pic_1627613208799.png)_AST_\n\n一般会把组件描述注释放在 **export default**  上面，简单提取注释信息\n\n``` js\n// ExportDefaultDeclaration 插入如下代码 \nif (path.node.leadingComments) {\n    componentInfo.desc = path.node.leadingComments.map(item => {\n        if (item.type === 'CommentLine') {\n            return item.value.trim()\n        } else {\n            return item.value.split('\\n').map(item => item.replace(/[\\s\\*]/g, '')).filter(Boolean)\n        }\n    }).toString()\n}\n```\n\n#### 提取 methods\n因为 **methods** 中的注释需要额外描述 出参、入参等信息需要额外处理，jsdoc 注释规范使用还是比较大众的，这里根据需要自己定义提取规则，还需要提取 **async** 用来标识是否是异步函数。\n\n``` js\n/**\n * 方法描述\n * @param {Bool} type 参数描述\n * @returns 返回值描述\n */\n```\n\n#### 提取 props\nprops 的提取需要区分下面几种情况，default 和 validator 还是提取还是有点麻烦的，validator 校验还可以通过注释简单描述来提取，但是 default 就不好处理了。\n\n``` js\n{\n    propA: Number, // 只有类型\n    propB: [String, Number], // 只有类型但是支持多种\n    propC: { \n      type: String,\n      required: true\n    },\n    propD: {\n      type: Number,\n      default: 100 // 带有默认值 \n    },\n    propE: {\n      type: Object,\n      default () { // 默认值 需要函数返回\n        return { message: 'hello' }\n      }\n    },\n    propF: {\n      default: function () { // 默认值 需要函数返回 和上面的 default 的 ast 节点类型是不同的\n        return { message: 'hello' }\n      }\n      validator: function (value) { // 校验\n        return ['success', 'warning', 'danger'].indexOf(value) !== -1\n      }\n    }\n}\n```\n\n我这里对 default 处理是借助 **@babel/generator** 将 default 转换代码， 通过 eval 转成函数调用返回会默认值。types 是 **@babel/types** 模块，用来判断节点类型的。\n\n``` js\n// 获取Props默认值\nfunction getDefaultVal (node) {\n    if (types.isRegExpLiteral(node) || types.isBooleanLiteral(node) || types.isNumericLiteral(node) || types.isStringLiteral(node)) {\n        return node.value\n    } else if (types.isFunctionExpression(node) || types.isArrowFunctionExpression(node) || types.isObjectMethod(node)) {\n        try {\n            let code = generate.default(types.isObjectMethod(node) ? node.body : node).code\n            let fun = eval(**0,${types.isObjectMethod(node) ? 'function ()' : ''} ${code}**)\n            return JSON.stringify(fun())\n        } catch (error) {\n        }\n    }\n}\n```\n\n#### 提取 model\n这个比较简单，直接获取就可以了。\n\n### 提取组件Events\n\n组件的事件没法直接获取到对应节点，只能通过 **$emit()** 方法来定位事件位置，在 **traverse** 中可以使用 **MemberExpress**(复杂类型节点)，然后通过节点上的属性名是否是 **$emit** 判断是否是事件。\n\n![$emit](/images/posts/vue_docs/pic_1627615451450.png)_事件生成的AST_\n\n可以看到事件名称在 **MemberExpress** 父级上的 **arguments** 里，而备注则在更上一层的里。\n\n``` js\nconst extractEvents = (path) => {\n    // 第一个元素是事件名称\n    const eventName = path.parent.arguments[0]; \n    let comments = path.parentPath.parent.leadingComments\n    return {\n        name: eventName.value,\n        desc: comments ? comments.map(item => item.value.trim()).toString() : '——'\n    }\n}\n\nMemberExpression (path) {\n    // 判断是不是event\n    if (path.node.property.name === '$emit') {\n        let event = extractEvents(path)\n        !componentInfo.events && (componentInfo.events = {});\n        if (componentInfo.events[event.name]) {\n            componentInfo.events[event.name].desc = event.desc ? event.desc : componentInfo.events[event.name].desc\n        } else {\n            componentInfo.events[event.name] = event\n        }\n    }\n}\n```\n\n在成功获取到 Events 后，那么结合 Events、Props、Model，就可以进一步的判断属性是否支持 **.sync** 和 **v-model**。\n\n### 提取组件Slots\n\n首先需要写一个对 Vue 模板的 ast 遍历的函数，**Vue-template-compiler** 没有提供类似于 **@babel/traverse** 用来 遍历 ast 的。\n\n简单实现个遍历模板抽象树函数\n``` js\nconst traverserTemplateAst = (ast, visitor = {}) => {\n    function traverseArray (array, parent) {\n        array.forEach(child => {\n            traverseNode(child, parent);\n        });\n    }\n\n    function traverseNode (node, parent) {\n        visitor.enter && visitor.enter(node, parent);\n        visitor[node.tag] && visitor[node.tag](node, parent);\n        node.children && traverseArray(node.children, node);\n        visitor.exit && visitor.exit(node, parent);\n    }\n\n    traverseNode(ast, null);\n}\n```\n\nVue 模板的 ast 的结构还是比较清晰的，没有 js ast 那么多的类型，只需要区分不同 tag 就可以了。注释会单独一个节点，所以在查找 slot 节点时候，还需要去找它上一个相邻节点，判断是否是注释。\n\n![slot](/images/posts/vue_docs/pic_1627623837793.png)\n\n``` js\ntraverserTemplateAst(template.ast, {\n    slot (node, parent) {\n        !componentInfo.slots && (componentInfo.slots = {})\n        // 获取节点位置\n        let index = parent.children.findIndex(item => item === node)\n        let desc = '无描述', name = '-';\n        if (index > 0) {\n            let tag = parent.children[index - 1]\n            // isComment 判断是否是 注释\n            if (tag.isComment) {\n                desc = tag.text.trim()\n            }\n        }\n        if (node.slotName) name = node.attrsMap.name\n        componentInfo.slots[name] = {\n            name,\n            desc\n        }\n    }\n})\n```\n\n## 结语\n\n到这里简单的实现了自动化生成 Vue 组件信息了，当然还有几种情况还没有考虑进去，例如事件 **$emit** 在 **template** 中，**slot** 在 **render** 函数中时候的情，不过提取这部分实现也是大同小异的了。可以在 [这里查看](//github.com/MaLuns/generate-vue-docs) 本文源码。\n","source":"_posts/generate_vue_docs.md","raw":"---\ntitle: 打造自己的Vue组件文档生成工具\ncomments: true\ndate: 2021-07-29 10:44:00\ntags: [vue]\ncategories: 记录类\nkeywords: vue,ast,文档生成\n---\n\n程序员最讨厌的两件事情，第一种是写文档，另一种是别人没有写文档。有没有直接根据 vue 组件生成文档的呢？当然是有的的。但第三方使用起来不一定能和现有项目结合使用，往往需要额外的注释用来标记提取信息。<!--more -->\n使用第三方的一些比较常见问题\n- 文档提取信息不全面，可能有些信息你需要提取但是它又不支持。这种情况下就只能修改三方的插件源码了。\n- 需要额为的注释信息来标记，例如 **vuese** 需要给方法 打 **@vuese**、**@arg** 等标记来提供方法信息。\n\n俗话说自己动手丰衣足食，打造自己的 vue 文档生成工具与自己项目结合使用。一个组件文档大致需要提供 **组件名称和描述(name)**、**组件属性(props)**、**组件方法(methods)**、**组件事件(event)**、**插槽(slot)** 这几个部分，以及还需要这个几个部分的注释组成生成描述信息。接下来一步步实现对着几个部分的提取实现。\n\n##  解析.vue 文件\n\n一般一个 .vue 文件分三个部分 **template**、**script**、**style**、**style**部分的内容我们不需要，我们需要分别提取出 **template** 和 **script** 内容。Vue官方开发了 **Vue-template-compiler** 库专门用于 Vue 解析，我们可以直接使用它来解析提取 .vue 文件， **Vue-template-compiler**  提供了一个 **parseComponent** 方法可以对原始的 Vue 文件进行处理。\n\n``` js\nconst compiler = require('vue-template-compiler')\nconst result = compiler.parseComponent(vueStr, [options])\n\n// parseComponent 返回  template、script、style内容，\nexport interface SFCDescriptor {\n  template: SFCBlock | undefined;\n  script: SFCBlock | undefined;\n  styles: SFCBlock[];\n  customBlocks: SFCBlock[];\n}\n```\n\n拿到各个部分文本后，还需要将它转成 ast(抽象语法树)，**template** 部分内容可以直接使用 **Vue-template-compiler** 提供的 **compile** 方法直接生成ast， **script**部分需要借助其他的生成 ast了，这里使用 **babel** 的模块来处理 js 文本。\n\n``` js\nconst compiler = require('vue-template-compiler')\n//vueStr .vue 文件内容\nconst vue = compiler.parseComponent(vueStr)\n\n//生成html部分的 ast \nlet template = compiler.compile(vue.template.content, {\n    preserveWhitespace: false,\n    comments: true // 生成注释信息\n})\n```\n\n使用 **@babel/parser**（Babel解析器,是Babel中使用的JavaScript解析器）来处理 js 文本内容。\n\n``` js\nconst parse = require('@babel/parser');\n\n//生成js部分的 ast\nlet jsAst = parse.parse(vue.script.content, {\n    allowImportExportEverywhere: true \n})\n```\n\n## 提取文档信息\n\n通过上一步的文件解析工作，我们成功获取到了 Vue 的模板 ast 和 script 中的 js 的 ast，下一步我们就可以从中获取我们想要的信息了。这里需要使用到 **@babel/traverse** 这个工具，用来遍历 js ast 的节点工具。可以在这里查看 [ast](https://astexplorer.net/) 的生成内容，方便查看各种节点信息。\n\n``` js\nconst traverse = require('@babel/traverse');\ntraverse.default(jsAst, {\n  enter(path){ // 开始\n\n  },\n  // 支持自定义节点 比如当节点类型 为 ExportDefaultDeclaration 时掉这个方法\n  ExportDefaultDeclaration(){\n\n  }\n})\n```\n\n### 提取组件名称、描述、props、methods、model\n\n**export default** 生成的对应节点类型是 ExportDefaultDeclaration，**declaration** 属性就是对应的组件的 options 了，遍历 declaration 的属性可以获取到 **name**、**props**、**methods**、**model** 等节点信息。\n\n![ast](/images/posts/vue_docs/pic_1627612369570.png)_AST_\n\n示例 \n\n``` js\nlet componentInfo = {}\ntraverse.default(jsAst, {\n  ExportDefaultDeclaration(path){\n    path.node.declaration.properties.forEach(item => {\n        switch (item.key.name) {\n            case 'props':\n                componentInfo.props = extractProps(item) // 提取 props\n                break;\n            case 'methods':\n                componentInfo.methods = extractMethods(item)  // 提取 methods\n                break\n            case 'name':\n                componentInfo.name = item.value.value // 获取组件名称\n                break\n            case 'model':\n                componentInfo.model = extractModel(item)  // 提取 model\n                break\n            default:\n                break;\n        }\n    });\n  }\n})\n```\n\n#### 提取描述\n\njs 中注释分为单行和多行两种，生成 ast 也会生成不同类型的，可以看下面例子。\n\n``` js\n/** \n * 多行备注\n * 用来上传文档信息\n */\n// 单行备注\nexport default {\n}\n// 结尾注释\n```\n\n可以看到会 CommentBlock、 CommentLine 两种类型的节点，还有头部的会放在 leadingComments 里，底部的注释在 trailingComments 里。\n\n![ast](/images/posts/vue_docs/pic_1627613208799.png)_AST_\n\n一般会把组件描述注释放在 **export default**  上面，简单提取注释信息\n\n``` js\n// ExportDefaultDeclaration 插入如下代码 \nif (path.node.leadingComments) {\n    componentInfo.desc = path.node.leadingComments.map(item => {\n        if (item.type === 'CommentLine') {\n            return item.value.trim()\n        } else {\n            return item.value.split('\\n').map(item => item.replace(/[\\s\\*]/g, '')).filter(Boolean)\n        }\n    }).toString()\n}\n```\n\n#### 提取 methods\n因为 **methods** 中的注释需要额外描述 出参、入参等信息需要额外处理，jsdoc 注释规范使用还是比较大众的，这里根据需要自己定义提取规则，还需要提取 **async** 用来标识是否是异步函数。\n\n``` js\n/**\n * 方法描述\n * @param {Bool} type 参数描述\n * @returns 返回值描述\n */\n```\n\n#### 提取 props\nprops 的提取需要区分下面几种情况，default 和 validator 还是提取还是有点麻烦的，validator 校验还可以通过注释简单描述来提取，但是 default 就不好处理了。\n\n``` js\n{\n    propA: Number, // 只有类型\n    propB: [String, Number], // 只有类型但是支持多种\n    propC: { \n      type: String,\n      required: true\n    },\n    propD: {\n      type: Number,\n      default: 100 // 带有默认值 \n    },\n    propE: {\n      type: Object,\n      default () { // 默认值 需要函数返回\n        return { message: 'hello' }\n      }\n    },\n    propF: {\n      default: function () { // 默认值 需要函数返回 和上面的 default 的 ast 节点类型是不同的\n        return { message: 'hello' }\n      }\n      validator: function (value) { // 校验\n        return ['success', 'warning', 'danger'].indexOf(value) !== -1\n      }\n    }\n}\n```\n\n我这里对 default 处理是借助 **@babel/generator** 将 default 转换代码， 通过 eval 转成函数调用返回会默认值。types 是 **@babel/types** 模块，用来判断节点类型的。\n\n``` js\n// 获取Props默认值\nfunction getDefaultVal (node) {\n    if (types.isRegExpLiteral(node) || types.isBooleanLiteral(node) || types.isNumericLiteral(node) || types.isStringLiteral(node)) {\n        return node.value\n    } else if (types.isFunctionExpression(node) || types.isArrowFunctionExpression(node) || types.isObjectMethod(node)) {\n        try {\n            let code = generate.default(types.isObjectMethod(node) ? node.body : node).code\n            let fun = eval(**0,${types.isObjectMethod(node) ? 'function ()' : ''} ${code}**)\n            return JSON.stringify(fun())\n        } catch (error) {\n        }\n    }\n}\n```\n\n#### 提取 model\n这个比较简单，直接获取就可以了。\n\n### 提取组件Events\n\n组件的事件没法直接获取到对应节点，只能通过 **$emit()** 方法来定位事件位置，在 **traverse** 中可以使用 **MemberExpress**(复杂类型节点)，然后通过节点上的属性名是否是 **$emit** 判断是否是事件。\n\n![$emit](/images/posts/vue_docs/pic_1627615451450.png)_事件生成的AST_\n\n可以看到事件名称在 **MemberExpress** 父级上的 **arguments** 里，而备注则在更上一层的里。\n\n``` js\nconst extractEvents = (path) => {\n    // 第一个元素是事件名称\n    const eventName = path.parent.arguments[0]; \n    let comments = path.parentPath.parent.leadingComments\n    return {\n        name: eventName.value,\n        desc: comments ? comments.map(item => item.value.trim()).toString() : '——'\n    }\n}\n\nMemberExpression (path) {\n    // 判断是不是event\n    if (path.node.property.name === '$emit') {\n        let event = extractEvents(path)\n        !componentInfo.events && (componentInfo.events = {});\n        if (componentInfo.events[event.name]) {\n            componentInfo.events[event.name].desc = event.desc ? event.desc : componentInfo.events[event.name].desc\n        } else {\n            componentInfo.events[event.name] = event\n        }\n    }\n}\n```\n\n在成功获取到 Events 后，那么结合 Events、Props、Model，就可以进一步的判断属性是否支持 **.sync** 和 **v-model**。\n\n### 提取组件Slots\n\n首先需要写一个对 Vue 模板的 ast 遍历的函数，**Vue-template-compiler** 没有提供类似于 **@babel/traverse** 用来 遍历 ast 的。\n\n简单实现个遍历模板抽象树函数\n``` js\nconst traverserTemplateAst = (ast, visitor = {}) => {\n    function traverseArray (array, parent) {\n        array.forEach(child => {\n            traverseNode(child, parent);\n        });\n    }\n\n    function traverseNode (node, parent) {\n        visitor.enter && visitor.enter(node, parent);\n        visitor[node.tag] && visitor[node.tag](node, parent);\n        node.children && traverseArray(node.children, node);\n        visitor.exit && visitor.exit(node, parent);\n    }\n\n    traverseNode(ast, null);\n}\n```\n\nVue 模板的 ast 的结构还是比较清晰的，没有 js ast 那么多的类型，只需要区分不同 tag 就可以了。注释会单独一个节点，所以在查找 slot 节点时候，还需要去找它上一个相邻节点，判断是否是注释。\n\n![slot](/images/posts/vue_docs/pic_1627623837793.png)\n\n``` js\ntraverserTemplateAst(template.ast, {\n    slot (node, parent) {\n        !componentInfo.slots && (componentInfo.slots = {})\n        // 获取节点位置\n        let index = parent.children.findIndex(item => item === node)\n        let desc = '无描述', name = '-';\n        if (index > 0) {\n            let tag = parent.children[index - 1]\n            // isComment 判断是否是 注释\n            if (tag.isComment) {\n                desc = tag.text.trim()\n            }\n        }\n        if (node.slotName) name = node.attrsMap.name\n        componentInfo.slots[name] = {\n            name,\n            desc\n        }\n    }\n})\n```\n\n## 结语\n\n到这里简单的实现了自动化生成 Vue 组件信息了，当然还有几种情况还没有考虑进去，例如事件 **$emit** 在 **template** 中，**slot** 在 **render** 函数中时候的情，不过提取这部分实现也是大同小异的了。可以在 [这里查看](//github.com/MaLuns/generate-vue-docs) 本文源码。\n","slug":"generate_vue_docs","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vrc001198lgbaub3mz4","content":"<p>程序员最讨厌的两件事情，第一种是写文档，另一种是别人没有写文档。有没有直接根据 vue 组件生成文档的呢？当然是有的的。但第三方使用起来不一定能和现有项目结合使用，往往需要额外的注释用来标记提取信息。<span id=\"more\"></span><br>使用第三方的一些比较常见问题</p>\n<ul>\n<li>文档提取信息不全面，可能有些信息你需要提取但是它又不支持。这种情况下就只能修改三方的插件源码了。</li>\n<li>需要额为的注释信息来标记，例如 <strong>vuese</strong> 需要给方法 打 <strong>@vuese</strong>、**@arg** 等标记来提供方法信息。</li>\n</ul>\n<p>俗话说自己动手丰衣足食，打造自己的 vue 文档生成工具与自己项目结合使用。一个组件文档大致需要提供 <strong>组件名称和描述(name)<strong>、</strong>组件属性(props)<strong>、</strong>组件方法(methods)<strong>、</strong>组件事件(event)<strong>、</strong>插槽(slot)</strong> 这几个部分，以及还需要这个几个部分的注释组成生成描述信息。接下来一步步实现对着几个部分的提取实现。</p>\n<h2 id=\"解析-vue-文件\"><a href=\"#解析-vue-文件\" class=\"headerlink\" title=\"解析.vue 文件\"></a>解析.vue 文件</h2><p>一般一个 .vue 文件分三个部分 <strong>template</strong>、<strong>script</strong>、<strong>style</strong>、<strong>style</strong>部分的内容我们不需要，我们需要分别提取出 <strong>template</strong> 和 <strong>script</strong> 内容。Vue官方开发了 <strong>Vue-template-compiler</strong> 库专门用于 Vue 解析，我们可以直接使用它来解析提取 .vue 文件， <strong>Vue-template-compiler</strong>  提供了一个 <strong>parseComponent</strong> 方法可以对原始的 Vue 文件进行处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = compiler.<span class=\"title function_\">parseComponent</span>(vueStr, [options])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// parseComponent 返回  template、script、style内容，</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface <span class=\"title class_\">SFCDescriptor</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"title class_\">SFCBlock</span> | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"attr\">script</span>: <span class=\"title class_\">SFCBlock</span> | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"attr\">styles</span>: <span class=\"title class_\">SFCBlock</span>[];</span><br><span class=\"line\">  <span class=\"attr\">customBlocks</span>: <span class=\"title class_\">SFCBlock</span>[];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>拿到各个部分文本后，还需要将它转成 ast(抽象语法树)，<strong>template</strong> 部分内容可以直接使用 <strong>Vue-template-compiler</strong> 提供的 <strong>compile</strong> 方法直接生成ast， <strong>script</strong>部分需要借助其他的生成 ast了，这里使用 <strong>babel</strong> 的模块来处理 js 文本。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//vueStr .vue 文件内容</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> vue = compiler.<span class=\"title function_\">parseComponent</span>(vueStr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生成html部分的 ast </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> template = compiler.<span class=\"title function_\">compile</span>(vue.<span class=\"property\">template</span>.<span class=\"property\">content</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">preserveWhitespace</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">comments</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 生成注释信息</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用 <strong>@babel&#x2F;parser</strong>（Babel解析器,是Babel中使用的JavaScript解析器）来处理 js 文本内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parse = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@babel/parser&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生成js部分的 ast</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> jsAst = parse.<span class=\"title function_\">parse</span>(vue.<span class=\"property\">script</span>.<span class=\"property\">content</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">allowImportExportEverywhere</span>: <span class=\"literal\">true</span> </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"提取文档信息\"><a href=\"#提取文档信息\" class=\"headerlink\" title=\"提取文档信息\"></a>提取文档信息</h2><p>通过上一步的文件解析工作，我们成功获取到了 Vue 的模板 ast 和 script 中的 js 的 ast，下一步我们就可以从中获取我们想要的信息了。这里需要使用到 <strong>@babel&#x2F;traverse</strong> 这个工具，用来遍历 js ast 的节点工具。可以在这里查看 <a href=\"https://astexplorer.net/\">ast</a> 的生成内容，方便查看各种节点信息。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@babel/traverse&#x27;</span>);</span><br><span class=\"line\">traverse.<span class=\"title function_\">default</span>(jsAst, &#123;</span><br><span class=\"line\">  <span class=\"title function_\">enter</span>(<span class=\"params\">path</span>)&#123; <span class=\"comment\">// 开始</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 支持自定义节点 比如当节点类型 为 ExportDefaultDeclaration 时掉这个方法</span></span><br><span class=\"line\">  <span class=\"title class_\">ExportDefaultDeclaration</span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"提取组件名称、描述、props、methods、model\"><a href=\"#提取组件名称、描述、props、methods、model\" class=\"headerlink\" title=\"提取组件名称、描述、props、methods、model\"></a>提取组件名称、描述、props、methods、model</h3><p><strong>export default</strong> 生成的对应节点类型是 ExportDefaultDeclaration，<strong>declaration</strong> 属性就是对应的组件的 options 了，遍历 declaration 的属性可以获取到 <strong>name</strong>、<strong>props</strong>、<strong>methods</strong>、<strong>model</strong> 等节点信息。</p>\n<p><img src=\"/images/posts/vue_docs/pic_1627612369570.png\" alt=\"ast\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><em>AST</em></p>\n<p>示例 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> componentInfo = &#123;&#125;</span><br><span class=\"line\">traverse.<span class=\"title function_\">default</span>(jsAst, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">ExportDefaultDeclaration</span>(path)&#123;</span><br><span class=\"line\">    path.<span class=\"property\">node</span>.<span class=\"property\">declaration</span>.<span class=\"property\">properties</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (item.<span class=\"property\">key</span>.<span class=\"property\">name</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;props&#x27;</span>:</span><br><span class=\"line\">                componentInfo.<span class=\"property\">props</span> = <span class=\"title function_\">extractProps</span>(item) <span class=\"comment\">// 提取 props</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;methods&#x27;</span>:</span><br><span class=\"line\">                componentInfo.<span class=\"property\">methods</span> = <span class=\"title function_\">extractMethods</span>(item)  <span class=\"comment\">// 提取 methods</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;name&#x27;</span>:</span><br><span class=\"line\">                componentInfo.<span class=\"property\">name</span> = item.<span class=\"property\">value</span>.<span class=\"property\">value</span> <span class=\"comment\">// 获取组件名称</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;model&#x27;</span>:</span><br><span class=\"line\">                componentInfo.<span class=\"property\">model</span> = <span class=\"title function_\">extractModel</span>(item)  <span class=\"comment\">// 提取 model</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"attr\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提取描述\"><a href=\"#提取描述\" class=\"headerlink\" title=\"提取描述\"></a>提取描述</h4><p>js 中注释分为单行和多行两种，生成 ast 也会生成不同类型的，可以看下面例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 多行备注</span></span><br><span class=\"line\"><span class=\"comment\"> * 用来上传文档信息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 单行备注</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结尾注释</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到会 CommentBlock、 CommentLine 两种类型的节点，还有头部的会放在 leadingComments 里，底部的注释在 trailingComments 里。</p>\n<p><img src=\"/images/posts/vue_docs/pic_1627613208799.png\" alt=\"ast\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><em>AST</em></p>\n<p>一般会把组件描述注释放在 <strong>export default</strong>  上面，简单提取注释信息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ExportDefaultDeclaration 插入如下代码 </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (path.<span class=\"property\">node</span>.<span class=\"property\">leadingComments</span>) &#123;</span><br><span class=\"line\">    componentInfo.<span class=\"property\">desc</span> = path.<span class=\"property\">node</span>.<span class=\"property\">leadingComments</span>.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.<span class=\"property\">type</span> === <span class=\"string\">&#x27;CommentLine&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item.<span class=\"property\">value</span>.<span class=\"title function_\">trim</span>()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item.<span class=\"property\">value</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;\\n&#x27;</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/[\\s\\*]/g</span>, <span class=\"string\">&#x27;&#x27;</span>)).<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提取-methods\"><a href=\"#提取-methods\" class=\"headerlink\" title=\"提取 methods\"></a>提取 methods</h4><p>因为 <strong>methods</strong> 中的注释需要额外描述 出参、入参等信息需要额外处理，jsdoc 注释规范使用还是比较大众的，这里根据需要自己定义提取规则，还需要提取 <strong>async</strong> 用来标识是否是异步函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 方法描述</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Bool</span>&#125; type 参数描述</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 返回值描述</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提取-props\"><a href=\"#提取-props\" class=\"headerlink\" title=\"提取 props\"></a>提取 props</h4><p>props 的提取需要区分下面几种情况，default 和 validator 还是提取还是有点麻烦的，validator 校验还可以通过注释简单描述来提取，但是 default 就不好处理了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">propA</span>: <span class=\"title class_\">Number</span>, <span class=\"comment\">// 只有类型</span></span><br><span class=\"line\">    <span class=\"attr\">propB</span>: [<span class=\"title class_\">String</span>, <span class=\"title class_\">Number</span>], <span class=\"comment\">// 只有类型但是支持多种</span></span><br><span class=\"line\">    <span class=\"attr\">propC</span>: &#123; </span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span><br><span class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">propD</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"title class_\">Number</span>,</span><br><span class=\"line\">      <span class=\"attr\">default</span>: <span class=\"number\">100</span> <span class=\"comment\">// 带有默认值 </span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">propE</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"title class_\">Object</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span> () &#123; <span class=\"comment\">// 默认值 需要函数返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;hello&#x27;</span> &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">propF</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">default</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"comment\">// 默认值 需要函数返回 和上面的 default 的 ast 节点类型是不同的</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;hello&#x27;</span> &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"attr\">validator</span>: <span class=\"keyword\">function</span> (<span class=\"params\">value</span>) &#123; <span class=\"comment\">// 校验</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;success&#x27;</span>, <span class=\"string\">&#x27;warning&#x27;</span>, <span class=\"string\">&#x27;danger&#x27;</span>].<span class=\"title function_\">indexOf</span>(value) !== -<span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我这里对 default 处理是借助 <strong>@babel&#x2F;generator</strong> 将 default 转换代码， 通过 eval 转成函数调用返回会默认值。types 是 <strong>@babel&#x2F;types</strong> 模块，用来判断节点类型的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取Props默认值</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getDefaultVal</span> (node) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (types.<span class=\"title function_\">isRegExpLiteral</span>(node) || types.<span class=\"title function_\">isBooleanLiteral</span>(node) || types.<span class=\"title function_\">isNumericLiteral</span>(node) || types.<span class=\"title function_\">isStringLiteral</span>(node)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (types.<span class=\"title function_\">isFunctionExpression</span>(node) || types.<span class=\"title function_\">isArrowFunctionExpression</span>(node) || types.<span class=\"title function_\">isObjectMethod</span>(node)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> code = generate.<span class=\"title function_\">default</span>(types.<span class=\"title function_\">isObjectMethod</span>(node) ? node.<span class=\"property\">body</span> : node).<span class=\"property\">code</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> fun = <span class=\"built_in\">eval</span>(**<span class=\"number\">0</span>,$&#123;types.<span class=\"title function_\">isObjectMethod</span>(node) ? <span class=\"string\">&#x27;function ()&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>&#125; $&#123;code&#125;**)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"title function_\">fun</span>())</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提取-model\"><a href=\"#提取-model\" class=\"headerlink\" title=\"提取 model\"></a>提取 model</h4><p>这个比较简单，直接获取就可以了。</p>\n<h3 id=\"提取组件Events\"><a href=\"#提取组件Events\" class=\"headerlink\" title=\"提取组件Events\"></a>提取组件Events</h3><p>组件的事件没法直接获取到对应节点，只能通过 <strong>$emit()</strong> 方法来定位事件位置，在 <strong>traverse</strong> 中可以使用 <strong>MemberExpress</strong>(复杂类型节点)，然后通过节点上的属性名是否是 <strong>$emit</strong> 判断是否是事件。</p>\n<p><img src=\"/images/posts/vue_docs/pic_1627615451450.png\" alt=\"$emit\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><em>事件生成的AST</em></p>\n<p>可以看到事件名称在 <strong>MemberExpress</strong> 父级上的 <strong>arguments</strong> 里，而备注则在更上一层的里。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">extractEvents</span> = (<span class=\"params\">path</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一个元素是事件名称</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> eventName = path.<span class=\"property\">parent</span>.<span class=\"property\">arguments</span>[<span class=\"number\">0</span>]; </span><br><span class=\"line\">    <span class=\"keyword\">let</span> comments = path.<span class=\"property\">parentPath</span>.<span class=\"property\">parent</span>.<span class=\"property\">leadingComments</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: eventName.<span class=\"property\">value</span>,</span><br><span class=\"line\">        <span class=\"attr\">desc</span>: comments ? comments.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">value</span>.<span class=\"title function_\">trim</span>()).<span class=\"title function_\">toString</span>() : <span class=\"string\">&#x27;——&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MemberExpression</span> (path) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是不是event</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"property\">node</span>.<span class=\"property\">property</span>.<span class=\"property\">name</span> === <span class=\"string\">&#x27;$emit&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> event = <span class=\"title function_\">extractEvents</span>(path)</span><br><span class=\"line\">        !componentInfo.<span class=\"property\">events</span> &amp;&amp; (componentInfo.<span class=\"property\">events</span> = &#123;&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (componentInfo.<span class=\"property\">events</span>[event.<span class=\"property\">name</span>]) &#123;</span><br><span class=\"line\">            componentInfo.<span class=\"property\">events</span>[event.<span class=\"property\">name</span>].<span class=\"property\">desc</span> = event.<span class=\"property\">desc</span> ? event.<span class=\"property\">desc</span> : componentInfo.<span class=\"property\">events</span>[event.<span class=\"property\">name</span>].<span class=\"property\">desc</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            componentInfo.<span class=\"property\">events</span>[event.<span class=\"property\">name</span>] = event</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在成功获取到 Events 后，那么结合 Events、Props、Model，就可以进一步的判断属性是否支持 <strong>.sync</strong> 和 <strong>v-model</strong>。</p>\n<h3 id=\"提取组件Slots\"><a href=\"#提取组件Slots\" class=\"headerlink\" title=\"提取组件Slots\"></a>提取组件Slots</h3><p>首先需要写一个对 Vue 模板的 ast 遍历的函数，<strong>Vue-template-compiler</strong> 没有提供类似于 <strong>@babel&#x2F;traverse</strong> 用来 遍历 ast 的。</p>\n<p>简单实现个遍历模板抽象树函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">traverserTemplateAst</span> = (<span class=\"params\">ast, visitor = &#123;&#125;</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">traverseArray</span> (array, parent) &#123;</span><br><span class=\"line\">        array.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">traverseNode</span>(child, parent);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">traverseNode</span> (node, parent) &#123;</span><br><span class=\"line\">        visitor.<span class=\"property\">enter</span> &amp;&amp; visitor.<span class=\"title function_\">enter</span>(node, parent);</span><br><span class=\"line\">        visitor[node.<span class=\"property\">tag</span>] &amp;&amp; visitor[node.<span class=\"property\">tag</span>](node, parent);</span><br><span class=\"line\">        node.<span class=\"property\">children</span> &amp;&amp; <span class=\"title function_\">traverseArray</span>(node.<span class=\"property\">children</span>, node);</span><br><span class=\"line\">        visitor.<span class=\"property\">exit</span> &amp;&amp; visitor.<span class=\"title function_\">exit</span>(node, parent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">traverseNode</span>(ast, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Vue 模板的 ast 的结构还是比较清晰的，没有 js ast 那么多的类型，只需要区分不同 tag 就可以了。注释会单独一个节点，所以在查找 slot 节点时候，还需要去找它上一个相邻节点，判断是否是注释。</p>\n<p><img src=\"/images/posts/vue_docs/pic_1627623837793.png\" alt=\"slot\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">traverserTemplateAst</span>(template.<span class=\"property\">ast</span>, &#123;</span><br><span class=\"line\">    slot (node, parent) &#123;</span><br><span class=\"line\">        !componentInfo.<span class=\"property\">slots</span> &amp;&amp; (componentInfo.<span class=\"property\">slots</span> = &#123;&#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 获取节点位置</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = parent.<span class=\"property\">children</span>.<span class=\"title function_\">findIndex</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item === node)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> desc = <span class=\"string\">&#x27;无描述&#x27;</span>, name = <span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> tag = parent.<span class=\"property\">children</span>[index - <span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"comment\">// isComment 判断是否是 注释</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tag.<span class=\"property\">isComment</span>) &#123;</span><br><span class=\"line\">                desc = tag.<span class=\"property\">text</span>.<span class=\"title function_\">trim</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.<span class=\"property\">slotName</span>) name = node.<span class=\"property\">attrsMap</span>.<span class=\"property\">name</span></span><br><span class=\"line\">        componentInfo.<span class=\"property\">slots</span>[name] = &#123;</span><br><span class=\"line\">            name,</span><br><span class=\"line\">            desc</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>到这里简单的实现了自动化生成 Vue 组件信息了，当然还有几种情况还没有考虑进去，例如事件 <strong>$emit</strong> 在 <strong>template</strong> 中，<strong>slot</strong> 在 <strong>render</strong> 函数中时候的情，不过提取这部分实现也是大同小异的了。可以在 <a href=\"//github.com/MaLuns/generate-vue-docs\">这里查看</a> 本文源码。</p>\n","excerpt":"<p>程序员最讨厌的两件事情，第一种是写文档，另一种是别人没有写文档。有没有直接根据 vue 组件生成文档的呢？当然是有的的。但第三方使用起来不一定能和现有项目结合使用，往往需要额外的注释用来标记提取信息。","more":"<br>使用第三方的一些比较常见问题</p>\n<ul>\n<li>文档提取信息不全面，可能有些信息你需要提取但是它又不支持。这种情况下就只能修改三方的插件源码了。</li>\n<li>需要额为的注释信息来标记，例如 <strong>vuese</strong> 需要给方法 打 <strong>@vuese</strong>、**@arg** 等标记来提供方法信息。</li>\n</ul>\n<p>俗话说自己动手丰衣足食，打造自己的 vue 文档生成工具与自己项目结合使用。一个组件文档大致需要提供 <strong>组件名称和描述(name)<strong>、</strong>组件属性(props)<strong>、</strong>组件方法(methods)<strong>、</strong>组件事件(event)<strong>、</strong>插槽(slot)</strong> 这几个部分，以及还需要这个几个部分的注释组成生成描述信息。接下来一步步实现对着几个部分的提取实现。</p>\n<h2 id=\"解析-vue-文件\"><a href=\"#解析-vue-文件\" class=\"headerlink\" title=\"解析.vue 文件\"></a>解析.vue 文件</h2><p>一般一个 .vue 文件分三个部分 <strong>template</strong>、<strong>script</strong>、<strong>style</strong>、<strong>style</strong>部分的内容我们不需要，我们需要分别提取出 <strong>template</strong> 和 <strong>script</strong> 内容。Vue官方开发了 <strong>Vue-template-compiler</strong> 库专门用于 Vue 解析，我们可以直接使用它来解析提取 .vue 文件， <strong>Vue-template-compiler</strong>  提供了一个 <strong>parseComponent</strong> 方法可以对原始的 Vue 文件进行处理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = compiler.<span class=\"title function_\">parseComponent</span>(vueStr, [options])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// parseComponent 返回  template、script、style内容，</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface <span class=\"title class_\">SFCDescriptor</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"title class_\">SFCBlock</span> | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"attr\">script</span>: <span class=\"title class_\">SFCBlock</span> | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"attr\">styles</span>: <span class=\"title class_\">SFCBlock</span>[];</span><br><span class=\"line\">  <span class=\"attr\">customBlocks</span>: <span class=\"title class_\">SFCBlock</span>[];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>拿到各个部分文本后，还需要将它转成 ast(抽象语法树)，<strong>template</strong> 部分内容可以直接使用 <strong>Vue-template-compiler</strong> 提供的 <strong>compile</strong> 方法直接生成ast， <strong>script</strong>部分需要借助其他的生成 ast了，这里使用 <strong>babel</strong> 的模块来处理 js 文本。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compiler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-template-compiler&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//vueStr .vue 文件内容</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> vue = compiler.<span class=\"title function_\">parseComponent</span>(vueStr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生成html部分的 ast </span></span><br><span class=\"line\"><span class=\"keyword\">let</span> template = compiler.<span class=\"title function_\">compile</span>(vue.<span class=\"property\">template</span>.<span class=\"property\">content</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">preserveWhitespace</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">comments</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 生成注释信息</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>使用 <strong>@babel&#x2F;parser</strong>（Babel解析器,是Babel中使用的JavaScript解析器）来处理 js 文本内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parse = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@babel/parser&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//生成js部分的 ast</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> jsAst = parse.<span class=\"title function_\">parse</span>(vue.<span class=\"property\">script</span>.<span class=\"property\">content</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">allowImportExportEverywhere</span>: <span class=\"literal\">true</span> </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"提取文档信息\"><a href=\"#提取文档信息\" class=\"headerlink\" title=\"提取文档信息\"></a>提取文档信息</h2><p>通过上一步的文件解析工作，我们成功获取到了 Vue 的模板 ast 和 script 中的 js 的 ast，下一步我们就可以从中获取我们想要的信息了。这里需要使用到 <strong>@babel&#x2F;traverse</strong> 这个工具，用来遍历 js ast 的节点工具。可以在这里查看 <a href=\"https://astexplorer.net/\">ast</a> 的生成内容，方便查看各种节点信息。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> traverse = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@babel/traverse&#x27;</span>);</span><br><span class=\"line\">traverse.<span class=\"title function_\">default</span>(jsAst, &#123;</span><br><span class=\"line\">  <span class=\"title function_\">enter</span>(<span class=\"params\">path</span>)&#123; <span class=\"comment\">// 开始</span></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 支持自定义节点 比如当节点类型 为 ExportDefaultDeclaration 时掉这个方法</span></span><br><span class=\"line\">  <span class=\"title class_\">ExportDefaultDeclaration</span>()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"提取组件名称、描述、props、methods、model\"><a href=\"#提取组件名称、描述、props、methods、model\" class=\"headerlink\" title=\"提取组件名称、描述、props、methods、model\"></a>提取组件名称、描述、props、methods、model</h3><p><strong>export default</strong> 生成的对应节点类型是 ExportDefaultDeclaration，<strong>declaration</strong> 属性就是对应的组件的 options 了，遍历 declaration 的属性可以获取到 <strong>name</strong>、<strong>props</strong>、<strong>methods</strong>、<strong>model</strong> 等节点信息。</p>\n<p><img src=\"/images/posts/vue_docs/pic_1627612369570.png\" alt=\"ast\"><em>AST</em></p>\n<p>示例 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> componentInfo = &#123;&#125;</span><br><span class=\"line\">traverse.<span class=\"title function_\">default</span>(jsAst, &#123;</span><br><span class=\"line\">  <span class=\"title class_\">ExportDefaultDeclaration</span>(path)&#123;</span><br><span class=\"line\">    path.<span class=\"property\">node</span>.<span class=\"property\">declaration</span>.<span class=\"property\">properties</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (item.<span class=\"property\">key</span>.<span class=\"property\">name</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;props&#x27;</span>:</span><br><span class=\"line\">                componentInfo.<span class=\"property\">props</span> = <span class=\"title function_\">extractProps</span>(item) <span class=\"comment\">// 提取 props</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;methods&#x27;</span>:</span><br><span class=\"line\">                componentInfo.<span class=\"property\">methods</span> = <span class=\"title function_\">extractMethods</span>(item)  <span class=\"comment\">// 提取 methods</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;name&#x27;</span>:</span><br><span class=\"line\">                componentInfo.<span class=\"property\">name</span> = item.<span class=\"property\">value</span>.<span class=\"property\">value</span> <span class=\"comment\">// 获取组件名称</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;model&#x27;</span>:</span><br><span class=\"line\">                componentInfo.<span class=\"property\">model</span> = <span class=\"title function_\">extractModel</span>(item)  <span class=\"comment\">// 提取 model</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"attr\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提取描述\"><a href=\"#提取描述\" class=\"headerlink\" title=\"提取描述\"></a>提取描述</h4><p>js 中注释分为单行和多行两种，生成 ast 也会生成不同类型的，可以看下面例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * 多行备注</span></span><br><span class=\"line\"><span class=\"comment\"> * 用来上传文档信息</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 单行备注</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结尾注释</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到会 CommentBlock、 CommentLine 两种类型的节点，还有头部的会放在 leadingComments 里，底部的注释在 trailingComments 里。</p>\n<p><img src=\"/images/posts/vue_docs/pic_1627613208799.png\" alt=\"ast\"><em>AST</em></p>\n<p>一般会把组件描述注释放在 <strong>export default</strong>  上面，简单提取注释信息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ExportDefaultDeclaration 插入如下代码 </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (path.<span class=\"property\">node</span>.<span class=\"property\">leadingComments</span>) &#123;</span><br><span class=\"line\">    componentInfo.<span class=\"property\">desc</span> = path.<span class=\"property\">node</span>.<span class=\"property\">leadingComments</span>.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.<span class=\"property\">type</span> === <span class=\"string\">&#x27;CommentLine&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item.<span class=\"property\">value</span>.<span class=\"title function_\">trim</span>()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> item.<span class=\"property\">value</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;\\n&#x27;</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/[\\s\\*]/g</span>, <span class=\"string\">&#x27;&#x27;</span>)).<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提取-methods\"><a href=\"#提取-methods\" class=\"headerlink\" title=\"提取 methods\"></a>提取 methods</h4><p>因为 <strong>methods</strong> 中的注释需要额外描述 出参、入参等信息需要额外处理，jsdoc 注释规范使用还是比较大众的，这里根据需要自己定义提取规则，还需要提取 <strong>async</strong> 用来标识是否是异步函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 方法描述</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Bool</span>&#125; type 参数描述</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> 返回值描述</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提取-props\"><a href=\"#提取-props\" class=\"headerlink\" title=\"提取 props\"></a>提取 props</h4><p>props 的提取需要区分下面几种情况，default 和 validator 还是提取还是有点麻烦的，validator 校验还可以通过注释简单描述来提取，但是 default 就不好处理了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">propA</span>: <span class=\"title class_\">Number</span>, <span class=\"comment\">// 只有类型</span></span><br><span class=\"line\">    <span class=\"attr\">propB</span>: [<span class=\"title class_\">String</span>, <span class=\"title class_\">Number</span>], <span class=\"comment\">// 只有类型但是支持多种</span></span><br><span class=\"line\">    <span class=\"attr\">propC</span>: &#123; </span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"title class_\">String</span>,</span><br><span class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">propD</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"title class_\">Number</span>,</span><br><span class=\"line\">      <span class=\"attr\">default</span>: <span class=\"number\">100</span> <span class=\"comment\">// 带有默认值 </span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">propE</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"title class_\">Object</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span> () &#123; <span class=\"comment\">// 默认值 需要函数返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;hello&#x27;</span> &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">propF</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">default</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"comment\">// 默认值 需要函数返回 和上面的 default 的 ast 节点类型是不同的</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">message</span>: <span class=\"string\">&#x27;hello&#x27;</span> &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"attr\">validator</span>: <span class=\"keyword\">function</span> (<span class=\"params\">value</span>) &#123; <span class=\"comment\">// 校验</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;success&#x27;</span>, <span class=\"string\">&#x27;warning&#x27;</span>, <span class=\"string\">&#x27;danger&#x27;</span>].<span class=\"title function_\">indexOf</span>(value) !== -<span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我这里对 default 处理是借助 <strong>@babel&#x2F;generator</strong> 将 default 转换代码， 通过 eval 转成函数调用返回会默认值。types 是 <strong>@babel&#x2F;types</strong> 模块，用来判断节点类型的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取Props默认值</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getDefaultVal</span> (node) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (types.<span class=\"title function_\">isRegExpLiteral</span>(node) || types.<span class=\"title function_\">isBooleanLiteral</span>(node) || types.<span class=\"title function_\">isNumericLiteral</span>(node) || types.<span class=\"title function_\">isStringLiteral</span>(node)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.<span class=\"property\">value</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (types.<span class=\"title function_\">isFunctionExpression</span>(node) || types.<span class=\"title function_\">isArrowFunctionExpression</span>(node) || types.<span class=\"title function_\">isObjectMethod</span>(node)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> code = generate.<span class=\"title function_\">default</span>(types.<span class=\"title function_\">isObjectMethod</span>(node) ? node.<span class=\"property\">body</span> : node).<span class=\"property\">code</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> fun = <span class=\"built_in\">eval</span>(**<span class=\"number\">0</span>,$&#123;types.<span class=\"title function_\">isObjectMethod</span>(node) ? <span class=\"string\">&#x27;function ()&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>&#125; $&#123;code&#125;**)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"title function_\">fun</span>())</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提取-model\"><a href=\"#提取-model\" class=\"headerlink\" title=\"提取 model\"></a>提取 model</h4><p>这个比较简单，直接获取就可以了。</p>\n<h3 id=\"提取组件Events\"><a href=\"#提取组件Events\" class=\"headerlink\" title=\"提取组件Events\"></a>提取组件Events</h3><p>组件的事件没法直接获取到对应节点，只能通过 <strong>$emit()</strong> 方法来定位事件位置，在 <strong>traverse</strong> 中可以使用 <strong>MemberExpress</strong>(复杂类型节点)，然后通过节点上的属性名是否是 <strong>$emit</strong> 判断是否是事件。</p>\n<p><img src=\"/images/posts/vue_docs/pic_1627615451450.png\" alt=\"$emit\"><em>事件生成的AST</em></p>\n<p>可以看到事件名称在 <strong>MemberExpress</strong> 父级上的 <strong>arguments</strong> 里，而备注则在更上一层的里。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">extractEvents</span> = (<span class=\"params\">path</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一个元素是事件名称</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> eventName = path.<span class=\"property\">parent</span>.<span class=\"property\">arguments</span>[<span class=\"number\">0</span>]; </span><br><span class=\"line\">    <span class=\"keyword\">let</span> comments = path.<span class=\"property\">parentPath</span>.<span class=\"property\">parent</span>.<span class=\"property\">leadingComments</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: eventName.<span class=\"property\">value</span>,</span><br><span class=\"line\">        <span class=\"attr\">desc</span>: comments ? comments.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">value</span>.<span class=\"title function_\">trim</span>()).<span class=\"title function_\">toString</span>() : <span class=\"string\">&#x27;——&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">MemberExpression</span> (path) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是不是event</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"property\">node</span>.<span class=\"property\">property</span>.<span class=\"property\">name</span> === <span class=\"string\">&#x27;$emit&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> event = <span class=\"title function_\">extractEvents</span>(path)</span><br><span class=\"line\">        !componentInfo.<span class=\"property\">events</span> &amp;&amp; (componentInfo.<span class=\"property\">events</span> = &#123;&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (componentInfo.<span class=\"property\">events</span>[event.<span class=\"property\">name</span>]) &#123;</span><br><span class=\"line\">            componentInfo.<span class=\"property\">events</span>[event.<span class=\"property\">name</span>].<span class=\"property\">desc</span> = event.<span class=\"property\">desc</span> ? event.<span class=\"property\">desc</span> : componentInfo.<span class=\"property\">events</span>[event.<span class=\"property\">name</span>].<span class=\"property\">desc</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            componentInfo.<span class=\"property\">events</span>[event.<span class=\"property\">name</span>] = event</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在成功获取到 Events 后，那么结合 Events、Props、Model，就可以进一步的判断属性是否支持 <strong>.sync</strong> 和 <strong>v-model</strong>。</p>\n<h3 id=\"提取组件Slots\"><a href=\"#提取组件Slots\" class=\"headerlink\" title=\"提取组件Slots\"></a>提取组件Slots</h3><p>首先需要写一个对 Vue 模板的 ast 遍历的函数，<strong>Vue-template-compiler</strong> 没有提供类似于 <strong>@babel&#x2F;traverse</strong> 用来 遍历 ast 的。</p>\n<p>简单实现个遍历模板抽象树函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">traverserTemplateAst</span> = (<span class=\"params\">ast, visitor = &#123;&#125;</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">traverseArray</span> (array, parent) &#123;</span><br><span class=\"line\">        array.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">traverseNode</span>(child, parent);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">traverseNode</span> (node, parent) &#123;</span><br><span class=\"line\">        visitor.<span class=\"property\">enter</span> &amp;&amp; visitor.<span class=\"title function_\">enter</span>(node, parent);</span><br><span class=\"line\">        visitor[node.<span class=\"property\">tag</span>] &amp;&amp; visitor[node.<span class=\"property\">tag</span>](node, parent);</span><br><span class=\"line\">        node.<span class=\"property\">children</span> &amp;&amp; <span class=\"title function_\">traverseArray</span>(node.<span class=\"property\">children</span>, node);</span><br><span class=\"line\">        visitor.<span class=\"property\">exit</span> &amp;&amp; visitor.<span class=\"title function_\">exit</span>(node, parent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">traverseNode</span>(ast, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Vue 模板的 ast 的结构还是比较清晰的，没有 js ast 那么多的类型，只需要区分不同 tag 就可以了。注释会单独一个节点，所以在查找 slot 节点时候，还需要去找它上一个相邻节点，判断是否是注释。</p>\n<p><img src=\"/images/posts/vue_docs/pic_1627623837793.png\" alt=\"slot\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">traverserTemplateAst</span>(template.<span class=\"property\">ast</span>, &#123;</span><br><span class=\"line\">    slot (node, parent) &#123;</span><br><span class=\"line\">        !componentInfo.<span class=\"property\">slots</span> &amp;&amp; (componentInfo.<span class=\"property\">slots</span> = &#123;&#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 获取节点位置</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = parent.<span class=\"property\">children</span>.<span class=\"title function_\">findIndex</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item === node)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> desc = <span class=\"string\">&#x27;无描述&#x27;</span>, name = <span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> tag = parent.<span class=\"property\">children</span>[index - <span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"comment\">// isComment 判断是否是 注释</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tag.<span class=\"property\">isComment</span>) &#123;</span><br><span class=\"line\">                desc = tag.<span class=\"property\">text</span>.<span class=\"title function_\">trim</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.<span class=\"property\">slotName</span>) name = node.<span class=\"property\">attrsMap</span>.<span class=\"property\">name</span></span><br><span class=\"line\">        componentInfo.<span class=\"property\">slots</span>[name] = &#123;</span><br><span class=\"line\">            name,</span><br><span class=\"line\">            desc</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>到这里简单的实现了自动化生成 Vue 组件信息了，当然还有几种情况还没有考虑进去，例如事件 <strong>$emit</strong> 在 <strong>template</strong> 中，<strong>slot</strong> 在 <strong>render</strong> 函数中时候的情，不过提取这部分实现也是大同小异的了。可以在 <a href=\"//github.com/MaLuns/generate-vue-docs\">这里查看</a> 本文源码。</p>"},{"title":"手撸 Grid 拖拽布局","date":"2023-11-30T12:07:05.000Z","description":null,"keywords":"grid,拖拽布局，vue","_content":"\n最近有个需求需要实现自定义首页布局，需要将屏幕按照 6 列 4 行进行等分成多个格子，然后将组件拖拽对应格子进行渲染展示。\n\n![](/images/posts/grid_layout/demo.png)_示例_\n\n<!--more -->\n\n对比一些已有的插件，发现想要实现产品的交互效果，没有现成可用的。本身功能并不是太过复杂，于是决定自己基于 vue 手撸一个简易的 Grid 拖拽布局。\n\n完整源码在此，[在线体验](https://stackblitz.com/edit/vitejs-vite-rkwugn)\n\n## 概况\n\n需要实现 Grid 拖拽布局，主要了解这两个东西就行\n\n-   拖放 API，关于拖放 API 介绍文章有很多 ，可以直接看 MDN 里[拖放 API](https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API)介绍，可以说很详细了。\n-   Grid 布局， Grid 布局与 Flex 布局很相似，但是 Grid 像是二维布局，Flex 则为一维布局，Grid 布局远比 Flex 布局强大。[MDN 关于网格布局介绍](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout)\n\n需要实现主要包含：\n\n-   组件物料栏拖拽到布局容器\n-   布局容器 Grid 布局\n-   放置时是否重叠判断\n-   拖拽时样式\n-   放置后样式\n-   容器内二次拖拽\n\n## 拖放操作实现\n\n拖拽中主要使用到的事件如下\n\n-   被拖拽元素事件：\n\n| 事件      | 触发时刻                                   |\n| --------- | ------------------------------------------ |\n| dragstart | 当用户开始拖拽一个元素或选中的文本时触发。 |\n| drag      | 当拖拽元素或选中的文本时触发。             |\n| dragend   | 当拖拽操作结束时触发                       |\n\n-   放置容器事件：\n\n| 事件      | 触发时刻                                         |\n| --------- | ------------------------------------------------ |\n| dragenter | 当拖拽元素或选中的文本到一个可释放目标时触发。   |\n| dragleave | 当拖拽元素或选中的文本离开一个可释放目标时触发。 |\n| dragover  | 当元素或选中的文本被拖到一个可释放目标上时触发。 |\n| drop      | 当元素或选中的文本在可释放目标上被释放时触发。   |\n\n### 可拖拽元素\n\n让一个元素能够拖拽只需要给元素设置 **draggable=\"true\"** 即可拖拽，拖拽事件 API 提供了 **DataTransfer** 对象，可以用于设置拖拽数据信息，但是仅仅只能 **drop** 事件中获取到。因为我们需要在拖拽中就需要获取到拖拽信息，用来显示拖拽时样式，所以需要自己处理这些信息存储起来，以便读取。\n\n需要处理主要是，在拖拽时将 将当前元素信息设置到 **dragStore** 中，结束时清空当前信息。\n\n```html\n<script setup lang=\"ts\">\n  import { dragStore } from \"./drag\";\n\n  const props = defineProps<{\n    data: DragItem;\n    groupName?: string;\n  }>();\n\n  const onDragstart = (e) => dragStore.set(props.groupName, { ...props.data });\n  const onDragend = () => dragStore.remove(props.groupName);\n</script>\n<template>\n  <div class=\"drag-item__el\" draggable=\"true\" @dragstart=\"onDragstart\" @dragend=\"onDragend\"></div>\n</template>\n```\n\n封装一个存储方法，通过配置相同 key ，可以在同时存在多个放置区域时候，区分开来。\n\n```ts\nclass DragStore<T extends DragItemData> {\n  moveItem = new Map<string, DragItemData>();\n\n  set(key: string, data: T) {\n    this.moveItem.set(key, data);\n  }\n\n  remove(key: string) {\n    this.moveItem.delete(key);\n  }\n\n  get(key: string): undefined | DragItemData {\n    return this.moveItem.get(key);\n  }\n}\n```\n\n### 可放置区域\n\n首先是需要告诉浏览器当前区域是可以放置的，只需要在元素监听 **dragenter**、**dragleave**、**dragover** 事件即可，然后通过 **preventDefault** 来阻止浏览器默认行为。可以在这三个事件中处理判断当前位置是否可以放置等等。\n\n示例：\n\n```html\n<script setup lang=\"ts\">\n  // 进入放置目标\n  const onDragenter = (e) => {\n    e.preventDefault();\n  };\n\n  // 在目标中移动\n  const onDragover = (e) => {\n    e.preventDefault();\n  };\n\n  // 离开目标\n  const onDragleave = (e) => {\n    e.preventDefault();\n  };\n</script>\n<template>\n  <div @dragenter=\"onDragenter($event)\" @dragover=\"onDragover($event)\" @dragleave=\"onDragleave($event)\" @drop=\"onDrop($event)\"></div>\n</template>\n```\n\n上面的代码已经可以让，元素可以拖拽，当元素拖到可防止区域时候，可以看到鼠标样式会变为可放置样式了。\n\n## Grid 布局\n\n我们是需要进行 Grid 拖拽布局，所以先对上面放置容器进行改造，首先就是需要将容器进行格子划分区域显示。\n\n### 计算 Grid 格子大小\n\n我这里直接使用了 **@vueuse/core** 的 **useElementSize** 的 hooks 去获取容器元素大小变动，也可以自己通过 **ResizeObserver** 去监听元素变动。接着根据设置列数、行数、间隔去计算单个格子大小。\n\n```ts\nimport { useElementSize } from \"@vueuse/core\";\n\n/**\n * 容器等分尺寸\n * @param {*} target 容器 HTML\n * @param {*} column 列数\n * @param {*} row 行数\n * @param {*} gap 间隔\n * @returns\n */\nexport const useBoxSize = (target: Ref<HTMLElement | undefined>, column: number, row: number, gap: number) => {\n  const { width, height } = useElementSize(target);\n  return computed(() => ({\n    width: (width.value - (column - 1) * gap) / column,\n    height: (height.value - (row - 1) * gap) / row,\n  }));\n};\n```\n\n### 设置 Grid 样式\n\n根据列数和行数循环生成格子数，**rowCount**、**columnCount**为行数和列数。\n\n```html\n<div class=\"drop-content__drop-container\" @dragenter=\"onDragenter($event)\" @dragover=\"onDragover($event)\" @dragleave=\"onDragleave($event)\" @drop=\"onDrop($event)\">\n  <template v-for=\"x in rowCount\">\n    <div class=\"bg-column\" v-for=\"y in columnCount\" :key=\"`${x}-${y}`\"></div>\n  </template>\n</div>\n```\n\n设置 Grid 样式，下面变量中 **gap** 为格子间隔，**repeat** 是 Grid 用来重复设置相同值的，**grid-template-columns: repeat(2,100px)** 等效于 **grid-template-columns: 100px 100px**。因为我们只需在容器里监听拖拽放置事件，所以我们还需要将\n所有的 **bg-column** 事件去掉，设置 **pointer-events: none** 即可。\n\n```scss\n.drop-content__drop-container {\n  display: grid;\n  row-gap: v-bind(\"gap+'px'\");\n  column-gap: v-bind(\"gap+'px'\");\n  grid-template-columns: repeat(v-bind(\"columnCount\"), v-bind(\"boxSize.width+'px'\"));\n  grid-template-rows: repeat(v-bind(\"rowCount\"), v-bind(\"boxSize.height+'px'\"));\n  .bg-column {\n    background-color: #fff;\n    border-radius: 6px;\n    pointer-events: none;\n  }\n}\n```\n\n效果如下：\n![](/images/posts/grid_layout/grid.png)_Grid 容器样式_\n\n## 放置元素\n\n放置元素时我们需要先计算出元素在 Grid 位置信息等，这样才知道元素应该放置那哪个地方。\n\n### 拖拽位置计算\n\n当元素拖拽进容器中时，我们可以通过 **offsetX**、**offsetY** 两个数据获取当前鼠标距离容器左上角位置距离，我们可以根据这两个值计算出对应的在 Grid 中做坐标。\n\n计算方式：\n\n```ts\n// 计算 x 坐标\nconst getX = (num) => parseInt(num / (boxSizeWidth + gap));\n// 计算 y 坐标\nconst getY = (num) => parseInt(num / (boxSizeHeight + gap));\n```\n\n需要注意的是上面计算坐标是 0,0 开始的，而 Grid 是 1,1 开始的。\n\n### 获取拖拽信息\n\n我们在进入容器时，通过上面封装 **dragData** 来获取当前拖拽元素信息，获取它尺寸信息等等。\n\n```ts\n// 拖拽中的元素\nconst current = reactive({\n  show: <boolean>false,\n  id: <undefined | number>undefined,\n  column: <number>0, // 宽\n  row: <number>0, // 高\n  x: <number>0, // 列\n  y: <number>0, // 行\n});\n\n// 进入放置目标\nconst onDragenter = (e) => {\n  e.preventDefault();\n  const dragData = dragStore.get(props.groupName);\n  if (dragData) {\n    current.column = dragData.column;\n    current.row = dragData.row;\n    current.x = getX(e.offsetX);\n    current.y = getY(e.offsetY);\n    current.show = true;\n  }\n};\n\n// 在目标中移动\nconst onDragover = (e) => {\n  e.preventDefault();\n  const dragData = dragStore.get(props.groupName);\n  if (dragData) {\n    current.x = getX(e.offsetX);\n    current.y = getY(e.offsetY);\n  }\n};\n\nconst onDragleave = (e) => {\n  e.preventDefault();\n  current.show = false;\n  current.id = undefined;\n};\n```\n\n在 drop 事件中，我们将当前拖拽元素存放起来，list 会存放每一次拖拽进来元素信息。\n\n```ts\nconst list = ref([]);\n\n// 放置在目标上\nconst onDrop = async (e) => {\n  e.preventDefault();\n  current.show = false;\n  const item = dragStore.get(props.groupName);\n\n  list.value.push({\n    ...item,\n    x: current.x,\n    y: current.y,\n    id: new Date().getTime(),\n  });\n};\n```\n\n### 计算碰撞\n\n在上面还需要计算当前拖拽的位置是否可以放置，需要处理是否包含在容器内，是否与其他已放置元素存在重叠等等。\n\n#### 计算是否在容器内\n\n这个是比较好计算的，只需要当前拖拽位置左上角坐标 >= 容器左上角的坐标，然后右下角的坐标 <= 容器的右下角的坐标，就是在容器内的。\n\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 472.22222222222223 448.8888888888887\" width=\"472.22222222222223\" height=\"448.8888888888887\">\n  <g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(40 107.77777777777783) rotate(0 200.55555555555551 147.2222222222224)\"><path d=\"M0 0 C82.3 0, 164.61 0, 401.11 0 M0 0 C159.75 0, 319.49 0, 401.11 0 M401.11 0 C401.11 102.5, 401.11 205, 401.11 294.44 M401.11 0 C401.11 83.68, 401.11 167.36, 401.11 294.44 M401.11 294.44 C245.89 294.44, 90.67 294.44, 0 294.44 M401.11 294.44 C310.61 294.44, 220.11 294.44, 0 294.44 M0 294.44 C0 225.76, 0 157.08, 0 0 M0 294.44 C0 188.64, 0 82.83, 0 0\" stroke=\"#f08c00\" stroke-width=\"1\" fill=\"none\"></path></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(95.55555555555554 188.8888888888887) rotate(0 142.2222222222222 63.888888888888914)\"><path d=\"M0 0 C93.16 0, 186.31 0, 284.44 0 M0 0 C82.11 0, 164.21 0, 284.44 0 M284.44 0 C284.44 33.97, 284.44 67.94, 284.44 127.78 M284.44 0 C284.44 48.07, 284.44 96.14, 284.44 127.78 M284.44 127.78 C178.07 127.78, 71.69 127.78, 0 127.78 M284.44 127.78 C222.86 127.78, 161.28 127.78, 0 127.78 M0 127.78 C0 89.06, 0 50.33, 0 0 M0 127.78 C0 99.64, 0 71.5, 0 0\" stroke=\"#1971c2\" stroke-width=\"1\" fill=\"none\"></path></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(295.5555555555555 10) rotate(0 0.00005000000000165983 0.00005000000010113581)\" stroke=\"none\"><path fill=\"#f08c00\" d=\"M 1.57,-1.57 Q 1.57,-1.57 1.77,-1.27 1.98,-0.98 2.09,-0.64 2.20,-0.29 2.19,0.05 2.18,0.41 2.05,0.75 1.93,1.09 1.70,1.37 1.48,1.65 1.18,1.84 0.87,2.04 0.52,2.12 0.18,2.21 -0.17,2.18 -0.53,2.15 -0.86,2.01 -1.19,1.87 -1.46,1.63 -1.73,1.39 -1.90,1.07 -2.08,0.76 -2.15,0.41 -2.21,0.05 -2.17,-0.29 -2.12,-0.65 -1.96,-0.97 -1.80,-1.29 -1.54,-1.54 -1.29,-1.80 -0.97,-1.96 -0.65,-2.12 -0.29,-2.17 0.06,-2.21 0.41,-2.15 0.76,-2.08 1.07,-1.90 1.39,-1.73 1.63,-1.46 1.87,-1.19 2.01,-0.86 2.15,-0.53 2.18,-0.17 2.21,0.18 2.12,0.52 2.03,0.87 1.84,1.18 1.65,1.48 1.37,1.70 1.09,1.93 0.75,2.05 0.41,2.18 0.05,2.19 -0.30,2.20 -0.64,2.09 -0.98,1.98 -1.27,1.77 -1.57,1.56 -1.57,1.57 -1.57,1.57 -1.73,1.35 -1.90,1.14 -2.01,0.90 -2.12,0.66 -2.16,0.39 -2.21,0.13 -2.20,-0.13 -2.18,-0.40 -2.10,-0.65 -2.02,-0.91 -1.88,-1.14 -1.74,-1.36 -1.55,-1.55 -1.36,-1.74 -1.14,-1.88 -0.91,-2.02 -0.65,-2.10 -0.40,-2.18 -0.13,-2.20 0.13,-2.21 0.39,-2.16 0.66,-2.12 0.90,-2.01 1.14,-1.90 1.35,-1.73 1.57,-1.57 1.57,-1.57 L 1.57,-1.57 Z\"></path></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(25.555555555555543 91.11111111111086) rotate(0 40 56.66666666666674)\" stroke=\"none\"><path fill=\"#e03131\" d=\"M -0.26,1.83 Q -0.26,1.83 -2.43,1.44 -4.59,1.04 -6.52,2.11 -8.44,3.19 -9.26,4.40 -10.09,5.61 -10.80,7.05 -11.52,8.50 -12.19,10.31 -12.87,12.12 -13.17,14.36 -13.48,16.60 -13.64,19.17 -13.80,21.73 -13.81,23.48 -13.82,25.22 -13.88,27.55 -13.95,29.88 -13.96,31.83 -13.96,33.78 -13.62,35.42 -13.29,37.06 -12.60,38.96 -11.91,40.87 -10.98,42.21 -10.05,43.55 -9.00,45.14 -7.95,46.73 -6.64,48.31 -5.33,49.89 -3.78,51.91 -2.24,53.93 -0.07,55.98 2.09,58.04 4.32,60.24 6.56,62.43 9.10,64.97 11.64,67.51 14.58,69.81 17.51,72.12 20.42,74.75 23.32,77.38 27.39,80.70 31.45,84.02 35.41,87.03 39.37,90.03 42.36,92.62 45.36,95.21 47.88,97.24 50.40,99.27 53.04,101.07 55.67,102.87 57.49,104.31 59.30,105.76 60.76,106.98 62.22,108.20 63.22,108.98 64.22,109.75 65.59,111.08 66.96,112.40 68.41,113.54 69.87,114.69 71.44,115.82 73.00,116.95 74.17,117.26 75.34,117.58 76.99,118.46 78.64,119.35 79.74,119.56 80.85,119.77 81.92,119.83 82.99,119.89 84.14,120.30 85.29,120.70 86.47,120.72 87.65,120.74 89.19,120.05 90.73,119.35 92.08,118.63 93.42,117.92 93.22,113.88 93.02,109.84 93.19,105.73 93.36,101.63 92.84,96.16 92.33,90.69 91.83,86.08 91.33,81.48 90.82,77.61 90.32,73.74 89.80,70.51 89.29,67.28 88.47,64.72 87.65,62.17 86.97,59.39 86.29,56.60 85.07,53.27 83.86,49.94 82.08,45.99 80.30,42.03 78.59,38.42 76.88,34.82 75.51,32.00 74.15,29.19 72.62,26.43 71.10,23.66 69.52,21.24 67.93,18.81 66.30,16.51 64.68,14.20 63.06,12.30 61.44,10.40 60.07,8.58 58.71,6.77 56.99,5.50 55.27,4.22 52.92,2.70 50.58,1.17 48.32,-0.10 46.07,-1.37 43.90,-2.20 41.74,-3.04 39.18,-4.05 36.62,-5.06 34.68,-5.45 32.74,-5.83 30.68,-6.01 28.61,-6.18 26.93,-6.50 25.25,-6.83 23.73,-6.91 22.21,-6.99 20.72,-7.32 19.22,-7.66 17.56,-7.80 15.89,-7.94 14.19,-7.99 12.49,-8.04 10.82,-8.04 9.14,-8.05 7.34,-7.91 5.55,-7.77 4.40,-7.68 3.24,-7.58 2.40,-6.50 1.55,-5.41 0.26,-3.97 -1.02,-2.52 0.50,-2.05 2.02,-1.57 2.22,-1.21 2.42,-0.84 2.49,-0.43 2.56,-0.02 2.50,0.38 2.44,0.79 2.25,1.16 2.06,1.53 1.76,1.82 1.46,2.11 1.08,2.28 0.71,2.46 0.29,2.51 -0.11,2.56 -0.51,2.48 -0.92,2.39 -1.28,2.18 -1.64,1.97 -1.91,1.66 -2.18,1.34 -2.34,0.96 -2.50,0.57 -2.52,0.16 -2.55,-0.25 -2.44,-0.65 -2.34,-1.05 -2.11,-1.40 -1.88,-1.74 -1.55,-2.00 -1.22,-2.25 -0.83,-2.39 -0.44,-2.52 -0.02,-2.53 0.38,-2.53 0.78,-2.40 1.17,-2.28 1.51,-2.03 1.84,-1.78 2.08,-1.44 2.31,-1.10 2.43,-0.70 2.54,-0.30 2.53,0.11 2.51,0.52 2.36,0.91 2.21,1.30 1.94,1.62 1.68,1.94 1.32,2.15 0.97,2.37 0.56,2.46 0.16,2.56 -0.24,2.52 -0.66,2.48 -1.04,2.31 -1.41,2.13 -1.72,1.85 -2.02,1.57 -2.02,1.57 -2.02,1.57 -3.81,-1.00 -5.60,-3.58 -4.92,-5.12 -4.24,-6.67 -3.18,-8.05 -2.12,-9.43 -0.71,-10.50 0.70,-11.58 1.82,-11.99 2.94,-12.41 4.26,-12.30 5.58,-12.20 7.39,-12.03 9.21,-11.85 10.92,-11.80 12.64,-11.74 14.43,-11.65 16.21,-11.56 18.23,-11.37 20.24,-11.17 21.40,-10.73 22.56,-10.28 24.28,-10.03 25.99,-9.77 27.42,-9.30 28.84,-8.83 31.06,-8.63 33.29,-8.44 35.44,-7.97 37.58,-7.50 40.14,-6.50 42.69,-5.49 45.02,-4.58 47.36,-3.67 49.69,-2.35 52.01,-1.03 54.44,0.54 56.86,2.12 58.83,3.64 60.80,5.16 62.13,6.92 63.45,8.68 65.15,10.67 66.84,12.67 68.50,15.01 70.16,17.35 71.80,19.86 73.45,22.37 75.01,25.19 76.57,28.01 77.95,30.83 79.33,33.64 81.08,37.27 82.82,40.89 84.66,44.93 86.50,48.97 87.79,52.43 89.08,55.89 89.78,58.56 90.48,61.23 91.42,63.99 92.36,66.75 92.97,70.00 93.58,73.26 94.21,77.15 94.84,81.03 95.51,85.64 96.19,90.25 96.93,95.95 97.68,101.65 97.81,105.78 97.94,109.91 98.07,113.71 98.20,117.52 97.88,119.22 97.55,120.92 96.14,121.96 94.74,123.00 93.74,123.59 92.74,124.17 91.51,124.65 90.28,125.12 88.83,125.41 87.38,125.71 86.25,125.56 85.11,125.41 83.75,124.75 82.39,124.09 81.09,123.85 79.78,123.60 78.32,123.09 76.86,122.59 75.47,121.78 74.08,120.97 72.60,120.31 71.12,119.64 69.47,118.48 67.82,117.31 66.21,116.06 64.61,114.80 63.29,113.49 61.96,112.18 61.14,111.26 60.32,110.34 58.99,109.08 57.66,107.82 55.92,106.44 54.18,105.05 51.46,103.19 48.74,101.33 46.19,99.27 43.63,97.22 40.69,94.68 37.76,92.15 33.76,89.12 29.76,86.10 25.64,82.74 21.51,79.38 18.67,76.82 15.83,74.26 12.77,71.87 9.70,69.47 7.15,66.96 4.60,64.45 2.36,62.30 0.11,60.14 -2.22,57.96 -4.57,55.78 -6.14,53.85 -7.70,51.92 -9.20,50.23 -10.70,48.54 -11.75,46.93 -12.80,45.32 -13.80,43.65 -14.81,41.98 -15.67,39.81 -16.52,37.64 -16.82,35.71 -17.12,33.77 -17.10,31.81 -17.08,29.85 -17.11,27.49 -17.14,25.13 -17.04,23.36 -16.95,21.59 -16.87,18.90 -16.79,16.21 -16.54,13.60 -16.28,10.98 -15.63,8.87 -14.98,6.77 -14.09,5.02 -13.20,3.27 -11.74,1.47 -10.29,-0.32 -8.99,-0.85 -7.70,-1.37 -6.02,-1.84 -4.34,-2.31 -2.04,-2.07 0.26,-1.83 0.47,-1.78 0.69,-1.72 0.89,-1.61 1.08,-1.50 1.25,-1.35 1.41,-1.20 1.53,-1.01 1.66,-0.82 1.73,-0.61 1.81,-0.40 1.83,-0.18 1.85,0.03 1.82,0.26 1.79,0.48 1.71,0.69 1.62,0.89 1.49,1.07 1.36,1.26 1.19,1.40 1.02,1.55 0.82,1.65 0.62,1.75 0.40,1.79 0.18,1.84 -0.03,1.84 -0.26,1.83 -0.26,1.83 L -0.26,1.83 Z\"></path></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(414.4444444444444 304.44444444444434) rotate(0 -5.555555555555543 63.888888888888914)\" stroke=\"none\"><path fill=\"#e03131\" d=\"M -0.77,1.94 Q -0.77,1.94 -2.36,1.29 -3.95,0.65 -5.11,0.47 -6.26,0.30 -7.86,-0.14 -9.46,-0.58 -10.61,-0.70 -11.76,-0.81 -13.15,-1.21 -14.55,-1.62 -16.00,-2.11 -17.46,-2.60 -18.82,-2.78 -20.18,-2.95 -22.20,-3.46 -24.21,-3.98 -26.49,-4.24 -28.77,-4.50 -30.11,-4.51 -31.44,-4.52 -33.00,-4.42 -34.56,-4.32 -36.49,-3.52 -38.41,-2.72 -40.05,-1.82 -41.69,-0.92 -43.37,0.34 -45.06,1.61 -46.50,2.61 -47.94,3.62 -49.06,4.60 -50.19,5.59 -51.29,6.64 -52.39,7.69 -53.42,9.44 -54.44,11.20 -55.25,12.93 -56.05,14.66 -56.38,16.50 -56.71,18.34 -56.90,21.04 -57.08,23.73 -57.18,25.85 -57.28,27.98 -57.02,30.38 -56.76,32.78 -56.04,35.33 -55.32,37.89 -54.38,40.58 -53.44,43.28 -52.09,46.65 -50.75,50.02 -48.27,55.26 -45.80,60.50 -43.49,64.62 -41.17,68.74 -38.64,72.03 -36.10,75.32 -33.71,78.69 -31.32,82.06 -28.73,85.37 -26.14,88.69 -23.46,91.67 -20.79,94.65 -17.10,98.47 -13.41,102.29 -9.31,106.14 -5.20,109.98 -1.24,113.19 2.70,116.40 7.54,119.66 12.39,122.92 16.32,124.92 20.24,126.92 23.55,128.75 26.86,130.59 29.71,131.30 32.56,132.02 34.72,132.34 36.89,132.65 38.44,132.69 40.00,132.73 41.10,132.59 42.19,132.46 42.12,130.79 42.04,129.13 42.21,126.86 42.38,124.58 42.82,121.57 43.25,118.56 43.79,115.38 44.32,112.20 44.89,109.25 45.46,106.29 45.70,103.21 45.95,100.13 46.07,96.26 46.18,92.39 46.24,88.51 46.30,84.63 46.33,81.06 46.36,77.49 46.38,73.42 46.40,69.35 46.09,65.44 45.78,61.52 45.02,57.68 44.27,53.83 43.62,50.24 42.98,46.64 42.09,44.27 41.21,41.89 40.79,39.12 40.37,36.34 39.61,34.39 38.84,32.44 38.16,29.89 37.48,27.34 36.88,25.35 36.28,23.36 35.39,22.05 34.49,20.74 33.74,19.91 32.99,19.08 32.25,18.03 31.52,16.97 29.67,15.53 27.82,14.09 26.85,13.50 25.88,12.92 24.84,12.37 23.79,11.82 22.70,11.28 21.61,10.74 20.32,9.74 19.02,8.74 18.01,8.14 17.00,7.54 16.12,6.91 15.23,6.28 13.58,5.73 11.94,5.17 10.92,4.63 9.91,4.09 8.48,3.56 7.05,3.03 5.17,2.61 3.29,2.19 1.82,2.40 0.35,2.61 -0.06,2.60 -0.49,2.59 -0.89,2.45 -1.29,2.30 -1.63,2.03 -1.96,1.76 -2.19,1.40 -2.42,1.04 -2.53,0.63 -2.63,0.21 -2.60,-0.20 -2.56,-0.63 -2.39,-1.02 -2.22,-1.42 -1.94,-1.74 -1.65,-2.05 -1.28,-2.26 -0.91,-2.48 -0.49,-2.56 -0.07,-2.64 0.34,-2.58 0.77,-2.52 1.15,-2.33 1.54,-2.14 1.84,-1.84 2.14,-1.54 2.33,-1.16 2.52,-0.77 2.58,-0.35 2.64,0.06 2.56,0.48 2.48,0.90 2.27,1.28 2.06,1.65 1.74,1.94 1.42,2.22 1.03,2.39 0.64,2.56 0.21,2.60 -0.21,2.63 -0.62,2.53 -1.04,2.42 -1.40,2.19 -1.76,1.96 -2.03,1.63 -2.30,1.30 -2.44,0.90 -2.59,0.50 -2.60,0.07 -2.62,-0.35 -2.49,-0.76 -2.36,-1.17 -2.12,-1.52 -1.87,-1.86 -1.52,-2.11 -1.17,-2.36 -0.76,-2.49 -0.35,-2.61 -0.35,-2.61 -0.35,-2.61 2.84,-2.76 6.04,-2.90 7.16,-2.79 8.27,-2.67 9.27,-2.12 10.27,-1.58 12.00,-0.95 13.72,-0.33 14.60,0.43 15.47,1.20 17.54,2.30 19.61,3.40 20.82,4.19 22.03,4.98 22.95,5.76 23.87,6.54 24.98,7.17 26.10,7.81 27.24,8.52 28.39,9.23 29.57,10.10 30.74,10.97 31.70,11.93 32.65,12.90 33.69,13.95 34.73,15.00 35.24,16.03 35.74,17.07 36.38,18.14 37.03,19.22 37.92,20.90 38.82,22.58 39.42,24.62 40.02,26.66 40.66,29.08 41.31,31.49 42.15,33.72 42.99,35.94 43.35,38.46 43.71,40.99 44.65,43.58 45.60,46.16 46.25,49.74 46.90,53.31 47.69,57.31 48.48,61.31 48.80,65.33 49.13,69.35 49.13,73.43 49.13,77.50 49.13,81.08 49.13,84.65 49.11,88.56 49.08,92.46 49.02,96.40 48.95,100.34 48.75,103.59 48.56,106.84 48.09,109.76 47.62,112.69 47.23,115.84 46.83,118.98 46.58,121.83 46.33,124.68 46.39,127.17 46.44,129.67 46.21,130.92 45.98,132.17 45.23,133.62 44.49,135.07 42.12,135.40 39.74,135.74 38.12,135.49 36.50,135.25 34.20,134.91 31.90,134.57 28.75,133.73 25.61,132.90 22.33,131.08 19.05,129.26 14.98,127.18 10.92,125.11 5.98,121.78 1.04,118.45 -2.97,115.18 -7.00,111.91 -11.16,108.02 -15.31,104.13 -19.03,100.27 -22.76,96.42 -25.49,93.37 -28.23,90.32 -30.86,86.96 -33.48,83.60 -35.85,80.27 -38.22,76.95 -40.86,73.50 -43.51,70.06 -45.88,65.86 -48.24,61.66 -50.77,56.35 -53.29,51.04 -54.67,47.62 -56.06,44.20 -57.05,41.44 -58.04,38.67 -58.85,35.90 -59.65,33.13 -59.98,30.51 -60.31,27.90 -60.28,25.73 -60.26,23.57 -60.15,20.68 -60.05,17.79 -59.70,15.52 -59.35,13.25 -58.56,11.31 -57.76,9.38 -56.52,7.02 -55.29,4.67 -54.07,3.56 -52.86,2.45 -51.54,1.36 -50.22,0.28 -48.93,-0.58 -47.63,-1.44 -45.87,-3.07 -44.12,-4.69 -42.18,-6.10 -40.24,-7.51 -39.18,-7.88 -38.13,-8.25 -36.30,-8.61 -34.47,-8.96 -32.85,-8.78 -31.22,-8.59 -29.86,-8.45 -28.50,-8.31 -25.92,-8.23 -23.35,-8.14 -21.46,-7.84 -19.58,-7.54 -17.78,-7.30 -15.99,-7.05 -13.54,-6.18 -11.10,-5.30 -9.68,-5.05 -8.26,-4.79 -6.82,-4.37 -5.39,-3.94 -3.91,-3.57 -2.42,-3.20 -0.82,-2.57 0.77,-1.94 0.99,-1.82 1.22,-1.70 1.40,-1.53 1.59,-1.35 1.73,-1.14 1.87,-0.93 1.95,-0.70 2.04,-0.46 2.06,-0.21 2.09,0.03 2.05,0.28 2.02,0.53 1.92,0.77 1.83,1.00 1.68,1.21 1.54,1.41 1.34,1.58 1.15,1.74 0.93,1.85 0.70,1.97 0.46,2.02 0.21,2.08 -0.03,2.07 -0.28,2.07 -0.53,2.00 -0.77,1.94 -0.77,1.94 L -0.77,1.94 Z\"></path></g></svg>\n\n代码实现：\n\n```ts\n/**\n * 判断是否在当前四边形内\n * @param {*} p1 父容器\n * @param {*} p2\n *  对应是 左上角坐标 和 右下角坐标\n *  [0,0,1,1]  => 左上角坐标 0,0  右下角 1,1\n */\nexport const booleanWithin = (p1: [number, number, number, number], p2: [number, number, number, number]) => {\n  return p1[0] <= p2[0] && p1[1] <= p2[1] && p1[2] >= p2[2] && p1[3] >= p2[3];\n};\n```\n\n#### 计算是否与现有的相交\n\n两个矩形相交情况有很多种，计算比较麻烦，但是我们可以计算他们不相交，然后在取反方式判断是否相交。\n\n不相交情况只有四种，假设有 p1、p2 连个矩形，它们不相交的情况只有四种：\n\n-   p1 在 p2 左边\n-   p1 在 p2 右边\n-   p1 在 p2 上边\n-   p1 在 p2 下边\n\n代码实现：\n\n```ts\n/**\n * 判断是两四边形是否相交\n * @param {*} p1 父容器\n * @param {*} p2\n *  对应是 左上角坐标 和 右下角坐标\n *  [0,0,1,1]  => 左上角坐标 0,0  右下角 1,1\n */\nexport const booleanIntersects = (p1: [number, number, number, number], p2: [number, number, number, number]) => {\n  return !(p1[2] <= p2[0] || p2[2] <= p1[0] || p1[3] <= p2[1] || p2[3] <= p1[1]);\n};\n```\n\n### 在放置前判断\n\n可以通过计算属性去计算，在后面拖拽中处理样式也可以用到。修改 **drop** 中方法，然后在 **drop** 中根据 **isPutDown** 是否有效。\n\n```ts\n// 是否可以放置\nconst isPutDown = computed(() => {\n  const currentXy = [current.x, current.y, current.x + current.column, current.y + current.row];\n  return (\n    booleanWithin([0, 0, columnCount.value, rowCount.value], currentXy) && //\n    list.value.every((item) => item.id === current.id || !booleanIntersects([item.x, item.y, item.x + item.column, item.y + item.row], currentXy))\n  );\n});\n```\n\n## 拖拽时样式\n\n上处理了基本拖放数据处理逻辑，为了更好的交互，我们可以在拖拽中显示元素预占位信息，更加直观的显示元素占位大小，类似这样：\n\n![](/images/posts/grid_layout/mask1.png)_可放置示例_\n\n我们可以根据上面 **current** 中信息去计算大小信息，还可以根据 **isPutDown** 去判断当前位置是否可以放置，用来显示不同交互效果。\n\n![](/images/posts/grid_layout/mask2.png)_不可放置示例_\n\n可以直接通过 Grid 的 grid-area 属性，快速计算出放置位置信息，应为我们上面计算的 x 、y 是从 0 开始的，所以这里需要 +1。\n\n```css\ngrid-area: `${y + 1} / ${x + 1} / ${y + row + 1}/ ${ x + column + 1 }`\n```\n\n## 预览容器\n\n在元素放置后，我们还需要根据 list 中数据，生成元素占位样式处理，我们可以拖拽容器上层在放置一个容器，专门用来显示放置后的样式，也是可以直接使用 Grid 布局去处理。\n\n### 预览样式\n\n样式基本上和 **drop-container** 样式抱持一致即可，需要注意的时需要为预览容器设置 **pointer-events: none**，避免遮挡了 **drop-container** 事件监听。\n\n```scss\n.drop-content__preview,\n.drop-content__drop-container {\n  // ...\n}\n```\n\n每个元素位置信息计算方式，基本和拖拽时样式计算方式一致，直接通过 **grid-area** 去布局就可以了。\n\n```css\ngrid-area: `${y + 1} / ${x + 1} / ${y + row + 1}/ ${ x + column + 1 }`\n```\n\n![](/images/posts/grid_layout/drop.png)_示例_\n\n### 二次拖拽\n\n当元素拖拽进来后，我们还需要对放置的元素支持继续拖拽。因为上面我们将预览事件通过 **pointer-events** 去除了，所以我们需要给每个子元素都加上去。然后给子元素添加 **draggable=true**，然后处理拖拽事件，基本上和上面处理方式一样，在 **dragstart**、**dragend** 处理拖拽元素信息。\n\n然后我们还需在 **onDrop** 进行一番修改，如果是二次拖拽时只需要修改坐标信息，修改原 **onDrop** 处理方式：\n\n```ts\nif (item.id) {\n  item.x = current.x;\n  item.y = current.y;\n} else {\n  list.value.push({\n    ...item,\n    x: current.x,\n    y: current.y,\n    id: new Date().getTime(),\n  });\n}\n```\n\n### 位置偏移优化\n\n当你对元素二次拖拽时，会发现元素会存在偏移问。比如你放置了一个 1x2 元素后，当你从下面拖拽，你会发现拖拽中的占位样式和你拖拽元素位置存在偏差。\n\n效果如下图\n\n![](/images/posts/grid_layout/offset.png)_示例_\n\n出现这情况应为上面我们时根据鼠标位置为左上角进行计算的，所以会存在这种偏差问题，我们可在拖拽前计算出偏移量来校正位置。\n\n我们可以在二次拖拽时，获取到鼠标在当前元素内位置信息\n\n```ts\nconst onDragstart = (e) => {\n  const data = props.data;\n  data.offsetX = e.offsetX;\n  data.offsetY = e.offsetY;\n  dragStore.set(props.groupName, data);\n};\n```\n\n在 **drop-container** 内计算 x、y 值时候减去偏移量，对 **onDragenter**、**onDragover** 进行如下调整修改\n\n```ts\ncurrent.x = getX(e.offsetX) - getX(dragData?.offsetX ?? 0);\ncurrent.y = getY(e.offsetY) - getY(dragData?.offsetY ?? 0);\n```\n\n### 拖拽元素优化\n\n因为上面我们将预览元素添加了 **pointer-events: all**，所以在我们拖拽到现有元素上时，会挡住 **drop-container** 事件的触发，在二次拖拽时，比如将一个 2x2 元素我们需要往下移动一格时，会发现也会被自己挡住。\n\n-   预览元素遮挡问题，可以在拖拽时将其他元素都设置为 **none**，二次拖拽时要做自己设置为 **all** 否则会无法拖拽\n\n```html\n:style=\"{ pointerEvents: current.show && item.id !== current.id ? 'none' : 'all' }\"`\n```\n\n-   二次拖拽时自己位置遮挡问题\n    我们可以在拖拽时增加标识，将自己通过 **transform** 移除到多拽容器外去\n\n```ts\nmoveing.value\n  ? {\n      opacity: 0,\n      transform: `translate(-999999999px, -9999999999px)`,\n    }\n  : {};\n```\n\n### 拖拽调整大小\n\n调整大小和调整位置计算类似，只不过一个是计算坐标一个计算行列。\n\n首先是能让元素可以进行拖拽，很多拖拽调整大小的都是在元素里添加几个拖拽节点元素，然后在监听拖拽节点鼠标事件去计算大小位置等。但是我这里需求比较简单，就不需要做的那么复杂，直接通过 css 让元素可以支持调整大小。\n\n```css\n.preview-item {\n  overflow: auto;\n  resize: both;\n}\n```\n\n添加样式后，可以看到元素可调整样式\n\n![resize](/images/posts/grid_layout/resize.png)\n\n监听元素大小调整方式有两种\n\n-   通 **ResizeObserver API** 监听，但是这个 API 还会监听到其他因数引起变动，比如窗口大小变动，导致元素变动等等。\n-   使用 **mousedown**、**mousemove**、**mouseup** 组合使用，监听鼠标事件，但是这个会存在与拖放事件同时触发问题。\n\n两种方式都可以实现，但是都有需要解决问题，我这里选择了第二种方式实现。\n\n大概实现就是在 PreviewItem 中监听 **mousedown** 事件，在 **mousemove** 中获取元素宽度大小实时计算宽度大小就可以。需要注意的是在 **mouseup** 中要重置 size 信息避免改变原有元素大小。\n\n```ts\nconst onMousedown = (e) => {\n  dragStore.set(props.groupName, props.data);\n  emits(\"resize-start\");\n  resizeing.value = true;\n\n  e.target.onmousemove = function (event) {\n    emits(\"resizeing\", {\n      width: event.target.offsetWidth,\n      height: event.target.offsetHeight,\n    });\n  };\n\n  e.target.onmouseup = function (event) {\n    unset(event.target);\n    emits(\"resize-end\");\n    event.target.style.width = \"100%\";\n    event.target.style.height = \"100%\";\n    dragStore.remove(props.groupName);\n  };\n};\n\nconst unset = (target) => {\n  resizeing.value = false;\n  target.onmousemove = null;\n  target.onmouseup = null;\n};\n```\n\n在 DropContent 通过上面抛出信息，计算大小改变，然后设置拖拽时样式动态查看当前占位大小。\n\n```ts\n// 调整大小开始\nconst onResizeStart = () => {\n  const dragData = dragStore.get(props.groupName);\n  if (dragData) {\n    current.column = dragData.column;\n    current.row = dragData.row;\n    current.x = dragData.x;\n    current.y = dragData.y;\n    current.id = dragData.id;\n    current.show = true;\n  }\n};\n\n// 调正大小时\nconst onResizeing = (e) => {\n  const dragData = dragStore.get(props.groupName);\n  current.column = getColumn(e.width);\n  current.row = getRow(e.height);\n};\n\n// 调整大小结束\nconst onResizeEnd = async () => {\n  current.show = false;\n  const dragData = dragStore.get(props.groupName);\n  if (\n    isPutDown.value &&\n    (await props.beforeDrop(\n      {\n        ...dragData,\n        column: current.column,\n        row: current.row,\n      },\n      list.value\n    ))\n  ) {\n    dragData.column = current.column;\n    dragData.row = current.row;\n  }\n};\n```\n\n实现效果：\n\n![resize_demo](/images/posts/grid_layout/resize_demo.png)\n\n## 结语\n\n到目前为止基本上的 Grid 拖拽布局大致实现了，已经满足基本业务需求了，当然有需要朋友还可以在上面增加碰撞后自动调整位置等等。\n\n完整源码在此，[在线体验](https://stackblitz.com/edit/vitejs-vite-rkwugn)\n","source":"_posts/gird_layout.md","raw":"---\ntitle: 手撸 Grid 拖拽布局\ndate: 2023-11-30 20:07:05\ntags:\ncategories: 记录类\ndescription:\nkeywords: grid,拖拽布局，vue\n---\n\n最近有个需求需要实现自定义首页布局，需要将屏幕按照 6 列 4 行进行等分成多个格子，然后将组件拖拽对应格子进行渲染展示。\n\n![](/images/posts/grid_layout/demo.png)_示例_\n\n<!--more -->\n\n对比一些已有的插件，发现想要实现产品的交互效果，没有现成可用的。本身功能并不是太过复杂，于是决定自己基于 vue 手撸一个简易的 Grid 拖拽布局。\n\n完整源码在此，[在线体验](https://stackblitz.com/edit/vitejs-vite-rkwugn)\n\n## 概况\n\n需要实现 Grid 拖拽布局，主要了解这两个东西就行\n\n-   拖放 API，关于拖放 API 介绍文章有很多 ，可以直接看 MDN 里[拖放 API](https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API)介绍，可以说很详细了。\n-   Grid 布局， Grid 布局与 Flex 布局很相似，但是 Grid 像是二维布局，Flex 则为一维布局，Grid 布局远比 Flex 布局强大。[MDN 关于网格布局介绍](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout)\n\n需要实现主要包含：\n\n-   组件物料栏拖拽到布局容器\n-   布局容器 Grid 布局\n-   放置时是否重叠判断\n-   拖拽时样式\n-   放置后样式\n-   容器内二次拖拽\n\n## 拖放操作实现\n\n拖拽中主要使用到的事件如下\n\n-   被拖拽元素事件：\n\n| 事件      | 触发时刻                                   |\n| --------- | ------------------------------------------ |\n| dragstart | 当用户开始拖拽一个元素或选中的文本时触发。 |\n| drag      | 当拖拽元素或选中的文本时触发。             |\n| dragend   | 当拖拽操作结束时触发                       |\n\n-   放置容器事件：\n\n| 事件      | 触发时刻                                         |\n| --------- | ------------------------------------------------ |\n| dragenter | 当拖拽元素或选中的文本到一个可释放目标时触发。   |\n| dragleave | 当拖拽元素或选中的文本离开一个可释放目标时触发。 |\n| dragover  | 当元素或选中的文本被拖到一个可释放目标上时触发。 |\n| drop      | 当元素或选中的文本在可释放目标上被释放时触发。   |\n\n### 可拖拽元素\n\n让一个元素能够拖拽只需要给元素设置 **draggable=\"true\"** 即可拖拽，拖拽事件 API 提供了 **DataTransfer** 对象，可以用于设置拖拽数据信息，但是仅仅只能 **drop** 事件中获取到。因为我们需要在拖拽中就需要获取到拖拽信息，用来显示拖拽时样式，所以需要自己处理这些信息存储起来，以便读取。\n\n需要处理主要是，在拖拽时将 将当前元素信息设置到 **dragStore** 中，结束时清空当前信息。\n\n```html\n<script setup lang=\"ts\">\n  import { dragStore } from \"./drag\";\n\n  const props = defineProps<{\n    data: DragItem;\n    groupName?: string;\n  }>();\n\n  const onDragstart = (e) => dragStore.set(props.groupName, { ...props.data });\n  const onDragend = () => dragStore.remove(props.groupName);\n</script>\n<template>\n  <div class=\"drag-item__el\" draggable=\"true\" @dragstart=\"onDragstart\" @dragend=\"onDragend\"></div>\n</template>\n```\n\n封装一个存储方法，通过配置相同 key ，可以在同时存在多个放置区域时候，区分开来。\n\n```ts\nclass DragStore<T extends DragItemData> {\n  moveItem = new Map<string, DragItemData>();\n\n  set(key: string, data: T) {\n    this.moveItem.set(key, data);\n  }\n\n  remove(key: string) {\n    this.moveItem.delete(key);\n  }\n\n  get(key: string): undefined | DragItemData {\n    return this.moveItem.get(key);\n  }\n}\n```\n\n### 可放置区域\n\n首先是需要告诉浏览器当前区域是可以放置的，只需要在元素监听 **dragenter**、**dragleave**、**dragover** 事件即可，然后通过 **preventDefault** 来阻止浏览器默认行为。可以在这三个事件中处理判断当前位置是否可以放置等等。\n\n示例：\n\n```html\n<script setup lang=\"ts\">\n  // 进入放置目标\n  const onDragenter = (e) => {\n    e.preventDefault();\n  };\n\n  // 在目标中移动\n  const onDragover = (e) => {\n    e.preventDefault();\n  };\n\n  // 离开目标\n  const onDragleave = (e) => {\n    e.preventDefault();\n  };\n</script>\n<template>\n  <div @dragenter=\"onDragenter($event)\" @dragover=\"onDragover($event)\" @dragleave=\"onDragleave($event)\" @drop=\"onDrop($event)\"></div>\n</template>\n```\n\n上面的代码已经可以让，元素可以拖拽，当元素拖到可防止区域时候，可以看到鼠标样式会变为可放置样式了。\n\n## Grid 布局\n\n我们是需要进行 Grid 拖拽布局，所以先对上面放置容器进行改造，首先就是需要将容器进行格子划分区域显示。\n\n### 计算 Grid 格子大小\n\n我这里直接使用了 **@vueuse/core** 的 **useElementSize** 的 hooks 去获取容器元素大小变动，也可以自己通过 **ResizeObserver** 去监听元素变动。接着根据设置列数、行数、间隔去计算单个格子大小。\n\n```ts\nimport { useElementSize } from \"@vueuse/core\";\n\n/**\n * 容器等分尺寸\n * @param {*} target 容器 HTML\n * @param {*} column 列数\n * @param {*} row 行数\n * @param {*} gap 间隔\n * @returns\n */\nexport const useBoxSize = (target: Ref<HTMLElement | undefined>, column: number, row: number, gap: number) => {\n  const { width, height } = useElementSize(target);\n  return computed(() => ({\n    width: (width.value - (column - 1) * gap) / column,\n    height: (height.value - (row - 1) * gap) / row,\n  }));\n};\n```\n\n### 设置 Grid 样式\n\n根据列数和行数循环生成格子数，**rowCount**、**columnCount**为行数和列数。\n\n```html\n<div class=\"drop-content__drop-container\" @dragenter=\"onDragenter($event)\" @dragover=\"onDragover($event)\" @dragleave=\"onDragleave($event)\" @drop=\"onDrop($event)\">\n  <template v-for=\"x in rowCount\">\n    <div class=\"bg-column\" v-for=\"y in columnCount\" :key=\"`${x}-${y}`\"></div>\n  </template>\n</div>\n```\n\n设置 Grid 样式，下面变量中 **gap** 为格子间隔，**repeat** 是 Grid 用来重复设置相同值的，**grid-template-columns: repeat(2,100px)** 等效于 **grid-template-columns: 100px 100px**。因为我们只需在容器里监听拖拽放置事件，所以我们还需要将\n所有的 **bg-column** 事件去掉，设置 **pointer-events: none** 即可。\n\n```scss\n.drop-content__drop-container {\n  display: grid;\n  row-gap: v-bind(\"gap+'px'\");\n  column-gap: v-bind(\"gap+'px'\");\n  grid-template-columns: repeat(v-bind(\"columnCount\"), v-bind(\"boxSize.width+'px'\"));\n  grid-template-rows: repeat(v-bind(\"rowCount\"), v-bind(\"boxSize.height+'px'\"));\n  .bg-column {\n    background-color: #fff;\n    border-radius: 6px;\n    pointer-events: none;\n  }\n}\n```\n\n效果如下：\n![](/images/posts/grid_layout/grid.png)_Grid 容器样式_\n\n## 放置元素\n\n放置元素时我们需要先计算出元素在 Grid 位置信息等，这样才知道元素应该放置那哪个地方。\n\n### 拖拽位置计算\n\n当元素拖拽进容器中时，我们可以通过 **offsetX**、**offsetY** 两个数据获取当前鼠标距离容器左上角位置距离，我们可以根据这两个值计算出对应的在 Grid 中做坐标。\n\n计算方式：\n\n```ts\n// 计算 x 坐标\nconst getX = (num) => parseInt(num / (boxSizeWidth + gap));\n// 计算 y 坐标\nconst getY = (num) => parseInt(num / (boxSizeHeight + gap));\n```\n\n需要注意的是上面计算坐标是 0,0 开始的，而 Grid 是 1,1 开始的。\n\n### 获取拖拽信息\n\n我们在进入容器时，通过上面封装 **dragData** 来获取当前拖拽元素信息，获取它尺寸信息等等。\n\n```ts\n// 拖拽中的元素\nconst current = reactive({\n  show: <boolean>false,\n  id: <undefined | number>undefined,\n  column: <number>0, // 宽\n  row: <number>0, // 高\n  x: <number>0, // 列\n  y: <number>0, // 行\n});\n\n// 进入放置目标\nconst onDragenter = (e) => {\n  e.preventDefault();\n  const dragData = dragStore.get(props.groupName);\n  if (dragData) {\n    current.column = dragData.column;\n    current.row = dragData.row;\n    current.x = getX(e.offsetX);\n    current.y = getY(e.offsetY);\n    current.show = true;\n  }\n};\n\n// 在目标中移动\nconst onDragover = (e) => {\n  e.preventDefault();\n  const dragData = dragStore.get(props.groupName);\n  if (dragData) {\n    current.x = getX(e.offsetX);\n    current.y = getY(e.offsetY);\n  }\n};\n\nconst onDragleave = (e) => {\n  e.preventDefault();\n  current.show = false;\n  current.id = undefined;\n};\n```\n\n在 drop 事件中，我们将当前拖拽元素存放起来，list 会存放每一次拖拽进来元素信息。\n\n```ts\nconst list = ref([]);\n\n// 放置在目标上\nconst onDrop = async (e) => {\n  e.preventDefault();\n  current.show = false;\n  const item = dragStore.get(props.groupName);\n\n  list.value.push({\n    ...item,\n    x: current.x,\n    y: current.y,\n    id: new Date().getTime(),\n  });\n};\n```\n\n### 计算碰撞\n\n在上面还需要计算当前拖拽的位置是否可以放置，需要处理是否包含在容器内，是否与其他已放置元素存在重叠等等。\n\n#### 计算是否在容器内\n\n这个是比较好计算的，只需要当前拖拽位置左上角坐标 >= 容器左上角的坐标，然后右下角的坐标 <= 容器的右下角的坐标，就是在容器内的。\n\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 472.22222222222223 448.8888888888887\" width=\"472.22222222222223\" height=\"448.8888888888887\">\n  <g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(40 107.77777777777783) rotate(0 200.55555555555551 147.2222222222224)\"><path d=\"M0 0 C82.3 0, 164.61 0, 401.11 0 M0 0 C159.75 0, 319.49 0, 401.11 0 M401.11 0 C401.11 102.5, 401.11 205, 401.11 294.44 M401.11 0 C401.11 83.68, 401.11 167.36, 401.11 294.44 M401.11 294.44 C245.89 294.44, 90.67 294.44, 0 294.44 M401.11 294.44 C310.61 294.44, 220.11 294.44, 0 294.44 M0 294.44 C0 225.76, 0 157.08, 0 0 M0 294.44 C0 188.64, 0 82.83, 0 0\" stroke=\"#f08c00\" stroke-width=\"1\" fill=\"none\"></path></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(95.55555555555554 188.8888888888887) rotate(0 142.2222222222222 63.888888888888914)\"><path d=\"M0 0 C93.16 0, 186.31 0, 284.44 0 M0 0 C82.11 0, 164.21 0, 284.44 0 M284.44 0 C284.44 33.97, 284.44 67.94, 284.44 127.78 M284.44 0 C284.44 48.07, 284.44 96.14, 284.44 127.78 M284.44 127.78 C178.07 127.78, 71.69 127.78, 0 127.78 M284.44 127.78 C222.86 127.78, 161.28 127.78, 0 127.78 M0 127.78 C0 89.06, 0 50.33, 0 0 M0 127.78 C0 99.64, 0 71.5, 0 0\" stroke=\"#1971c2\" stroke-width=\"1\" fill=\"none\"></path></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(295.5555555555555 10) rotate(0 0.00005000000000165983 0.00005000000010113581)\" stroke=\"none\"><path fill=\"#f08c00\" d=\"M 1.57,-1.57 Q 1.57,-1.57 1.77,-1.27 1.98,-0.98 2.09,-0.64 2.20,-0.29 2.19,0.05 2.18,0.41 2.05,0.75 1.93,1.09 1.70,1.37 1.48,1.65 1.18,1.84 0.87,2.04 0.52,2.12 0.18,2.21 -0.17,2.18 -0.53,2.15 -0.86,2.01 -1.19,1.87 -1.46,1.63 -1.73,1.39 -1.90,1.07 -2.08,0.76 -2.15,0.41 -2.21,0.05 -2.17,-0.29 -2.12,-0.65 -1.96,-0.97 -1.80,-1.29 -1.54,-1.54 -1.29,-1.80 -0.97,-1.96 -0.65,-2.12 -0.29,-2.17 0.06,-2.21 0.41,-2.15 0.76,-2.08 1.07,-1.90 1.39,-1.73 1.63,-1.46 1.87,-1.19 2.01,-0.86 2.15,-0.53 2.18,-0.17 2.21,0.18 2.12,0.52 2.03,0.87 1.84,1.18 1.65,1.48 1.37,1.70 1.09,1.93 0.75,2.05 0.41,2.18 0.05,2.19 -0.30,2.20 -0.64,2.09 -0.98,1.98 -1.27,1.77 -1.57,1.56 -1.57,1.57 -1.57,1.57 -1.73,1.35 -1.90,1.14 -2.01,0.90 -2.12,0.66 -2.16,0.39 -2.21,0.13 -2.20,-0.13 -2.18,-0.40 -2.10,-0.65 -2.02,-0.91 -1.88,-1.14 -1.74,-1.36 -1.55,-1.55 -1.36,-1.74 -1.14,-1.88 -0.91,-2.02 -0.65,-2.10 -0.40,-2.18 -0.13,-2.20 0.13,-2.21 0.39,-2.16 0.66,-2.12 0.90,-2.01 1.14,-1.90 1.35,-1.73 1.57,-1.57 1.57,-1.57 L 1.57,-1.57 Z\"></path></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(25.555555555555543 91.11111111111086) rotate(0 40 56.66666666666674)\" stroke=\"none\"><path fill=\"#e03131\" d=\"M -0.26,1.83 Q -0.26,1.83 -2.43,1.44 -4.59,1.04 -6.52,2.11 -8.44,3.19 -9.26,4.40 -10.09,5.61 -10.80,7.05 -11.52,8.50 -12.19,10.31 -12.87,12.12 -13.17,14.36 -13.48,16.60 -13.64,19.17 -13.80,21.73 -13.81,23.48 -13.82,25.22 -13.88,27.55 -13.95,29.88 -13.96,31.83 -13.96,33.78 -13.62,35.42 -13.29,37.06 -12.60,38.96 -11.91,40.87 -10.98,42.21 -10.05,43.55 -9.00,45.14 -7.95,46.73 -6.64,48.31 -5.33,49.89 -3.78,51.91 -2.24,53.93 -0.07,55.98 2.09,58.04 4.32,60.24 6.56,62.43 9.10,64.97 11.64,67.51 14.58,69.81 17.51,72.12 20.42,74.75 23.32,77.38 27.39,80.70 31.45,84.02 35.41,87.03 39.37,90.03 42.36,92.62 45.36,95.21 47.88,97.24 50.40,99.27 53.04,101.07 55.67,102.87 57.49,104.31 59.30,105.76 60.76,106.98 62.22,108.20 63.22,108.98 64.22,109.75 65.59,111.08 66.96,112.40 68.41,113.54 69.87,114.69 71.44,115.82 73.00,116.95 74.17,117.26 75.34,117.58 76.99,118.46 78.64,119.35 79.74,119.56 80.85,119.77 81.92,119.83 82.99,119.89 84.14,120.30 85.29,120.70 86.47,120.72 87.65,120.74 89.19,120.05 90.73,119.35 92.08,118.63 93.42,117.92 93.22,113.88 93.02,109.84 93.19,105.73 93.36,101.63 92.84,96.16 92.33,90.69 91.83,86.08 91.33,81.48 90.82,77.61 90.32,73.74 89.80,70.51 89.29,67.28 88.47,64.72 87.65,62.17 86.97,59.39 86.29,56.60 85.07,53.27 83.86,49.94 82.08,45.99 80.30,42.03 78.59,38.42 76.88,34.82 75.51,32.00 74.15,29.19 72.62,26.43 71.10,23.66 69.52,21.24 67.93,18.81 66.30,16.51 64.68,14.20 63.06,12.30 61.44,10.40 60.07,8.58 58.71,6.77 56.99,5.50 55.27,4.22 52.92,2.70 50.58,1.17 48.32,-0.10 46.07,-1.37 43.90,-2.20 41.74,-3.04 39.18,-4.05 36.62,-5.06 34.68,-5.45 32.74,-5.83 30.68,-6.01 28.61,-6.18 26.93,-6.50 25.25,-6.83 23.73,-6.91 22.21,-6.99 20.72,-7.32 19.22,-7.66 17.56,-7.80 15.89,-7.94 14.19,-7.99 12.49,-8.04 10.82,-8.04 9.14,-8.05 7.34,-7.91 5.55,-7.77 4.40,-7.68 3.24,-7.58 2.40,-6.50 1.55,-5.41 0.26,-3.97 -1.02,-2.52 0.50,-2.05 2.02,-1.57 2.22,-1.21 2.42,-0.84 2.49,-0.43 2.56,-0.02 2.50,0.38 2.44,0.79 2.25,1.16 2.06,1.53 1.76,1.82 1.46,2.11 1.08,2.28 0.71,2.46 0.29,2.51 -0.11,2.56 -0.51,2.48 -0.92,2.39 -1.28,2.18 -1.64,1.97 -1.91,1.66 -2.18,1.34 -2.34,0.96 -2.50,0.57 -2.52,0.16 -2.55,-0.25 -2.44,-0.65 -2.34,-1.05 -2.11,-1.40 -1.88,-1.74 -1.55,-2.00 -1.22,-2.25 -0.83,-2.39 -0.44,-2.52 -0.02,-2.53 0.38,-2.53 0.78,-2.40 1.17,-2.28 1.51,-2.03 1.84,-1.78 2.08,-1.44 2.31,-1.10 2.43,-0.70 2.54,-0.30 2.53,0.11 2.51,0.52 2.36,0.91 2.21,1.30 1.94,1.62 1.68,1.94 1.32,2.15 0.97,2.37 0.56,2.46 0.16,2.56 -0.24,2.52 -0.66,2.48 -1.04,2.31 -1.41,2.13 -1.72,1.85 -2.02,1.57 -2.02,1.57 -2.02,1.57 -3.81,-1.00 -5.60,-3.58 -4.92,-5.12 -4.24,-6.67 -3.18,-8.05 -2.12,-9.43 -0.71,-10.50 0.70,-11.58 1.82,-11.99 2.94,-12.41 4.26,-12.30 5.58,-12.20 7.39,-12.03 9.21,-11.85 10.92,-11.80 12.64,-11.74 14.43,-11.65 16.21,-11.56 18.23,-11.37 20.24,-11.17 21.40,-10.73 22.56,-10.28 24.28,-10.03 25.99,-9.77 27.42,-9.30 28.84,-8.83 31.06,-8.63 33.29,-8.44 35.44,-7.97 37.58,-7.50 40.14,-6.50 42.69,-5.49 45.02,-4.58 47.36,-3.67 49.69,-2.35 52.01,-1.03 54.44,0.54 56.86,2.12 58.83,3.64 60.80,5.16 62.13,6.92 63.45,8.68 65.15,10.67 66.84,12.67 68.50,15.01 70.16,17.35 71.80,19.86 73.45,22.37 75.01,25.19 76.57,28.01 77.95,30.83 79.33,33.64 81.08,37.27 82.82,40.89 84.66,44.93 86.50,48.97 87.79,52.43 89.08,55.89 89.78,58.56 90.48,61.23 91.42,63.99 92.36,66.75 92.97,70.00 93.58,73.26 94.21,77.15 94.84,81.03 95.51,85.64 96.19,90.25 96.93,95.95 97.68,101.65 97.81,105.78 97.94,109.91 98.07,113.71 98.20,117.52 97.88,119.22 97.55,120.92 96.14,121.96 94.74,123.00 93.74,123.59 92.74,124.17 91.51,124.65 90.28,125.12 88.83,125.41 87.38,125.71 86.25,125.56 85.11,125.41 83.75,124.75 82.39,124.09 81.09,123.85 79.78,123.60 78.32,123.09 76.86,122.59 75.47,121.78 74.08,120.97 72.60,120.31 71.12,119.64 69.47,118.48 67.82,117.31 66.21,116.06 64.61,114.80 63.29,113.49 61.96,112.18 61.14,111.26 60.32,110.34 58.99,109.08 57.66,107.82 55.92,106.44 54.18,105.05 51.46,103.19 48.74,101.33 46.19,99.27 43.63,97.22 40.69,94.68 37.76,92.15 33.76,89.12 29.76,86.10 25.64,82.74 21.51,79.38 18.67,76.82 15.83,74.26 12.77,71.87 9.70,69.47 7.15,66.96 4.60,64.45 2.36,62.30 0.11,60.14 -2.22,57.96 -4.57,55.78 -6.14,53.85 -7.70,51.92 -9.20,50.23 -10.70,48.54 -11.75,46.93 -12.80,45.32 -13.80,43.65 -14.81,41.98 -15.67,39.81 -16.52,37.64 -16.82,35.71 -17.12,33.77 -17.10,31.81 -17.08,29.85 -17.11,27.49 -17.14,25.13 -17.04,23.36 -16.95,21.59 -16.87,18.90 -16.79,16.21 -16.54,13.60 -16.28,10.98 -15.63,8.87 -14.98,6.77 -14.09,5.02 -13.20,3.27 -11.74,1.47 -10.29,-0.32 -8.99,-0.85 -7.70,-1.37 -6.02,-1.84 -4.34,-2.31 -2.04,-2.07 0.26,-1.83 0.47,-1.78 0.69,-1.72 0.89,-1.61 1.08,-1.50 1.25,-1.35 1.41,-1.20 1.53,-1.01 1.66,-0.82 1.73,-0.61 1.81,-0.40 1.83,-0.18 1.85,0.03 1.82,0.26 1.79,0.48 1.71,0.69 1.62,0.89 1.49,1.07 1.36,1.26 1.19,1.40 1.02,1.55 0.82,1.65 0.62,1.75 0.40,1.79 0.18,1.84 -0.03,1.84 -0.26,1.83 -0.26,1.83 L -0.26,1.83 Z\"></path></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(414.4444444444444 304.44444444444434) rotate(0 -5.555555555555543 63.888888888888914)\" stroke=\"none\"><path fill=\"#e03131\" d=\"M -0.77,1.94 Q -0.77,1.94 -2.36,1.29 -3.95,0.65 -5.11,0.47 -6.26,0.30 -7.86,-0.14 -9.46,-0.58 -10.61,-0.70 -11.76,-0.81 -13.15,-1.21 -14.55,-1.62 -16.00,-2.11 -17.46,-2.60 -18.82,-2.78 -20.18,-2.95 -22.20,-3.46 -24.21,-3.98 -26.49,-4.24 -28.77,-4.50 -30.11,-4.51 -31.44,-4.52 -33.00,-4.42 -34.56,-4.32 -36.49,-3.52 -38.41,-2.72 -40.05,-1.82 -41.69,-0.92 -43.37,0.34 -45.06,1.61 -46.50,2.61 -47.94,3.62 -49.06,4.60 -50.19,5.59 -51.29,6.64 -52.39,7.69 -53.42,9.44 -54.44,11.20 -55.25,12.93 -56.05,14.66 -56.38,16.50 -56.71,18.34 -56.90,21.04 -57.08,23.73 -57.18,25.85 -57.28,27.98 -57.02,30.38 -56.76,32.78 -56.04,35.33 -55.32,37.89 -54.38,40.58 -53.44,43.28 -52.09,46.65 -50.75,50.02 -48.27,55.26 -45.80,60.50 -43.49,64.62 -41.17,68.74 -38.64,72.03 -36.10,75.32 -33.71,78.69 -31.32,82.06 -28.73,85.37 -26.14,88.69 -23.46,91.67 -20.79,94.65 -17.10,98.47 -13.41,102.29 -9.31,106.14 -5.20,109.98 -1.24,113.19 2.70,116.40 7.54,119.66 12.39,122.92 16.32,124.92 20.24,126.92 23.55,128.75 26.86,130.59 29.71,131.30 32.56,132.02 34.72,132.34 36.89,132.65 38.44,132.69 40.00,132.73 41.10,132.59 42.19,132.46 42.12,130.79 42.04,129.13 42.21,126.86 42.38,124.58 42.82,121.57 43.25,118.56 43.79,115.38 44.32,112.20 44.89,109.25 45.46,106.29 45.70,103.21 45.95,100.13 46.07,96.26 46.18,92.39 46.24,88.51 46.30,84.63 46.33,81.06 46.36,77.49 46.38,73.42 46.40,69.35 46.09,65.44 45.78,61.52 45.02,57.68 44.27,53.83 43.62,50.24 42.98,46.64 42.09,44.27 41.21,41.89 40.79,39.12 40.37,36.34 39.61,34.39 38.84,32.44 38.16,29.89 37.48,27.34 36.88,25.35 36.28,23.36 35.39,22.05 34.49,20.74 33.74,19.91 32.99,19.08 32.25,18.03 31.52,16.97 29.67,15.53 27.82,14.09 26.85,13.50 25.88,12.92 24.84,12.37 23.79,11.82 22.70,11.28 21.61,10.74 20.32,9.74 19.02,8.74 18.01,8.14 17.00,7.54 16.12,6.91 15.23,6.28 13.58,5.73 11.94,5.17 10.92,4.63 9.91,4.09 8.48,3.56 7.05,3.03 5.17,2.61 3.29,2.19 1.82,2.40 0.35,2.61 -0.06,2.60 -0.49,2.59 -0.89,2.45 -1.29,2.30 -1.63,2.03 -1.96,1.76 -2.19,1.40 -2.42,1.04 -2.53,0.63 -2.63,0.21 -2.60,-0.20 -2.56,-0.63 -2.39,-1.02 -2.22,-1.42 -1.94,-1.74 -1.65,-2.05 -1.28,-2.26 -0.91,-2.48 -0.49,-2.56 -0.07,-2.64 0.34,-2.58 0.77,-2.52 1.15,-2.33 1.54,-2.14 1.84,-1.84 2.14,-1.54 2.33,-1.16 2.52,-0.77 2.58,-0.35 2.64,0.06 2.56,0.48 2.48,0.90 2.27,1.28 2.06,1.65 1.74,1.94 1.42,2.22 1.03,2.39 0.64,2.56 0.21,2.60 -0.21,2.63 -0.62,2.53 -1.04,2.42 -1.40,2.19 -1.76,1.96 -2.03,1.63 -2.30,1.30 -2.44,0.90 -2.59,0.50 -2.60,0.07 -2.62,-0.35 -2.49,-0.76 -2.36,-1.17 -2.12,-1.52 -1.87,-1.86 -1.52,-2.11 -1.17,-2.36 -0.76,-2.49 -0.35,-2.61 -0.35,-2.61 -0.35,-2.61 2.84,-2.76 6.04,-2.90 7.16,-2.79 8.27,-2.67 9.27,-2.12 10.27,-1.58 12.00,-0.95 13.72,-0.33 14.60,0.43 15.47,1.20 17.54,2.30 19.61,3.40 20.82,4.19 22.03,4.98 22.95,5.76 23.87,6.54 24.98,7.17 26.10,7.81 27.24,8.52 28.39,9.23 29.57,10.10 30.74,10.97 31.70,11.93 32.65,12.90 33.69,13.95 34.73,15.00 35.24,16.03 35.74,17.07 36.38,18.14 37.03,19.22 37.92,20.90 38.82,22.58 39.42,24.62 40.02,26.66 40.66,29.08 41.31,31.49 42.15,33.72 42.99,35.94 43.35,38.46 43.71,40.99 44.65,43.58 45.60,46.16 46.25,49.74 46.90,53.31 47.69,57.31 48.48,61.31 48.80,65.33 49.13,69.35 49.13,73.43 49.13,77.50 49.13,81.08 49.13,84.65 49.11,88.56 49.08,92.46 49.02,96.40 48.95,100.34 48.75,103.59 48.56,106.84 48.09,109.76 47.62,112.69 47.23,115.84 46.83,118.98 46.58,121.83 46.33,124.68 46.39,127.17 46.44,129.67 46.21,130.92 45.98,132.17 45.23,133.62 44.49,135.07 42.12,135.40 39.74,135.74 38.12,135.49 36.50,135.25 34.20,134.91 31.90,134.57 28.75,133.73 25.61,132.90 22.33,131.08 19.05,129.26 14.98,127.18 10.92,125.11 5.98,121.78 1.04,118.45 -2.97,115.18 -7.00,111.91 -11.16,108.02 -15.31,104.13 -19.03,100.27 -22.76,96.42 -25.49,93.37 -28.23,90.32 -30.86,86.96 -33.48,83.60 -35.85,80.27 -38.22,76.95 -40.86,73.50 -43.51,70.06 -45.88,65.86 -48.24,61.66 -50.77,56.35 -53.29,51.04 -54.67,47.62 -56.06,44.20 -57.05,41.44 -58.04,38.67 -58.85,35.90 -59.65,33.13 -59.98,30.51 -60.31,27.90 -60.28,25.73 -60.26,23.57 -60.15,20.68 -60.05,17.79 -59.70,15.52 -59.35,13.25 -58.56,11.31 -57.76,9.38 -56.52,7.02 -55.29,4.67 -54.07,3.56 -52.86,2.45 -51.54,1.36 -50.22,0.28 -48.93,-0.58 -47.63,-1.44 -45.87,-3.07 -44.12,-4.69 -42.18,-6.10 -40.24,-7.51 -39.18,-7.88 -38.13,-8.25 -36.30,-8.61 -34.47,-8.96 -32.85,-8.78 -31.22,-8.59 -29.86,-8.45 -28.50,-8.31 -25.92,-8.23 -23.35,-8.14 -21.46,-7.84 -19.58,-7.54 -17.78,-7.30 -15.99,-7.05 -13.54,-6.18 -11.10,-5.30 -9.68,-5.05 -8.26,-4.79 -6.82,-4.37 -5.39,-3.94 -3.91,-3.57 -2.42,-3.20 -0.82,-2.57 0.77,-1.94 0.99,-1.82 1.22,-1.70 1.40,-1.53 1.59,-1.35 1.73,-1.14 1.87,-0.93 1.95,-0.70 2.04,-0.46 2.06,-0.21 2.09,0.03 2.05,0.28 2.02,0.53 1.92,0.77 1.83,1.00 1.68,1.21 1.54,1.41 1.34,1.58 1.15,1.74 0.93,1.85 0.70,1.97 0.46,2.02 0.21,2.08 -0.03,2.07 -0.28,2.07 -0.53,2.00 -0.77,1.94 -0.77,1.94 L -0.77,1.94 Z\"></path></g></svg>\n\n代码实现：\n\n```ts\n/**\n * 判断是否在当前四边形内\n * @param {*} p1 父容器\n * @param {*} p2\n *  对应是 左上角坐标 和 右下角坐标\n *  [0,0,1,1]  => 左上角坐标 0,0  右下角 1,1\n */\nexport const booleanWithin = (p1: [number, number, number, number], p2: [number, number, number, number]) => {\n  return p1[0] <= p2[0] && p1[1] <= p2[1] && p1[2] >= p2[2] && p1[3] >= p2[3];\n};\n```\n\n#### 计算是否与现有的相交\n\n两个矩形相交情况有很多种，计算比较麻烦，但是我们可以计算他们不相交，然后在取反方式判断是否相交。\n\n不相交情况只有四种，假设有 p1、p2 连个矩形，它们不相交的情况只有四种：\n\n-   p1 在 p2 左边\n-   p1 在 p2 右边\n-   p1 在 p2 上边\n-   p1 在 p2 下边\n\n代码实现：\n\n```ts\n/**\n * 判断是两四边形是否相交\n * @param {*} p1 父容器\n * @param {*} p2\n *  对应是 左上角坐标 和 右下角坐标\n *  [0,0,1,1]  => 左上角坐标 0,0  右下角 1,1\n */\nexport const booleanIntersects = (p1: [number, number, number, number], p2: [number, number, number, number]) => {\n  return !(p1[2] <= p2[0] || p2[2] <= p1[0] || p1[3] <= p2[1] || p2[3] <= p1[1]);\n};\n```\n\n### 在放置前判断\n\n可以通过计算属性去计算，在后面拖拽中处理样式也可以用到。修改 **drop** 中方法，然后在 **drop** 中根据 **isPutDown** 是否有效。\n\n```ts\n// 是否可以放置\nconst isPutDown = computed(() => {\n  const currentXy = [current.x, current.y, current.x + current.column, current.y + current.row];\n  return (\n    booleanWithin([0, 0, columnCount.value, rowCount.value], currentXy) && //\n    list.value.every((item) => item.id === current.id || !booleanIntersects([item.x, item.y, item.x + item.column, item.y + item.row], currentXy))\n  );\n});\n```\n\n## 拖拽时样式\n\n上处理了基本拖放数据处理逻辑，为了更好的交互，我们可以在拖拽中显示元素预占位信息，更加直观的显示元素占位大小，类似这样：\n\n![](/images/posts/grid_layout/mask1.png)_可放置示例_\n\n我们可以根据上面 **current** 中信息去计算大小信息，还可以根据 **isPutDown** 去判断当前位置是否可以放置，用来显示不同交互效果。\n\n![](/images/posts/grid_layout/mask2.png)_不可放置示例_\n\n可以直接通过 Grid 的 grid-area 属性，快速计算出放置位置信息，应为我们上面计算的 x 、y 是从 0 开始的，所以这里需要 +1。\n\n```css\ngrid-area: `${y + 1} / ${x + 1} / ${y + row + 1}/ ${ x + column + 1 }`\n```\n\n## 预览容器\n\n在元素放置后，我们还需要根据 list 中数据，生成元素占位样式处理，我们可以拖拽容器上层在放置一个容器，专门用来显示放置后的样式，也是可以直接使用 Grid 布局去处理。\n\n### 预览样式\n\n样式基本上和 **drop-container** 样式抱持一致即可，需要注意的时需要为预览容器设置 **pointer-events: none**，避免遮挡了 **drop-container** 事件监听。\n\n```scss\n.drop-content__preview,\n.drop-content__drop-container {\n  // ...\n}\n```\n\n每个元素位置信息计算方式，基本和拖拽时样式计算方式一致，直接通过 **grid-area** 去布局就可以了。\n\n```css\ngrid-area: `${y + 1} / ${x + 1} / ${y + row + 1}/ ${ x + column + 1 }`\n```\n\n![](/images/posts/grid_layout/drop.png)_示例_\n\n### 二次拖拽\n\n当元素拖拽进来后，我们还需要对放置的元素支持继续拖拽。因为上面我们将预览事件通过 **pointer-events** 去除了，所以我们需要给每个子元素都加上去。然后给子元素添加 **draggable=true**，然后处理拖拽事件，基本上和上面处理方式一样，在 **dragstart**、**dragend** 处理拖拽元素信息。\n\n然后我们还需在 **onDrop** 进行一番修改，如果是二次拖拽时只需要修改坐标信息，修改原 **onDrop** 处理方式：\n\n```ts\nif (item.id) {\n  item.x = current.x;\n  item.y = current.y;\n} else {\n  list.value.push({\n    ...item,\n    x: current.x,\n    y: current.y,\n    id: new Date().getTime(),\n  });\n}\n```\n\n### 位置偏移优化\n\n当你对元素二次拖拽时，会发现元素会存在偏移问。比如你放置了一个 1x2 元素后，当你从下面拖拽，你会发现拖拽中的占位样式和你拖拽元素位置存在偏差。\n\n效果如下图\n\n![](/images/posts/grid_layout/offset.png)_示例_\n\n出现这情况应为上面我们时根据鼠标位置为左上角进行计算的，所以会存在这种偏差问题，我们可在拖拽前计算出偏移量来校正位置。\n\n我们可以在二次拖拽时，获取到鼠标在当前元素内位置信息\n\n```ts\nconst onDragstart = (e) => {\n  const data = props.data;\n  data.offsetX = e.offsetX;\n  data.offsetY = e.offsetY;\n  dragStore.set(props.groupName, data);\n};\n```\n\n在 **drop-container** 内计算 x、y 值时候减去偏移量，对 **onDragenter**、**onDragover** 进行如下调整修改\n\n```ts\ncurrent.x = getX(e.offsetX) - getX(dragData?.offsetX ?? 0);\ncurrent.y = getY(e.offsetY) - getY(dragData?.offsetY ?? 0);\n```\n\n### 拖拽元素优化\n\n因为上面我们将预览元素添加了 **pointer-events: all**，所以在我们拖拽到现有元素上时，会挡住 **drop-container** 事件的触发，在二次拖拽时，比如将一个 2x2 元素我们需要往下移动一格时，会发现也会被自己挡住。\n\n-   预览元素遮挡问题，可以在拖拽时将其他元素都设置为 **none**，二次拖拽时要做自己设置为 **all** 否则会无法拖拽\n\n```html\n:style=\"{ pointerEvents: current.show && item.id !== current.id ? 'none' : 'all' }\"`\n```\n\n-   二次拖拽时自己位置遮挡问题\n    我们可以在拖拽时增加标识，将自己通过 **transform** 移除到多拽容器外去\n\n```ts\nmoveing.value\n  ? {\n      opacity: 0,\n      transform: `translate(-999999999px, -9999999999px)`,\n    }\n  : {};\n```\n\n### 拖拽调整大小\n\n调整大小和调整位置计算类似，只不过一个是计算坐标一个计算行列。\n\n首先是能让元素可以进行拖拽，很多拖拽调整大小的都是在元素里添加几个拖拽节点元素，然后在监听拖拽节点鼠标事件去计算大小位置等。但是我这里需求比较简单，就不需要做的那么复杂，直接通过 css 让元素可以支持调整大小。\n\n```css\n.preview-item {\n  overflow: auto;\n  resize: both;\n}\n```\n\n添加样式后，可以看到元素可调整样式\n\n![resize](/images/posts/grid_layout/resize.png)\n\n监听元素大小调整方式有两种\n\n-   通 **ResizeObserver API** 监听，但是这个 API 还会监听到其他因数引起变动，比如窗口大小变动，导致元素变动等等。\n-   使用 **mousedown**、**mousemove**、**mouseup** 组合使用，监听鼠标事件，但是这个会存在与拖放事件同时触发问题。\n\n两种方式都可以实现，但是都有需要解决问题，我这里选择了第二种方式实现。\n\n大概实现就是在 PreviewItem 中监听 **mousedown** 事件，在 **mousemove** 中获取元素宽度大小实时计算宽度大小就可以。需要注意的是在 **mouseup** 中要重置 size 信息避免改变原有元素大小。\n\n```ts\nconst onMousedown = (e) => {\n  dragStore.set(props.groupName, props.data);\n  emits(\"resize-start\");\n  resizeing.value = true;\n\n  e.target.onmousemove = function (event) {\n    emits(\"resizeing\", {\n      width: event.target.offsetWidth,\n      height: event.target.offsetHeight,\n    });\n  };\n\n  e.target.onmouseup = function (event) {\n    unset(event.target);\n    emits(\"resize-end\");\n    event.target.style.width = \"100%\";\n    event.target.style.height = \"100%\";\n    dragStore.remove(props.groupName);\n  };\n};\n\nconst unset = (target) => {\n  resizeing.value = false;\n  target.onmousemove = null;\n  target.onmouseup = null;\n};\n```\n\n在 DropContent 通过上面抛出信息，计算大小改变，然后设置拖拽时样式动态查看当前占位大小。\n\n```ts\n// 调整大小开始\nconst onResizeStart = () => {\n  const dragData = dragStore.get(props.groupName);\n  if (dragData) {\n    current.column = dragData.column;\n    current.row = dragData.row;\n    current.x = dragData.x;\n    current.y = dragData.y;\n    current.id = dragData.id;\n    current.show = true;\n  }\n};\n\n// 调正大小时\nconst onResizeing = (e) => {\n  const dragData = dragStore.get(props.groupName);\n  current.column = getColumn(e.width);\n  current.row = getRow(e.height);\n};\n\n// 调整大小结束\nconst onResizeEnd = async () => {\n  current.show = false;\n  const dragData = dragStore.get(props.groupName);\n  if (\n    isPutDown.value &&\n    (await props.beforeDrop(\n      {\n        ...dragData,\n        column: current.column,\n        row: current.row,\n      },\n      list.value\n    ))\n  ) {\n    dragData.column = current.column;\n    dragData.row = current.row;\n  }\n};\n```\n\n实现效果：\n\n![resize_demo](/images/posts/grid_layout/resize_demo.png)\n\n## 结语\n\n到目前为止基本上的 Grid 拖拽布局大致实现了，已经满足基本业务需求了，当然有需要朋友还可以在上面增加碰撞后自动调整位置等等。\n\n完整源码在此，[在线体验](https://stackblitz.com/edit/vitejs-vite-rkwugn)\n","slug":"gird_layout","published":1,"updated":"2024-03-06T07:42:59.000Z","comments":1,"layout":"post","photos":[],"_id":"cltgz7vre001498lg5565a141","content":"<p>最近有个需求需要实现自定义首页布局，需要将屏幕按照 6 列 4 行进行等分成多个格子，然后将组件拖拽对应格子进行渲染展示。</p>\n<p><img src=\"/images/posts/grid_layout/demo.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><em>示例</em></p>\n<span id=\"more\"></span>\n\n<p>对比一些已有的插件，发现想要实现产品的交互效果，没有现成可用的。本身功能并不是太过复杂，于是决定自己基于 vue 手撸一个简易的 Grid 拖拽布局。</p>\n<p>完整源码在此，<a href=\"https://stackblitz.com/edit/vitejs-vite-rkwugn\">在线体验</a></p>\n<h2 id=\"概况\"><a href=\"#概况\" class=\"headerlink\" title=\"概况\"></a>概况</h2><p>需要实现 Grid 拖拽布局，主要了解这两个东西就行</p>\n<ul>\n<li>拖放 API，关于拖放 API 介绍文章有很多 ，可以直接看 MDN 里<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API\">拖放 API</a>介绍，可以说很详细了。</li>\n<li>Grid 布局， Grid 布局与 Flex 布局很相似，但是 Grid 像是二维布局，Flex 则为一维布局，Grid 布局远比 Flex 布局强大。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout\">MDN 关于网格布局介绍</a></li>\n</ul>\n<p>需要实现主要包含：</p>\n<ul>\n<li>组件物料栏拖拽到布局容器</li>\n<li>布局容器 Grid 布局</li>\n<li>放置时是否重叠判断</li>\n<li>拖拽时样式</li>\n<li>放置后样式</li>\n<li>容器内二次拖拽</li>\n</ul>\n<h2 id=\"拖放操作实现\"><a href=\"#拖放操作实现\" class=\"headerlink\" title=\"拖放操作实现\"></a>拖放操作实现</h2><p>拖拽中主要使用到的事件如下</p>\n<ul>\n<li>被拖拽元素事件：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>触发时刻</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dragstart</td>\n<td>当用户开始拖拽一个元素或选中的文本时触发。</td>\n</tr>\n<tr>\n<td>drag</td>\n<td>当拖拽元素或选中的文本时触发。</td>\n</tr>\n<tr>\n<td>dragend</td>\n<td>当拖拽操作结束时触发</td>\n</tr>\n</tbody></table>\n<ul>\n<li>放置容器事件：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>触发时刻</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dragenter</td>\n<td>当拖拽元素或选中的文本到一个可释放目标时触发。</td>\n</tr>\n<tr>\n<td>dragleave</td>\n<td>当拖拽元素或选中的文本离开一个可释放目标时触发。</td>\n</tr>\n<tr>\n<td>dragover</td>\n<td>当元素或选中的文本被拖到一个可释放目标上时触发。</td>\n</tr>\n<tr>\n<td>drop</td>\n<td>当元素或选中的文本在可释放目标上被释放时触发。</td>\n</tr>\n</tbody></table>\n<h3 id=\"可拖拽元素\"><a href=\"#可拖拽元素\" class=\"headerlink\" title=\"可拖拽元素\"></a>可拖拽元素</h3><p>让一个元素能够拖拽只需要给元素设置 <strong>draggable&#x3D;”true”</strong> 即可拖拽，拖拽事件 API 提供了 <strong>DataTransfer</strong> 对象，可以用于设置拖拽数据信息，但是仅仅只能 <strong>drop</strong> 事件中获取到。因为我们需要在拖拽中就需要获取到拖拽信息，用来显示拖拽时样式，所以需要自己处理这些信息存储起来，以便读取。</p>\n<p>需要处理主要是，在拖拽时将 将当前元素信息设置到 <strong>dragStore</strong> 中，结束时清空当前信息。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; dragStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./drag&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> props = defineProps&lt;&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>: <span class=\"title class_\">DragItem</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    groupName?: string;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;&gt;();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onDragstart</span> = (<span class=\"params\">e</span>) =&gt; dragStore.<span class=\"title function_\">set</span>(props.<span class=\"property\">groupName</span>, &#123; ...props.<span class=\"property\">data</span> &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onDragend</span> = (<span class=\"params\"></span>) =&gt; dragStore.<span class=\"title function_\">remove</span>(props.<span class=\"property\">groupName</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;drag-item__el&quot;</span> <span class=\"attr\">draggable</span>=<span class=\"string\">&quot;true&quot;</span> @<span class=\"attr\">dragstart</span>=<span class=\"string\">&quot;onDragstart&quot;</span> @<span class=\"attr\">dragend</span>=<span class=\"string\">&quot;onDragend&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>封装一个存储方法，通过配置相同 key ，可以在同时存在多个放置区域时候，区分开来。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DragStore</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">DragItemData</span>&gt; &#123;</span><br><span class=\"line\">  moveItem = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"title class_\">DragItemData</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">set</span>(<span class=\"params\">key: <span class=\"built_in\">string</span>, data: T</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">moveItem</span>.<span class=\"title function_\">set</span>(key, data);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">remove</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">moveItem</span>.<span class=\"title function_\">delete</span>(key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"attr\">key</span>: <span class=\"built_in\">string</span>): <span class=\"literal\">undefined</span> | <span class=\"title class_\">DragItemData</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">moveItem</span>.<span class=\"title function_\">get</span>(key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可放置区域\"><a href=\"#可放置区域\" class=\"headerlink\" title=\"可放置区域\"></a>可放置区域</h3><p>首先是需要告诉浏览器当前区域是可以放置的，只需要在元素监听 <strong>dragenter</strong>、<strong>dragleave</strong>、<strong>dragover</strong> 事件即可，然后通过 <strong>preventDefault</strong> 来阻止浏览器默认行为。可以在这三个事件中处理判断当前位置是否可以放置等等。</p>\n<p>示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 进入放置目标</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onDragenter</span> = (<span class=\"params\">e</span>) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    e.<span class=\"title function_\">preventDefault</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 在目标中移动</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onDragover</span> = (<span class=\"params\">e</span>) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    e.<span class=\"title function_\">preventDefault</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 离开目标</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onDragleave</span> = (<span class=\"params\">e</span>) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    e.<span class=\"title function_\">preventDefault</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">dragenter</span>=<span class=\"string\">&quot;onDragenter($event)&quot;</span> @<span class=\"attr\">dragover</span>=<span class=\"string\">&quot;onDragover($event)&quot;</span> @<span class=\"attr\">dragleave</span>=<span class=\"string\">&quot;onDragleave($event)&quot;</span> @<span class=\"attr\">drop</span>=<span class=\"string\">&quot;onDrop($event)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码已经可以让，元素可以拖拽，当元素拖到可防止区域时候，可以看到鼠标样式会变为可放置样式了。</p>\n<h2 id=\"Grid-布局\"><a href=\"#Grid-布局\" class=\"headerlink\" title=\"Grid 布局\"></a>Grid 布局</h2><p>我们是需要进行 Grid 拖拽布局，所以先对上面放置容器进行改造，首先就是需要将容器进行格子划分区域显示。</p>\n<h3 id=\"计算-Grid-格子大小\"><a href=\"#计算-Grid-格子大小\" class=\"headerlink\" title=\"计算 Grid 格子大小\"></a>计算 Grid 格子大小</h3><p>我这里直接使用了 <strong>@vueuse&#x2F;core</strong> 的 <strong>useElementSize</strong> 的 hooks 去获取容器元素大小变动，也可以自己通过 <strong>ResizeObserver</strong> 去监听元素变动。接着根据设置列数、行数、间隔去计算单个格子大小。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useElementSize &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vueuse/core&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 容器等分尺寸</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; target 容器 HTML</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; column 列数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; row 行数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; gap 间隔</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">useBoxSize</span> = (<span class=\"params\">target: Ref&lt;HTMLElement | <span class=\"literal\">undefined</span>&gt;, column: <span class=\"built_in\">number</span>, row: <span class=\"built_in\">number</span>, gap: <span class=\"built_in\">number</span></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; width, height &#125; = <span class=\"title function_\">useElementSize</span>(target);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">width</span>: (width.<span class=\"property\">value</span> - (column - <span class=\"number\">1</span>) * gap) / column,</span><br><span class=\"line\">    <span class=\"attr\">height</span>: (height.<span class=\"property\">value</span> - (row - <span class=\"number\">1</span>) * gap) / row,</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置-Grid-样式\"><a href=\"#设置-Grid-样式\" class=\"headerlink\" title=\"设置 Grid 样式\"></a>设置 Grid 样式</h3><p>根据列数和行数循环生成格子数，<strong>rowCount</strong>、<strong>columnCount</strong>为行数和列数。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;drop-content__drop-container&quot;</span> @<span class=\"attr\">dragenter</span>=<span class=\"string\">&quot;onDragenter($event)&quot;</span> @<span class=\"attr\">dragover</span>=<span class=\"string\">&quot;onDragover($event)&quot;</span> @<span class=\"attr\">dragleave</span>=<span class=\"string\">&quot;onDragleave($event)&quot;</span> @<span class=\"attr\">drop</span>=<span class=\"string\">&quot;onDrop($event)&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;x in rowCount&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bg-column&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;y in columnCount&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;`$&#123;x&#125;-$&#123;y&#125;`&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>设置 Grid 样式，下面变量中 <strong>gap</strong> 为格子间隔，<strong>repeat</strong> 是 Grid 用来重复设置相同值的，<strong>grid-template-columns: repeat(2,100px)</strong> 等效于 <strong>grid-template-columns: 100px 100px</strong>。因为我们只需在容器里监听拖拽放置事件，所以我们还需要将<br>所有的 <strong>bg-column</strong> 事件去掉，设置 <strong>pointer-events: none</strong> 即可。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.drop-content__drop-container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">row-gap</span>: <span class=\"built_in\">v-bind</span>(<span class=\"string\">&quot;gap+&#x27;px&#x27;&quot;</span>);</span><br><span class=\"line\">  <span class=\"attribute\">column-gap</span>: <span class=\"built_in\">v-bind</span>(<span class=\"string\">&quot;gap+&#x27;px&#x27;&quot;</span>);</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(<span class=\"built_in\">v-bind</span>(<span class=\"string\">&quot;columnCount&quot;</span>), <span class=\"built_in\">v-bind</span>(<span class=\"string\">&quot;boxSize.width+&#x27;px&#x27;&quot;</span>));</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: <span class=\"built_in\">repeat</span>(<span class=\"built_in\">v-bind</span>(<span class=\"string\">&quot;rowCount&quot;</span>), <span class=\"built_in\">v-bind</span>(<span class=\"string\">&quot;boxSize.height+&#x27;px&#x27;&quot;</span>));</span><br><span class=\"line\">  <span class=\"selector-class\">.bg-column</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">6px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">pointer-events</span>: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：<br><img src=\"/images/posts/grid_layout/grid.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><em>Grid 容器样式</em></p>\n<h2 id=\"放置元素\"><a href=\"#放置元素\" class=\"headerlink\" title=\"放置元素\"></a>放置元素</h2><p>放置元素时我们需要先计算出元素在 Grid 位置信息等，这样才知道元素应该放置那哪个地方。</p>\n<h3 id=\"拖拽位置计算\"><a href=\"#拖拽位置计算\" class=\"headerlink\" title=\"拖拽位置计算\"></a>拖拽位置计算</h3><p>当元素拖拽进容器中时，我们可以通过 <strong>offsetX</strong>、<strong>offsetY</strong> 两个数据获取当前鼠标距离容器左上角位置距离，我们可以根据这两个值计算出对应的在 Grid 中做坐标。</p>\n<p>计算方式：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 计算 x 坐标</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getX</span> = (<span class=\"params\">num</span>) =&gt; <span class=\"built_in\">parseInt</span>(num / (boxSizeWidth + gap));</span><br><span class=\"line\"><span class=\"comment\">// 计算 y 坐标</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getY</span> = (<span class=\"params\">num</span>) =&gt; <span class=\"built_in\">parseInt</span>(num / (boxSizeHeight + gap));</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是上面计算坐标是 0,0 开始的，而 Grid 是 1,1 开始的。</p>\n<h3 id=\"获取拖拽信息\"><a href=\"#获取拖拽信息\" class=\"headerlink\" title=\"获取拖拽信息\"></a>获取拖拽信息</h3><p>我们在进入容器时，通过上面封装 <strong>dragData</strong> 来获取当前拖拽元素信息，获取它尺寸信息等等。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 拖拽中的元素</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> current = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">show</span>: &lt;<span class=\"built_in\">boolean</span>&gt;<span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">id</span>: &lt;undefined | number&gt;undefined,</span><br><span class=\"line\">  column: &lt;number&gt;0, // 宽</span><br><span class=\"line\">  row: &lt;number&gt;0, // 高</span><br><span class=\"line\">  x: &lt;number&gt;0, // 列</span><br><span class=\"line\">  y: &lt;number&gt;0, // 行</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 进入放置目标</span><br><span class=\"line\">const onDragenter = (e) =&gt; &#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  const dragData = dragStore.get(props.groupName);</span><br><span class=\"line\">  if (dragData) &#123;</span><br><span class=\"line\">    current.column = dragData.column;</span><br><span class=\"line\">    current.row = dragData.row;</span><br><span class=\"line\">    current.x = getX(e.offsetX);</span><br><span class=\"line\">    current.y = getY(e.offsetY);</span><br><span class=\"line\">    current.show = true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 在目标中移动</span><br><span class=\"line\">const onDragover = (e) =&gt; &#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  const dragData = dragStore.get(props.groupName);</span><br><span class=\"line\">  if (dragData) &#123;</span><br><span class=\"line\">    current.x = getX(e.offsetX);</span><br><span class=\"line\">    current.y = getY(e.offsetY);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const onDragleave = (e) =&gt; &#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  current.show = false;</span><br><span class=\"line\">  current.id = undefined;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在 drop 事件中，我们将当前拖拽元素存放起来，list 会存放每一次拖拽进来元素信息。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = <span class=\"title function_\">ref</span>([]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 放置在目标上</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">onDrop</span> = <span class=\"keyword\">async</span> (<span class=\"params\">e</span>) =&gt; &#123;</span><br><span class=\"line\">  e.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">  current.<span class=\"property\">show</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> item = dragStore.<span class=\"title function_\">get</span>(props.<span class=\"property\">groupName</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  list.<span class=\"property\">value</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    ...item,</span><br><span class=\"line\">    <span class=\"attr\">x</span>: current.<span class=\"property\">x</span>,</span><br><span class=\"line\">    <span class=\"attr\">y</span>: current.<span class=\"property\">y</span>,</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>(),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计算碰撞\"><a href=\"#计算碰撞\" class=\"headerlink\" title=\"计算碰撞\"></a>计算碰撞</h3><p>在上面还需要计算当前拖拽的位置是否可以放置，需要处理是否包含在容器内，是否与其他已放置元素存在重叠等等。</p>\n<h4 id=\"计算是否在容器内\"><a href=\"#计算是否在容器内\" class=\"headerlink\" title=\"计算是否在容器内\"></a>计算是否在容器内</h4><p>这个是比较好计算的，只需要当前拖拽位置左上角坐标 &gt;&#x3D; 容器左上角的坐标，然后右下角的坐标 &lt;&#x3D; 容器的右下角的坐标，就是在容器内的。</p>\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 472.22222222222223 448.8888888888887\" width=\"472.22222222222223\" height=\"448.8888888888887\">\n  <g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(40 107.77777777777783) rotate(0 200.55555555555551 147.2222222222224)\"><path d=\"M0 0 C82.3 0, 164.61 0, 401.11 0 M0 0 C159.75 0, 319.49 0, 401.11 0 M401.11 0 C401.11 102.5, 401.11 205, 401.11 294.44 M401.11 0 C401.11 83.68, 401.11 167.36, 401.11 294.44 M401.11 294.44 C245.89 294.44, 90.67 294.44, 0 294.44 M401.11 294.44 C310.61 294.44, 220.11 294.44, 0 294.44 M0 294.44 C0 225.76, 0 157.08, 0 0 M0 294.44 C0 188.64, 0 82.83, 0 0\" stroke=\"#f08c00\" stroke-width=\"1\" fill=\"none\"></path></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(95.55555555555554 188.8888888888887) rotate(0 142.2222222222222 63.888888888888914)\"><path d=\"M0 0 C93.16 0, 186.31 0, 284.44 0 M0 0 C82.11 0, 164.21 0, 284.44 0 M284.44 0 C284.44 33.97, 284.44 67.94, 284.44 127.78 M284.44 0 C284.44 48.07, 284.44 96.14, 284.44 127.78 M284.44 127.78 C178.07 127.78, 71.69 127.78, 0 127.78 M284.44 127.78 C222.86 127.78, 161.28 127.78, 0 127.78 M0 127.78 C0 89.06, 0 50.33, 0 0 M0 127.78 C0 99.64, 0 71.5, 0 0\" stroke=\"#1971c2\" stroke-width=\"1\" fill=\"none\"></path></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(295.5555555555555 10) rotate(0 0.00005000000000165983 0.00005000000010113581)\" stroke=\"none\"><path fill=\"#f08c00\" d=\"M 1.57,-1.57 Q 1.57,-1.57 1.77,-1.27 1.98,-0.98 2.09,-0.64 2.20,-0.29 2.19,0.05 2.18,0.41 2.05,0.75 1.93,1.09 1.70,1.37 1.48,1.65 1.18,1.84 0.87,2.04 0.52,2.12 0.18,2.21 -0.17,2.18 -0.53,2.15 -0.86,2.01 -1.19,1.87 -1.46,1.63 -1.73,1.39 -1.90,1.07 -2.08,0.76 -2.15,0.41 -2.21,0.05 -2.17,-0.29 -2.12,-0.65 -1.96,-0.97 -1.80,-1.29 -1.54,-1.54 -1.29,-1.80 -0.97,-1.96 -0.65,-2.12 -0.29,-2.17 0.06,-2.21 0.41,-2.15 0.76,-2.08 1.07,-1.90 1.39,-1.73 1.63,-1.46 1.87,-1.19 2.01,-0.86 2.15,-0.53 2.18,-0.17 2.21,0.18 2.12,0.52 2.03,0.87 1.84,1.18 1.65,1.48 1.37,1.70 1.09,1.93 0.75,2.05 0.41,2.18 0.05,2.19 -0.30,2.20 -0.64,2.09 -0.98,1.98 -1.27,1.77 -1.57,1.56 -1.57,1.57 -1.57,1.57 -1.73,1.35 -1.90,1.14 -2.01,0.90 -2.12,0.66 -2.16,0.39 -2.21,0.13 -2.20,-0.13 -2.18,-0.40 -2.10,-0.65 -2.02,-0.91 -1.88,-1.14 -1.74,-1.36 -1.55,-1.55 -1.36,-1.74 -1.14,-1.88 -0.91,-2.02 -0.65,-2.10 -0.40,-2.18 -0.13,-2.20 0.13,-2.21 0.39,-2.16 0.66,-2.12 0.90,-2.01 1.14,-1.90 1.35,-1.73 1.57,-1.57 1.57,-1.57 L 1.57,-1.57 Z\"></path></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(25.555555555555543 91.11111111111086) rotate(0 40 56.66666666666674)\" stroke=\"none\"><path fill=\"#e03131\" d=\"M -0.26,1.83 Q -0.26,1.83 -2.43,1.44 -4.59,1.04 -6.52,2.11 -8.44,3.19 -9.26,4.40 -10.09,5.61 -10.80,7.05 -11.52,8.50 -12.19,10.31 -12.87,12.12 -13.17,14.36 -13.48,16.60 -13.64,19.17 -13.80,21.73 -13.81,23.48 -13.82,25.22 -13.88,27.55 -13.95,29.88 -13.96,31.83 -13.96,33.78 -13.62,35.42 -13.29,37.06 -12.60,38.96 -11.91,40.87 -10.98,42.21 -10.05,43.55 -9.00,45.14 -7.95,46.73 -6.64,48.31 -5.33,49.89 -3.78,51.91 -2.24,53.93 -0.07,55.98 2.09,58.04 4.32,60.24 6.56,62.43 9.10,64.97 11.64,67.51 14.58,69.81 17.51,72.12 20.42,74.75 23.32,77.38 27.39,80.70 31.45,84.02 35.41,87.03 39.37,90.03 42.36,92.62 45.36,95.21 47.88,97.24 50.40,99.27 53.04,101.07 55.67,102.87 57.49,104.31 59.30,105.76 60.76,106.98 62.22,108.20 63.22,108.98 64.22,109.75 65.59,111.08 66.96,112.40 68.41,113.54 69.87,114.69 71.44,115.82 73.00,116.95 74.17,117.26 75.34,117.58 76.99,118.46 78.64,119.35 79.74,119.56 80.85,119.77 81.92,119.83 82.99,119.89 84.14,120.30 85.29,120.70 86.47,120.72 87.65,120.74 89.19,120.05 90.73,119.35 92.08,118.63 93.42,117.92 93.22,113.88 93.02,109.84 93.19,105.73 93.36,101.63 92.84,96.16 92.33,90.69 91.83,86.08 91.33,81.48 90.82,77.61 90.32,73.74 89.80,70.51 89.29,67.28 88.47,64.72 87.65,62.17 86.97,59.39 86.29,56.60 85.07,53.27 83.86,49.94 82.08,45.99 80.30,42.03 78.59,38.42 76.88,34.82 75.51,32.00 74.15,29.19 72.62,26.43 71.10,23.66 69.52,21.24 67.93,18.81 66.30,16.51 64.68,14.20 63.06,12.30 61.44,10.40 60.07,8.58 58.71,6.77 56.99,5.50 55.27,4.22 52.92,2.70 50.58,1.17 48.32,-0.10 46.07,-1.37 43.90,-2.20 41.74,-3.04 39.18,-4.05 36.62,-5.06 34.68,-5.45 32.74,-5.83 30.68,-6.01 28.61,-6.18 26.93,-6.50 25.25,-6.83 23.73,-6.91 22.21,-6.99 20.72,-7.32 19.22,-7.66 17.56,-7.80 15.89,-7.94 14.19,-7.99 12.49,-8.04 10.82,-8.04 9.14,-8.05 7.34,-7.91 5.55,-7.77 4.40,-7.68 3.24,-7.58 2.40,-6.50 1.55,-5.41 0.26,-3.97 -1.02,-2.52 0.50,-2.05 2.02,-1.57 2.22,-1.21 2.42,-0.84 2.49,-0.43 2.56,-0.02 2.50,0.38 2.44,0.79 2.25,1.16 2.06,1.53 1.76,1.82 1.46,2.11 1.08,2.28 0.71,2.46 0.29,2.51 -0.11,2.56 -0.51,2.48 -0.92,2.39 -1.28,2.18 -1.64,1.97 -1.91,1.66 -2.18,1.34 -2.34,0.96 -2.50,0.57 -2.52,0.16 -2.55,-0.25 -2.44,-0.65 -2.34,-1.05 -2.11,-1.40 -1.88,-1.74 -1.55,-2.00 -1.22,-2.25 -0.83,-2.39 -0.44,-2.52 -0.02,-2.53 0.38,-2.53 0.78,-2.40 1.17,-2.28 1.51,-2.03 1.84,-1.78 2.08,-1.44 2.31,-1.10 2.43,-0.70 2.54,-0.30 2.53,0.11 2.51,0.52 2.36,0.91 2.21,1.30 1.94,1.62 1.68,1.94 1.32,2.15 0.97,2.37 0.56,2.46 0.16,2.56 -0.24,2.52 -0.66,2.48 -1.04,2.31 -1.41,2.13 -1.72,1.85 -2.02,1.57 -2.02,1.57 -2.02,1.57 -3.81,-1.00 -5.60,-3.58 -4.92,-5.12 -4.24,-6.67 -3.18,-8.05 -2.12,-9.43 -0.71,-10.50 0.70,-11.58 1.82,-11.99 2.94,-12.41 4.26,-12.30 5.58,-12.20 7.39,-12.03 9.21,-11.85 10.92,-11.80 12.64,-11.74 14.43,-11.65 16.21,-11.56 18.23,-11.37 20.24,-11.17 21.40,-10.73 22.56,-10.28 24.28,-10.03 25.99,-9.77 27.42,-9.30 28.84,-8.83 31.06,-8.63 33.29,-8.44 35.44,-7.97 37.58,-7.50 40.14,-6.50 42.69,-5.49 45.02,-4.58 47.36,-3.67 49.69,-2.35 52.01,-1.03 54.44,0.54 56.86,2.12 58.83,3.64 60.80,5.16 62.13,6.92 63.45,8.68 65.15,10.67 66.84,12.67 68.50,15.01 70.16,17.35 71.80,19.86 73.45,22.37 75.01,25.19 76.57,28.01 77.95,30.83 79.33,33.64 81.08,37.27 82.82,40.89 84.66,44.93 86.50,48.97 87.79,52.43 89.08,55.89 89.78,58.56 90.48,61.23 91.42,63.99 92.36,66.75 92.97,70.00 93.58,73.26 94.21,77.15 94.84,81.03 95.51,85.64 96.19,90.25 96.93,95.95 97.68,101.65 97.81,105.78 97.94,109.91 98.07,113.71 98.20,117.52 97.88,119.22 97.55,120.92 96.14,121.96 94.74,123.00 93.74,123.59 92.74,124.17 91.51,124.65 90.28,125.12 88.83,125.41 87.38,125.71 86.25,125.56 85.11,125.41 83.75,124.75 82.39,124.09 81.09,123.85 79.78,123.60 78.32,123.09 76.86,122.59 75.47,121.78 74.08,120.97 72.60,120.31 71.12,119.64 69.47,118.48 67.82,117.31 66.21,116.06 64.61,114.80 63.29,113.49 61.96,112.18 61.14,111.26 60.32,110.34 58.99,109.08 57.66,107.82 55.92,106.44 54.18,105.05 51.46,103.19 48.74,101.33 46.19,99.27 43.63,97.22 40.69,94.68 37.76,92.15 33.76,89.12 29.76,86.10 25.64,82.74 21.51,79.38 18.67,76.82 15.83,74.26 12.77,71.87 9.70,69.47 7.15,66.96 4.60,64.45 2.36,62.30 0.11,60.14 -2.22,57.96 -4.57,55.78 -6.14,53.85 -7.70,51.92 -9.20,50.23 -10.70,48.54 -11.75,46.93 -12.80,45.32 -13.80,43.65 -14.81,41.98 -15.67,39.81 -16.52,37.64 -16.82,35.71 -17.12,33.77 -17.10,31.81 -17.08,29.85 -17.11,27.49 -17.14,25.13 -17.04,23.36 -16.95,21.59 -16.87,18.90 -16.79,16.21 -16.54,13.60 -16.28,10.98 -15.63,8.87 -14.98,6.77 -14.09,5.02 -13.20,3.27 -11.74,1.47 -10.29,-0.32 -8.99,-0.85 -7.70,-1.37 -6.02,-1.84 -4.34,-2.31 -2.04,-2.07 0.26,-1.83 0.47,-1.78 0.69,-1.72 0.89,-1.61 1.08,-1.50 1.25,-1.35 1.41,-1.20 1.53,-1.01 1.66,-0.82 1.73,-0.61 1.81,-0.40 1.83,-0.18 1.85,0.03 1.82,0.26 1.79,0.48 1.71,0.69 1.62,0.89 1.49,1.07 1.36,1.26 1.19,1.40 1.02,1.55 0.82,1.65 0.62,1.75 0.40,1.79 0.18,1.84 -0.03,1.84 -0.26,1.83 -0.26,1.83 L -0.26,1.83 Z\"></path></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(414.4444444444444 304.44444444444434) rotate(0 -5.555555555555543 63.888888888888914)\" stroke=\"none\"><path fill=\"#e03131\" d=\"M -0.77,1.94 Q -0.77,1.94 -2.36,1.29 -3.95,0.65 -5.11,0.47 -6.26,0.30 -7.86,-0.14 -9.46,-0.58 -10.61,-0.70 -11.76,-0.81 -13.15,-1.21 -14.55,-1.62 -16.00,-2.11 -17.46,-2.60 -18.82,-2.78 -20.18,-2.95 -22.20,-3.46 -24.21,-3.98 -26.49,-4.24 -28.77,-4.50 -30.11,-4.51 -31.44,-4.52 -33.00,-4.42 -34.56,-4.32 -36.49,-3.52 -38.41,-2.72 -40.05,-1.82 -41.69,-0.92 -43.37,0.34 -45.06,1.61 -46.50,2.61 -47.94,3.62 -49.06,4.60 -50.19,5.59 -51.29,6.64 -52.39,7.69 -53.42,9.44 -54.44,11.20 -55.25,12.93 -56.05,14.66 -56.38,16.50 -56.71,18.34 -56.90,21.04 -57.08,23.73 -57.18,25.85 -57.28,27.98 -57.02,30.38 -56.76,32.78 -56.04,35.33 -55.32,37.89 -54.38,40.58 -53.44,43.28 -52.09,46.65 -50.75,50.02 -48.27,55.26 -45.80,60.50 -43.49,64.62 -41.17,68.74 -38.64,72.03 -36.10,75.32 -33.71,78.69 -31.32,82.06 -28.73,85.37 -26.14,88.69 -23.46,91.67 -20.79,94.65 -17.10,98.47 -13.41,102.29 -9.31,106.14 -5.20,109.98 -1.24,113.19 2.70,116.40 7.54,119.66 12.39,122.92 16.32,124.92 20.24,126.92 23.55,128.75 26.86,130.59 29.71,131.30 32.56,132.02 34.72,132.34 36.89,132.65 38.44,132.69 40.00,132.73 41.10,132.59 42.19,132.46 42.12,130.79 42.04,129.13 42.21,126.86 42.38,124.58 42.82,121.57 43.25,118.56 43.79,115.38 44.32,112.20 44.89,109.25 45.46,106.29 45.70,103.21 45.95,100.13 46.07,96.26 46.18,92.39 46.24,88.51 46.30,84.63 46.33,81.06 46.36,77.49 46.38,73.42 46.40,69.35 46.09,65.44 45.78,61.52 45.02,57.68 44.27,53.83 43.62,50.24 42.98,46.64 42.09,44.27 41.21,41.89 40.79,39.12 40.37,36.34 39.61,34.39 38.84,32.44 38.16,29.89 37.48,27.34 36.88,25.35 36.28,23.36 35.39,22.05 34.49,20.74 33.74,19.91 32.99,19.08 32.25,18.03 31.52,16.97 29.67,15.53 27.82,14.09 26.85,13.50 25.88,12.92 24.84,12.37 23.79,11.82 22.70,11.28 21.61,10.74 20.32,9.74 19.02,8.74 18.01,8.14 17.00,7.54 16.12,6.91 15.23,6.28 13.58,5.73 11.94,5.17 10.92,4.63 9.91,4.09 8.48,3.56 7.05,3.03 5.17,2.61 3.29,2.19 1.82,2.40 0.35,2.61 -0.06,2.60 -0.49,2.59 -0.89,2.45 -1.29,2.30 -1.63,2.03 -1.96,1.76 -2.19,1.40 -2.42,1.04 -2.53,0.63 -2.63,0.21 -2.60,-0.20 -2.56,-0.63 -2.39,-1.02 -2.22,-1.42 -1.94,-1.74 -1.65,-2.05 -1.28,-2.26 -0.91,-2.48 -0.49,-2.56 -0.07,-2.64 0.34,-2.58 0.77,-2.52 1.15,-2.33 1.54,-2.14 1.84,-1.84 2.14,-1.54 2.33,-1.16 2.52,-0.77 2.58,-0.35 2.64,0.06 2.56,0.48 2.48,0.90 2.27,1.28 2.06,1.65 1.74,1.94 1.42,2.22 1.03,2.39 0.64,2.56 0.21,2.60 -0.21,2.63 -0.62,2.53 -1.04,2.42 -1.40,2.19 -1.76,1.96 -2.03,1.63 -2.30,1.30 -2.44,0.90 -2.59,0.50 -2.60,0.07 -2.62,-0.35 -2.49,-0.76 -2.36,-1.17 -2.12,-1.52 -1.87,-1.86 -1.52,-2.11 -1.17,-2.36 -0.76,-2.49 -0.35,-2.61 -0.35,-2.61 -0.35,-2.61 2.84,-2.76 6.04,-2.90 7.16,-2.79 8.27,-2.67 9.27,-2.12 10.27,-1.58 12.00,-0.95 13.72,-0.33 14.60,0.43 15.47,1.20 17.54,2.30 19.61,3.40 20.82,4.19 22.03,4.98 22.95,5.76 23.87,6.54 24.98,7.17 26.10,7.81 27.24,8.52 28.39,9.23 29.57,10.10 30.74,10.97 31.70,11.93 32.65,12.90 33.69,13.95 34.73,15.00 35.24,16.03 35.74,17.07 36.38,18.14 37.03,19.22 37.92,20.90 38.82,22.58 39.42,24.62 40.02,26.66 40.66,29.08 41.31,31.49 42.15,33.72 42.99,35.94 43.35,38.46 43.71,40.99 44.65,43.58 45.60,46.16 46.25,49.74 46.90,53.31 47.69,57.31 48.48,61.31 48.80,65.33 49.13,69.35 49.13,73.43 49.13,77.50 49.13,81.08 49.13,84.65 49.11,88.56 49.08,92.46 49.02,96.40 48.95,100.34 48.75,103.59 48.56,106.84 48.09,109.76 47.62,112.69 47.23,115.84 46.83,118.98 46.58,121.83 46.33,124.68 46.39,127.17 46.44,129.67 46.21,130.92 45.98,132.17 45.23,133.62 44.49,135.07 42.12,135.40 39.74,135.74 38.12,135.49 36.50,135.25 34.20,134.91 31.90,134.57 28.75,133.73 25.61,132.90 22.33,131.08 19.05,129.26 14.98,127.18 10.92,125.11 5.98,121.78 1.04,118.45 -2.97,115.18 -7.00,111.91 -11.16,108.02 -15.31,104.13 -19.03,100.27 -22.76,96.42 -25.49,93.37 -28.23,90.32 -30.86,86.96 -33.48,83.60 -35.85,80.27 -38.22,76.95 -40.86,73.50 -43.51,70.06 -45.88,65.86 -48.24,61.66 -50.77,56.35 -53.29,51.04 -54.67,47.62 -56.06,44.20 -57.05,41.44 -58.04,38.67 -58.85,35.90 -59.65,33.13 -59.98,30.51 -60.31,27.90 -60.28,25.73 -60.26,23.57 -60.15,20.68 -60.05,17.79 -59.70,15.52 -59.35,13.25 -58.56,11.31 -57.76,9.38 -56.52,7.02 -55.29,4.67 -54.07,3.56 -52.86,2.45 -51.54,1.36 -50.22,0.28 -48.93,-0.58 -47.63,-1.44 -45.87,-3.07 -44.12,-4.69 -42.18,-6.10 -40.24,-7.51 -39.18,-7.88 -38.13,-8.25 -36.30,-8.61 -34.47,-8.96 -32.85,-8.78 -31.22,-8.59 -29.86,-8.45 -28.50,-8.31 -25.92,-8.23 -23.35,-8.14 -21.46,-7.84 -19.58,-7.54 -17.78,-7.30 -15.99,-7.05 -13.54,-6.18 -11.10,-5.30 -9.68,-5.05 -8.26,-4.79 -6.82,-4.37 -5.39,-3.94 -3.91,-3.57 -2.42,-3.20 -0.82,-2.57 0.77,-1.94 0.99,-1.82 1.22,-1.70 1.40,-1.53 1.59,-1.35 1.73,-1.14 1.87,-0.93 1.95,-0.70 2.04,-0.46 2.06,-0.21 2.09,0.03 2.05,0.28 2.02,0.53 1.92,0.77 1.83,1.00 1.68,1.21 1.54,1.41 1.34,1.58 1.15,1.74 0.93,1.85 0.70,1.97 0.46,2.02 0.21,2.08 -0.03,2.07 -0.28,2.07 -0.53,2.00 -0.77,1.94 -0.77,1.94 L -0.77,1.94 Z\"></path></g></svg>\n\n<p>代码实现：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断是否在当前四边形内</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; p1 父容器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">p2</span></span></span><br><span class=\"line\"><span class=\"comment\"> *  对应是 左上角坐标 和 右下角坐标</span></span><br><span class=\"line\"><span class=\"comment\"> *  [0,0,1,1]  =&gt; 左上角坐标 0,0  右下角 1,1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">booleanWithin</span> = (<span class=\"params\">p1: [<span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>], p2: [<span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>]</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p1[<span class=\"number\">0</span>] &lt;= p2[<span class=\"number\">0</span>] &amp;&amp; p1[<span class=\"number\">1</span>] &lt;= p2[<span class=\"number\">1</span>] &amp;&amp; p1[<span class=\"number\">2</span>] &gt;= p2[<span class=\"number\">2</span>] &amp;&amp; p1[<span class=\"number\">3</span>] &gt;= p2[<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"计算是否与现有的相交\"><a href=\"#计算是否与现有的相交\" class=\"headerlink\" title=\"计算是否与现有的相交\"></a>计算是否与现有的相交</h4><p>两个矩形相交情况有很多种，计算比较麻烦，但是我们可以计算他们不相交，然后在取反方式判断是否相交。</p>\n<p>不相交情况只有四种，假设有 p1、p2 连个矩形，它们不相交的情况只有四种：</p>\n<ul>\n<li>p1 在 p2 左边</li>\n<li>p1 在 p2 右边</li>\n<li>p1 在 p2 上边</li>\n<li>p1 在 p2 下边</li>\n</ul>\n<p>代码实现：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断是两四边形是否相交</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; p1 父容器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">p2</span></span></span><br><span class=\"line\"><span class=\"comment\"> *  对应是 左上角坐标 和 右下角坐标</span></span><br><span class=\"line\"><span class=\"comment\"> *  [0,0,1,1]  =&gt; 左上角坐标 0,0  右下角 1,1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">booleanIntersects</span> = (<span class=\"params\">p1: [<span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>], p2: [<span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>]</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !(p1[<span class=\"number\">2</span>] &lt;= p2[<span class=\"number\">0</span>] || p2[<span class=\"number\">2</span>] &lt;= p1[<span class=\"number\">0</span>] || p1[<span class=\"number\">3</span>] &lt;= p2[<span class=\"number\">1</span>] || p2[<span class=\"number\">3</span>] &lt;= p1[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在放置前判断\"><a href=\"#在放置前判断\" class=\"headerlink\" title=\"在放置前判断\"></a>在放置前判断</h3><p>可以通过计算属性去计算，在后面拖拽中处理样式也可以用到。修改 <strong>drop</strong> 中方法，然后在 <strong>drop</strong> 中根据 <strong>isPutDown</strong> 是否有效。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 是否可以放置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isPutDown = <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentXy = [current.<span class=\"property\">x</span>, current.<span class=\"property\">y</span>, current.<span class=\"property\">x</span> + current.<span class=\"property\">column</span>, current.<span class=\"property\">y</span> + current.<span class=\"property\">row</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"title function_\">booleanWithin</span>([<span class=\"number\">0</span>, <span class=\"number\">0</span>, columnCount.<span class=\"property\">value</span>, rowCount.<span class=\"property\">value</span>], currentXy) &amp;&amp; <span class=\"comment\">//</span></span><br><span class=\"line\">    list.<span class=\"property\">value</span>.<span class=\"title function_\">every</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item.<span class=\"property\">id</span> === current.<span class=\"property\">id</span> || !<span class=\"title function_\">booleanIntersects</span>([item.<span class=\"property\">x</span>, item.<span class=\"property\">y</span>, item.<span class=\"property\">x</span> + item.<span class=\"property\">column</span>, item.<span class=\"property\">y</span> + item.<span class=\"property\">row</span>], currentXy))</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拖拽时样式\"><a href=\"#拖拽时样式\" class=\"headerlink\" title=\"拖拽时样式\"></a>拖拽时样式</h2><p>上处理了基本拖放数据处理逻辑，为了更好的交互，我们可以在拖拽中显示元素预占位信息，更加直观的显示元素占位大小，类似这样：</p>\n<p><img src=\"/images/posts/grid_layout/mask1.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><em>可放置示例</em></p>\n<p>我们可以根据上面 <strong>current</strong> 中信息去计算大小信息，还可以根据 <strong>isPutDown</strong> 去判断当前位置是否可以放置，用来显示不同交互效果。</p>\n<p><img src=\"/images/posts/grid_layout/mask2.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><em>不可放置示例</em></p>\n<p>可以直接通过 Grid 的 grid-area 属性，快速计算出放置位置信息，应为我们上面计算的 x 、y 是从 0 开始的，所以这里需要 +1。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">grid-area</span>: `$&#123;y + <span class=\"number\">1</span>&#125; / $&#123;x + <span class=\"number\">1</span>&#125; / $&#123;y + row + <span class=\"number\">1</span>&#125;/ $&#123; x + column + <span class=\"number\">1</span> &#125;`</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"预览容器\"><a href=\"#预览容器\" class=\"headerlink\" title=\"预览容器\"></a>预览容器</h2><p>在元素放置后，我们还需要根据 list 中数据，生成元素占位样式处理，我们可以拖拽容器上层在放置一个容器，专门用来显示放置后的样式，也是可以直接使用 Grid 布局去处理。</p>\n<h3 id=\"预览样式\"><a href=\"#预览样式\" class=\"headerlink\" title=\"预览样式\"></a>预览样式</h3><p>样式基本上和 <strong>drop-container</strong> 样式抱持一致即可，需要注意的时需要为预览容器设置 <strong>pointer-events: none</strong>，避免遮挡了 <strong>drop-container</strong> 事件监听。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.drop-content__preview</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.drop-content__drop-container</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每个元素位置信息计算方式，基本和拖拽时样式计算方式一致，直接通过 <strong>grid-area</strong> 去布局就可以了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">grid-area</span>: `$&#123;y + <span class=\"number\">1</span>&#125; / $&#123;x + <span class=\"number\">1</span>&#125; / $&#123;y + row + <span class=\"number\">1</span>&#125;/ $&#123; x + column + <span class=\"number\">1</span> &#125;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/posts/grid_layout/drop.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><em>示例</em></p>\n<h3 id=\"二次拖拽\"><a href=\"#二次拖拽\" class=\"headerlink\" title=\"二次拖拽\"></a>二次拖拽</h3><p>当元素拖拽进来后，我们还需要对放置的元素支持继续拖拽。因为上面我们将预览事件通过 <strong>pointer-events</strong> 去除了，所以我们需要给每个子元素都加上去。然后给子元素添加 <strong>draggable&#x3D;true</strong>，然后处理拖拽事件，基本上和上面处理方式一样，在 <strong>dragstart</strong>、<strong>dragend</strong> 处理拖拽元素信息。</p>\n<p>然后我们还需在 <strong>onDrop</strong> 进行一番修改，如果是二次拖拽时只需要修改坐标信息，修改原 <strong>onDrop</strong> 处理方式：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (item.<span class=\"property\">id</span>) &#123;</span><br><span class=\"line\">  item.<span class=\"property\">x</span> = current.<span class=\"property\">x</span>;</span><br><span class=\"line\">  item.<span class=\"property\">y</span> = current.<span class=\"property\">y</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  list.<span class=\"property\">value</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    ...item,</span><br><span class=\"line\">    <span class=\"attr\">x</span>: current.<span class=\"property\">x</span>,</span><br><span class=\"line\">    <span class=\"attr\">y</span>: current.<span class=\"property\">y</span>,</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>(),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"位置偏移优化\"><a href=\"#位置偏移优化\" class=\"headerlink\" title=\"位置偏移优化\"></a>位置偏移优化</h3><p>当你对元素二次拖拽时，会发现元素会存在偏移问。比如你放置了一个 1x2 元素后，当你从下面拖拽，你会发现拖拽中的占位样式和你拖拽元素位置存在偏差。</p>\n<p>效果如下图</p>\n<p><img src=\"/images/posts/grid_layout/offset.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><em>示例</em></p>\n<p>出现这情况应为上面我们时根据鼠标位置为左上角进行计算的，所以会存在这种偏差问题，我们可在拖拽前计算出偏移量来校正位置。</p>\n<p>我们可以在二次拖拽时，获取到鼠标在当前元素内位置信息</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">onDragstart</span> = (<span class=\"params\">e</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = props.<span class=\"property\">data</span>;</span><br><span class=\"line\">  data.<span class=\"property\">offsetX</span> = e.<span class=\"property\">offsetX</span>;</span><br><span class=\"line\">  data.<span class=\"property\">offsetY</span> = e.<span class=\"property\">offsetY</span>;</span><br><span class=\"line\">  dragStore.<span class=\"title function_\">set</span>(props.<span class=\"property\">groupName</span>, data);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在 <strong>drop-container</strong> 内计算 x、y 值时候减去偏移量，对 <strong>onDragenter</strong>、<strong>onDragover</strong> 进行如下调整修改</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">current.<span class=\"property\">x</span> = <span class=\"title function_\">getX</span>(e.<span class=\"property\">offsetX</span>) - <span class=\"title function_\">getX</span>(dragData?.<span class=\"property\">offsetX</span> ?? <span class=\"number\">0</span>);</span><br><span class=\"line\">current.<span class=\"property\">y</span> = <span class=\"title function_\">getY</span>(e.<span class=\"property\">offsetY</span>) - <span class=\"title function_\">getY</span>(dragData?.<span class=\"property\">offsetY</span> ?? <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"拖拽元素优化\"><a href=\"#拖拽元素优化\" class=\"headerlink\" title=\"拖拽元素优化\"></a>拖拽元素优化</h3><p>因为上面我们将预览元素添加了 <strong>pointer-events: all</strong>，所以在我们拖拽到现有元素上时，会挡住 <strong>drop-container</strong> 事件的触发，在二次拖拽时，比如将一个 2x2 元素我们需要往下移动一格时，会发现也会被自己挡住。</p>\n<ul>\n<li>预览元素遮挡问题，可以在拖拽时将其他元素都设置为 <strong>none</strong>，二次拖拽时要做自己设置为 <strong>all</strong> 否则会无法拖拽</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:style=&quot;&#123; pointerEvents: current.show &amp;&amp; item.id !== current.id ? &#x27;none&#x27; : &#x27;all&#x27; &#125;&quot;`</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>二次拖拽时自己位置遮挡问题<br>我们可以在拖拽时增加标识，将自己通过 <strong>transform</strong> 移除到多拽容器外去</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moveing.<span class=\"property\">value</span></span><br><span class=\"line\">  ? &#123;</span><br><span class=\"line\">      <span class=\"attr\">opacity</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">transform</span>: <span class=\"string\">`translate(-999999999px, -9999999999px)`</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  : &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"拖拽调整大小\"><a href=\"#拖拽调整大小\" class=\"headerlink\" title=\"拖拽调整大小\"></a>拖拽调整大小</h3><p>调整大小和调整位置计算类似，只不过一个是计算坐标一个计算行列。</p>\n<p>首先是能让元素可以进行拖拽，很多拖拽调整大小的都是在元素里添加几个拖拽节点元素，然后在监听拖拽节点鼠标事件去计算大小位置等。但是我这里需求比较简单，就不需要做的那么复杂，直接通过 css 让元素可以支持调整大小。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.preview-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">resize</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加样式后，可以看到元素可调整样式</p>\n<p><img src=\"/images/posts/grid_layout/resize.png\" alt=\"resize\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<p>监听元素大小调整方式有两种</p>\n<ul>\n<li>通 <strong>ResizeObserver API</strong> 监听，但是这个 API 还会监听到其他因数引起变动，比如窗口大小变动，导致元素变动等等。</li>\n<li>使用 <strong>mousedown</strong>、<strong>mousemove</strong>、<strong>mouseup</strong> 组合使用，监听鼠标事件，但是这个会存在与拖放事件同时触发问题。</li>\n</ul>\n<p>两种方式都可以实现，但是都有需要解决问题，我这里选择了第二种方式实现。</p>\n<p>大概实现就是在 PreviewItem 中监听 <strong>mousedown</strong> 事件，在 <strong>mousemove</strong> 中获取元素宽度大小实时计算宽度大小就可以。需要注意的是在 <strong>mouseup</strong> 中要重置 size 信息避免改变原有元素大小。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">onMousedown</span> = (<span class=\"params\">e</span>) =&gt; &#123;</span><br><span class=\"line\">  dragStore.<span class=\"title function_\">set</span>(props.<span class=\"property\">groupName</span>, props.<span class=\"property\">data</span>);</span><br><span class=\"line\">  <span class=\"title function_\">emits</span>(<span class=\"string\">&quot;resize-start&quot;</span>);</span><br><span class=\"line\">  resizeing.<span class=\"property\">value</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  e.<span class=\"property\">target</span>.<span class=\"property\">onmousemove</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">emits</span>(<span class=\"string\">&quot;resizeing&quot;</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">width</span>: event.<span class=\"property\">target</span>.<span class=\"property\">offsetWidth</span>,</span><br><span class=\"line\">      <span class=\"attr\">height</span>: event.<span class=\"property\">target</span>.<span class=\"property\">offsetHeight</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  e.<span class=\"property\">target</span>.<span class=\"property\">onmouseup</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">unset</span>(event.<span class=\"property\">target</span>);</span><br><span class=\"line\">    <span class=\"title function_\">emits</span>(<span class=\"string\">&quot;resize-end&quot;</span>);</span><br><span class=\"line\">    event.<span class=\"property\">target</span>.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&quot;100%&quot;</span>;</span><br><span class=\"line\">    event.<span class=\"property\">target</span>.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"string\">&quot;100%&quot;</span>;</span><br><span class=\"line\">    dragStore.<span class=\"title function_\">remove</span>(props.<span class=\"property\">groupName</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">unset</span> = (<span class=\"params\">target</span>) =&gt; &#123;</span><br><span class=\"line\">  resizeing.<span class=\"property\">value</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  target.<span class=\"property\">onmousemove</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  target.<span class=\"property\">onmouseup</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在 DropContent 通过上面抛出信息，计算大小改变，然后设置拖拽时样式动态查看当前占位大小。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调整大小开始</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">onResizeStart</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dragData = dragStore.<span class=\"title function_\">get</span>(props.<span class=\"property\">groupName</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (dragData) &#123;</span><br><span class=\"line\">    current.<span class=\"property\">column</span> = dragData.<span class=\"property\">column</span>;</span><br><span class=\"line\">    current.<span class=\"property\">row</span> = dragData.<span class=\"property\">row</span>;</span><br><span class=\"line\">    current.<span class=\"property\">x</span> = dragData.<span class=\"property\">x</span>;</span><br><span class=\"line\">    current.<span class=\"property\">y</span> = dragData.<span class=\"property\">y</span>;</span><br><span class=\"line\">    current.<span class=\"property\">id</span> = dragData.<span class=\"property\">id</span>;</span><br><span class=\"line\">    current.<span class=\"property\">show</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调正大小时</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">onResizeing</span> = (<span class=\"params\">e</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dragData = dragStore.<span class=\"title function_\">get</span>(props.<span class=\"property\">groupName</span>);</span><br><span class=\"line\">  current.<span class=\"property\">column</span> = <span class=\"title function_\">getColumn</span>(e.<span class=\"property\">width</span>);</span><br><span class=\"line\">  current.<span class=\"property\">row</span> = <span class=\"title function_\">getRow</span>(e.<span class=\"property\">height</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调整大小结束</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">onResizeEnd</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  current.<span class=\"property\">show</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dragData = dragStore.<span class=\"title function_\">get</span>(props.<span class=\"property\">groupName</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    isPutDown.<span class=\"property\">value</span> &amp;&amp;</span><br><span class=\"line\">    (<span class=\"keyword\">await</span> props.<span class=\"title function_\">beforeDrop</span>(</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        ...dragData,</span><br><span class=\"line\">        <span class=\"attr\">column</span>: current.<span class=\"property\">column</span>,</span><br><span class=\"line\">        <span class=\"attr\">row</span>: current.<span class=\"property\">row</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      list.<span class=\"property\">value</span></span><br><span class=\"line\">    ))</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    dragData.<span class=\"property\">column</span> = current.<span class=\"property\">column</span>;</span><br><span class=\"line\">    dragData.<span class=\"property\">row</span> = current.<span class=\"property\">row</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>实现效果：</p>\n<p><img src=\"/images/posts/grid_layout/resize_demo.png\" alt=\"resize_demo\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>到目前为止基本上的 Grid 拖拽布局大致实现了，已经满足基本业务需求了，当然有需要朋友还可以在上面增加碰撞后自动调整位置等等。</p>\n<p>完整源码在此，<a href=\"https://stackblitz.com/edit/vitejs-vite-rkwugn\">在线体验</a></p>\n","excerpt":"<p>最近有个需求需要实现自定义首页布局，需要将屏幕按照 6 列 4 行进行等分成多个格子，然后将组件拖拽对应格子进行渲染展示。</p>\n<p><img src=\"/images/posts/grid_layout/demo.png\"><em>示例</em></p>","more":"<p>对比一些已有的插件，发现想要实现产品的交互效果，没有现成可用的。本身功能并不是太过复杂，于是决定自己基于 vue 手撸一个简易的 Grid 拖拽布局。</p>\n<p>完整源码在此，<a href=\"https://stackblitz.com/edit/vitejs-vite-rkwugn\">在线体验</a></p>\n<h2 id=\"概况\"><a href=\"#概况\" class=\"headerlink\" title=\"概况\"></a>概况</h2><p>需要实现 Grid 拖拽布局，主要了解这两个东西就行</p>\n<ul>\n<li>拖放 API，关于拖放 API 介绍文章有很多 ，可以直接看 MDN 里<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API\">拖放 API</a>介绍，可以说很详细了。</li>\n<li>Grid 布局， Grid 布局与 Flex 布局很相似，但是 Grid 像是二维布局，Flex 则为一维布局，Grid 布局远比 Flex 布局强大。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout\">MDN 关于网格布局介绍</a></li>\n</ul>\n<p>需要实现主要包含：</p>\n<ul>\n<li>组件物料栏拖拽到布局容器</li>\n<li>布局容器 Grid 布局</li>\n<li>放置时是否重叠判断</li>\n<li>拖拽时样式</li>\n<li>放置后样式</li>\n<li>容器内二次拖拽</li>\n</ul>\n<h2 id=\"拖放操作实现\"><a href=\"#拖放操作实现\" class=\"headerlink\" title=\"拖放操作实现\"></a>拖放操作实现</h2><p>拖拽中主要使用到的事件如下</p>\n<ul>\n<li>被拖拽元素事件：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>触发时刻</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dragstart</td>\n<td>当用户开始拖拽一个元素或选中的文本时触发。</td>\n</tr>\n<tr>\n<td>drag</td>\n<td>当拖拽元素或选中的文本时触发。</td>\n</tr>\n<tr>\n<td>dragend</td>\n<td>当拖拽操作结束时触发</td>\n</tr>\n</tbody></table>\n<ul>\n<li>放置容器事件：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>触发时刻</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dragenter</td>\n<td>当拖拽元素或选中的文本到一个可释放目标时触发。</td>\n</tr>\n<tr>\n<td>dragleave</td>\n<td>当拖拽元素或选中的文本离开一个可释放目标时触发。</td>\n</tr>\n<tr>\n<td>dragover</td>\n<td>当元素或选中的文本被拖到一个可释放目标上时触发。</td>\n</tr>\n<tr>\n<td>drop</td>\n<td>当元素或选中的文本在可释放目标上被释放时触发。</td>\n</tr>\n</tbody></table>\n<h3 id=\"可拖拽元素\"><a href=\"#可拖拽元素\" class=\"headerlink\" title=\"可拖拽元素\"></a>可拖拽元素</h3><p>让一个元素能够拖拽只需要给元素设置 <strong>draggable&#x3D;”true”</strong> 即可拖拽，拖拽事件 API 提供了 <strong>DataTransfer</strong> 对象，可以用于设置拖拽数据信息，但是仅仅只能 <strong>drop</strong> 事件中获取到。因为我们需要在拖拽中就需要获取到拖拽信息，用来显示拖拽时样式，所以需要自己处理这些信息存储起来，以便读取。</p>\n<p>需要处理主要是，在拖拽时将 将当前元素信息设置到 <strong>dragStore</strong> 中，结束时清空当前信息。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; dragStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./drag&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> props = defineProps&lt;&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>: <span class=\"title class_\">DragItem</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    groupName?: string;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;&gt;();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onDragstart</span> = (<span class=\"params\">e</span>) =&gt; dragStore.<span class=\"title function_\">set</span>(props.<span class=\"property\">groupName</span>, &#123; ...props.<span class=\"property\">data</span> &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onDragend</span> = (<span class=\"params\"></span>) =&gt; dragStore.<span class=\"title function_\">remove</span>(props.<span class=\"property\">groupName</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;drag-item__el&quot;</span> <span class=\"attr\">draggable</span>=<span class=\"string\">&quot;true&quot;</span> @<span class=\"attr\">dragstart</span>=<span class=\"string\">&quot;onDragstart&quot;</span> @<span class=\"attr\">dragend</span>=<span class=\"string\">&quot;onDragend&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>封装一个存储方法，通过配置相同 key ，可以在同时存在多个放置区域时候，区分开来。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DragStore</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">DragItemData</span>&gt; &#123;</span><br><span class=\"line\">  moveItem = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>&lt;<span class=\"built_in\">string</span>, <span class=\"title class_\">DragItemData</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">set</span>(<span class=\"params\">key: <span class=\"built_in\">string</span>, data: T</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">moveItem</span>.<span class=\"title function_\">set</span>(key, data);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">remove</span>(<span class=\"params\">key: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">moveItem</span>.<span class=\"title function_\">delete</span>(key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">get</span>(<span class=\"attr\">key</span>: <span class=\"built_in\">string</span>): <span class=\"literal\">undefined</span> | <span class=\"title class_\">DragItemData</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">moveItem</span>.<span class=\"title function_\">get</span>(key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可放置区域\"><a href=\"#可放置区域\" class=\"headerlink\" title=\"可放置区域\"></a>可放置区域</h3><p>首先是需要告诉浏览器当前区域是可以放置的，只需要在元素监听 <strong>dragenter</strong>、<strong>dragleave</strong>、<strong>dragover</strong> 事件即可，然后通过 <strong>preventDefault</strong> 来阻止浏览器默认行为。可以在这三个事件中处理判断当前位置是否可以放置等等。</p>\n<p>示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 进入放置目标</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onDragenter</span> = (<span class=\"params\">e</span>) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    e.<span class=\"title function_\">preventDefault</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 在目标中移动</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onDragover</span> = (<span class=\"params\">e</span>) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    e.<span class=\"title function_\">preventDefault</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 离开目标</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onDragleave</span> = (<span class=\"params\">e</span>) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    e.<span class=\"title function_\">preventDefault</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> @<span class=\"attr\">dragenter</span>=<span class=\"string\">&quot;onDragenter($event)&quot;</span> @<span class=\"attr\">dragover</span>=<span class=\"string\">&quot;onDragover($event)&quot;</span> @<span class=\"attr\">dragleave</span>=<span class=\"string\">&quot;onDragleave($event)&quot;</span> @<span class=\"attr\">drop</span>=<span class=\"string\">&quot;onDrop($event)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码已经可以让，元素可以拖拽，当元素拖到可防止区域时候，可以看到鼠标样式会变为可放置样式了。</p>\n<h2 id=\"Grid-布局\"><a href=\"#Grid-布局\" class=\"headerlink\" title=\"Grid 布局\"></a>Grid 布局</h2><p>我们是需要进行 Grid 拖拽布局，所以先对上面放置容器进行改造，首先就是需要将容器进行格子划分区域显示。</p>\n<h3 id=\"计算-Grid-格子大小\"><a href=\"#计算-Grid-格子大小\" class=\"headerlink\" title=\"计算 Grid 格子大小\"></a>计算 Grid 格子大小</h3><p>我这里直接使用了 <strong>@vueuse&#x2F;core</strong> 的 <strong>useElementSize</strong> 的 hooks 去获取容器元素大小变动，也可以自己通过 <strong>ResizeObserver</strong> 去监听元素变动。接着根据设置列数、行数、间隔去计算单个格子大小。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useElementSize &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vueuse/core&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 容器等分尺寸</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; target 容器 HTML</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; column 列数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; row 行数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; gap 间隔</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">useBoxSize</span> = (<span class=\"params\">target: Ref&lt;HTMLElement | <span class=\"literal\">undefined</span>&gt;, column: <span class=\"built_in\">number</span>, row: <span class=\"built_in\">number</span>, gap: <span class=\"built_in\">number</span></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; width, height &#125; = <span class=\"title function_\">useElementSize</span>(target);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">width</span>: (width.<span class=\"property\">value</span> - (column - <span class=\"number\">1</span>) * gap) / column,</span><br><span class=\"line\">    <span class=\"attr\">height</span>: (height.<span class=\"property\">value</span> - (row - <span class=\"number\">1</span>) * gap) / row,</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置-Grid-样式\"><a href=\"#设置-Grid-样式\" class=\"headerlink\" title=\"设置 Grid 样式\"></a>设置 Grid 样式</h3><p>根据列数和行数循环生成格子数，<strong>rowCount</strong>、<strong>columnCount</strong>为行数和列数。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;drop-content__drop-container&quot;</span> @<span class=\"attr\">dragenter</span>=<span class=\"string\">&quot;onDragenter($event)&quot;</span> @<span class=\"attr\">dragover</span>=<span class=\"string\">&quot;onDragover($event)&quot;</span> @<span class=\"attr\">dragleave</span>=<span class=\"string\">&quot;onDragleave($event)&quot;</span> @<span class=\"attr\">drop</span>=<span class=\"string\">&quot;onDrop($event)&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;x in rowCount&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bg-column&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;y in columnCount&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;`$&#123;x&#125;-$&#123;y&#125;`&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>设置 Grid 样式，下面变量中 <strong>gap</strong> 为格子间隔，<strong>repeat</strong> 是 Grid 用来重复设置相同值的，<strong>grid-template-columns: repeat(2,100px)</strong> 等效于 <strong>grid-template-columns: 100px 100px</strong>。因为我们只需在容器里监听拖拽放置事件，所以我们还需要将<br>所有的 <strong>bg-column</strong> 事件去掉，设置 <strong>pointer-events: none</strong> 即可。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.drop-content__drop-container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: grid;</span><br><span class=\"line\">  <span class=\"attribute\">row-gap</span>: <span class=\"built_in\">v-bind</span>(<span class=\"string\">&quot;gap+&#x27;px&#x27;&quot;</span>);</span><br><span class=\"line\">  <span class=\"attribute\">column-gap</span>: <span class=\"built_in\">v-bind</span>(<span class=\"string\">&quot;gap+&#x27;px&#x27;&quot;</span>);</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(<span class=\"built_in\">v-bind</span>(<span class=\"string\">&quot;columnCount&quot;</span>), <span class=\"built_in\">v-bind</span>(<span class=\"string\">&quot;boxSize.width+&#x27;px&#x27;&quot;</span>));</span><br><span class=\"line\">  <span class=\"attribute\">grid-template-rows</span>: <span class=\"built_in\">repeat</span>(<span class=\"built_in\">v-bind</span>(<span class=\"string\">&quot;rowCount&quot;</span>), <span class=\"built_in\">v-bind</span>(<span class=\"string\">&quot;boxSize.height+&#x27;px&#x27;&quot;</span>));</span><br><span class=\"line\">  <span class=\"selector-class\">.bg-column</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">6px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">pointer-events</span>: none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：<br><img src=\"/images/posts/grid_layout/grid.png\"><em>Grid 容器样式</em></p>\n<h2 id=\"放置元素\"><a href=\"#放置元素\" class=\"headerlink\" title=\"放置元素\"></a>放置元素</h2><p>放置元素时我们需要先计算出元素在 Grid 位置信息等，这样才知道元素应该放置那哪个地方。</p>\n<h3 id=\"拖拽位置计算\"><a href=\"#拖拽位置计算\" class=\"headerlink\" title=\"拖拽位置计算\"></a>拖拽位置计算</h3><p>当元素拖拽进容器中时，我们可以通过 <strong>offsetX</strong>、<strong>offsetY</strong> 两个数据获取当前鼠标距离容器左上角位置距离，我们可以根据这两个值计算出对应的在 Grid 中做坐标。</p>\n<p>计算方式：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 计算 x 坐标</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getX</span> = (<span class=\"params\">num</span>) =&gt; <span class=\"built_in\">parseInt</span>(num / (boxSizeWidth + gap));</span><br><span class=\"line\"><span class=\"comment\">// 计算 y 坐标</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getY</span> = (<span class=\"params\">num</span>) =&gt; <span class=\"built_in\">parseInt</span>(num / (boxSizeHeight + gap));</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是上面计算坐标是 0,0 开始的，而 Grid 是 1,1 开始的。</p>\n<h3 id=\"获取拖拽信息\"><a href=\"#获取拖拽信息\" class=\"headerlink\" title=\"获取拖拽信息\"></a>获取拖拽信息</h3><p>我们在进入容器时，通过上面封装 <strong>dragData</strong> 来获取当前拖拽元素信息，获取它尺寸信息等等。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 拖拽中的元素</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> current = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">show</span>: &lt;<span class=\"built_in\">boolean</span>&gt;<span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">id</span>: &lt;undefined | number&gt;undefined,</span><br><span class=\"line\">  column: &lt;number&gt;0, // 宽</span><br><span class=\"line\">  row: &lt;number&gt;0, // 高</span><br><span class=\"line\">  x: &lt;number&gt;0, // 列</span><br><span class=\"line\">  y: &lt;number&gt;0, // 行</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 进入放置目标</span><br><span class=\"line\">const onDragenter = (e) =&gt; &#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  const dragData = dragStore.get(props.groupName);</span><br><span class=\"line\">  if (dragData) &#123;</span><br><span class=\"line\">    current.column = dragData.column;</span><br><span class=\"line\">    current.row = dragData.row;</span><br><span class=\"line\">    current.x = getX(e.offsetX);</span><br><span class=\"line\">    current.y = getY(e.offsetY);</span><br><span class=\"line\">    current.show = true;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 在目标中移动</span><br><span class=\"line\">const onDragover = (e) =&gt; &#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  const dragData = dragStore.get(props.groupName);</span><br><span class=\"line\">  if (dragData) &#123;</span><br><span class=\"line\">    current.x = getX(e.offsetX);</span><br><span class=\"line\">    current.y = getY(e.offsetY);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const onDragleave = (e) =&gt; &#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  current.show = false;</span><br><span class=\"line\">  current.id = undefined;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在 drop 事件中，我们将当前拖拽元素存放起来，list 会存放每一次拖拽进来元素信息。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = <span class=\"title function_\">ref</span>([]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 放置在目标上</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">onDrop</span> = <span class=\"keyword\">async</span> (<span class=\"params\">e</span>) =&gt; &#123;</span><br><span class=\"line\">  e.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">  current.<span class=\"property\">show</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> item = dragStore.<span class=\"title function_\">get</span>(props.<span class=\"property\">groupName</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  list.<span class=\"property\">value</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    ...item,</span><br><span class=\"line\">    <span class=\"attr\">x</span>: current.<span class=\"property\">x</span>,</span><br><span class=\"line\">    <span class=\"attr\">y</span>: current.<span class=\"property\">y</span>,</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>(),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计算碰撞\"><a href=\"#计算碰撞\" class=\"headerlink\" title=\"计算碰撞\"></a>计算碰撞</h3><p>在上面还需要计算当前拖拽的位置是否可以放置，需要处理是否包含在容器内，是否与其他已放置元素存在重叠等等。</p>\n<h4 id=\"计算是否在容器内\"><a href=\"#计算是否在容器内\" class=\"headerlink\" title=\"计算是否在容器内\"></a>计算是否在容器内</h4><p>这个是比较好计算的，只需要当前拖拽位置左上角坐标 &gt;&#x3D; 容器左上角的坐标，然后右下角的坐标 &lt;&#x3D; 容器的右下角的坐标，就是在容器内的。</p>\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 472.22222222222223 448.8888888888887\" width=\"472.22222222222223\" height=\"448.8888888888887\">\n  <g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(40 107.77777777777783) rotate(0 200.55555555555551 147.2222222222224)\"><path d=\"M0 0 C82.3 0, 164.61 0, 401.11 0 M0 0 C159.75 0, 319.49 0, 401.11 0 M401.11 0 C401.11 102.5, 401.11 205, 401.11 294.44 M401.11 0 C401.11 83.68, 401.11 167.36, 401.11 294.44 M401.11 294.44 C245.89 294.44, 90.67 294.44, 0 294.44 M401.11 294.44 C310.61 294.44, 220.11 294.44, 0 294.44 M0 294.44 C0 225.76, 0 157.08, 0 0 M0 294.44 C0 188.64, 0 82.83, 0 0\" stroke=\"#f08c00\" stroke-width=\"1\" fill=\"none\"></path></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(95.55555555555554 188.8888888888887) rotate(0 142.2222222222222 63.888888888888914)\"><path d=\"M0 0 C93.16 0, 186.31 0, 284.44 0 M0 0 C82.11 0, 164.21 0, 284.44 0 M284.44 0 C284.44 33.97, 284.44 67.94, 284.44 127.78 M284.44 0 C284.44 48.07, 284.44 96.14, 284.44 127.78 M284.44 127.78 C178.07 127.78, 71.69 127.78, 0 127.78 M284.44 127.78 C222.86 127.78, 161.28 127.78, 0 127.78 M0 127.78 C0 89.06, 0 50.33, 0 0 M0 127.78 C0 99.64, 0 71.5, 0 0\" stroke=\"#1971c2\" stroke-width=\"1\" fill=\"none\"></path></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(295.5555555555555 10) rotate(0 0.00005000000000165983 0.00005000000010113581)\" stroke=\"none\"><path fill=\"#f08c00\" d=\"M 1.57,-1.57 Q 1.57,-1.57 1.77,-1.27 1.98,-0.98 2.09,-0.64 2.20,-0.29 2.19,0.05 2.18,0.41 2.05,0.75 1.93,1.09 1.70,1.37 1.48,1.65 1.18,1.84 0.87,2.04 0.52,2.12 0.18,2.21 -0.17,2.18 -0.53,2.15 -0.86,2.01 -1.19,1.87 -1.46,1.63 -1.73,1.39 -1.90,1.07 -2.08,0.76 -2.15,0.41 -2.21,0.05 -2.17,-0.29 -2.12,-0.65 -1.96,-0.97 -1.80,-1.29 -1.54,-1.54 -1.29,-1.80 -0.97,-1.96 -0.65,-2.12 -0.29,-2.17 0.06,-2.21 0.41,-2.15 0.76,-2.08 1.07,-1.90 1.39,-1.73 1.63,-1.46 1.87,-1.19 2.01,-0.86 2.15,-0.53 2.18,-0.17 2.21,0.18 2.12,0.52 2.03,0.87 1.84,1.18 1.65,1.48 1.37,1.70 1.09,1.93 0.75,2.05 0.41,2.18 0.05,2.19 -0.30,2.20 -0.64,2.09 -0.98,1.98 -1.27,1.77 -1.57,1.56 -1.57,1.57 -1.57,1.57 -1.73,1.35 -1.90,1.14 -2.01,0.90 -2.12,0.66 -2.16,0.39 -2.21,0.13 -2.20,-0.13 -2.18,-0.40 -2.10,-0.65 -2.02,-0.91 -1.88,-1.14 -1.74,-1.36 -1.55,-1.55 -1.36,-1.74 -1.14,-1.88 -0.91,-2.02 -0.65,-2.10 -0.40,-2.18 -0.13,-2.20 0.13,-2.21 0.39,-2.16 0.66,-2.12 0.90,-2.01 1.14,-1.90 1.35,-1.73 1.57,-1.57 1.57,-1.57 L 1.57,-1.57 Z\"></path></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(25.555555555555543 91.11111111111086) rotate(0 40 56.66666666666674)\" stroke=\"none\"><path fill=\"#e03131\" d=\"M -0.26,1.83 Q -0.26,1.83 -2.43,1.44 -4.59,1.04 -6.52,2.11 -8.44,3.19 -9.26,4.40 -10.09,5.61 -10.80,7.05 -11.52,8.50 -12.19,10.31 -12.87,12.12 -13.17,14.36 -13.48,16.60 -13.64,19.17 -13.80,21.73 -13.81,23.48 -13.82,25.22 -13.88,27.55 -13.95,29.88 -13.96,31.83 -13.96,33.78 -13.62,35.42 -13.29,37.06 -12.60,38.96 -11.91,40.87 -10.98,42.21 -10.05,43.55 -9.00,45.14 -7.95,46.73 -6.64,48.31 -5.33,49.89 -3.78,51.91 -2.24,53.93 -0.07,55.98 2.09,58.04 4.32,60.24 6.56,62.43 9.10,64.97 11.64,67.51 14.58,69.81 17.51,72.12 20.42,74.75 23.32,77.38 27.39,80.70 31.45,84.02 35.41,87.03 39.37,90.03 42.36,92.62 45.36,95.21 47.88,97.24 50.40,99.27 53.04,101.07 55.67,102.87 57.49,104.31 59.30,105.76 60.76,106.98 62.22,108.20 63.22,108.98 64.22,109.75 65.59,111.08 66.96,112.40 68.41,113.54 69.87,114.69 71.44,115.82 73.00,116.95 74.17,117.26 75.34,117.58 76.99,118.46 78.64,119.35 79.74,119.56 80.85,119.77 81.92,119.83 82.99,119.89 84.14,120.30 85.29,120.70 86.47,120.72 87.65,120.74 89.19,120.05 90.73,119.35 92.08,118.63 93.42,117.92 93.22,113.88 93.02,109.84 93.19,105.73 93.36,101.63 92.84,96.16 92.33,90.69 91.83,86.08 91.33,81.48 90.82,77.61 90.32,73.74 89.80,70.51 89.29,67.28 88.47,64.72 87.65,62.17 86.97,59.39 86.29,56.60 85.07,53.27 83.86,49.94 82.08,45.99 80.30,42.03 78.59,38.42 76.88,34.82 75.51,32.00 74.15,29.19 72.62,26.43 71.10,23.66 69.52,21.24 67.93,18.81 66.30,16.51 64.68,14.20 63.06,12.30 61.44,10.40 60.07,8.58 58.71,6.77 56.99,5.50 55.27,4.22 52.92,2.70 50.58,1.17 48.32,-0.10 46.07,-1.37 43.90,-2.20 41.74,-3.04 39.18,-4.05 36.62,-5.06 34.68,-5.45 32.74,-5.83 30.68,-6.01 28.61,-6.18 26.93,-6.50 25.25,-6.83 23.73,-6.91 22.21,-6.99 20.72,-7.32 19.22,-7.66 17.56,-7.80 15.89,-7.94 14.19,-7.99 12.49,-8.04 10.82,-8.04 9.14,-8.05 7.34,-7.91 5.55,-7.77 4.40,-7.68 3.24,-7.58 2.40,-6.50 1.55,-5.41 0.26,-3.97 -1.02,-2.52 0.50,-2.05 2.02,-1.57 2.22,-1.21 2.42,-0.84 2.49,-0.43 2.56,-0.02 2.50,0.38 2.44,0.79 2.25,1.16 2.06,1.53 1.76,1.82 1.46,2.11 1.08,2.28 0.71,2.46 0.29,2.51 -0.11,2.56 -0.51,2.48 -0.92,2.39 -1.28,2.18 -1.64,1.97 -1.91,1.66 -2.18,1.34 -2.34,0.96 -2.50,0.57 -2.52,0.16 -2.55,-0.25 -2.44,-0.65 -2.34,-1.05 -2.11,-1.40 -1.88,-1.74 -1.55,-2.00 -1.22,-2.25 -0.83,-2.39 -0.44,-2.52 -0.02,-2.53 0.38,-2.53 0.78,-2.40 1.17,-2.28 1.51,-2.03 1.84,-1.78 2.08,-1.44 2.31,-1.10 2.43,-0.70 2.54,-0.30 2.53,0.11 2.51,0.52 2.36,0.91 2.21,1.30 1.94,1.62 1.68,1.94 1.32,2.15 0.97,2.37 0.56,2.46 0.16,2.56 -0.24,2.52 -0.66,2.48 -1.04,2.31 -1.41,2.13 -1.72,1.85 -2.02,1.57 -2.02,1.57 -2.02,1.57 -3.81,-1.00 -5.60,-3.58 -4.92,-5.12 -4.24,-6.67 -3.18,-8.05 -2.12,-9.43 -0.71,-10.50 0.70,-11.58 1.82,-11.99 2.94,-12.41 4.26,-12.30 5.58,-12.20 7.39,-12.03 9.21,-11.85 10.92,-11.80 12.64,-11.74 14.43,-11.65 16.21,-11.56 18.23,-11.37 20.24,-11.17 21.40,-10.73 22.56,-10.28 24.28,-10.03 25.99,-9.77 27.42,-9.30 28.84,-8.83 31.06,-8.63 33.29,-8.44 35.44,-7.97 37.58,-7.50 40.14,-6.50 42.69,-5.49 45.02,-4.58 47.36,-3.67 49.69,-2.35 52.01,-1.03 54.44,0.54 56.86,2.12 58.83,3.64 60.80,5.16 62.13,6.92 63.45,8.68 65.15,10.67 66.84,12.67 68.50,15.01 70.16,17.35 71.80,19.86 73.45,22.37 75.01,25.19 76.57,28.01 77.95,30.83 79.33,33.64 81.08,37.27 82.82,40.89 84.66,44.93 86.50,48.97 87.79,52.43 89.08,55.89 89.78,58.56 90.48,61.23 91.42,63.99 92.36,66.75 92.97,70.00 93.58,73.26 94.21,77.15 94.84,81.03 95.51,85.64 96.19,90.25 96.93,95.95 97.68,101.65 97.81,105.78 97.94,109.91 98.07,113.71 98.20,117.52 97.88,119.22 97.55,120.92 96.14,121.96 94.74,123.00 93.74,123.59 92.74,124.17 91.51,124.65 90.28,125.12 88.83,125.41 87.38,125.71 86.25,125.56 85.11,125.41 83.75,124.75 82.39,124.09 81.09,123.85 79.78,123.60 78.32,123.09 76.86,122.59 75.47,121.78 74.08,120.97 72.60,120.31 71.12,119.64 69.47,118.48 67.82,117.31 66.21,116.06 64.61,114.80 63.29,113.49 61.96,112.18 61.14,111.26 60.32,110.34 58.99,109.08 57.66,107.82 55.92,106.44 54.18,105.05 51.46,103.19 48.74,101.33 46.19,99.27 43.63,97.22 40.69,94.68 37.76,92.15 33.76,89.12 29.76,86.10 25.64,82.74 21.51,79.38 18.67,76.82 15.83,74.26 12.77,71.87 9.70,69.47 7.15,66.96 4.60,64.45 2.36,62.30 0.11,60.14 -2.22,57.96 -4.57,55.78 -6.14,53.85 -7.70,51.92 -9.20,50.23 -10.70,48.54 -11.75,46.93 -12.80,45.32 -13.80,43.65 -14.81,41.98 -15.67,39.81 -16.52,37.64 -16.82,35.71 -17.12,33.77 -17.10,31.81 -17.08,29.85 -17.11,27.49 -17.14,25.13 -17.04,23.36 -16.95,21.59 -16.87,18.90 -16.79,16.21 -16.54,13.60 -16.28,10.98 -15.63,8.87 -14.98,6.77 -14.09,5.02 -13.20,3.27 -11.74,1.47 -10.29,-0.32 -8.99,-0.85 -7.70,-1.37 -6.02,-1.84 -4.34,-2.31 -2.04,-2.07 0.26,-1.83 0.47,-1.78 0.69,-1.72 0.89,-1.61 1.08,-1.50 1.25,-1.35 1.41,-1.20 1.53,-1.01 1.66,-0.82 1.73,-0.61 1.81,-0.40 1.83,-0.18 1.85,0.03 1.82,0.26 1.79,0.48 1.71,0.69 1.62,0.89 1.49,1.07 1.36,1.26 1.19,1.40 1.02,1.55 0.82,1.65 0.62,1.75 0.40,1.79 0.18,1.84 -0.03,1.84 -0.26,1.83 -0.26,1.83 L -0.26,1.83 Z\"></path></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(414.4444444444444 304.44444444444434) rotate(0 -5.555555555555543 63.888888888888914)\" stroke=\"none\"><path fill=\"#e03131\" d=\"M -0.77,1.94 Q -0.77,1.94 -2.36,1.29 -3.95,0.65 -5.11,0.47 -6.26,0.30 -7.86,-0.14 -9.46,-0.58 -10.61,-0.70 -11.76,-0.81 -13.15,-1.21 -14.55,-1.62 -16.00,-2.11 -17.46,-2.60 -18.82,-2.78 -20.18,-2.95 -22.20,-3.46 -24.21,-3.98 -26.49,-4.24 -28.77,-4.50 -30.11,-4.51 -31.44,-4.52 -33.00,-4.42 -34.56,-4.32 -36.49,-3.52 -38.41,-2.72 -40.05,-1.82 -41.69,-0.92 -43.37,0.34 -45.06,1.61 -46.50,2.61 -47.94,3.62 -49.06,4.60 -50.19,5.59 -51.29,6.64 -52.39,7.69 -53.42,9.44 -54.44,11.20 -55.25,12.93 -56.05,14.66 -56.38,16.50 -56.71,18.34 -56.90,21.04 -57.08,23.73 -57.18,25.85 -57.28,27.98 -57.02,30.38 -56.76,32.78 -56.04,35.33 -55.32,37.89 -54.38,40.58 -53.44,43.28 -52.09,46.65 -50.75,50.02 -48.27,55.26 -45.80,60.50 -43.49,64.62 -41.17,68.74 -38.64,72.03 -36.10,75.32 -33.71,78.69 -31.32,82.06 -28.73,85.37 -26.14,88.69 -23.46,91.67 -20.79,94.65 -17.10,98.47 -13.41,102.29 -9.31,106.14 -5.20,109.98 -1.24,113.19 2.70,116.40 7.54,119.66 12.39,122.92 16.32,124.92 20.24,126.92 23.55,128.75 26.86,130.59 29.71,131.30 32.56,132.02 34.72,132.34 36.89,132.65 38.44,132.69 40.00,132.73 41.10,132.59 42.19,132.46 42.12,130.79 42.04,129.13 42.21,126.86 42.38,124.58 42.82,121.57 43.25,118.56 43.79,115.38 44.32,112.20 44.89,109.25 45.46,106.29 45.70,103.21 45.95,100.13 46.07,96.26 46.18,92.39 46.24,88.51 46.30,84.63 46.33,81.06 46.36,77.49 46.38,73.42 46.40,69.35 46.09,65.44 45.78,61.52 45.02,57.68 44.27,53.83 43.62,50.24 42.98,46.64 42.09,44.27 41.21,41.89 40.79,39.12 40.37,36.34 39.61,34.39 38.84,32.44 38.16,29.89 37.48,27.34 36.88,25.35 36.28,23.36 35.39,22.05 34.49,20.74 33.74,19.91 32.99,19.08 32.25,18.03 31.52,16.97 29.67,15.53 27.82,14.09 26.85,13.50 25.88,12.92 24.84,12.37 23.79,11.82 22.70,11.28 21.61,10.74 20.32,9.74 19.02,8.74 18.01,8.14 17.00,7.54 16.12,6.91 15.23,6.28 13.58,5.73 11.94,5.17 10.92,4.63 9.91,4.09 8.48,3.56 7.05,3.03 5.17,2.61 3.29,2.19 1.82,2.40 0.35,2.61 -0.06,2.60 -0.49,2.59 -0.89,2.45 -1.29,2.30 -1.63,2.03 -1.96,1.76 -2.19,1.40 -2.42,1.04 -2.53,0.63 -2.63,0.21 -2.60,-0.20 -2.56,-0.63 -2.39,-1.02 -2.22,-1.42 -1.94,-1.74 -1.65,-2.05 -1.28,-2.26 -0.91,-2.48 -0.49,-2.56 -0.07,-2.64 0.34,-2.58 0.77,-2.52 1.15,-2.33 1.54,-2.14 1.84,-1.84 2.14,-1.54 2.33,-1.16 2.52,-0.77 2.58,-0.35 2.64,0.06 2.56,0.48 2.48,0.90 2.27,1.28 2.06,1.65 1.74,1.94 1.42,2.22 1.03,2.39 0.64,2.56 0.21,2.60 -0.21,2.63 -0.62,2.53 -1.04,2.42 -1.40,2.19 -1.76,1.96 -2.03,1.63 -2.30,1.30 -2.44,0.90 -2.59,0.50 -2.60,0.07 -2.62,-0.35 -2.49,-0.76 -2.36,-1.17 -2.12,-1.52 -1.87,-1.86 -1.52,-2.11 -1.17,-2.36 -0.76,-2.49 -0.35,-2.61 -0.35,-2.61 -0.35,-2.61 2.84,-2.76 6.04,-2.90 7.16,-2.79 8.27,-2.67 9.27,-2.12 10.27,-1.58 12.00,-0.95 13.72,-0.33 14.60,0.43 15.47,1.20 17.54,2.30 19.61,3.40 20.82,4.19 22.03,4.98 22.95,5.76 23.87,6.54 24.98,7.17 26.10,7.81 27.24,8.52 28.39,9.23 29.57,10.10 30.74,10.97 31.70,11.93 32.65,12.90 33.69,13.95 34.73,15.00 35.24,16.03 35.74,17.07 36.38,18.14 37.03,19.22 37.92,20.90 38.82,22.58 39.42,24.62 40.02,26.66 40.66,29.08 41.31,31.49 42.15,33.72 42.99,35.94 43.35,38.46 43.71,40.99 44.65,43.58 45.60,46.16 46.25,49.74 46.90,53.31 47.69,57.31 48.48,61.31 48.80,65.33 49.13,69.35 49.13,73.43 49.13,77.50 49.13,81.08 49.13,84.65 49.11,88.56 49.08,92.46 49.02,96.40 48.95,100.34 48.75,103.59 48.56,106.84 48.09,109.76 47.62,112.69 47.23,115.84 46.83,118.98 46.58,121.83 46.33,124.68 46.39,127.17 46.44,129.67 46.21,130.92 45.98,132.17 45.23,133.62 44.49,135.07 42.12,135.40 39.74,135.74 38.12,135.49 36.50,135.25 34.20,134.91 31.90,134.57 28.75,133.73 25.61,132.90 22.33,131.08 19.05,129.26 14.98,127.18 10.92,125.11 5.98,121.78 1.04,118.45 -2.97,115.18 -7.00,111.91 -11.16,108.02 -15.31,104.13 -19.03,100.27 -22.76,96.42 -25.49,93.37 -28.23,90.32 -30.86,86.96 -33.48,83.60 -35.85,80.27 -38.22,76.95 -40.86,73.50 -43.51,70.06 -45.88,65.86 -48.24,61.66 -50.77,56.35 -53.29,51.04 -54.67,47.62 -56.06,44.20 -57.05,41.44 -58.04,38.67 -58.85,35.90 -59.65,33.13 -59.98,30.51 -60.31,27.90 -60.28,25.73 -60.26,23.57 -60.15,20.68 -60.05,17.79 -59.70,15.52 -59.35,13.25 -58.56,11.31 -57.76,9.38 -56.52,7.02 -55.29,4.67 -54.07,3.56 -52.86,2.45 -51.54,1.36 -50.22,0.28 -48.93,-0.58 -47.63,-1.44 -45.87,-3.07 -44.12,-4.69 -42.18,-6.10 -40.24,-7.51 -39.18,-7.88 -38.13,-8.25 -36.30,-8.61 -34.47,-8.96 -32.85,-8.78 -31.22,-8.59 -29.86,-8.45 -28.50,-8.31 -25.92,-8.23 -23.35,-8.14 -21.46,-7.84 -19.58,-7.54 -17.78,-7.30 -15.99,-7.05 -13.54,-6.18 -11.10,-5.30 -9.68,-5.05 -8.26,-4.79 -6.82,-4.37 -5.39,-3.94 -3.91,-3.57 -2.42,-3.20 -0.82,-2.57 0.77,-1.94 0.99,-1.82 1.22,-1.70 1.40,-1.53 1.59,-1.35 1.73,-1.14 1.87,-0.93 1.95,-0.70 2.04,-0.46 2.06,-0.21 2.09,0.03 2.05,0.28 2.02,0.53 1.92,0.77 1.83,1.00 1.68,1.21 1.54,1.41 1.34,1.58 1.15,1.74 0.93,1.85 0.70,1.97 0.46,2.02 0.21,2.08 -0.03,2.07 -0.28,2.07 -0.53,2.00 -0.77,1.94 -0.77,1.94 L -0.77,1.94 Z\"></path></g></svg>\n\n<p>代码实现：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断是否在当前四边形内</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; p1 父容器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">p2</span></span></span><br><span class=\"line\"><span class=\"comment\"> *  对应是 左上角坐标 和 右下角坐标</span></span><br><span class=\"line\"><span class=\"comment\"> *  [0,0,1,1]  =&gt; 左上角坐标 0,0  右下角 1,1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">booleanWithin</span> = (<span class=\"params\">p1: [<span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>], p2: [<span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>]</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> p1[<span class=\"number\">0</span>] &lt;= p2[<span class=\"number\">0</span>] &amp;&amp; p1[<span class=\"number\">1</span>] &lt;= p2[<span class=\"number\">1</span>] &amp;&amp; p1[<span class=\"number\">2</span>] &gt;= p2[<span class=\"number\">2</span>] &amp;&amp; p1[<span class=\"number\">3</span>] &gt;= p2[<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"计算是否与现有的相交\"><a href=\"#计算是否与现有的相交\" class=\"headerlink\" title=\"计算是否与现有的相交\"></a>计算是否与现有的相交</h4><p>两个矩形相交情况有很多种，计算比较麻烦，但是我们可以计算他们不相交，然后在取反方式判断是否相交。</p>\n<p>不相交情况只有四种，假设有 p1、p2 连个矩形，它们不相交的情况只有四种：</p>\n<ul>\n<li>p1 在 p2 左边</li>\n<li>p1 在 p2 右边</li>\n<li>p1 在 p2 上边</li>\n<li>p1 在 p2 下边</li>\n</ul>\n<p>代码实现：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断是两四边形是否相交</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; p1 父容器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">p2</span></span></span><br><span class=\"line\"><span class=\"comment\"> *  对应是 左上角坐标 和 右下角坐标</span></span><br><span class=\"line\"><span class=\"comment\"> *  [0,0,1,1]  =&gt; 左上角坐标 0,0  右下角 1,1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">booleanIntersects</span> = (<span class=\"params\">p1: [<span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>], p2: [<span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>]</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !(p1[<span class=\"number\">2</span>] &lt;= p2[<span class=\"number\">0</span>] || p2[<span class=\"number\">2</span>] &lt;= p1[<span class=\"number\">0</span>] || p1[<span class=\"number\">3</span>] &lt;= p2[<span class=\"number\">1</span>] || p2[<span class=\"number\">3</span>] &lt;= p1[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在放置前判断\"><a href=\"#在放置前判断\" class=\"headerlink\" title=\"在放置前判断\"></a>在放置前判断</h3><p>可以通过计算属性去计算，在后面拖拽中处理样式也可以用到。修改 <strong>drop</strong> 中方法，然后在 <strong>drop</strong> 中根据 <strong>isPutDown</strong> 是否有效。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 是否可以放置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isPutDown = <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentXy = [current.<span class=\"property\">x</span>, current.<span class=\"property\">y</span>, current.<span class=\"property\">x</span> + current.<span class=\"property\">column</span>, current.<span class=\"property\">y</span> + current.<span class=\"property\">row</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"title function_\">booleanWithin</span>([<span class=\"number\">0</span>, <span class=\"number\">0</span>, columnCount.<span class=\"property\">value</span>, rowCount.<span class=\"property\">value</span>], currentXy) &amp;&amp; <span class=\"comment\">//</span></span><br><span class=\"line\">    list.<span class=\"property\">value</span>.<span class=\"title function_\">every</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item.<span class=\"property\">id</span> === current.<span class=\"property\">id</span> || !<span class=\"title function_\">booleanIntersects</span>([item.<span class=\"property\">x</span>, item.<span class=\"property\">y</span>, item.<span class=\"property\">x</span> + item.<span class=\"property\">column</span>, item.<span class=\"property\">y</span> + item.<span class=\"property\">row</span>], currentXy))</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拖拽时样式\"><a href=\"#拖拽时样式\" class=\"headerlink\" title=\"拖拽时样式\"></a>拖拽时样式</h2><p>上处理了基本拖放数据处理逻辑，为了更好的交互，我们可以在拖拽中显示元素预占位信息，更加直观的显示元素占位大小，类似这样：</p>\n<p><img src=\"/images/posts/grid_layout/mask1.png\"><em>可放置示例</em></p>\n<p>我们可以根据上面 <strong>current</strong> 中信息去计算大小信息，还可以根据 <strong>isPutDown</strong> 去判断当前位置是否可以放置，用来显示不同交互效果。</p>\n<p><img src=\"/images/posts/grid_layout/mask2.png\"><em>不可放置示例</em></p>\n<p>可以直接通过 Grid 的 grid-area 属性，快速计算出放置位置信息，应为我们上面计算的 x 、y 是从 0 开始的，所以这里需要 +1。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">grid-area</span>: `$&#123;y + <span class=\"number\">1</span>&#125; / $&#123;x + <span class=\"number\">1</span>&#125; / $&#123;y + row + <span class=\"number\">1</span>&#125;/ $&#123; x + column + <span class=\"number\">1</span> &#125;`</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"预览容器\"><a href=\"#预览容器\" class=\"headerlink\" title=\"预览容器\"></a>预览容器</h2><p>在元素放置后，我们还需要根据 list 中数据，生成元素占位样式处理，我们可以拖拽容器上层在放置一个容器，专门用来显示放置后的样式，也是可以直接使用 Grid 布局去处理。</p>\n<h3 id=\"预览样式\"><a href=\"#预览样式\" class=\"headerlink\" title=\"预览样式\"></a>预览样式</h3><p>样式基本上和 <strong>drop-container</strong> 样式抱持一致即可，需要注意的时需要为预览容器设置 <strong>pointer-events: none</strong>，避免遮挡了 <strong>drop-container</strong> 事件监听。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.drop-content__preview</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.drop-content__drop-container</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每个元素位置信息计算方式，基本和拖拽时样式计算方式一致，直接通过 <strong>grid-area</strong> 去布局就可以了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">grid-area</span>: `$&#123;y + <span class=\"number\">1</span>&#125; / $&#123;x + <span class=\"number\">1</span>&#125; / $&#123;y + row + <span class=\"number\">1</span>&#125;/ $&#123; x + column + <span class=\"number\">1</span> &#125;`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/posts/grid_layout/drop.png\"><em>示例</em></p>\n<h3 id=\"二次拖拽\"><a href=\"#二次拖拽\" class=\"headerlink\" title=\"二次拖拽\"></a>二次拖拽</h3><p>当元素拖拽进来后，我们还需要对放置的元素支持继续拖拽。因为上面我们将预览事件通过 <strong>pointer-events</strong> 去除了，所以我们需要给每个子元素都加上去。然后给子元素添加 <strong>draggable&#x3D;true</strong>，然后处理拖拽事件，基本上和上面处理方式一样，在 <strong>dragstart</strong>、<strong>dragend</strong> 处理拖拽元素信息。</p>\n<p>然后我们还需在 <strong>onDrop</strong> 进行一番修改，如果是二次拖拽时只需要修改坐标信息，修改原 <strong>onDrop</strong> 处理方式：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (item.<span class=\"property\">id</span>) &#123;</span><br><span class=\"line\">  item.<span class=\"property\">x</span> = current.<span class=\"property\">x</span>;</span><br><span class=\"line\">  item.<span class=\"property\">y</span> = current.<span class=\"property\">y</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  list.<span class=\"property\">value</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    ...item,</span><br><span class=\"line\">    <span class=\"attr\">x</span>: current.<span class=\"property\">x</span>,</span><br><span class=\"line\">    <span class=\"attr\">y</span>: current.<span class=\"property\">y</span>,</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>(),</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"位置偏移优化\"><a href=\"#位置偏移优化\" class=\"headerlink\" title=\"位置偏移优化\"></a>位置偏移优化</h3><p>当你对元素二次拖拽时，会发现元素会存在偏移问。比如你放置了一个 1x2 元素后，当你从下面拖拽，你会发现拖拽中的占位样式和你拖拽元素位置存在偏差。</p>\n<p>效果如下图</p>\n<p><img src=\"/images/posts/grid_layout/offset.png\"><em>示例</em></p>\n<p>出现这情况应为上面我们时根据鼠标位置为左上角进行计算的，所以会存在这种偏差问题，我们可在拖拽前计算出偏移量来校正位置。</p>\n<p>我们可以在二次拖拽时，获取到鼠标在当前元素内位置信息</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">onDragstart</span> = (<span class=\"params\">e</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = props.<span class=\"property\">data</span>;</span><br><span class=\"line\">  data.<span class=\"property\">offsetX</span> = e.<span class=\"property\">offsetX</span>;</span><br><span class=\"line\">  data.<span class=\"property\">offsetY</span> = e.<span class=\"property\">offsetY</span>;</span><br><span class=\"line\">  dragStore.<span class=\"title function_\">set</span>(props.<span class=\"property\">groupName</span>, data);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在 <strong>drop-container</strong> 内计算 x、y 值时候减去偏移量，对 <strong>onDragenter</strong>、<strong>onDragover</strong> 进行如下调整修改</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">current.<span class=\"property\">x</span> = <span class=\"title function_\">getX</span>(e.<span class=\"property\">offsetX</span>) - <span class=\"title function_\">getX</span>(dragData?.<span class=\"property\">offsetX</span> ?? <span class=\"number\">0</span>);</span><br><span class=\"line\">current.<span class=\"property\">y</span> = <span class=\"title function_\">getY</span>(e.<span class=\"property\">offsetY</span>) - <span class=\"title function_\">getY</span>(dragData?.<span class=\"property\">offsetY</span> ?? <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"拖拽元素优化\"><a href=\"#拖拽元素优化\" class=\"headerlink\" title=\"拖拽元素优化\"></a>拖拽元素优化</h3><p>因为上面我们将预览元素添加了 <strong>pointer-events: all</strong>，所以在我们拖拽到现有元素上时，会挡住 <strong>drop-container</strong> 事件的触发，在二次拖拽时，比如将一个 2x2 元素我们需要往下移动一格时，会发现也会被自己挡住。</p>\n<ul>\n<li>预览元素遮挡问题，可以在拖拽时将其他元素都设置为 <strong>none</strong>，二次拖拽时要做自己设置为 <strong>all</strong> 否则会无法拖拽</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:style=&quot;&#123; pointerEvents: current.show &amp;&amp; item.id !== current.id ? &#x27;none&#x27; : &#x27;all&#x27; &#125;&quot;`</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>二次拖拽时自己位置遮挡问题<br>我们可以在拖拽时增加标识，将自己通过 <strong>transform</strong> 移除到多拽容器外去</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moveing.<span class=\"property\">value</span></span><br><span class=\"line\">  ? &#123;</span><br><span class=\"line\">      <span class=\"attr\">opacity</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">transform</span>: <span class=\"string\">`translate(-999999999px, -9999999999px)`</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  : &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"拖拽调整大小\"><a href=\"#拖拽调整大小\" class=\"headerlink\" title=\"拖拽调整大小\"></a>拖拽调整大小</h3><p>调整大小和调整位置计算类似，只不过一个是计算坐标一个计算行列。</p>\n<p>首先是能让元素可以进行拖拽，很多拖拽调整大小的都是在元素里添加几个拖拽节点元素，然后在监听拖拽节点鼠标事件去计算大小位置等。但是我这里需求比较简单，就不需要做的那么复杂，直接通过 css 让元素可以支持调整大小。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.preview-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">resize</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加样式后，可以看到元素可调整样式</p>\n<p><img src=\"/images/posts/grid_layout/resize.png\" alt=\"resize\"></p>\n<p>监听元素大小调整方式有两种</p>\n<ul>\n<li>通 <strong>ResizeObserver API</strong> 监听，但是这个 API 还会监听到其他因数引起变动，比如窗口大小变动，导致元素变动等等。</li>\n<li>使用 <strong>mousedown</strong>、<strong>mousemove</strong>、<strong>mouseup</strong> 组合使用，监听鼠标事件，但是这个会存在与拖放事件同时触发问题。</li>\n</ul>\n<p>两种方式都可以实现，但是都有需要解决问题，我这里选择了第二种方式实现。</p>\n<p>大概实现就是在 PreviewItem 中监听 <strong>mousedown</strong> 事件，在 <strong>mousemove</strong> 中获取元素宽度大小实时计算宽度大小就可以。需要注意的是在 <strong>mouseup</strong> 中要重置 size 信息避免改变原有元素大小。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">onMousedown</span> = (<span class=\"params\">e</span>) =&gt; &#123;</span><br><span class=\"line\">  dragStore.<span class=\"title function_\">set</span>(props.<span class=\"property\">groupName</span>, props.<span class=\"property\">data</span>);</span><br><span class=\"line\">  <span class=\"title function_\">emits</span>(<span class=\"string\">&quot;resize-start&quot;</span>);</span><br><span class=\"line\">  resizeing.<span class=\"property\">value</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  e.<span class=\"property\">target</span>.<span class=\"property\">onmousemove</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">emits</span>(<span class=\"string\">&quot;resizeing&quot;</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">width</span>: event.<span class=\"property\">target</span>.<span class=\"property\">offsetWidth</span>,</span><br><span class=\"line\">      <span class=\"attr\">height</span>: event.<span class=\"property\">target</span>.<span class=\"property\">offsetHeight</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  e.<span class=\"property\">target</span>.<span class=\"property\">onmouseup</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">unset</span>(event.<span class=\"property\">target</span>);</span><br><span class=\"line\">    <span class=\"title function_\">emits</span>(<span class=\"string\">&quot;resize-end&quot;</span>);</span><br><span class=\"line\">    event.<span class=\"property\">target</span>.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&quot;100%&quot;</span>;</span><br><span class=\"line\">    event.<span class=\"property\">target</span>.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"string\">&quot;100%&quot;</span>;</span><br><span class=\"line\">    dragStore.<span class=\"title function_\">remove</span>(props.<span class=\"property\">groupName</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">unset</span> = (<span class=\"params\">target</span>) =&gt; &#123;</span><br><span class=\"line\">  resizeing.<span class=\"property\">value</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  target.<span class=\"property\">onmousemove</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  target.<span class=\"property\">onmouseup</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在 DropContent 通过上面抛出信息，计算大小改变，然后设置拖拽时样式动态查看当前占位大小。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调整大小开始</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">onResizeStart</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dragData = dragStore.<span class=\"title function_\">get</span>(props.<span class=\"property\">groupName</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (dragData) &#123;</span><br><span class=\"line\">    current.<span class=\"property\">column</span> = dragData.<span class=\"property\">column</span>;</span><br><span class=\"line\">    current.<span class=\"property\">row</span> = dragData.<span class=\"property\">row</span>;</span><br><span class=\"line\">    current.<span class=\"property\">x</span> = dragData.<span class=\"property\">x</span>;</span><br><span class=\"line\">    current.<span class=\"property\">y</span> = dragData.<span class=\"property\">y</span>;</span><br><span class=\"line\">    current.<span class=\"property\">id</span> = dragData.<span class=\"property\">id</span>;</span><br><span class=\"line\">    current.<span class=\"property\">show</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调正大小时</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">onResizeing</span> = (<span class=\"params\">e</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dragData = dragStore.<span class=\"title function_\">get</span>(props.<span class=\"property\">groupName</span>);</span><br><span class=\"line\">  current.<span class=\"property\">column</span> = <span class=\"title function_\">getColumn</span>(e.<span class=\"property\">width</span>);</span><br><span class=\"line\">  current.<span class=\"property\">row</span> = <span class=\"title function_\">getRow</span>(e.<span class=\"property\">height</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调整大小结束</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">onResizeEnd</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  current.<span class=\"property\">show</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dragData = dragStore.<span class=\"title function_\">get</span>(props.<span class=\"property\">groupName</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    isPutDown.<span class=\"property\">value</span> &amp;&amp;</span><br><span class=\"line\">    (<span class=\"keyword\">await</span> props.<span class=\"title function_\">beforeDrop</span>(</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        ...dragData,</span><br><span class=\"line\">        <span class=\"attr\">column</span>: current.<span class=\"property\">column</span>,</span><br><span class=\"line\">        <span class=\"attr\">row</span>: current.<span class=\"property\">row</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      list.<span class=\"property\">value</span></span><br><span class=\"line\">    ))</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    dragData.<span class=\"property\">column</span> = current.<span class=\"property\">column</span>;</span><br><span class=\"line\">    dragData.<span class=\"property\">row</span> = current.<span class=\"property\">row</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>实现效果：</p>\n<p><img src=\"/images/posts/grid_layout/resize_demo.png\" alt=\"resize_demo\"></p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>到目前为止基本上的 Grid 拖拽布局大致实现了，已经满足基本业务需求了，当然有需要朋友还可以在上面增加碰撞后自动调整位置等等。</p>\n<p>完整源码在此，<a href=\"https://stackblitz.com/edit/vitejs-vite-rkwugn\">在线体验</a></p>"},{"title":"git 中的 stash","comments":1,"date":"2020-08-13T12:07:05.000Z","description":null,"keywords":"git,存储,stash","_content":"\n当你 分支1 上修改了东西，你发现修改错了分支，你想将 分支1 上的修改移到 分支2 的时候会.亦或者你一分支1上修改了一半，这个时候需要切的其他分支改其他的时候.这个时候 stash 就排上用场了，stash 命令可用于临时保存和回复修改，可跨分支。\n\n<!--more-->\n\n- git stash [save message]\n\n    保存，save为可选项，message为本次保存的注释\n\n- git stash list\n\n    所有保存的记录列表\n\n- git stash pop stash@{num}\n\n    恢复，num是可选项，通过git stash list可查看具体值。只能恢复一次\n\n- git stash apply stash@{num}\n\n    恢复，num是可选项，通过git stash list可查看具体值。可回复多次\n\n- git stash drop stash@{num}\n\n    删除某个保存，num是可选项，通过git stash list可查看具体值\n\n- git stash clear\n\n    删除所有保存\n\n更多用法[参考](//git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E8%B4%AE%E8%97%8F%E4%B8%8E%E6%B8%85%E7%90%86)这里\n\n使用例子\n![](/images/posts/git_stash/20200824154456.jpg)\n\n![](/images/posts/git_stash/20200824154701.jpg)\n","source":"_posts/git_stash.md","raw":"---\ntitle: git 中的 stash \ncomments: true\ndate: 2020-08-13 20:07:05\ntags: [git]\ncategories: 记录类\ndescription:\nkeywords: git,存储,stash\n---\n\n当你 分支1 上修改了东西，你发现修改错了分支，你想将 分支1 上的修改移到 分支2 的时候会.亦或者你一分支1上修改了一半，这个时候需要切的其他分支改其他的时候.这个时候 stash 就排上用场了，stash 命令可用于临时保存和回复修改，可跨分支。\n\n<!--more-->\n\n- git stash [save message]\n\n    保存，save为可选项，message为本次保存的注释\n\n- git stash list\n\n    所有保存的记录列表\n\n- git stash pop stash@{num}\n\n    恢复，num是可选项，通过git stash list可查看具体值。只能恢复一次\n\n- git stash apply stash@{num}\n\n    恢复，num是可选项，通过git stash list可查看具体值。可回复多次\n\n- git stash drop stash@{num}\n\n    删除某个保存，num是可选项，通过git stash list可查看具体值\n\n- git stash clear\n\n    删除所有保存\n\n更多用法[参考](//git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E8%B4%AE%E8%97%8F%E4%B8%8E%E6%B8%85%E7%90%86)这里\n\n使用例子\n![](/images/posts/git_stash/20200824154456.jpg)\n\n![](/images/posts/git_stash/20200824154701.jpg)\n","slug":"git_stash","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vrf001898lgekxe3sm2","content":"<p>当你 分支1 上修改了东西，你发现修改错了分支，你想将 分支1 上的修改移到 分支2 的时候会.亦或者你一分支1上修改了一半，这个时候需要切的其他分支改其他的时候.这个时候 stash 就排上用场了，stash 命令可用于临时保存和回复修改，可跨分支。</p>\n<span id=\"more\"></span>\n\n<ul>\n<li><p>git stash [save message]</p>\n<p>  保存，save为可选项，message为本次保存的注释</p>\n</li>\n<li><p>git stash list</p>\n<p>  所有保存的记录列表</p>\n</li>\n<li><p>git stash pop stash@{num}</p>\n<p>  恢复，num是可选项，通过git stash list可查看具体值。只能恢复一次</p>\n</li>\n<li><p>git stash apply stash@{num}</p>\n<p>  恢复，num是可选项，通过git stash list可查看具体值。可回复多次</p>\n</li>\n<li><p>git stash drop stash@{num}</p>\n<p>  删除某个保存，num是可选项，通过git stash list可查看具体值</p>\n</li>\n<li><p>git stash clear</p>\n<p>  删除所有保存</p>\n</li>\n</ul>\n<p>更多用法<a href=\"//git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E8%B4%AE%E8%97%8F%E4%B8%8E%E6%B8%85%E7%90%86\">参考</a>这里</p>\n<p>使用例子<br><img src=\"/images/posts/git_stash/20200824154456.jpg\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<p><img src=\"/images/posts/git_stash/20200824154701.jpg\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n","excerpt":"<p>当你 分支1 上修改了东西，你发现修改错了分支，你想将 分支1 上的修改移到 分支2 的时候会.亦或者你一分支1上修改了一半，这个时候需要切的其他分支改其他的时候.这个时候 stash 就排上用场了，stash 命令可用于临时保存和回复修改，可跨分支。</p>","more":"<ul>\n<li><p>git stash [save message]</p>\n<p>  保存，save为可选项，message为本次保存的注释</p>\n</li>\n<li><p>git stash list</p>\n<p>  所有保存的记录列表</p>\n</li>\n<li><p>git stash pop stash@{num}</p>\n<p>  恢复，num是可选项，通过git stash list可查看具体值。只能恢复一次</p>\n</li>\n<li><p>git stash apply stash@{num}</p>\n<p>  恢复，num是可选项，通过git stash list可查看具体值。可回复多次</p>\n</li>\n<li><p>git stash drop stash@{num}</p>\n<p>  删除某个保存，num是可选项，通过git stash list可查看具体值</p>\n</li>\n<li><p>git stash clear</p>\n<p>  删除所有保存</p>\n</li>\n</ul>\n<p>更多用法<a href=\"//git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E8%B4%AE%E8%97%8F%E4%B8%8E%E6%B8%85%E7%90%86\">参考</a>这里</p>\n<p>使用例子<br><img src=\"/images/posts/git_stash/20200824154456.jpg\"></p>\n<p><img src=\"/images/posts/git_stash/20200824154701.jpg\"></p>"},{"title":"利用 GitHub Actions + Github Pages 实现博客自动部署","date":"2021-09-26T01:08:34.000Z","comments":1,"description":null,"keywords":"GitHub Actions,持续集成,CI","_content":"看看官方对GitHub Actions的介绍: GitHub Actions 帮助您自动完成软件开发周期内的任务。 GitHub Actions 是事件驱动的，意味着您可以在指定事件发生后运行一系列命令。 例如，每次有人为仓库创建拉取请求时，您都可以自动运行命令来执行软件测试脚本。\n\n简单的说就是，GitHub 把持续集成系列操作步骤叫做 actions。比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。可以看看官方的介绍，对[GitHub Actions](https://docs.github.com/cn/actions/learn-github-actions/introduction-to-github-actions)快速了解\n<!--more -->\n\n## Hexo 配置\n\nHexo 搭建使用可以去参看[hexo 文档](https://hexo.io/zh-cn/index.html)。\n\nGithub Pages 支持两种模式\n- User or organization site: 新建一个 username.github.io 的仓库，每个用户只能建立一个。\n- Project site: 在对应仓库 Setting => pages 进行配置，如果有多个需要配置独立域名。\n\nGithub Pages 的配置可以[参看这里](https://pages.github.com/)\n\n我这里是使用 Project site 的搭建 Hexo 站点的。修改 **_config.yml** 下的 deploy 推送仓库地址，将其推送到 MalBlog/gh-pages 分支上去。\n``` yml\ndeploy:\n  type: 'git'\n  repository: \n    github: git@github.com:MaLuns/MalBlog.git，gh-pages\n  branch: master\n```\n在本地执行 **hexo generate** 和 **hexo deploy** 确保能正常生成和发布。\n\n## GitHub Actions\n\n我们希望当我们把博客源码推送到对应的仓库后，GitHub Actions 自动帮我们执行 **hexo generate**、**hexo deploy** 的生成和发布操作，完成博客的自动部署。首先在 项目根目录的 .github/workflows 下 新建一个 main.yml，每一个 .yml 文件就是一个 Action ， 一个 Action  相当于一个工作流 workflow，一个工作流可以有多个任务 job，每个任务可以分为几步 step。\n\n第一步 我们配置工作流触发的时机\n```yml\n# 工作流名称\nname: Hexo Deploy\n\n# 工作流触发配置\non:\n  # 当master分支有push事件时 触发工作流\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n```\n第二步 配置工作流中的 job\n\n```yml\njons:\n    # job1\n    blog-cicd:\n        # 任务名称\n        name: Hexo blog build & deploy\n        # 设置任务执行环境\n        runs-on: ubuntu-latest # 使用最新的 Ubuntu 系统作为编译部署的环境\n\n    # jon2 这里可以配置多个job\n    job2:\n```\n第三步 实现任务步骤， 实现自动部署大致需要如下步骤\n拉取博客源码=> 安装 Hexo 需要环境 => 安装源码依赖 => 构建博客源码 => 推送构建产物 \n\n```yml\njons:\n    blog-cicd:\n        name: Hexo blog build & deploy\n        runs-on: ubuntu-latest\n\n    steps:\n    # 使用 checkout@2 插件拉取代码\n    - name: Checkout codes\n      uses: actions/checkout@v2 \n      with: \n        submodules: true\n\n    # 使用 setup-node@v1 设置 node.js 环境\n    - name: Setup node\n      uses: actions/setup-node@v1\n      with:\n        node-version: '12.x'\n\n    # 安装 Hexo 依赖\n    - name: Install hexo dependencies\n      env:\n        #设置环境变量 仓库私钥， 用来在构建完成后 推送到仓库\n        ACTION_DEPLOY_KEY: ${{ secrets.HEXO_DEPLOY_PRI }}\n      # 设置 ssh 私钥， 下载 hexo-cli 脚手架及相关安装包， \n      run: |\n        mkdir -p ~/.ssh/\n        echo \"$ACTION_DEPLOY_KEY\" > ~/.ssh/id_rsa\n        chmod 600 ~/.ssh/id_rsa\n        ssh-keyscan github.com >> ~/.ssh/known_hosts\n        git config --global user.email \"userEmail\"\n        git config --global user.name \"userName\"\n        npm install -g hexo-cli\n        npm install\n\n    # 构建博客源码 并 推送推送构建产物\n    - name: Generate files\n      run: |\n        hexo clean\n        hexo generate\n        hexo deploy\n```\nGithub 每个仓库都是可以设置 **Deploy keys** 的， 用来可以操作单个仓库的。我们需要生成一个 **SSH Key** ，将公钥添加到 Setting => Deploy 里， 将私钥 Setting => Secrets => Actions 里。这样就可以在 工作流中 **{{ secrets.XXXXX }}** 获取到 **Secrets** 配置变量。我这里使用名称是 **HEXO_DEPLOY_PRI** 。\n\n\n## Git submodule\n\n有时候使用了三方主题，需要更新时候，我们也希望能够自动更新上去，我们可以使用 **Git submodule** 来管理主题。\n```shell\ngit submodule add <主题仓库地址> <主题存放路径>\n```\n修改工作流配置，在构建前先拉取子模块中的主题\n```yml\n# 最开始 git submodule update --recursive --remote 去拉取，发现一直更新不到最新的\n# 然后使用 git pull 拉取发现有时候会出现冲突... 具体原因没找到， 所有就又用删除主题文件，重新 git clone 拉取方法\n# 还是对子模块不够了解\n- name: Generate files\n    run: |\n         cd ./themes/\n        rm -r hexo-theme-text\n        git clone https://github.com/MaLuns/hexo-theme-text.git\n        cd ../../\n        hexo clean\n        hexo generate\n        hexo deploy\n\n# 后来发现 git chekout 也可以直接用\n- name: Generate files\n    run: |\n        cd ./themes/hexo-theme-text\n        git checkout -q master\n        cd ../../\n        hexo clean\n        hexo generate\n        hexo deploy\n```\n\n## 最后\n这样基本上就实现了 Hexo 的自动部署和主题自动更新了， 加上使用 [github.dev](https://github.dev/) 就能实现只需要一个浏览器就能随时随地的写了， 不在需要本地配置搭建环境啦。","source":"_posts/github_action.md","raw":"---\ntitle: 利用 GitHub Actions + Github Pages 实现博客自动部署\ndate: 2021-09-26 09:08:34\ncomments: true\ntags: [github]\ndescription: \ncategories: 记录类\nkeywords: GitHub Actions,持续集成,CI\n---\n看看官方对GitHub Actions的介绍: GitHub Actions 帮助您自动完成软件开发周期内的任务。 GitHub Actions 是事件驱动的，意味着您可以在指定事件发生后运行一系列命令。 例如，每次有人为仓库创建拉取请求时，您都可以自动运行命令来执行软件测试脚本。\n\n简单的说就是，GitHub 把持续集成系列操作步骤叫做 actions。比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。可以看看官方的介绍，对[GitHub Actions](https://docs.github.com/cn/actions/learn-github-actions/introduction-to-github-actions)快速了解\n<!--more -->\n\n## Hexo 配置\n\nHexo 搭建使用可以去参看[hexo 文档](https://hexo.io/zh-cn/index.html)。\n\nGithub Pages 支持两种模式\n- User or organization site: 新建一个 username.github.io 的仓库，每个用户只能建立一个。\n- Project site: 在对应仓库 Setting => pages 进行配置，如果有多个需要配置独立域名。\n\nGithub Pages 的配置可以[参看这里](https://pages.github.com/)\n\n我这里是使用 Project site 的搭建 Hexo 站点的。修改 **_config.yml** 下的 deploy 推送仓库地址，将其推送到 MalBlog/gh-pages 分支上去。\n``` yml\ndeploy:\n  type: 'git'\n  repository: \n    github: git@github.com:MaLuns/MalBlog.git，gh-pages\n  branch: master\n```\n在本地执行 **hexo generate** 和 **hexo deploy** 确保能正常生成和发布。\n\n## GitHub Actions\n\n我们希望当我们把博客源码推送到对应的仓库后，GitHub Actions 自动帮我们执行 **hexo generate**、**hexo deploy** 的生成和发布操作，完成博客的自动部署。首先在 项目根目录的 .github/workflows 下 新建一个 main.yml，每一个 .yml 文件就是一个 Action ， 一个 Action  相当于一个工作流 workflow，一个工作流可以有多个任务 job，每个任务可以分为几步 step。\n\n第一步 我们配置工作流触发的时机\n```yml\n# 工作流名称\nname: Hexo Deploy\n\n# 工作流触发配置\non:\n  # 当master分支有push事件时 触发工作流\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n```\n第二步 配置工作流中的 job\n\n```yml\njons:\n    # job1\n    blog-cicd:\n        # 任务名称\n        name: Hexo blog build & deploy\n        # 设置任务执行环境\n        runs-on: ubuntu-latest # 使用最新的 Ubuntu 系统作为编译部署的环境\n\n    # jon2 这里可以配置多个job\n    job2:\n```\n第三步 实现任务步骤， 实现自动部署大致需要如下步骤\n拉取博客源码=> 安装 Hexo 需要环境 => 安装源码依赖 => 构建博客源码 => 推送构建产物 \n\n```yml\njons:\n    blog-cicd:\n        name: Hexo blog build & deploy\n        runs-on: ubuntu-latest\n\n    steps:\n    # 使用 checkout@2 插件拉取代码\n    - name: Checkout codes\n      uses: actions/checkout@v2 \n      with: \n        submodules: true\n\n    # 使用 setup-node@v1 设置 node.js 环境\n    - name: Setup node\n      uses: actions/setup-node@v1\n      with:\n        node-version: '12.x'\n\n    # 安装 Hexo 依赖\n    - name: Install hexo dependencies\n      env:\n        #设置环境变量 仓库私钥， 用来在构建完成后 推送到仓库\n        ACTION_DEPLOY_KEY: ${{ secrets.HEXO_DEPLOY_PRI }}\n      # 设置 ssh 私钥， 下载 hexo-cli 脚手架及相关安装包， \n      run: |\n        mkdir -p ~/.ssh/\n        echo \"$ACTION_DEPLOY_KEY\" > ~/.ssh/id_rsa\n        chmod 600 ~/.ssh/id_rsa\n        ssh-keyscan github.com >> ~/.ssh/known_hosts\n        git config --global user.email \"userEmail\"\n        git config --global user.name \"userName\"\n        npm install -g hexo-cli\n        npm install\n\n    # 构建博客源码 并 推送推送构建产物\n    - name: Generate files\n      run: |\n        hexo clean\n        hexo generate\n        hexo deploy\n```\nGithub 每个仓库都是可以设置 **Deploy keys** 的， 用来可以操作单个仓库的。我们需要生成一个 **SSH Key** ，将公钥添加到 Setting => Deploy 里， 将私钥 Setting => Secrets => Actions 里。这样就可以在 工作流中 **{{ secrets.XXXXX }}** 获取到 **Secrets** 配置变量。我这里使用名称是 **HEXO_DEPLOY_PRI** 。\n\n\n## Git submodule\n\n有时候使用了三方主题，需要更新时候，我们也希望能够自动更新上去，我们可以使用 **Git submodule** 来管理主题。\n```shell\ngit submodule add <主题仓库地址> <主题存放路径>\n```\n修改工作流配置，在构建前先拉取子模块中的主题\n```yml\n# 最开始 git submodule update --recursive --remote 去拉取，发现一直更新不到最新的\n# 然后使用 git pull 拉取发现有时候会出现冲突... 具体原因没找到， 所有就又用删除主题文件，重新 git clone 拉取方法\n# 还是对子模块不够了解\n- name: Generate files\n    run: |\n         cd ./themes/\n        rm -r hexo-theme-text\n        git clone https://github.com/MaLuns/hexo-theme-text.git\n        cd ../../\n        hexo clean\n        hexo generate\n        hexo deploy\n\n# 后来发现 git chekout 也可以直接用\n- name: Generate files\n    run: |\n        cd ./themes/hexo-theme-text\n        git checkout -q master\n        cd ../../\n        hexo clean\n        hexo generate\n        hexo deploy\n```\n\n## 最后\n这样基本上就实现了 Hexo 的自动部署和主题自动更新了， 加上使用 [github.dev](https://github.dev/) 就能实现只需要一个浏览器就能随时随地的写了， 不在需要本地配置搭建环境啦。","slug":"github_action","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vrg001b98lggcujhpb9","content":"<p>看看官方对GitHub Actions的介绍: GitHub Actions 帮助您自动完成软件开发周期内的任务。 GitHub Actions 是事件驱动的，意味着您可以在指定事件发生后运行一系列命令。 例如，每次有人为仓库创建拉取请求时，您都可以自动运行命令来执行软件测试脚本。</p>\n<p>简单的说就是，GitHub 把持续集成系列操作步骤叫做 actions。比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。可以看看官方的介绍，对<a href=\"https://docs.github.com/cn/actions/learn-github-actions/introduction-to-github-actions\">GitHub Actions</a>快速了解</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Hexo-配置\"><a href=\"#Hexo-配置\" class=\"headerlink\" title=\"Hexo 配置\"></a>Hexo 配置</h2><p>Hexo 搭建使用可以去参看<a href=\"https://hexo.io/zh-cn/index.html\">hexo 文档</a>。</p>\n<p>Github Pages 支持两种模式</p>\n<ul>\n<li>User or organization site: 新建一个 username.github.io 的仓库，每个用户只能建立一个。</li>\n<li>Project site: 在对应仓库 Setting &#x3D;&gt; pages 进行配置，如果有多个需要配置独立域名。</li>\n</ul>\n<p>Github Pages 的配置可以<a href=\"https://pages.github.com/\">参看这里</a></p>\n<p>我这里是使用 Project site 的搭建 Hexo 站点的。修改 <strong>_config.yml</strong> 下的 deploy 推送仓库地址，将其推送到 MalBlog&#x2F;gh-pages 分支上去。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">&#x27;git&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> </span><br><span class=\"line\">    <span class=\"attr\">github:</span> <span class=\"string\">git@github.com:MaLuns/MalBlog.git，gh-pages</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n<p>在本地执行 <strong>hexo generate</strong> 和 <strong>hexo deploy</strong> 确保能正常生成和发布。</p>\n<h2 id=\"GitHub-Actions\"><a href=\"#GitHub-Actions\" class=\"headerlink\" title=\"GitHub Actions\"></a>GitHub Actions</h2><p>我们希望当我们把博客源码推送到对应的仓库后，GitHub Actions 自动帮我们执行 <strong>hexo generate</strong>、<strong>hexo deploy</strong> 的生成和发布操作，完成博客的自动部署。首先在 项目根目录的 .github&#x2F;workflows 下 新建一个 main.yml，每一个 .yml 文件就是一个 Action ， 一个 Action  相当于一个工作流 workflow，一个工作流可以有多个任务 job，每个任务可以分为几步 step。</p>\n<p>第一步 我们配置工作流触发的时机</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 工作流名称</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Hexo</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 工作流触发配置</span></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"comment\"># 当master分支有push事件时 触发工作流</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [ <span class=\"string\">master</span> ]</span><br><span class=\"line\">  <span class=\"attr\">pull_request:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [ <span class=\"string\">master</span> ]</span><br></pre></td></tr></table></figure>\n<p>第二步 配置工作流中的 job</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jons:</span></span><br><span class=\"line\">    <span class=\"comment\"># job1</span></span><br><span class=\"line\">    <span class=\"attr\">blog-cicd:</span></span><br><span class=\"line\">        <span class=\"comment\"># 任务名称</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">Hexo</span> <span class=\"string\">blog</span> <span class=\"string\">build</span> <span class=\"string\">&amp;</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">        <span class=\"comment\"># 设置任务执行环境</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span> <span class=\"comment\"># 使用最新的 Ubuntu 系统作为编译部署的环境</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># jon2 这里可以配置多个job</span></span><br><span class=\"line\">    <span class=\"attr\">job2:</span></span><br></pre></td></tr></table></figure>\n<p>第三步 实现任务步骤， 实现自动部署大致需要如下步骤<br>拉取博客源码&#x3D;&gt; 安装 Hexo 需要环境 &#x3D;&gt; 安装源码依赖 &#x3D;&gt; 构建博客源码 &#x3D;&gt; 推送构建产物 </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jons:</span></span><br><span class=\"line\">    <span class=\"attr\">blog-cicd:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">Hexo</span> <span class=\"string\">blog</span> <span class=\"string\">build</span> <span class=\"string\">&amp;</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">    <span class=\"comment\"># 使用 checkout@2 插件拉取代码</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span> <span class=\"string\">codes</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span> </span><br><span class=\"line\">      <span class=\"attr\">with:</span> </span><br><span class=\"line\">        <span class=\"attr\">submodules:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 使用 setup-node@v1 设置 node.js 环境</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">node</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">      <span class=\"attr\">with:</span></span><br><span class=\"line\">        <span class=\"attr\">node-version:</span> <span class=\"string\">&#x27;12.x&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 安装 Hexo 依赖</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">hexo</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">      <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"comment\">#设置环境变量 仓库私钥， 用来在构建完成后 推送到仓库</span></span><br><span class=\"line\">        <span class=\"attr\">ACTION_DEPLOY_KEY:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.HEXO_DEPLOY_PRI</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\"># 设置 ssh 私钥， 下载 hexo-cli 脚手架及相关安装包， </span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">        mkdir -p ~/.ssh/</span></span><br><span class=\"line\"><span class=\"string\">        echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class=\"line\"><span class=\"string\">        chmod 600 ~/.ssh/id_rsa</span></span><br><span class=\"line\"><span class=\"string\">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class=\"line\"><span class=\"string\">        git config --global user.email &quot;userEmail&quot;</span></span><br><span class=\"line\"><span class=\"string\">        git config --global user.name &quot;userName&quot;</span></span><br><span class=\"line\"><span class=\"string\">        npm install -g hexo-cli</span></span><br><span class=\"line\"><span class=\"string\">        npm install</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">    <span class=\"comment\"># 构建博客源码 并 推送推送构建产物</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Generate</span> <span class=\"string\">files</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">        hexo clean</span></span><br><span class=\"line\"><span class=\"string\">        hexo generate</span></span><br><span class=\"line\"><span class=\"string\">        hexo deploy</span></span><br></pre></td></tr></table></figure>\n<p>Github 每个仓库都是可以设置 <strong>Deploy keys</strong> 的， 用来可以操作单个仓库的。我们需要生成一个 <strong>SSH Key</strong> ，将公钥添加到 Setting &#x3D;&gt; Deploy 里， 将私钥 Setting &#x3D;&gt; Secrets &#x3D;&gt; Actions 里。这样就可以在 工作流中 <strong></strong> 获取到 <strong>Secrets</strong> 配置变量。我这里使用名称是 <strong>HEXO_DEPLOY_PRI</strong> 。</p>\n<h2 id=\"Git-submodule\"><a href=\"#Git-submodule\" class=\"headerlink\" title=\"Git submodule\"></a>Git submodule</h2><p>有时候使用了三方主题，需要更新时候，我们也希望能够自动更新上去，我们可以使用 <strong>Git submodule</strong> 来管理主题。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add &lt;主题仓库地址&gt; &lt;主题存放路径&gt;</span><br></pre></td></tr></table></figure>\n<p>修改工作流配置，在构建前先拉取子模块中的主题</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 最开始 git submodule update --recursive --remote 去拉取，发现一直更新不到最新的</span></span><br><span class=\"line\"><span class=\"comment\"># 然后使用 git pull 拉取发现有时候会出现冲突... 具体原因没找到， 所有就又用删除主题文件，重新 git clone 拉取方法</span></span><br><span class=\"line\"><span class=\"comment\"># 还是对子模块不够了解</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Generate</span> <span class=\"string\">files</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">         cd ./themes/</span></span><br><span class=\"line\"><span class=\"string\"></span>        <span class=\"string\">rm</span> <span class=\"string\">-r</span> <span class=\"string\">hexo-theme-text</span></span><br><span class=\"line\">        <span class=\"string\">git</span> <span class=\"string\">clone</span> <span class=\"string\">https://github.com/MaLuns/hexo-theme-text.git</span></span><br><span class=\"line\">        <span class=\"string\">cd</span> <span class=\"string\">../../</span></span><br><span class=\"line\">        <span class=\"string\">hexo</span> <span class=\"string\">clean</span></span><br><span class=\"line\">        <span class=\"string\">hexo</span> <span class=\"string\">generate</span></span><br><span class=\"line\">        <span class=\"string\">hexo</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后来发现 git chekout 也可以直接用</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Generate</span> <span class=\"string\">files</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">        cd ./themes/hexo-theme-text</span></span><br><span class=\"line\"><span class=\"string\">        git checkout -q master</span></span><br><span class=\"line\"><span class=\"string\">        cd ../../</span></span><br><span class=\"line\"><span class=\"string\">        hexo clean</span></span><br><span class=\"line\"><span class=\"string\">        hexo generate</span></span><br><span class=\"line\"><span class=\"string\">        hexo deploy</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>这样基本上就实现了 Hexo 的自动部署和主题自动更新了， 加上使用 <a href=\"https://github.dev/\">github.dev</a> 就能实现只需要一个浏览器就能随时随地的写了， 不在需要本地配置搭建环境啦。</p>\n","excerpt":"<p>看看官方对GitHub Actions的介绍: GitHub Actions 帮助您自动完成软件开发周期内的任务。 GitHub Actions 是事件驱动的，意味着您可以在指定事件发生后运行一系列命令。 例如，每次有人为仓库创建拉取请求时，您都可以自动运行命令来执行软件测试脚本。</p>\n<p>简单的说就是，GitHub 把持续集成系列操作步骤叫做 actions。比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。可以看看官方的介绍，对<a href=\"https://docs.github.com/cn/actions/learn-github-actions/introduction-to-github-actions\">GitHub Actions</a>快速了解</p>","more":"<h2 id=\"Hexo-配置\"><a href=\"#Hexo-配置\" class=\"headerlink\" title=\"Hexo 配置\"></a>Hexo 配置</h2><p>Hexo 搭建使用可以去参看<a href=\"https://hexo.io/zh-cn/index.html\">hexo 文档</a>。</p>\n<p>Github Pages 支持两种模式</p>\n<ul>\n<li>User or organization site: 新建一个 username.github.io 的仓库，每个用户只能建立一个。</li>\n<li>Project site: 在对应仓库 Setting &#x3D;&gt; pages 进行配置，如果有多个需要配置独立域名。</li>\n</ul>\n<p>Github Pages 的配置可以<a href=\"https://pages.github.com/\">参看这里</a></p>\n<p>我这里是使用 Project site 的搭建 Hexo 站点的。修改 <strong>_config.yml</strong> 下的 deploy 推送仓库地址，将其推送到 MalBlog&#x2F;gh-pages 分支上去。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">&#x27;git&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> </span><br><span class=\"line\">    <span class=\"attr\">github:</span> <span class=\"string\">git@github.com:MaLuns/MalBlog.git，gh-pages</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n<p>在本地执行 <strong>hexo generate</strong> 和 <strong>hexo deploy</strong> 确保能正常生成和发布。</p>\n<h2 id=\"GitHub-Actions\"><a href=\"#GitHub-Actions\" class=\"headerlink\" title=\"GitHub Actions\"></a>GitHub Actions</h2><p>我们希望当我们把博客源码推送到对应的仓库后，GitHub Actions 自动帮我们执行 <strong>hexo generate</strong>、<strong>hexo deploy</strong> 的生成和发布操作，完成博客的自动部署。首先在 项目根目录的 .github&#x2F;workflows 下 新建一个 main.yml，每一个 .yml 文件就是一个 Action ， 一个 Action  相当于一个工作流 workflow，一个工作流可以有多个任务 job，每个任务可以分为几步 step。</p>\n<p>第一步 我们配置工作流触发的时机</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 工作流名称</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Hexo</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 工作流触发配置</span></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"comment\"># 当master分支有push事件时 触发工作流</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [ <span class=\"string\">master</span> ]</span><br><span class=\"line\">  <span class=\"attr\">pull_request:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [ <span class=\"string\">master</span> ]</span><br></pre></td></tr></table></figure>\n<p>第二步 配置工作流中的 job</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jons:</span></span><br><span class=\"line\">    <span class=\"comment\"># job1</span></span><br><span class=\"line\">    <span class=\"attr\">blog-cicd:</span></span><br><span class=\"line\">        <span class=\"comment\"># 任务名称</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">Hexo</span> <span class=\"string\">blog</span> <span class=\"string\">build</span> <span class=\"string\">&amp;</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">        <span class=\"comment\"># 设置任务执行环境</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span> <span class=\"comment\"># 使用最新的 Ubuntu 系统作为编译部署的环境</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># jon2 这里可以配置多个job</span></span><br><span class=\"line\">    <span class=\"attr\">job2:</span></span><br></pre></td></tr></table></figure>\n<p>第三步 实现任务步骤， 实现自动部署大致需要如下步骤<br>拉取博客源码&#x3D;&gt; 安装 Hexo 需要环境 &#x3D;&gt; 安装源码依赖 &#x3D;&gt; 构建博客源码 &#x3D;&gt; 推送构建产物 </p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jons:</span></span><br><span class=\"line\">    <span class=\"attr\">blog-cicd:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">Hexo</span> <span class=\"string\">blog</span> <span class=\"string\">build</span> <span class=\"string\">&amp;</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">        <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">    <span class=\"comment\"># 使用 checkout@2 插件拉取代码</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span> <span class=\"string\">codes</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span> </span><br><span class=\"line\">      <span class=\"attr\">with:</span> </span><br><span class=\"line\">        <span class=\"attr\">submodules:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 使用 setup-node@v1 设置 node.js 环境</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">node</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">      <span class=\"attr\">with:</span></span><br><span class=\"line\">        <span class=\"attr\">node-version:</span> <span class=\"string\">&#x27;12.x&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 安装 Hexo 依赖</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">hexo</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">      <span class=\"attr\">env:</span></span><br><span class=\"line\">        <span class=\"comment\">#设置环境变量 仓库私钥， 用来在构建完成后 推送到仓库</span></span><br><span class=\"line\">        <span class=\"attr\">ACTION_DEPLOY_KEY:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.HEXO_DEPLOY_PRI</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\"># 设置 ssh 私钥， 下载 hexo-cli 脚手架及相关安装包， </span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">        mkdir -p ~/.ssh/</span></span><br><span class=\"line\"><span class=\"string\">        echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class=\"line\"><span class=\"string\">        chmod 600 ~/.ssh/id_rsa</span></span><br><span class=\"line\"><span class=\"string\">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class=\"line\"><span class=\"string\">        git config --global user.email &quot;userEmail&quot;</span></span><br><span class=\"line\"><span class=\"string\">        git config --global user.name &quot;userName&quot;</span></span><br><span class=\"line\"><span class=\"string\">        npm install -g hexo-cli</span></span><br><span class=\"line\"><span class=\"string\">        npm install</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">    <span class=\"comment\"># 构建博客源码 并 推送推送构建产物</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Generate</span> <span class=\"string\">files</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">        hexo clean</span></span><br><span class=\"line\"><span class=\"string\">        hexo generate</span></span><br><span class=\"line\"><span class=\"string\">        hexo deploy</span></span><br></pre></td></tr></table></figure>\n<p>Github 每个仓库都是可以设置 <strong>Deploy keys</strong> 的， 用来可以操作单个仓库的。我们需要生成一个 <strong>SSH Key</strong> ，将公钥添加到 Setting &#x3D;&gt; Deploy 里， 将私钥 Setting &#x3D;&gt; Secrets &#x3D;&gt; Actions 里。这样就可以在 工作流中 <strong></strong> 获取到 <strong>Secrets</strong> 配置变量。我这里使用名称是 <strong>HEXO_DEPLOY_PRI</strong> 。</p>\n<h2 id=\"Git-submodule\"><a href=\"#Git-submodule\" class=\"headerlink\" title=\"Git submodule\"></a>Git submodule</h2><p>有时候使用了三方主题，需要更新时候，我们也希望能够自动更新上去，我们可以使用 <strong>Git submodule</strong> 来管理主题。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add &lt;主题仓库地址&gt; &lt;主题存放路径&gt;</span><br></pre></td></tr></table></figure>\n<p>修改工作流配置，在构建前先拉取子模块中的主题</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 最开始 git submodule update --recursive --remote 去拉取，发现一直更新不到最新的</span></span><br><span class=\"line\"><span class=\"comment\"># 然后使用 git pull 拉取发现有时候会出现冲突... 具体原因没找到， 所有就又用删除主题文件，重新 git clone 拉取方法</span></span><br><span class=\"line\"><span class=\"comment\"># 还是对子模块不够了解</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Generate</span> <span class=\"string\">files</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">         cd ./themes/</span></span><br><span class=\"line\"><span class=\"string\"></span>        <span class=\"string\">rm</span> <span class=\"string\">-r</span> <span class=\"string\">hexo-theme-text</span></span><br><span class=\"line\">        <span class=\"string\">git</span> <span class=\"string\">clone</span> <span class=\"string\">https://github.com/MaLuns/hexo-theme-text.git</span></span><br><span class=\"line\">        <span class=\"string\">cd</span> <span class=\"string\">../../</span></span><br><span class=\"line\">        <span class=\"string\">hexo</span> <span class=\"string\">clean</span></span><br><span class=\"line\">        <span class=\"string\">hexo</span> <span class=\"string\">generate</span></span><br><span class=\"line\">        <span class=\"string\">hexo</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后来发现 git chekout 也可以直接用</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Generate</span> <span class=\"string\">files</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">        cd ./themes/hexo-theme-text</span></span><br><span class=\"line\"><span class=\"string\">        git checkout -q master</span></span><br><span class=\"line\"><span class=\"string\">        cd ../../</span></span><br><span class=\"line\"><span class=\"string\">        hexo clean</span></span><br><span class=\"line\"><span class=\"string\">        hexo generate</span></span><br><span class=\"line\"><span class=\"string\">        hexo deploy</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>这样基本上就实现了 Hexo 的自动部署和主题自动更新了， 加上使用 <a href=\"https://github.dev/\">github.dev</a> 就能实现只需要一个浏览器就能随时随地的写了， 不在需要本地配置搭建环境啦。</p>"},{"title":"Hello Word","date":"2019-11-19T02:16:09.000Z","comments":1,"_content":"\n欢迎使用Hexo。这是系统自动生成的演示文章。编辑或者删除它，  然后开始您的博客！\n\n","source":"_posts/helloword.md","raw":"---\ntitle: Hello Word\ndate: 2019-11-19 10:16:09\ntags: [hello world]\ncategories: 创作类\ncomments: true\n---\n\n欢迎使用Hexo。这是系统自动生成的演示文章。编辑或者删除它，  然后开始您的博客！\n\n","slug":"helloword","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vrh001f98lghp0683it","content":"<p>欢迎使用Hexo。这是系统自动生成的演示文章。编辑或者删除它，  然后开始您的博客！</p>\n","excerpt":"","more":"<p>欢迎使用Hexo。这是系统自动生成的演示文章。编辑或者删除它，  然后开始您的博客！</p>\n"},{"title":"hexo-theme-async 使用指北","comment":true,"date":"2022-09-07T07:29:25.000Z","description":null,"keywords":null,"sticky":1,"_content":"\n![demo](https://hexo-theme-async.imalun.com/imgs/demo2.png)_预览图_\n\n### 前提\n\n本主题为 Hexo 主题，请确保您对 Hexo 已有基本了解 。详请参见 [Hexo 官网](https://hexo.io/)。\n\n开始前，请确保您的 Hexo 初始化工作已经准备完成，请参考 [Hexo 安装](https://hexo.io/zh-cn/docs/)。本主题依赖于 **Node 14.x** 以上版本，请注意您本地 **Node** 环境。\n\n### 主题安装\n\n进入您的 Hexo 博客根目录，执行如下命令，安装主题：\n\n{% tabs test1 %}\n\n<!-- tab npm -->\n\n```bash\nnpm i hexo-theme-async@latest\n```\n\n<!-- endtab -->\n\n<!-- tab yarn -->\n\n```bash\nyarn add hexo-theme-async@latest\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n如果您没有 **ejs** 与 **less** 的渲染器，请先安装：[hexo-renderer-ejs](https://github.com/hexojs/hexo-renderer-ejs) 和 [hexo-renderer-less](https://github.com/hexojs/hexo-renderer-less)。\n\n{% tabs test2 %}\n\n<!-- tab npm -->\n\n```bash\nnpm install --save hexo-renderer-less hexo-renderer-ejs\n```\n\n<!-- endtab -->\n<!-- tab yarn -->\n\n```bash\nyarn add -D hexo-renderer-less hexo-renderer-ejs\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n### 启用主题\n\n修改 Hexo 博客配置文件 `_config.yml`，到此运行起来就 Hexo-Theme-Async 主题就生效啦。\n\n```yaml\n# 将主题设置为 hexo-theme-async\ntheme: async\n```\n\n关于主题配置修改，可以参考 [hexo-theme-async 文档](https://hexo-theme-async.imalun.com/guide/config.html)\n\n### 演示视频\n\n-   安装\n    -   [npm 安装演示](https://www.bilibili.com/video/BV1Cs4y1J7vv/)\n    -   [下载到 themes 目录演示](https://www.bilibili.com/video/BV1mg4y137Zi/)\n-   配置\n    -   [常用配置演示](https://www.bilibili.com/video/BV1cm4y1z7tQ/)\n    -   [主题自定义图标、自定义代码高亮演示](https://www.bilibili.com/video/BV1Da4y1M7UF/)\n    -   [随机封面、友链页、相册页面配置演示](https://www.bilibili.com/video/BV1cs4y1m7RT/)\n-   运行源码\n    -   [hexo-theme-async 源码运行演示](https://www.bilibili.com/video/BV19L41127LH/)\n-   在线体验\n    -   [stackblitz](https://stackblitz.com/edit/node-tshsxq?embed=1&file=README.md)\n\n安装示例视频，更多视频前往[这里](https://space.bilibili.com/12763040/channel/seriesdetail?sid=3170241)\n\n<iframe src=\"//player.bilibili.com/player.html?aid=951750989&bvid=BV1Cs4y1J7vv&cid=1077514563&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"500\"> </iframe>\n","source":"_posts/hexo_theme_async_guide.md","raw":"---\ntitle: hexo-theme-async 使用指北\ncomment: true\ndate: 2022-09-07 15:29:25\ntags: [hexo]\ndescription:\ncategories: 记录类\nkeywords:\nsticky: 1\n---\n\n![demo](https://hexo-theme-async.imalun.com/imgs/demo2.png)_预览图_\n\n### 前提\n\n本主题为 Hexo 主题，请确保您对 Hexo 已有基本了解 。详请参见 [Hexo 官网](https://hexo.io/)。\n\n开始前，请确保您的 Hexo 初始化工作已经准备完成，请参考 [Hexo 安装](https://hexo.io/zh-cn/docs/)。本主题依赖于 **Node 14.x** 以上版本，请注意您本地 **Node** 环境。\n\n### 主题安装\n\n进入您的 Hexo 博客根目录，执行如下命令，安装主题：\n\n{% tabs test1 %}\n\n<!-- tab npm -->\n\n```bash\nnpm i hexo-theme-async@latest\n```\n\n<!-- endtab -->\n\n<!-- tab yarn -->\n\n```bash\nyarn add hexo-theme-async@latest\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n如果您没有 **ejs** 与 **less** 的渲染器，请先安装：[hexo-renderer-ejs](https://github.com/hexojs/hexo-renderer-ejs) 和 [hexo-renderer-less](https://github.com/hexojs/hexo-renderer-less)。\n\n{% tabs test2 %}\n\n<!-- tab npm -->\n\n```bash\nnpm install --save hexo-renderer-less hexo-renderer-ejs\n```\n\n<!-- endtab -->\n<!-- tab yarn -->\n\n```bash\nyarn add -D hexo-renderer-less hexo-renderer-ejs\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n### 启用主题\n\n修改 Hexo 博客配置文件 `_config.yml`，到此运行起来就 Hexo-Theme-Async 主题就生效啦。\n\n```yaml\n# 将主题设置为 hexo-theme-async\ntheme: async\n```\n\n关于主题配置修改，可以参考 [hexo-theme-async 文档](https://hexo-theme-async.imalun.com/guide/config.html)\n\n### 演示视频\n\n-   安装\n    -   [npm 安装演示](https://www.bilibili.com/video/BV1Cs4y1J7vv/)\n    -   [下载到 themes 目录演示](https://www.bilibili.com/video/BV1mg4y137Zi/)\n-   配置\n    -   [常用配置演示](https://www.bilibili.com/video/BV1cm4y1z7tQ/)\n    -   [主题自定义图标、自定义代码高亮演示](https://www.bilibili.com/video/BV1Da4y1M7UF/)\n    -   [随机封面、友链页、相册页面配置演示](https://www.bilibili.com/video/BV1cs4y1m7RT/)\n-   运行源码\n    -   [hexo-theme-async 源码运行演示](https://www.bilibili.com/video/BV19L41127LH/)\n-   在线体验\n    -   [stackblitz](https://stackblitz.com/edit/node-tshsxq?embed=1&file=README.md)\n\n安装示例视频，更多视频前往[这里](https://space.bilibili.com/12763040/channel/seriesdetail?sid=3170241)\n\n<iframe src=\"//player.bilibili.com/player.html?aid=951750989&bvid=BV1Cs4y1J7vv&cid=1077514563&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"500\"> </iframe>\n","slug":"hexo_theme_async_guide","published":1,"updated":"2024-03-06T07:42:59.000Z","comments":1,"layout":"post","photos":[],"_id":"cltgz7vri001i98lg5sirbngs","content":"<p><img src=\"https://hexo-theme-async.imalun.com/imgs/demo2.png\" alt=\"demo\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><em>预览图</em></p>\n<h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><p>本主题为 Hexo 主题，请确保您对 Hexo 已有基本了解 。详请参见 <a href=\"https://hexo.io/\">Hexo 官网</a>。</p>\n<p>开始前，请确保您的 Hexo 初始化工作已经准备完成，请参考 <a href=\"https://hexo.io/zh-cn/docs/\">Hexo 安装</a>。本主题依赖于 <strong>Node 14.x</strong> 以上版本，请注意您本地 <strong>Node</strong> 环境。</p>\n<h3 id=\"主题安装\"><a href=\"#主题安装\" class=\"headerlink\" title=\"主题安装\"></a>主题安装</h3><p>进入您的 Hexo 博客根目录，执行如下命令，安装主题：</p>\n<div class=\"trm-tabs\" id=\"test1\"><ul class=\"trm-nav-tabs\"><li class=\"trm-tab active\"><button type=\"button\" data-href=\"#test1-1\">npm</button></li><li class=\"trm-tab\"><button type=\"button\" data-href=\"#test1-2\">yarn</button></li></ul><div class=\"trm-tab-contents\"><div class=\"trm-tab-item-content active\" id=\"test1-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-theme-async@latest</span><br></pre></td></tr></table></figure></div><div class=\"trm-tab-item-content\" id=\"test1-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add hexo-theme-async@latest</span><br></pre></td></tr></table></figure></div></div></div>\n\n<p>如果您没有 <strong>ejs</strong> 与 <strong>less</strong> 的渲染器，请先安装：<a href=\"https://github.com/hexojs/hexo-renderer-ejs\">hexo-renderer-ejs</a> 和 <a href=\"https://github.com/hexojs/hexo-renderer-less\">hexo-renderer-less</a>。</p>\n<div class=\"trm-tabs\" id=\"test2\"><ul class=\"trm-nav-tabs\"><li class=\"trm-tab active\"><button type=\"button\" data-href=\"#test2-1\">npm</button></li><li class=\"trm-tab\"><button type=\"button\" data-href=\"#test2-2\">yarn</button></li></ul><div class=\"trm-tab-contents\"><div class=\"trm-tab-item-content active\" id=\"test2-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-renderer-less hexo-renderer-ejs</span><br></pre></td></tr></table></figure></div><div class=\"trm-tab-item-content\" id=\"test2-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D hexo-renderer-less hexo-renderer-ejs</span><br></pre></td></tr></table></figure></div></div></div>\n\n<h3 id=\"启用主题\"><a href=\"#启用主题\" class=\"headerlink\" title=\"启用主题\"></a>启用主题</h3><p>修改 Hexo 博客配置文件 <code>_config.yml</code>，到此运行起来就 Hexo-Theme-Async 主题就生效啦。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将主题设置为 hexo-theme-async</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">async</span></span><br></pre></td></tr></table></figure>\n\n<p>关于主题配置修改，可以参考 <a href=\"https://hexo-theme-async.imalun.com/guide/config.html\">hexo-theme-async 文档</a></p>\n<h3 id=\"演示视频\"><a href=\"#演示视频\" class=\"headerlink\" title=\"演示视频\"></a>演示视频</h3><ul>\n<li>安装<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1Cs4y1J7vv/\">npm 安装演示</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1mg4y137Zi/\">下载到 themes 目录演示</a></li>\n</ul>\n</li>\n<li>配置<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1cm4y1z7tQ/\">常用配置演示</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1Da4y1M7UF/\">主题自定义图标、自定义代码高亮演示</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1cs4y1m7RT/\">随机封面、友链页、相册页面配置演示</a></li>\n</ul>\n</li>\n<li>运行源码<ul>\n<li><a href=\"https://www.bilibili.com/video/BV19L41127LH/\">hexo-theme-async 源码运行演示</a></li>\n</ul>\n</li>\n<li>在线体验<ul>\n<li><a href=\"https://stackblitz.com/edit/node-tshsxq?embed=1&file=README.md\">stackblitz</a></li>\n</ul>\n</li>\n</ul>\n<p>安装示例视频，更多视频前往<a href=\"https://space.bilibili.com/12763040/channel/seriesdetail?sid=3170241\">这里</a></p>\n<iframe src=\"//player.bilibili.com/player.html?aid=951750989&bvid=BV1Cs4y1J7vv&cid=1077514563&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"500\"> </iframe>\n","excerpt":"","more":"<p><img src=\"https://hexo-theme-async.imalun.com/imgs/demo2.png\" alt=\"demo\"><em>预览图</em></p>\n<h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><p>本主题为 Hexo 主题，请确保您对 Hexo 已有基本了解 。详请参见 <a href=\"https://hexo.io/\">Hexo 官网</a>。</p>\n<p>开始前，请确保您的 Hexo 初始化工作已经准备完成，请参考 <a href=\"https://hexo.io/zh-cn/docs/\">Hexo 安装</a>。本主题依赖于 <strong>Node 14.x</strong> 以上版本，请注意您本地 <strong>Node</strong> 环境。</p>\n<h3 id=\"主题安装\"><a href=\"#主题安装\" class=\"headerlink\" title=\"主题安装\"></a>主题安装</h3><p>进入您的 Hexo 博客根目录，执行如下命令，安装主题：</p>\n<div class=\"trm-tabs\" id=\"test1\"><ul class=\"trm-nav-tabs\"><li class=\"trm-tab active\"><button type=\"button\" data-href=\"#test1-1\">npm</button></li><li class=\"trm-tab\"><button type=\"button\" data-href=\"#test1-2\">yarn</button></li></ul><div class=\"trm-tab-contents\"><div class=\"trm-tab-item-content active\" id=\"test1-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-theme-async@latest</span><br></pre></td></tr></table></figure></div><div class=\"trm-tab-item-content\" id=\"test1-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add hexo-theme-async@latest</span><br></pre></td></tr></table></figure></div></div></div>\n\n<p>如果您没有 <strong>ejs</strong> 与 <strong>less</strong> 的渲染器，请先安装：<a href=\"https://github.com/hexojs/hexo-renderer-ejs\">hexo-renderer-ejs</a> 和 <a href=\"https://github.com/hexojs/hexo-renderer-less\">hexo-renderer-less</a>。</p>\n<div class=\"trm-tabs\" id=\"test2\"><ul class=\"trm-nav-tabs\"><li class=\"trm-tab active\"><button type=\"button\" data-href=\"#test2-1\">npm</button></li><li class=\"trm-tab\"><button type=\"button\" data-href=\"#test2-2\">yarn</button></li></ul><div class=\"trm-tab-contents\"><div class=\"trm-tab-item-content active\" id=\"test2-1\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-renderer-less hexo-renderer-ejs</span><br></pre></td></tr></table></figure></div><div class=\"trm-tab-item-content\" id=\"test2-2\"><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add -D hexo-renderer-less hexo-renderer-ejs</span><br></pre></td></tr></table></figure></div></div></div>\n\n<h3 id=\"启用主题\"><a href=\"#启用主题\" class=\"headerlink\" title=\"启用主题\"></a>启用主题</h3><p>修改 Hexo 博客配置文件 <code>_config.yml</code>，到此运行起来就 Hexo-Theme-Async 主题就生效啦。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将主题设置为 hexo-theme-async</span></span><br><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">async</span></span><br></pre></td></tr></table></figure>\n\n<p>关于主题配置修改，可以参考 <a href=\"https://hexo-theme-async.imalun.com/guide/config.html\">hexo-theme-async 文档</a></p>\n<h3 id=\"演示视频\"><a href=\"#演示视频\" class=\"headerlink\" title=\"演示视频\"></a>演示视频</h3><ul>\n<li>安装<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1Cs4y1J7vv/\">npm 安装演示</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1mg4y137Zi/\">下载到 themes 目录演示</a></li>\n</ul>\n</li>\n<li>配置<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1cm4y1z7tQ/\">常用配置演示</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1Da4y1M7UF/\">主题自定义图标、自定义代码高亮演示</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1cs4y1m7RT/\">随机封面、友链页、相册页面配置演示</a></li>\n</ul>\n</li>\n<li>运行源码<ul>\n<li><a href=\"https://www.bilibili.com/video/BV19L41127LH/\">hexo-theme-async 源码运行演示</a></li>\n</ul>\n</li>\n<li>在线体验<ul>\n<li><a href=\"https://stackblitz.com/edit/node-tshsxq?embed=1&file=README.md\">stackblitz</a></li>\n</ul>\n</li>\n</ul>\n<p>安装示例视频，更多视频前往<a href=\"https://space.bilibili.com/12763040/channel/seriesdetail?sid=3170241\">这里</a></p>\n<iframe src=\"//player.bilibili.com/player.html?aid=951750989&bvid=BV1Cs4y1J7vv&cid=1077514563&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"500\"> </iframe>\n"},{"title":"hexo-theme-text 使用说明","date":"2021-09-25T15:13:34.000Z","comments":1,"description":null,"keywords":"hexo,hexo主题,hexo-theme","_content":"\n这个主题诞生的原因主要是因为闲的，所以就自己动手写了这个相对比较清爽风格的主题。\n\n<!--more -->\n\n## 主题安装\n\n进入主题目录后，克隆此仓库\n\n``` git\ncd themes\ngit clone https://github.com/MaLuns/hexo-theme-text\n```\n\n修改 **_config.yml** 配置\n``` yml\ntheme: hexo-theme-text\nhighlight:\n  enable: true\n  line_number: false\n  auto_detect: false\n  tab_replace: ''\n```\n\n## 主题配置文件\n主题的功能比较简约，所以配置文件也不是很多。如果需要使用文章字数统计和 rss 需要安装下面两个插件 **hexo-generator-feed**、**hexo-wordcount**。\n\n``` yml\n# 站点信息 \nuser:\n  name: 白云苍狗 #博主名称\n  domain: https://www.imalun.com #站点域名\n  avatar: https://www.imalun.com/images/avatar.jpg #站点头像\n  desc: 醒，亦在人间；梦，亦在人间。 #站点描述\n  birthDay: 11/19/2019 17:00:00 #计时开始时间\n\n# 站点图标和标题切换信息\nfavicon:\n  visibilitychange: true\n  narmal: /images/favicon.png #激活标签图标\n  hidden: /images/failure.png #未激活标签图标\n  show_text: (/≧▽≦/)咦！又好了！ #激活标签标题\n  hide_text: (●—●)喔哟，崩溃啦！ #未激活标签标题\n  apple_touch_icon: /images/apple-touch-icon-next.png\n  safari_pinned_tab: /images/logo.svg\n\n# 文章统计\npost_wordcount:\n  wordcount: true # 单篇 字数统计\n  min2read: true # 单篇 阅读时长\n\n#开启 Service Worker \nsw: true\n\n#开启文章目录\nisToc: false\n\n#\ncanonical: true\n\n# rss\nrss: atom.xml\n\n# 顶部菜单配置\nmenu:\n  nav:\n    - title: 白云苍狗\n      url: /\n    - title: ARCHIVES\n      url: /archives\n    - title: LINKS\n      url: /links\n    - title: COMMENTS\n      url: /comment\n    - title: ABOUT\n      url: /about\n\n```\n开启 Service Worker 缓存，并且想使用 **PWA** 时需要自行添加 **manifest.json** 文件，配置站点被安装的图标等信息。[了解更多PWA信息](https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps)\n``` json\n// 我的使用示例\n{\n    \"name\": \"白云苍狗\",\n    \"short_name\": \"白云苍狗\",\n    \"icons\": [\n        {\n            \"src\": \"/logo-192x192.png\",\n            \"sizes\": \"192x192\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"/logo-256x256.png\",\n            \"sizes\": \"256x256\",\n            \"type\": \"image/png\"\n        }\n    ],\n    \"theme_color\": \"#fff\",\n    \"background_color\": \"#fff\",\n    \"display\": \"standalone\",\n    \"start_url\": \"/\"\n}\n```\n\n\n## 修改主题配色\n如果你需要修改主题色，你只需要找到 **source/css/var.less** 文件，所有的主题配色都在这里了， **.dark** 下是暗黑模式下的颜色。\n```less\n:root {\n    --transitionTime   : .35s ease; // 过渡时间\n    --hColor           : #000; // 主要字体色\n    --metaColor        : #5c5c5c; // 次要信息颜色\n    --bodyBgColor      : #f2f3f0; // 主题背景色\n    --headBgColor      : #fff; // 头部背景色\n    --markHeadBgColor  : #eee; // 动画切换遮罩色\n    --markBgColor      : #252525; // 动画切换遮罩色\n    --commentColor     : #525f7f; // 评论组建主题色\n    --dashedBorderColor: #c5c5c5; // 分割边框色\n    --postLinkColor    : #bb996d; // 文章中超链接\n    --nprogressColor   : #bb996d; // 加载进度条色\n    --linkItemBgColor  : #f9f9f9; // 友链背景色\n    --linkItemBgColor2 : #fff; // 友链hover背景色\n    --ngBarBgColor     : #ca8b58; // 加载进度条颜色\n\n    &.dark {\n        --hColor         : #f2f3f0;\n        --metaColor      : #e6e6e6;\n        --bodyBgColor    : #252525;\n        --headBgColor    : #1d1d1d;\n        --markHeadBgColor: #353535;\n        --markBgColor    : #f2f3f0;\n        --commentColor   : #becae7; \n        --nprogressColor : #fff3e5;\n        --linkItemBgColor  : #353535; \n        --linkItemBgColor2 : #000; \n    }\n}\n```\n\n## 多语言配置\n在 languages 文件夹里默认只有一个 **zh-cn.yml** 中文文件配置，如果需要其他语言需要自行添加即可。\n\n## 评论系统\n本人默认是使用腾讯的云开发的评论系统，所以主题默认是没评论系统的。不过你可以集成其他的第三方评论插件，你只需要在 **themes/hexo-theme-text/layout/components/comment.ejs** 里添加第三方评论插件代码，**_config.yml** 添加对应的配置，你就可以在你的博客里使用评论啦。\n\n## 写在最后\n本项目采用 MIT 开源许可证，欢迎大家贡献，你可以随意打开一个 issue 来进行提问，有任何改进想法都可以进行 fork，等待您的 Pull Request。","source":"_posts/hexo_theme_text.md","raw":"---\ntitle: hexo-theme-text 使用说明\ndate: 2021-09-25 23:13:34\ncomments: true\ntags: [hexo]\ndescription: \ncategories: 创作类\nkeywords: hexo,hexo主题,hexo-theme\n---\n\n这个主题诞生的原因主要是因为闲的，所以就自己动手写了这个相对比较清爽风格的主题。\n\n<!--more -->\n\n## 主题安装\n\n进入主题目录后，克隆此仓库\n\n``` git\ncd themes\ngit clone https://github.com/MaLuns/hexo-theme-text\n```\n\n修改 **_config.yml** 配置\n``` yml\ntheme: hexo-theme-text\nhighlight:\n  enable: true\n  line_number: false\n  auto_detect: false\n  tab_replace: ''\n```\n\n## 主题配置文件\n主题的功能比较简约，所以配置文件也不是很多。如果需要使用文章字数统计和 rss 需要安装下面两个插件 **hexo-generator-feed**、**hexo-wordcount**。\n\n``` yml\n# 站点信息 \nuser:\n  name: 白云苍狗 #博主名称\n  domain: https://www.imalun.com #站点域名\n  avatar: https://www.imalun.com/images/avatar.jpg #站点头像\n  desc: 醒，亦在人间；梦，亦在人间。 #站点描述\n  birthDay: 11/19/2019 17:00:00 #计时开始时间\n\n# 站点图标和标题切换信息\nfavicon:\n  visibilitychange: true\n  narmal: /images/favicon.png #激活标签图标\n  hidden: /images/failure.png #未激活标签图标\n  show_text: (/≧▽≦/)咦！又好了！ #激活标签标题\n  hide_text: (●—●)喔哟，崩溃啦！ #未激活标签标题\n  apple_touch_icon: /images/apple-touch-icon-next.png\n  safari_pinned_tab: /images/logo.svg\n\n# 文章统计\npost_wordcount:\n  wordcount: true # 单篇 字数统计\n  min2read: true # 单篇 阅读时长\n\n#开启 Service Worker \nsw: true\n\n#开启文章目录\nisToc: false\n\n#\ncanonical: true\n\n# rss\nrss: atom.xml\n\n# 顶部菜单配置\nmenu:\n  nav:\n    - title: 白云苍狗\n      url: /\n    - title: ARCHIVES\n      url: /archives\n    - title: LINKS\n      url: /links\n    - title: COMMENTS\n      url: /comment\n    - title: ABOUT\n      url: /about\n\n```\n开启 Service Worker 缓存，并且想使用 **PWA** 时需要自行添加 **manifest.json** 文件，配置站点被安装的图标等信息。[了解更多PWA信息](https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps)\n``` json\n// 我的使用示例\n{\n    \"name\": \"白云苍狗\",\n    \"short_name\": \"白云苍狗\",\n    \"icons\": [\n        {\n            \"src\": \"/logo-192x192.png\",\n            \"sizes\": \"192x192\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"/logo-256x256.png\",\n            \"sizes\": \"256x256\",\n            \"type\": \"image/png\"\n        }\n    ],\n    \"theme_color\": \"#fff\",\n    \"background_color\": \"#fff\",\n    \"display\": \"standalone\",\n    \"start_url\": \"/\"\n}\n```\n\n\n## 修改主题配色\n如果你需要修改主题色，你只需要找到 **source/css/var.less** 文件，所有的主题配色都在这里了， **.dark** 下是暗黑模式下的颜色。\n```less\n:root {\n    --transitionTime   : .35s ease; // 过渡时间\n    --hColor           : #000; // 主要字体色\n    --metaColor        : #5c5c5c; // 次要信息颜色\n    --bodyBgColor      : #f2f3f0; // 主题背景色\n    --headBgColor      : #fff; // 头部背景色\n    --markHeadBgColor  : #eee; // 动画切换遮罩色\n    --markBgColor      : #252525; // 动画切换遮罩色\n    --commentColor     : #525f7f; // 评论组建主题色\n    --dashedBorderColor: #c5c5c5; // 分割边框色\n    --postLinkColor    : #bb996d; // 文章中超链接\n    --nprogressColor   : #bb996d; // 加载进度条色\n    --linkItemBgColor  : #f9f9f9; // 友链背景色\n    --linkItemBgColor2 : #fff; // 友链hover背景色\n    --ngBarBgColor     : #ca8b58; // 加载进度条颜色\n\n    &.dark {\n        --hColor         : #f2f3f0;\n        --metaColor      : #e6e6e6;\n        --bodyBgColor    : #252525;\n        --headBgColor    : #1d1d1d;\n        --markHeadBgColor: #353535;\n        --markBgColor    : #f2f3f0;\n        --commentColor   : #becae7; \n        --nprogressColor : #fff3e5;\n        --linkItemBgColor  : #353535; \n        --linkItemBgColor2 : #000; \n    }\n}\n```\n\n## 多语言配置\n在 languages 文件夹里默认只有一个 **zh-cn.yml** 中文文件配置，如果需要其他语言需要自行添加即可。\n\n## 评论系统\n本人默认是使用腾讯的云开发的评论系统，所以主题默认是没评论系统的。不过你可以集成其他的第三方评论插件，你只需要在 **themes/hexo-theme-text/layout/components/comment.ejs** 里添加第三方评论插件代码，**_config.yml** 添加对应的配置，你就可以在你的博客里使用评论啦。\n\n## 写在最后\n本项目采用 MIT 开源许可证，欢迎大家贡献，你可以随意打开一个 issue 来进行提问，有任何改进想法都可以进行 fork，等待您的 Pull Request。","slug":"hexo_theme_text","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vrj001m98lgddepagan","content":"<p>这个主题诞生的原因主要是因为闲的，所以就自己动手写了这个相对比较清爽风格的主题。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"主题安装\"><a href=\"#主题安装\" class=\"headerlink\" title=\"主题安装\"></a>主题安装</h2><p>进入主题目录后，克隆此仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd themes</span><br><span class=\"line\">git clone https://github.com/MaLuns/hexo-theme-text</span><br></pre></td></tr></table></figure>\n\n<p>修改 <strong>_config.yml</strong> 配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">hexo-theme-text</span></span><br><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">line_number:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">auto_detect:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">tab_replace:</span> <span class=\"string\">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"主题配置文件\"><a href=\"#主题配置文件\" class=\"headerlink\" title=\"主题配置文件\"></a>主题配置文件</h2><p>主题的功能比较简约，所以配置文件也不是很多。如果需要使用文章字数统计和 rss 需要安装下面两个插件 <strong>hexo-generator-feed</strong>、<strong>hexo-wordcount</strong>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 站点信息 </span></span><br><span class=\"line\"><span class=\"attr\">user:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">白云苍狗</span> <span class=\"comment\">#博主名称</span></span><br><span class=\"line\">  <span class=\"attr\">domain:</span> <span class=\"string\">https://www.imalun.com</span> <span class=\"comment\">#站点域名</span></span><br><span class=\"line\">  <span class=\"attr\">avatar:</span> <span class=\"string\">https://www.imalun.com/images/avatar.jpg</span> <span class=\"comment\">#站点头像</span></span><br><span class=\"line\">  <span class=\"attr\">desc:</span> <span class=\"string\">醒，亦在人间；梦，亦在人间。</span> <span class=\"comment\">#站点描述</span></span><br><span class=\"line\">  <span class=\"attr\">birthDay:</span> <span class=\"number\">11</span><span class=\"string\">/19/2019</span> <span class=\"number\">17</span><span class=\"string\">:00:00</span> <span class=\"comment\">#计时开始时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 站点图标和标题切换信息</span></span><br><span class=\"line\"><span class=\"attr\">favicon:</span></span><br><span class=\"line\">  <span class=\"attr\">visibilitychange:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">narmal:</span> <span class=\"string\">/images/favicon.png</span> <span class=\"comment\">#激活标签图标</span></span><br><span class=\"line\">  <span class=\"attr\">hidden:</span> <span class=\"string\">/images/failure.png</span> <span class=\"comment\">#未激活标签图标</span></span><br><span class=\"line\">  <span class=\"attr\">show_text:</span> <span class=\"string\">(/≧▽≦/)咦！又好了！</span> <span class=\"comment\">#激活标签标题</span></span><br><span class=\"line\">  <span class=\"attr\">hide_text:</span> <span class=\"string\">(●—●)喔哟，崩溃啦！</span> <span class=\"comment\">#未激活标签标题</span></span><br><span class=\"line\">  <span class=\"attr\">apple_touch_icon:</span> <span class=\"string\">/images/apple-touch-icon-next.png</span></span><br><span class=\"line\">  <span class=\"attr\">safari_pinned_tab:</span> <span class=\"string\">/images/logo.svg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文章统计</span></span><br><span class=\"line\"><span class=\"attr\">post_wordcount:</span></span><br><span class=\"line\">  <span class=\"attr\">wordcount:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 单篇 字数统计</span></span><br><span class=\"line\">  <span class=\"attr\">min2read:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 单篇 阅读时长</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#开启 Service Worker </span></span><br><span class=\"line\"><span class=\"attr\">sw:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#开启文章目录</span></span><br><span class=\"line\"><span class=\"attr\">isToc:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">canonical:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># rss</span></span><br><span class=\"line\"><span class=\"attr\">rss:</span> <span class=\"string\">atom.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 顶部菜单配置</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">nav:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">title:</span> <span class=\"string\">白云苍狗</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">/</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">title:</span> <span class=\"string\">ARCHIVES</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">/archives</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">title:</span> <span class=\"string\">LINKS</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">/links</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">title:</span> <span class=\"string\">COMMENTS</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">/comment</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">title:</span> <span class=\"string\">ABOUT</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">/about</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>开启 Service Worker 缓存，并且想使用 <strong>PWA</strong> 时需要自行添加 <strong>manifest.json</strong> 文件，配置站点被安装的图标等信息。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps\">了解更多PWA信息</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我的使用示例</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;白云苍狗&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;short_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;白云苍狗&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;icons&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;src&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/logo-192x192.png&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;sizes&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;192x192&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;image/png&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;src&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/logo-256x256.png&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;sizes&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;256x256&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;image/png&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;theme_color&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;#fff&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;background_color&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;#fff&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;display&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;standalone&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;start_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"修改主题配色\"><a href=\"#修改主题配色\" class=\"headerlink\" title=\"修改主题配色\"></a>修改主题配色</h2><p>如果你需要修改主题色，你只需要找到 <strong>source&#x2F;css&#x2F;var.less</strong> 文件，所有的主题配色都在这里了， <strong>.dark</strong> 下是暗黑模式下的颜色。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">--transitionTime</span>   : .35s ease; <span class=\"comment\">// 过渡时间</span></span><br><span class=\"line\">    <span class=\"attr\">--hColor</span>           : #000; <span class=\"comment\">// 主要字体色</span></span><br><span class=\"line\">    <span class=\"attr\">--metaColor</span>        : #5c5c5c; <span class=\"comment\">// 次要信息颜色</span></span><br><span class=\"line\">    <span class=\"attr\">--bodyBgColor</span>      : #f2f3f0; <span class=\"comment\">// 主题背景色</span></span><br><span class=\"line\">    <span class=\"attr\">--headBgColor</span>      : #fff; <span class=\"comment\">// 头部背景色</span></span><br><span class=\"line\">    <span class=\"attr\">--markHeadBgColor</span>  : #eee; <span class=\"comment\">// 动画切换遮罩色</span></span><br><span class=\"line\">    <span class=\"attr\">--markBgColor</span>      : #252525; <span class=\"comment\">// 动画切换遮罩色</span></span><br><span class=\"line\">    <span class=\"attr\">--commentColor</span>     : #525f7f; <span class=\"comment\">// 评论组建主题色</span></span><br><span class=\"line\">    <span class=\"attr\">--dashedBorderColor</span>: #c5c5c5; <span class=\"comment\">// 分割边框色</span></span><br><span class=\"line\">    <span class=\"attr\">--postLinkColor</span>    : #bb996d; <span class=\"comment\">// 文章中超链接</span></span><br><span class=\"line\">    <span class=\"attr\">--nprogressColor</span>   : #bb996d; <span class=\"comment\">// 加载进度条色</span></span><br><span class=\"line\">    <span class=\"attr\">--linkItemBgColor</span>  : #f9f9f9; <span class=\"comment\">// 友链背景色</span></span><br><span class=\"line\">    <span class=\"attr\">--linkItemBgColor2</span> : #fff; <span class=\"comment\">// 友链hover背景色</span></span><br><span class=\"line\">    <span class=\"attr\">--ngBarBgColor</span>     : #ca8b58; <span class=\"comment\">// 加载进度条颜色</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">&amp;</span><span class=\"selector-class\">.dark</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">--hColor</span>         : #f2f3f0;</span><br><span class=\"line\">        <span class=\"attr\">--metaColor</span>      : #e6e6e6;</span><br><span class=\"line\">        <span class=\"attr\">--bodyBgColor</span>    : #252525;</span><br><span class=\"line\">        <span class=\"attr\">--headBgColor</span>    : #1d1d1d;</span><br><span class=\"line\">        <span class=\"attr\">--markHeadBgColor</span>: #353535;</span><br><span class=\"line\">        <span class=\"attr\">--markBgColor</span>    : #f2f3f0;</span><br><span class=\"line\">        <span class=\"attr\">--commentColor</span>   : #becae7; </span><br><span class=\"line\">        <span class=\"attr\">--nprogressColor</span> : #fff3e5;</span><br><span class=\"line\">        <span class=\"attr\">--linkItemBgColor</span>  : #353535; </span><br><span class=\"line\">        <span class=\"attr\">--linkItemBgColor2</span> : #000; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多语言配置\"><a href=\"#多语言配置\" class=\"headerlink\" title=\"多语言配置\"></a>多语言配置</h2><p>在 languages 文件夹里默认只有一个 <strong>zh-cn.yml</strong> 中文文件配置，如果需要其他语言需要自行添加即可。</p>\n<h2 id=\"评论系统\"><a href=\"#评论系统\" class=\"headerlink\" title=\"评论系统\"></a>评论系统</h2><p>本人默认是使用腾讯的云开发的评论系统，所以主题默认是没评论系统的。不过你可以集成其他的第三方评论插件，你只需要在 <strong>themes&#x2F;hexo-theme-text&#x2F;layout&#x2F;components&#x2F;comment.ejs</strong> 里添加第三方评论插件代码，**_config.yml** 添加对应的配置，你就可以在你的博客里使用评论啦。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>本项目采用 MIT 开源许可证，欢迎大家贡献，你可以随意打开一个 issue 来进行提问，有任何改进想法都可以进行 fork，等待您的 Pull Request。</p>\n","excerpt":"<p>这个主题诞生的原因主要是因为闲的，所以就自己动手写了这个相对比较清爽风格的主题。</p>","more":"<h2 id=\"主题安装\"><a href=\"#主题安装\" class=\"headerlink\" title=\"主题安装\"></a>主题安装</h2><p>进入主题目录后，克隆此仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd themes</span><br><span class=\"line\">git clone https://github.com/MaLuns/hexo-theme-text</span><br></pre></td></tr></table></figure>\n\n<p>修改 <strong>_config.yml</strong> 配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">hexo-theme-text</span></span><br><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">line_number:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">auto_detect:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">tab_replace:</span> <span class=\"string\">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"主题配置文件\"><a href=\"#主题配置文件\" class=\"headerlink\" title=\"主题配置文件\"></a>主题配置文件</h2><p>主题的功能比较简约，所以配置文件也不是很多。如果需要使用文章字数统计和 rss 需要安装下面两个插件 <strong>hexo-generator-feed</strong>、<strong>hexo-wordcount</strong>。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 站点信息 </span></span><br><span class=\"line\"><span class=\"attr\">user:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">白云苍狗</span> <span class=\"comment\">#博主名称</span></span><br><span class=\"line\">  <span class=\"attr\">domain:</span> <span class=\"string\">https://www.imalun.com</span> <span class=\"comment\">#站点域名</span></span><br><span class=\"line\">  <span class=\"attr\">avatar:</span> <span class=\"string\">https://www.imalun.com/images/avatar.jpg</span> <span class=\"comment\">#站点头像</span></span><br><span class=\"line\">  <span class=\"attr\">desc:</span> <span class=\"string\">醒，亦在人间；梦，亦在人间。</span> <span class=\"comment\">#站点描述</span></span><br><span class=\"line\">  <span class=\"attr\">birthDay:</span> <span class=\"number\">11</span><span class=\"string\">/19/2019</span> <span class=\"number\">17</span><span class=\"string\">:00:00</span> <span class=\"comment\">#计时开始时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 站点图标和标题切换信息</span></span><br><span class=\"line\"><span class=\"attr\">favicon:</span></span><br><span class=\"line\">  <span class=\"attr\">visibilitychange:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">narmal:</span> <span class=\"string\">/images/favicon.png</span> <span class=\"comment\">#激活标签图标</span></span><br><span class=\"line\">  <span class=\"attr\">hidden:</span> <span class=\"string\">/images/failure.png</span> <span class=\"comment\">#未激活标签图标</span></span><br><span class=\"line\">  <span class=\"attr\">show_text:</span> <span class=\"string\">(/≧▽≦/)咦！又好了！</span> <span class=\"comment\">#激活标签标题</span></span><br><span class=\"line\">  <span class=\"attr\">hide_text:</span> <span class=\"string\">(●—●)喔哟，崩溃啦！</span> <span class=\"comment\">#未激活标签标题</span></span><br><span class=\"line\">  <span class=\"attr\">apple_touch_icon:</span> <span class=\"string\">/images/apple-touch-icon-next.png</span></span><br><span class=\"line\">  <span class=\"attr\">safari_pinned_tab:</span> <span class=\"string\">/images/logo.svg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文章统计</span></span><br><span class=\"line\"><span class=\"attr\">post_wordcount:</span></span><br><span class=\"line\">  <span class=\"attr\">wordcount:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 单篇 字数统计</span></span><br><span class=\"line\">  <span class=\"attr\">min2read:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 单篇 阅读时长</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#开启 Service Worker </span></span><br><span class=\"line\"><span class=\"attr\">sw:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#开启文章目录</span></span><br><span class=\"line\"><span class=\"attr\">isToc:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"attr\">canonical:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># rss</span></span><br><span class=\"line\"><span class=\"attr\">rss:</span> <span class=\"string\">atom.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 顶部菜单配置</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">nav:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">title:</span> <span class=\"string\">白云苍狗</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">/</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">title:</span> <span class=\"string\">ARCHIVES</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">/archives</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">title:</span> <span class=\"string\">LINKS</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">/links</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">title:</span> <span class=\"string\">COMMENTS</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">/comment</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">title:</span> <span class=\"string\">ABOUT</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">/about</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>开启 Service Worker 缓存，并且想使用 <strong>PWA</strong> 时需要自行添加 <strong>manifest.json</strong> 文件，配置站点被安装的图标等信息。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps\">了解更多PWA信息</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我的使用示例</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;白云苍狗&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;short_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;白云苍狗&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;icons&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;src&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/logo-192x192.png&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;sizes&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;192x192&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;image/png&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;src&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/logo-256x256.png&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;sizes&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;256x256&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;image/png&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;theme_color&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;#fff&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;background_color&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;#fff&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;display&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;standalone&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;start_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"修改主题配色\"><a href=\"#修改主题配色\" class=\"headerlink\" title=\"修改主题配色\"></a>修改主题配色</h2><p>如果你需要修改主题色，你只需要找到 <strong>source&#x2F;css&#x2F;var.less</strong> 文件，所有的主题配色都在这里了， <strong>.dark</strong> 下是暗黑模式下的颜色。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">--transitionTime</span>   : .35s ease; <span class=\"comment\">// 过渡时间</span></span><br><span class=\"line\">    <span class=\"attr\">--hColor</span>           : #000; <span class=\"comment\">// 主要字体色</span></span><br><span class=\"line\">    <span class=\"attr\">--metaColor</span>        : #5c5c5c; <span class=\"comment\">// 次要信息颜色</span></span><br><span class=\"line\">    <span class=\"attr\">--bodyBgColor</span>      : #f2f3f0; <span class=\"comment\">// 主题背景色</span></span><br><span class=\"line\">    <span class=\"attr\">--headBgColor</span>      : #fff; <span class=\"comment\">// 头部背景色</span></span><br><span class=\"line\">    <span class=\"attr\">--markHeadBgColor</span>  : #eee; <span class=\"comment\">// 动画切换遮罩色</span></span><br><span class=\"line\">    <span class=\"attr\">--markBgColor</span>      : #252525; <span class=\"comment\">// 动画切换遮罩色</span></span><br><span class=\"line\">    <span class=\"attr\">--commentColor</span>     : #525f7f; <span class=\"comment\">// 评论组建主题色</span></span><br><span class=\"line\">    <span class=\"attr\">--dashedBorderColor</span>: #c5c5c5; <span class=\"comment\">// 分割边框色</span></span><br><span class=\"line\">    <span class=\"attr\">--postLinkColor</span>    : #bb996d; <span class=\"comment\">// 文章中超链接</span></span><br><span class=\"line\">    <span class=\"attr\">--nprogressColor</span>   : #bb996d; <span class=\"comment\">// 加载进度条色</span></span><br><span class=\"line\">    <span class=\"attr\">--linkItemBgColor</span>  : #f9f9f9; <span class=\"comment\">// 友链背景色</span></span><br><span class=\"line\">    <span class=\"attr\">--linkItemBgColor2</span> : #fff; <span class=\"comment\">// 友链hover背景色</span></span><br><span class=\"line\">    <span class=\"attr\">--ngBarBgColor</span>     : #ca8b58; <span class=\"comment\">// 加载进度条颜色</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">&amp;</span><span class=\"selector-class\">.dark</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">--hColor</span>         : #f2f3f0;</span><br><span class=\"line\">        <span class=\"attr\">--metaColor</span>      : #e6e6e6;</span><br><span class=\"line\">        <span class=\"attr\">--bodyBgColor</span>    : #252525;</span><br><span class=\"line\">        <span class=\"attr\">--headBgColor</span>    : #1d1d1d;</span><br><span class=\"line\">        <span class=\"attr\">--markHeadBgColor</span>: #353535;</span><br><span class=\"line\">        <span class=\"attr\">--markBgColor</span>    : #f2f3f0;</span><br><span class=\"line\">        <span class=\"attr\">--commentColor</span>   : #becae7; </span><br><span class=\"line\">        <span class=\"attr\">--nprogressColor</span> : #fff3e5;</span><br><span class=\"line\">        <span class=\"attr\">--linkItemBgColor</span>  : #353535; </span><br><span class=\"line\">        <span class=\"attr\">--linkItemBgColor2</span> : #000; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多语言配置\"><a href=\"#多语言配置\" class=\"headerlink\" title=\"多语言配置\"></a>多语言配置</h2><p>在 languages 文件夹里默认只有一个 <strong>zh-cn.yml</strong> 中文文件配置，如果需要其他语言需要自行添加即可。</p>\n<h2 id=\"评论系统\"><a href=\"#评论系统\" class=\"headerlink\" title=\"评论系统\"></a>评论系统</h2><p>本人默认是使用腾讯的云开发的评论系统，所以主题默认是没评论系统的。不过你可以集成其他的第三方评论插件，你只需要在 <strong>themes&#x2F;hexo-theme-text&#x2F;layout&#x2F;components&#x2F;comment.ejs</strong> 里添加第三方评论插件代码，**_config.yml** 添加对应的配置，你就可以在你的博客里使用评论啦。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>本项目采用 MIT 开源许可证，欢迎大家贡献，你可以随意打开一个 issue 来进行提问，有任何改进想法都可以进行 fork，等待您的 Pull Request。</p>"},{"title":"Hexo 主题开发之自定义模板","date":"2023-12-13T07:29:25.000Z","description":null,"keywords":"Hexo主题开发，hexo扩展","_content":"\n关于 Hexo 如何开发主题包的教程已经是大把的存在了，这里就不再赘述了。这篇文章主要讲的是作为一个主题的开发者，如何让你的主题具有更好的扩展性，在用户自定义修改主题后，能够更加平易升级主题。\n\n<!--more -->\n\n### 问题所在\n\nHexo 提供两种方式安装主题包：\n\n-   直接在 **themes** 目录下直接存放主题包文件，这种方式用户可以很方便的魔改主题，但是魔改后升级主题会变得比较困难\n-   通过 **npm** 安装主题包，这种方式更加方便用户升级主题，但是不易扩展现有的主题。\n\n当用户想要自定义修改主题时，基本上只能通过第一种方式安装，且只能通过修改 **源代码** 形式去修改主题。这样带来的问题就是，当主题修复一些 bug 或者主题迭代 N 个版本后，用户想升级主题时就会变的比较麻烦。\n\n有没有能让用户方便升级，又能提供一定个性化的能力的东西呢？答案是有的，那就是通过 **npm** 方式分发主题包，我们通过一些魔法，让其有一定的扩展能力，这篇文章就来讲解如何实现它。\n\n### 模板\n\n在 Hexo 中，主题的模板决定的网站页面程序的方式，当你不同页面结构很相似时候，可以通过布局（**Layout**）去复用相同的结构，而相似的部分可以抽离成通用局部模板，通过使用 **Partial** 去加载，以达到模板复用的效果。\n\n这就是 Hexo 在开发主题处理模板复用的方式，可把一个个局部模板理解为一个个独立的组件，哪里需要是就在哪里加载它。如果说用户想替换某一个局部模板，我们可以让用户提供一个新的模板，然后去加载用户提供的模板，那是不是达到在用户不修改**源代码**情况下对主题进行个性话的扩展呢。\n\n### Partial\n\n要想知道 Hexo 是如果加载局部模板的，翻看下 Hexo 源码里 **Partial** 的实现（/plugins/helper/partial.js），可以看到是通过调用 **ctx.theme** 获取到对应的 **view**，接着调用 **render** 渲染的。\n\n```js\nconst { dirname, join } = require(\"path\");\n\nmodule.exports = (ctx) =>\n    function partial(name, locals, options = {}) {\n        const viewDir = this.view_dir;\n        const currentView = this.filename.substring(viewDir.length);\n        const path = join(dirname(currentView), name); // 根据当前路径找到，局部模板路径\n        const view = ctx.theme.getView(path) || ctx.theme.getView(name); // 根据路径去匹配 view\n        const viewLocals = { layout: false };\n        // Partial don't need layout\n        viewLocals.layout = false;\n        return view.renderSync(viewLocals);\n    };\n```\n\nHexo 对文件处理分为两种，一种是 **source** 目录文件处理，一种是对主题包里文件处理。在辅助函数注册里可以看 **ctx** 其实就是 hexo 运行时的实例，上面的 **ctx.theme** 就是主题文件处理的 **Box**。通过 Hexo 提供 [api](https://hexo.io/zh-cn/api/themes) 可以看到，它不仅提供了 **getView**，还提供了 **setView**、**removeView** 方法。\n\n然后翻看 setView 代码，可以看到当你重新设置一个新的 view 时，它会覆盖掉已有的 view。也就是说我们可以直接覆盖主题里的 **局部模板**\n\n```js\n\n  setView(path, data) {\n    const ext = extname(path);\n    const name = path.substring(0, path.length - ext.length);\n    this.views[name] = this.views[name] || {};\n    const views = this.views[name];\n\n    views[ext] = new this.View(path, data);\n  }\n\n```\n\n### 修改示例\n\n以覆盖 hexo-theme-async 为示例，在生成前钩子 **generateBefore** 里，覆盖掉主题里默认的侧栏模板。\n\n```js\nhexo.on(\"generateBefore\", () => {\n    hexo.theme.setView(\"_partial/sidebar/index.ejs\", \"<div>111</div>\");\n});\n```\n\n运行起来会发现侧栏模板已经替换成我们写的 111 了。\n\n![示例](/images/posts/hexo_theme_layout/image.png)\n\n### 主题实现\n\n通过上面方式确实可以达到覆盖主题默认模板能力，但是让用户直接修改会很不友好，需要自己去看主题中局部模板的路径信息，并且还需要自己编写加载文件内容，覆盖主题默认模板逻辑。\n\n可以将这部分操作内置进入主题内处理，只需要让用户编写自己的模板，以及告诉我们需要替换对应模板即可。大致流程如下：\n\n![demo](/images/posts/hexo_theme_layout/flow.png)\n\n还可以提供默认配置，简化通过路径覆盖\n\n![demo](/images/posts/hexo_theme_layout/flow2.png)\n\n通过在配置中配置好主题中使用的局部模板，类似这样，将主题中使用的局部模板以配置形式展示。\n\n```yaml\nlayout:\n    path: layout\n    # layout\n    main: _partial/main\n    header: _partial/header\n    banner: _partial/banner\n    sidebar: _partial/sidebar/index\n    footer: _partial/footer\n```\n\n接着在加载局部模板时，直接读取配置的信息，当用户覆盖掉了 layout.header 时候，主题就会自动使用新的模板了。\n\n```html\n<%- partial(theme.layout.header) %>\n```\n\n### 模板加载实现\n\n根据上面配置，约定 layout.path 配置指向目录为用存在模板目录，以便可以自定义存放路径。\n\n```yaml\nlayout:\n    path: layout\n```\n\n首先就是根据配置获取模板存在的绝对路径，可以根据 hexo 实例，获取到根目录，拼接出完整路径位置。\n\n```js\nconst { resolve } = require(\"path\");\nconst layoutDir = resolve(hexo.base_dir, hexo.theme.config.layout.path);\n```\n\n然后是对文件目录的监听，这个可以直接使用 hexo-fs ，避免安装额外的依赖包，提供了新增、删除、修改、文件夹变动的监听，可以针对不同事件做出不同操作。\n\n```js\nconst { watch } = require(\"hexo-fs\");\n\nwatch(layoutDir, {\n    persistent: true,\n    awaitWriteFinish: {\n        stabilityThreshold: 200,\n    },\n}).then((watcher) => {\n    watcher.on(\"add\", (path) => /** 设置模板 */);\n    watcher.on(\"change\", (path) => /** 设置模板 */);\n    watcher.on(\"unlink\", (path) => /** 移除模板 */);\n    watcher.on(\"addDir\", (path) => /** 添加文件夹，递归遍历设置模板 */);\n});\n```\n\n因为上面是通过配置去加载模板的，所有为了避免用户自定义的模板名称会与主题的模板名称冲突，导致覆盖了主题的模板，可以在使用时增加一个约定的前缀，避免重名，需要对设置模板进行简单封装。\n\n```js\nconst setView = (fullpath) => {\n    const path = \"async\" + fullpath.replace(layoutDir, \"\"); // 约定固定前缀为 async\n    hexo.theme.setView(path, readFileSync(fullpath, { encoding: \"utf8\" }));\n};\n```\n\n上面处理方式，用户自定义模板，可以正常加载使用的，但是当自定义的模板又引入了其他模板时会存在一个问题，在有的模板引擎中会出现路径不正常。通过查看 view 实例信息，可以看到其指向目录是在 node_modules，而实际上是存在根目录的。\n\n![view](/images/posts/hexo_theme_layout/view.png)\n\n翻看 view 源码可以看到 source 是获取的 this.\\_theme.base ，而 this.\\_theme.base 往上找就 theme_dir，也就是主题存放的目录，最后又通过 renderer.compile 设置模板渲染到，导致传入 path 不正确。\n\n![view-code](/images/posts/hexo_theme_layout/view_code.png)\n\n知道了原因我对上面代码进行修正，设置后重新获取到 view，然后手动根据路径信息。\n\n```js\nconst setView = (fullpath) => {\n    const path = \"async\" + fullpath.replace(layoutDir, \"\"); // 约定固定前缀为 async\n    hexo.theme.setView(path, readFileSync(fullpath, { encoding: \"utf8\" }));\n\n    const view = hexo.theme.getView(path);\n    view.source = fullpath; // 修正原文件路径\n    view._precompile(); // 重新调用渲染器的初始化\n};\n```\n\n将上面操作，放置在在 Hexo 的 **generateBefore** 中：\n\n```js\nconst { resolve } = require(\"path\");\nconst { watch, readdirSync, statSync } = require(\"hexo-fs\");\n\nhexo.on(\"generateBefore\", () => {\n    const layoutDir = resolve(hexo.base_dir, hexo.theme.config.layout.path);\n\n    const setView = (fullpath) => {\n        const path = \"async\" + fullpath.replace(layoutDir, \"\"); // 约定固定前缀为 async\n        hexo.theme.setView(path, readFileSync(fullpath, { encoding: \"utf8\" }));\n        const view = hexo.theme.getView(path);\n        view.source = fullpath; // 修正原文件路径\n        view._precompile(); // 重新调用渲染器的初始化\n    };\n\n    watch(layoutDir, {\n        persistent: true,\n        awaitWriteFinish: {\n            stabilityThreshold: 200,\n        },\n    }).then((watcher) => {\n        watcher.on(\"add\", (path) => setView(path));\n        watcher.on(\"change\", (path) => setView(path));\n        watcher.on(\"unlink\", (path) => {\n            const path = \"async\" + path.replace(layoutDir, \"\");\n            hexo.theme.removeView(path);\n        });\n        watcher.on(\"addDir\", (path) => loadDir(path));\n    });\n\n    const loadDir = (base) => {\n        let dirs = readdirSync(base);\n        dirs.forEach((path) => {\n            const fullpath = resolve(base, path);\n            const stats = statSync(fullpath);\n            if (stats.isDirectory()) {\n                loadDir(fullpath);\n            } else if (stats.isFile()) {\n                setView(fullpath);\n            }\n        });\n    };\n\n    loadDir(layoutDir);\n});\n```\n\n到此主要功能以及实现了，其他待优化项这里就不描述了，可以看看完整实现源码。\n\n### 使用示例\n\n以为 hexo-theme-async 为例，在根目录新建 layout 目录，再目录下添加 sidebar.ejs 文件，结构如下：\n\n```txt \n┌── blog\n│   └── layout\n│          └── sidebar.ejs\n│   └── scaffolds\n│   └── source\n│   └── themes\n```\n\nsidebar.ejs 添加一点内容\n\n```html\n<div>111</div>\n```\n\n在 \\_config.async.yml 中修改 layout 配置，替换掉默认 sidebar 模板。\n\n```yml\nlayout:\n    sidebar: async/sidebar\n```\n\n运行起来后，可以看到效果和 [修改示例](#修改示例) 中的效果一样，但是简化了用户使用。\n\n### 结语\n\n通过上面方式，可以在使用 npm 安装主题时，也支持自定义替换部分区域，来个性化的目的，当主题版本迭代升级后，也更方便用户更新升级。\n\n完整实现源码可以参考 [hexo-theme-async](https://github.com/MaLuns/hexo-theme-async/blob/dev/packages/hexo-theme-async/scripts/events/layout.js) 中源码。\n","source":"_posts/hexo_theme_layout.md","raw":"---\ntitle: Hexo 主题开发之自定义模板\ndate: 2023-12-13 15:29:25\ntags: [hexo]\ndescription:\ncategories: 创作类\nkeywords: Hexo主题开发，hexo扩展\n---\n\n关于 Hexo 如何开发主题包的教程已经是大把的存在了，这里就不再赘述了。这篇文章主要讲的是作为一个主题的开发者，如何让你的主题具有更好的扩展性，在用户自定义修改主题后，能够更加平易升级主题。\n\n<!--more -->\n\n### 问题所在\n\nHexo 提供两种方式安装主题包：\n\n-   直接在 **themes** 目录下直接存放主题包文件，这种方式用户可以很方便的魔改主题，但是魔改后升级主题会变得比较困难\n-   通过 **npm** 安装主题包，这种方式更加方便用户升级主题，但是不易扩展现有的主题。\n\n当用户想要自定义修改主题时，基本上只能通过第一种方式安装，且只能通过修改 **源代码** 形式去修改主题。这样带来的问题就是，当主题修复一些 bug 或者主题迭代 N 个版本后，用户想升级主题时就会变的比较麻烦。\n\n有没有能让用户方便升级，又能提供一定个性化的能力的东西呢？答案是有的，那就是通过 **npm** 方式分发主题包，我们通过一些魔法，让其有一定的扩展能力，这篇文章就来讲解如何实现它。\n\n### 模板\n\n在 Hexo 中，主题的模板决定的网站页面程序的方式，当你不同页面结构很相似时候，可以通过布局（**Layout**）去复用相同的结构，而相似的部分可以抽离成通用局部模板，通过使用 **Partial** 去加载，以达到模板复用的效果。\n\n这就是 Hexo 在开发主题处理模板复用的方式，可把一个个局部模板理解为一个个独立的组件，哪里需要是就在哪里加载它。如果说用户想替换某一个局部模板，我们可以让用户提供一个新的模板，然后去加载用户提供的模板，那是不是达到在用户不修改**源代码**情况下对主题进行个性话的扩展呢。\n\n### Partial\n\n要想知道 Hexo 是如果加载局部模板的，翻看下 Hexo 源码里 **Partial** 的实现（/plugins/helper/partial.js），可以看到是通过调用 **ctx.theme** 获取到对应的 **view**，接着调用 **render** 渲染的。\n\n```js\nconst { dirname, join } = require(\"path\");\n\nmodule.exports = (ctx) =>\n    function partial(name, locals, options = {}) {\n        const viewDir = this.view_dir;\n        const currentView = this.filename.substring(viewDir.length);\n        const path = join(dirname(currentView), name); // 根据当前路径找到，局部模板路径\n        const view = ctx.theme.getView(path) || ctx.theme.getView(name); // 根据路径去匹配 view\n        const viewLocals = { layout: false };\n        // Partial don't need layout\n        viewLocals.layout = false;\n        return view.renderSync(viewLocals);\n    };\n```\n\nHexo 对文件处理分为两种，一种是 **source** 目录文件处理，一种是对主题包里文件处理。在辅助函数注册里可以看 **ctx** 其实就是 hexo 运行时的实例，上面的 **ctx.theme** 就是主题文件处理的 **Box**。通过 Hexo 提供 [api](https://hexo.io/zh-cn/api/themes) 可以看到，它不仅提供了 **getView**，还提供了 **setView**、**removeView** 方法。\n\n然后翻看 setView 代码，可以看到当你重新设置一个新的 view 时，它会覆盖掉已有的 view。也就是说我们可以直接覆盖主题里的 **局部模板**\n\n```js\n\n  setView(path, data) {\n    const ext = extname(path);\n    const name = path.substring(0, path.length - ext.length);\n    this.views[name] = this.views[name] || {};\n    const views = this.views[name];\n\n    views[ext] = new this.View(path, data);\n  }\n\n```\n\n### 修改示例\n\n以覆盖 hexo-theme-async 为示例，在生成前钩子 **generateBefore** 里，覆盖掉主题里默认的侧栏模板。\n\n```js\nhexo.on(\"generateBefore\", () => {\n    hexo.theme.setView(\"_partial/sidebar/index.ejs\", \"<div>111</div>\");\n});\n```\n\n运行起来会发现侧栏模板已经替换成我们写的 111 了。\n\n![示例](/images/posts/hexo_theme_layout/image.png)\n\n### 主题实现\n\n通过上面方式确实可以达到覆盖主题默认模板能力，但是让用户直接修改会很不友好，需要自己去看主题中局部模板的路径信息，并且还需要自己编写加载文件内容，覆盖主题默认模板逻辑。\n\n可以将这部分操作内置进入主题内处理，只需要让用户编写自己的模板，以及告诉我们需要替换对应模板即可。大致流程如下：\n\n![demo](/images/posts/hexo_theme_layout/flow.png)\n\n还可以提供默认配置，简化通过路径覆盖\n\n![demo](/images/posts/hexo_theme_layout/flow2.png)\n\n通过在配置中配置好主题中使用的局部模板，类似这样，将主题中使用的局部模板以配置形式展示。\n\n```yaml\nlayout:\n    path: layout\n    # layout\n    main: _partial/main\n    header: _partial/header\n    banner: _partial/banner\n    sidebar: _partial/sidebar/index\n    footer: _partial/footer\n```\n\n接着在加载局部模板时，直接读取配置的信息，当用户覆盖掉了 layout.header 时候，主题就会自动使用新的模板了。\n\n```html\n<%- partial(theme.layout.header) %>\n```\n\n### 模板加载实现\n\n根据上面配置，约定 layout.path 配置指向目录为用存在模板目录，以便可以自定义存放路径。\n\n```yaml\nlayout:\n    path: layout\n```\n\n首先就是根据配置获取模板存在的绝对路径，可以根据 hexo 实例，获取到根目录，拼接出完整路径位置。\n\n```js\nconst { resolve } = require(\"path\");\nconst layoutDir = resolve(hexo.base_dir, hexo.theme.config.layout.path);\n```\n\n然后是对文件目录的监听，这个可以直接使用 hexo-fs ，避免安装额外的依赖包，提供了新增、删除、修改、文件夹变动的监听，可以针对不同事件做出不同操作。\n\n```js\nconst { watch } = require(\"hexo-fs\");\n\nwatch(layoutDir, {\n    persistent: true,\n    awaitWriteFinish: {\n        stabilityThreshold: 200,\n    },\n}).then((watcher) => {\n    watcher.on(\"add\", (path) => /** 设置模板 */);\n    watcher.on(\"change\", (path) => /** 设置模板 */);\n    watcher.on(\"unlink\", (path) => /** 移除模板 */);\n    watcher.on(\"addDir\", (path) => /** 添加文件夹，递归遍历设置模板 */);\n});\n```\n\n因为上面是通过配置去加载模板的，所有为了避免用户自定义的模板名称会与主题的模板名称冲突，导致覆盖了主题的模板，可以在使用时增加一个约定的前缀，避免重名，需要对设置模板进行简单封装。\n\n```js\nconst setView = (fullpath) => {\n    const path = \"async\" + fullpath.replace(layoutDir, \"\"); // 约定固定前缀为 async\n    hexo.theme.setView(path, readFileSync(fullpath, { encoding: \"utf8\" }));\n};\n```\n\n上面处理方式，用户自定义模板，可以正常加载使用的，但是当自定义的模板又引入了其他模板时会存在一个问题，在有的模板引擎中会出现路径不正常。通过查看 view 实例信息，可以看到其指向目录是在 node_modules，而实际上是存在根目录的。\n\n![view](/images/posts/hexo_theme_layout/view.png)\n\n翻看 view 源码可以看到 source 是获取的 this.\\_theme.base ，而 this.\\_theme.base 往上找就 theme_dir，也就是主题存放的目录，最后又通过 renderer.compile 设置模板渲染到，导致传入 path 不正确。\n\n![view-code](/images/posts/hexo_theme_layout/view_code.png)\n\n知道了原因我对上面代码进行修正，设置后重新获取到 view，然后手动根据路径信息。\n\n```js\nconst setView = (fullpath) => {\n    const path = \"async\" + fullpath.replace(layoutDir, \"\"); // 约定固定前缀为 async\n    hexo.theme.setView(path, readFileSync(fullpath, { encoding: \"utf8\" }));\n\n    const view = hexo.theme.getView(path);\n    view.source = fullpath; // 修正原文件路径\n    view._precompile(); // 重新调用渲染器的初始化\n};\n```\n\n将上面操作，放置在在 Hexo 的 **generateBefore** 中：\n\n```js\nconst { resolve } = require(\"path\");\nconst { watch, readdirSync, statSync } = require(\"hexo-fs\");\n\nhexo.on(\"generateBefore\", () => {\n    const layoutDir = resolve(hexo.base_dir, hexo.theme.config.layout.path);\n\n    const setView = (fullpath) => {\n        const path = \"async\" + fullpath.replace(layoutDir, \"\"); // 约定固定前缀为 async\n        hexo.theme.setView(path, readFileSync(fullpath, { encoding: \"utf8\" }));\n        const view = hexo.theme.getView(path);\n        view.source = fullpath; // 修正原文件路径\n        view._precompile(); // 重新调用渲染器的初始化\n    };\n\n    watch(layoutDir, {\n        persistent: true,\n        awaitWriteFinish: {\n            stabilityThreshold: 200,\n        },\n    }).then((watcher) => {\n        watcher.on(\"add\", (path) => setView(path));\n        watcher.on(\"change\", (path) => setView(path));\n        watcher.on(\"unlink\", (path) => {\n            const path = \"async\" + path.replace(layoutDir, \"\");\n            hexo.theme.removeView(path);\n        });\n        watcher.on(\"addDir\", (path) => loadDir(path));\n    });\n\n    const loadDir = (base) => {\n        let dirs = readdirSync(base);\n        dirs.forEach((path) => {\n            const fullpath = resolve(base, path);\n            const stats = statSync(fullpath);\n            if (stats.isDirectory()) {\n                loadDir(fullpath);\n            } else if (stats.isFile()) {\n                setView(fullpath);\n            }\n        });\n    };\n\n    loadDir(layoutDir);\n});\n```\n\n到此主要功能以及实现了，其他待优化项这里就不描述了，可以看看完整实现源码。\n\n### 使用示例\n\n以为 hexo-theme-async 为例，在根目录新建 layout 目录，再目录下添加 sidebar.ejs 文件，结构如下：\n\n```txt \n┌── blog\n│   └── layout\n│          └── sidebar.ejs\n│   └── scaffolds\n│   └── source\n│   └── themes\n```\n\nsidebar.ejs 添加一点内容\n\n```html\n<div>111</div>\n```\n\n在 \\_config.async.yml 中修改 layout 配置，替换掉默认 sidebar 模板。\n\n```yml\nlayout:\n    sidebar: async/sidebar\n```\n\n运行起来后，可以看到效果和 [修改示例](#修改示例) 中的效果一样，但是简化了用户使用。\n\n### 结语\n\n通过上面方式，可以在使用 npm 安装主题时，也支持自定义替换部分区域，来个性化的目的，当主题版本迭代升级后，也更方便用户更新升级。\n\n完整实现源码可以参考 [hexo-theme-async](https://github.com/MaLuns/hexo-theme-async/blob/dev/packages/hexo-theme-async/scripts/events/layout.js) 中源码。\n","slug":"hexo_theme_layout","published":1,"updated":"2024-03-06T07:42:59.000Z","comments":1,"layout":"post","photos":[],"_id":"cltgz7vrk001o98lgdezadh96","content":"<p>关于 Hexo 如何开发主题包的教程已经是大把的存在了，这里就不再赘述了。这篇文章主要讲的是作为一个主题的开发者，如何让你的主题具有更好的扩展性，在用户自定义修改主题后，能够更加平易升级主题。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"问题所在\"><a href=\"#问题所在\" class=\"headerlink\" title=\"问题所在\"></a>问题所在</h3><p>Hexo 提供两种方式安装主题包：</p>\n<ul>\n<li>直接在 <strong>themes</strong> 目录下直接存放主题包文件，这种方式用户可以很方便的魔改主题，但是魔改后升级主题会变得比较困难</li>\n<li>通过 <strong>npm</strong> 安装主题包，这种方式更加方便用户升级主题，但是不易扩展现有的主题。</li>\n</ul>\n<p>当用户想要自定义修改主题时，基本上只能通过第一种方式安装，且只能通过修改 <strong>源代码</strong> 形式去修改主题。这样带来的问题就是，当主题修复一些 bug 或者主题迭代 N 个版本后，用户想升级主题时就会变的比较麻烦。</p>\n<p>有没有能让用户方便升级，又能提供一定个性化的能力的东西呢？答案是有的，那就是通过 <strong>npm</strong> 方式分发主题包，我们通过一些魔法，让其有一定的扩展能力，这篇文章就来讲解如何实现它。</p>\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><p>在 Hexo 中，主题的模板决定的网站页面程序的方式，当你不同页面结构很相似时候，可以通过布局（<strong>Layout</strong>）去复用相同的结构，而相似的部分可以抽离成通用局部模板，通过使用 <strong>Partial</strong> 去加载，以达到模板复用的效果。</p>\n<p>这就是 Hexo 在开发主题处理模板复用的方式，可把一个个局部模板理解为一个个独立的组件，哪里需要是就在哪里加载它。如果说用户想替换某一个局部模板，我们可以让用户提供一个新的模板，然后去加载用户提供的模板，那是不是达到在用户不修改<strong>源代码</strong>情况下对主题进行个性话的扩展呢。</p>\n<h3 id=\"Partial\"><a href=\"#Partial\" class=\"headerlink\" title=\"Partial\"></a>Partial</h3><p>要想知道 Hexo 是如果加载局部模板的，翻看下 Hexo 源码里 <strong>Partial</strong> 的实现（&#x2F;plugins&#x2F;helper&#x2F;partial.js），可以看到是通过调用 <strong>ctx.theme</strong> 获取到对应的 <strong>view</strong>，接着调用 <strong>render</strong> 渲染的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; dirname, join &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"function\">(<span class=\"params\">ctx</span>) =&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">partial</span>(<span class=\"params\">name, locals, options = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> viewDir = <span class=\"variable language_\">this</span>.<span class=\"property\">view_dir</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> currentView = <span class=\"variable language_\">this</span>.<span class=\"property\">filename</span>.<span class=\"title function_\">substring</span>(viewDir.<span class=\"property\">length</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> path = <span class=\"title function_\">join</span>(<span class=\"title function_\">dirname</span>(currentView), name); <span class=\"comment\">// 根据当前路径找到，局部模板路径</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> view = ctx.<span class=\"property\">theme</span>.<span class=\"title function_\">getView</span>(path) || ctx.<span class=\"property\">theme</span>.<span class=\"title function_\">getView</span>(name); <span class=\"comment\">// 根据路径去匹配 view</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> viewLocals = &#123; <span class=\"attr\">layout</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// Partial don&#x27;t need layout</span></span><br><span class=\"line\">        viewLocals.<span class=\"property\">layout</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view.<span class=\"title function_\">renderSync</span>(viewLocals);</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Hexo 对文件处理分为两种，一种是 <strong>source</strong> 目录文件处理，一种是对主题包里文件处理。在辅助函数注册里可以看 <strong>ctx</strong> 其实就是 hexo 运行时的实例，上面的 <strong>ctx.theme</strong> 就是主题文件处理的 <strong>Box</strong>。通过 Hexo 提供 <a href=\"https://hexo.io/zh-cn/api/themes\">api</a> 可以看到，它不仅提供了 <strong>getView</strong>，还提供了 <strong>setView</strong>、<strong>removeView</strong> 方法。</p>\n<p>然后翻看 setView 代码，可以看到当你重新设置一个新的 view 时，它会覆盖掉已有的 view。也就是说我们可以直接覆盖主题里的 <strong>局部模板</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">setView</span>(<span class=\"params\">path, data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ext = <span class=\"title function_\">extname</span>(path);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = path.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>, path.<span class=\"property\">length</span> - ext.<span class=\"property\">length</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">views</span>[name] = <span class=\"variable language_\">this</span>.<span class=\"property\">views</span>[name] || &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> views = <span class=\"variable language_\">this</span>.<span class=\"property\">views</span>[name];</span><br><span class=\"line\"></span><br><span class=\"line\">  views[ext] = <span class=\"keyword\">new</span> <span class=\"variable language_\">this</span>.<span class=\"title class_\">View</span>(path, data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改示例\"><a href=\"#修改示例\" class=\"headerlink\" title=\"修改示例\"></a>修改示例</h3><p>以覆盖 hexo-theme-async 为示例，在生成前钩子 <strong>generateBefore</strong> 里，覆盖掉主题里默认的侧栏模板。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;generateBefore&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    hexo.<span class=\"property\">theme</span>.<span class=\"title function_\">setView</span>(<span class=\"string\">&quot;_partial/sidebar/index.ejs&quot;</span>, <span class=\"string\">&quot;&lt;div&gt;111&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>运行起来会发现侧栏模板已经替换成我们写的 111 了。</p>\n<p><img src=\"/images/posts/hexo_theme_layout/image.png\" alt=\"示例\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<h3 id=\"主题实现\"><a href=\"#主题实现\" class=\"headerlink\" title=\"主题实现\"></a>主题实现</h3><p>通过上面方式确实可以达到覆盖主题默认模板能力，但是让用户直接修改会很不友好，需要自己去看主题中局部模板的路径信息，并且还需要自己编写加载文件内容，覆盖主题默认模板逻辑。</p>\n<p>可以将这部分操作内置进入主题内处理，只需要让用户编写自己的模板，以及告诉我们需要替换对应模板即可。大致流程如下：</p>\n<p><img src=\"/images/posts/hexo_theme_layout/flow.png\" alt=\"demo\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<p>还可以提供默认配置，简化通过路径覆盖</p>\n<p><img src=\"/images/posts/hexo_theme_layout/flow2.png\" alt=\"demo\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<p>通过在配置中配置好主题中使用的局部模板，类似这样，将主题中使用的局部模板以配置形式展示。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">layout:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">layout</span></span><br><span class=\"line\">    <span class=\"comment\"># layout</span></span><br><span class=\"line\">    <span class=\"attr\">main:</span> <span class=\"string\">_partial/main</span></span><br><span class=\"line\">    <span class=\"attr\">header:</span> <span class=\"string\">_partial/header</span></span><br><span class=\"line\">    <span class=\"attr\">banner:</span> <span class=\"string\">_partial/banner</span></span><br><span class=\"line\">    <span class=\"attr\">sidebar:</span> <span class=\"string\">_partial/sidebar/index</span></span><br><span class=\"line\">    <span class=\"attr\">footer:</span> <span class=\"string\">_partial/footer</span></span><br></pre></td></tr></table></figure>\n\n<p>接着在加载局部模板时，直接读取配置的信息，当用户覆盖掉了 layout.header 时候，主题就会自动使用新的模板了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- partial(theme.layout.header) %&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模板加载实现\"><a href=\"#模板加载实现\" class=\"headerlink\" title=\"模板加载实现\"></a>模板加载实现</h3><p>根据上面配置，约定 layout.path 配置指向目录为用存在模板目录，以便可以自定义存放路径。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">layout:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">layout</span></span><br></pre></td></tr></table></figure>\n\n<p>首先就是根据配置获取模板存在的绝对路径，可以根据 hexo 实例，获取到根目录，拼接出完整路径位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> layoutDir = <span class=\"title function_\">resolve</span>(hexo.<span class=\"property\">base_dir</span>, hexo.<span class=\"property\">theme</span>.<span class=\"property\">config</span>.<span class=\"property\">layout</span>.<span class=\"property\">path</span>);</span><br></pre></td></tr></table></figure>\n\n<p>然后是对文件目录的监听，这个可以直接使用 hexo-fs ，避免安装额外的依赖包，提供了新增、删除、修改、文件夹变动的监听，可以针对不同事件做出不同操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; watch &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;hexo-fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(layoutDir, &#123;</span><br><span class=\"line\">    <span class=\"attr\">persistent</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">awaitWriteFinish</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">stabilityThreshold</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">watcher</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    watcher.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;add&quot;</span>, <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> <span class=\"comment\">/** 设置模板 */</span>);</span><br><span class=\"line\">    watcher.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;change&quot;</span>, <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> <span class=\"comment\">/** 设置模板 */</span>);</span><br><span class=\"line\">    watcher.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;unlink&quot;</span>, <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> <span class=\"comment\">/** 移除模板 */</span>);</span><br><span class=\"line\">    watcher.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;addDir&quot;</span>, <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> <span class=\"comment\">/** 添加文件夹，递归遍历设置模板 */</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>因为上面是通过配置去加载模板的，所有为了避免用户自定义的模板名称会与主题的模板名称冲突，导致覆盖了主题的模板，可以在使用时增加一个约定的前缀，避免重名，需要对设置模板进行简单封装。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">setView</span> = (<span class=\"params\">fullpath</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> path = <span class=\"string\">&quot;async&quot;</span> + fullpath.<span class=\"title function_\">replace</span>(layoutDir, <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// 约定固定前缀为 async</span></span><br><span class=\"line\">    hexo.<span class=\"property\">theme</span>.<span class=\"title function_\">setView</span>(path, <span class=\"title function_\">readFileSync</span>(fullpath, &#123; <span class=\"attr\">encoding</span>: <span class=\"string\">&quot;utf8&quot;</span> &#125;));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面处理方式，用户自定义模板，可以正常加载使用的，但是当自定义的模板又引入了其他模板时会存在一个问题，在有的模板引擎中会出现路径不正常。通过查看 view 实例信息，可以看到其指向目录是在 node_modules，而实际上是存在根目录的。</p>\n<p><img src=\"/images/posts/hexo_theme_layout/view.png\" alt=\"view\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<p>翻看 view 源码可以看到 source 是获取的 this._theme.base ，而 this._theme.base 往上找就 theme_dir，也就是主题存放的目录，最后又通过 renderer.compile 设置模板渲染到，导致传入 path 不正确。</p>\n<p><img src=\"/images/posts/hexo_theme_layout/view_code.png\" alt=\"view-code\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<p>知道了原因我对上面代码进行修正，设置后重新获取到 view，然后手动根据路径信息。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">setView</span> = (<span class=\"params\">fullpath</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> path = <span class=\"string\">&quot;async&quot;</span> + fullpath.<span class=\"title function_\">replace</span>(layoutDir, <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// 约定固定前缀为 async</span></span><br><span class=\"line\">    hexo.<span class=\"property\">theme</span>.<span class=\"title function_\">setView</span>(path, <span class=\"title function_\">readFileSync</span>(fullpath, &#123; <span class=\"attr\">encoding</span>: <span class=\"string\">&quot;utf8&quot;</span> &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> view = hexo.<span class=\"property\">theme</span>.<span class=\"title function_\">getView</span>(path);</span><br><span class=\"line\">    view.<span class=\"property\">source</span> = fullpath; <span class=\"comment\">// 修正原文件路径</span></span><br><span class=\"line\">    view.<span class=\"title function_\">_precompile</span>(); <span class=\"comment\">// 重新调用渲染器的初始化</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>将上面操作，放置在在 Hexo 的 <strong>generateBefore</strong> 中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; watch, readdirSync, statSync &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;hexo-fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hexo.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;generateBefore&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> layoutDir = <span class=\"title function_\">resolve</span>(hexo.<span class=\"property\">base_dir</span>, hexo.<span class=\"property\">theme</span>.<span class=\"property\">config</span>.<span class=\"property\">layout</span>.<span class=\"property\">path</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">setView</span> = (<span class=\"params\">fullpath</span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> path = <span class=\"string\">&quot;async&quot;</span> + fullpath.<span class=\"title function_\">replace</span>(layoutDir, <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// 约定固定前缀为 async</span></span><br><span class=\"line\">        hexo.<span class=\"property\">theme</span>.<span class=\"title function_\">setView</span>(path, <span class=\"title function_\">readFileSync</span>(fullpath, &#123; <span class=\"attr\">encoding</span>: <span class=\"string\">&quot;utf8&quot;</span> &#125;));</span><br><span class=\"line\">        <span class=\"keyword\">const</span> view = hexo.<span class=\"property\">theme</span>.<span class=\"title function_\">getView</span>(path);</span><br><span class=\"line\">        view.<span class=\"property\">source</span> = fullpath; <span class=\"comment\">// 修正原文件路径</span></span><br><span class=\"line\">        view.<span class=\"title function_\">_precompile</span>(); <span class=\"comment\">// 重新调用渲染器的初始化</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">watch</span>(layoutDir, &#123;</span><br><span class=\"line\">        <span class=\"attr\">persistent</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">awaitWriteFinish</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">stabilityThreshold</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">watcher</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        watcher.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;add&quot;</span>, <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> <span class=\"title function_\">setView</span>(path));</span><br><span class=\"line\">        watcher.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;change&quot;</span>, <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> <span class=\"title function_\">setView</span>(path));</span><br><span class=\"line\">        watcher.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;unlink&quot;</span>, <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> path = <span class=\"string\">&quot;async&quot;</span> + path.<span class=\"title function_\">replace</span>(layoutDir, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            hexo.<span class=\"property\">theme</span>.<span class=\"title function_\">removeView</span>(path);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        watcher.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;addDir&quot;</span>, <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> <span class=\"title function_\">loadDir</span>(path));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">loadDir</span> = (<span class=\"params\">base</span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> dirs = <span class=\"title function_\">readdirSync</span>(base);</span><br><span class=\"line\">        dirs.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> fullpath = <span class=\"title function_\">resolve</span>(base, path);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> stats = <span class=\"title function_\">statSync</span>(fullpath);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stats.<span class=\"title function_\">isDirectory</span>()) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">loadDir</span>(fullpath);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stats.<span class=\"title function_\">isFile</span>()) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">setView</span>(fullpath);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">loadDir</span>(layoutDir);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>到此主要功能以及实现了，其他待优化项这里就不描述了，可以看看完整实现源码。</p>\n<h3 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><p>以为 hexo-theme-async 为例，在根目录新建 layout 目录，再目录下添加 sidebar.ejs 文件，结构如下：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┌── blog</span><br><span class=\"line\">│   └── layout</span><br><span class=\"line\">│          └── sidebar.ejs</span><br><span class=\"line\">│   └── scaffolds</span><br><span class=\"line\">│   └── source</span><br><span class=\"line\">│   └── themes</span><br></pre></td></tr></table></figure>\n\n<p>sidebar.ejs 添加一点内容</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>111<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 _config.async.yml 中修改 layout 配置，替换掉默认 sidebar 模板。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">layout:</span></span><br><span class=\"line\">    <span class=\"attr\">sidebar:</span> <span class=\"string\">async/sidebar</span></span><br></pre></td></tr></table></figure>\n\n<p>运行起来后，可以看到效果和 <a href=\"#%E4%BF%AE%E6%94%B9%E7%A4%BA%E4%BE%8B\">修改示例</a> 中的效果一样，但是简化了用户使用。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>通过上面方式，可以在使用 npm 安装主题时，也支持自定义替换部分区域，来个性化的目的，当主题版本迭代升级后，也更方便用户更新升级。</p>\n<p>完整实现源码可以参考 <a href=\"https://github.com/MaLuns/hexo-theme-async/blob/dev/packages/hexo-theme-async/scripts/events/layout.js\">hexo-theme-async</a> 中源码。</p>\n","excerpt":"<p>关于 Hexo 如何开发主题包的教程已经是大把的存在了，这里就不再赘述了。这篇文章主要讲的是作为一个主题的开发者，如何让你的主题具有更好的扩展性，在用户自定义修改主题后，能够更加平易升级主题。</p>","more":"<h3 id=\"问题所在\"><a href=\"#问题所在\" class=\"headerlink\" title=\"问题所在\"></a>问题所在</h3><p>Hexo 提供两种方式安装主题包：</p>\n<ul>\n<li>直接在 <strong>themes</strong> 目录下直接存放主题包文件，这种方式用户可以很方便的魔改主题，但是魔改后升级主题会变得比较困难</li>\n<li>通过 <strong>npm</strong> 安装主题包，这种方式更加方便用户升级主题，但是不易扩展现有的主题。</li>\n</ul>\n<p>当用户想要自定义修改主题时，基本上只能通过第一种方式安装，且只能通过修改 <strong>源代码</strong> 形式去修改主题。这样带来的问题就是，当主题修复一些 bug 或者主题迭代 N 个版本后，用户想升级主题时就会变的比较麻烦。</p>\n<p>有没有能让用户方便升级，又能提供一定个性化的能力的东西呢？答案是有的，那就是通过 <strong>npm</strong> 方式分发主题包，我们通过一些魔法，让其有一定的扩展能力，这篇文章就来讲解如何实现它。</p>\n<h3 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h3><p>在 Hexo 中，主题的模板决定的网站页面程序的方式，当你不同页面结构很相似时候，可以通过布局（<strong>Layout</strong>）去复用相同的结构，而相似的部分可以抽离成通用局部模板，通过使用 <strong>Partial</strong> 去加载，以达到模板复用的效果。</p>\n<p>这就是 Hexo 在开发主题处理模板复用的方式，可把一个个局部模板理解为一个个独立的组件，哪里需要是就在哪里加载它。如果说用户想替换某一个局部模板，我们可以让用户提供一个新的模板，然后去加载用户提供的模板，那是不是达到在用户不修改<strong>源代码</strong>情况下对主题进行个性话的扩展呢。</p>\n<h3 id=\"Partial\"><a href=\"#Partial\" class=\"headerlink\" title=\"Partial\"></a>Partial</h3><p>要想知道 Hexo 是如果加载局部模板的，翻看下 Hexo 源码里 <strong>Partial</strong> 的实现（&#x2F;plugins&#x2F;helper&#x2F;partial.js），可以看到是通过调用 <strong>ctx.theme</strong> 获取到对应的 <strong>view</strong>，接着调用 <strong>render</strong> 渲染的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; dirname, join &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"function\">(<span class=\"params\">ctx</span>) =&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">partial</span>(<span class=\"params\">name, locals, options = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> viewDir = <span class=\"variable language_\">this</span>.<span class=\"property\">view_dir</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> currentView = <span class=\"variable language_\">this</span>.<span class=\"property\">filename</span>.<span class=\"title function_\">substring</span>(viewDir.<span class=\"property\">length</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> path = <span class=\"title function_\">join</span>(<span class=\"title function_\">dirname</span>(currentView), name); <span class=\"comment\">// 根据当前路径找到，局部模板路径</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> view = ctx.<span class=\"property\">theme</span>.<span class=\"title function_\">getView</span>(path) || ctx.<span class=\"property\">theme</span>.<span class=\"title function_\">getView</span>(name); <span class=\"comment\">// 根据路径去匹配 view</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> viewLocals = &#123; <span class=\"attr\">layout</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// Partial don&#x27;t need layout</span></span><br><span class=\"line\">        viewLocals.<span class=\"property\">layout</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view.<span class=\"title function_\">renderSync</span>(viewLocals);</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Hexo 对文件处理分为两种，一种是 <strong>source</strong> 目录文件处理，一种是对主题包里文件处理。在辅助函数注册里可以看 <strong>ctx</strong> 其实就是 hexo 运行时的实例，上面的 <strong>ctx.theme</strong> 就是主题文件处理的 <strong>Box</strong>。通过 Hexo 提供 <a href=\"https://hexo.io/zh-cn/api/themes\">api</a> 可以看到，它不仅提供了 <strong>getView</strong>，还提供了 <strong>setView</strong>、<strong>removeView</strong> 方法。</p>\n<p>然后翻看 setView 代码，可以看到当你重新设置一个新的 view 时，它会覆盖掉已有的 view。也就是说我们可以直接覆盖主题里的 <strong>局部模板</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">setView</span>(<span class=\"params\">path, data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ext = <span class=\"title function_\">extname</span>(path);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name = path.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>, path.<span class=\"property\">length</span> - ext.<span class=\"property\">length</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">views</span>[name] = <span class=\"variable language_\">this</span>.<span class=\"property\">views</span>[name] || &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> views = <span class=\"variable language_\">this</span>.<span class=\"property\">views</span>[name];</span><br><span class=\"line\"></span><br><span class=\"line\">  views[ext] = <span class=\"keyword\">new</span> <span class=\"variable language_\">this</span>.<span class=\"title class_\">View</span>(path, data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改示例\"><a href=\"#修改示例\" class=\"headerlink\" title=\"修改示例\"></a>修改示例</h3><p>以覆盖 hexo-theme-async 为示例，在生成前钩子 <strong>generateBefore</strong> 里，覆盖掉主题里默认的侧栏模板。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;generateBefore&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    hexo.<span class=\"property\">theme</span>.<span class=\"title function_\">setView</span>(<span class=\"string\">&quot;_partial/sidebar/index.ejs&quot;</span>, <span class=\"string\">&quot;&lt;div&gt;111&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>运行起来会发现侧栏模板已经替换成我们写的 111 了。</p>\n<p><img src=\"/images/posts/hexo_theme_layout/image.png\" alt=\"示例\"></p>\n<h3 id=\"主题实现\"><a href=\"#主题实现\" class=\"headerlink\" title=\"主题实现\"></a>主题实现</h3><p>通过上面方式确实可以达到覆盖主题默认模板能力，但是让用户直接修改会很不友好，需要自己去看主题中局部模板的路径信息，并且还需要自己编写加载文件内容，覆盖主题默认模板逻辑。</p>\n<p>可以将这部分操作内置进入主题内处理，只需要让用户编写自己的模板，以及告诉我们需要替换对应模板即可。大致流程如下：</p>\n<p><img src=\"/images/posts/hexo_theme_layout/flow.png\" alt=\"demo\"></p>\n<p>还可以提供默认配置，简化通过路径覆盖</p>\n<p><img src=\"/images/posts/hexo_theme_layout/flow2.png\" alt=\"demo\"></p>\n<p>通过在配置中配置好主题中使用的局部模板，类似这样，将主题中使用的局部模板以配置形式展示。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">layout:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">layout</span></span><br><span class=\"line\">    <span class=\"comment\"># layout</span></span><br><span class=\"line\">    <span class=\"attr\">main:</span> <span class=\"string\">_partial/main</span></span><br><span class=\"line\">    <span class=\"attr\">header:</span> <span class=\"string\">_partial/header</span></span><br><span class=\"line\">    <span class=\"attr\">banner:</span> <span class=\"string\">_partial/banner</span></span><br><span class=\"line\">    <span class=\"attr\">sidebar:</span> <span class=\"string\">_partial/sidebar/index</span></span><br><span class=\"line\">    <span class=\"attr\">footer:</span> <span class=\"string\">_partial/footer</span></span><br></pre></td></tr></table></figure>\n\n<p>接着在加载局部模板时，直接读取配置的信息，当用户覆盖掉了 layout.header 时候，主题就会自动使用新的模板了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- partial(theme.layout.header) %&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模板加载实现\"><a href=\"#模板加载实现\" class=\"headerlink\" title=\"模板加载实现\"></a>模板加载实现</h3><p>根据上面配置，约定 layout.path 配置指向目录为用存在模板目录，以便可以自定义存放路径。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">layout:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">layout</span></span><br></pre></td></tr></table></figure>\n\n<p>首先就是根据配置获取模板存在的绝对路径，可以根据 hexo 实例，获取到根目录，拼接出完整路径位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> layoutDir = <span class=\"title function_\">resolve</span>(hexo.<span class=\"property\">base_dir</span>, hexo.<span class=\"property\">theme</span>.<span class=\"property\">config</span>.<span class=\"property\">layout</span>.<span class=\"property\">path</span>);</span><br></pre></td></tr></table></figure>\n\n<p>然后是对文件目录的监听，这个可以直接使用 hexo-fs ，避免安装额外的依赖包，提供了新增、删除、修改、文件夹变动的监听，可以针对不同事件做出不同操作。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; watch &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;hexo-fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(layoutDir, &#123;</span><br><span class=\"line\">    <span class=\"attr\">persistent</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">awaitWriteFinish</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">stabilityThreshold</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">watcher</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    watcher.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;add&quot;</span>, <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> <span class=\"comment\">/** 设置模板 */</span>);</span><br><span class=\"line\">    watcher.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;change&quot;</span>, <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> <span class=\"comment\">/** 设置模板 */</span>);</span><br><span class=\"line\">    watcher.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;unlink&quot;</span>, <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> <span class=\"comment\">/** 移除模板 */</span>);</span><br><span class=\"line\">    watcher.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;addDir&quot;</span>, <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> <span class=\"comment\">/** 添加文件夹，递归遍历设置模板 */</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>因为上面是通过配置去加载模板的，所有为了避免用户自定义的模板名称会与主题的模板名称冲突，导致覆盖了主题的模板，可以在使用时增加一个约定的前缀，避免重名，需要对设置模板进行简单封装。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">setView</span> = (<span class=\"params\">fullpath</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> path = <span class=\"string\">&quot;async&quot;</span> + fullpath.<span class=\"title function_\">replace</span>(layoutDir, <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// 约定固定前缀为 async</span></span><br><span class=\"line\">    hexo.<span class=\"property\">theme</span>.<span class=\"title function_\">setView</span>(path, <span class=\"title function_\">readFileSync</span>(fullpath, &#123; <span class=\"attr\">encoding</span>: <span class=\"string\">&quot;utf8&quot;</span> &#125;));</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面处理方式，用户自定义模板，可以正常加载使用的，但是当自定义的模板又引入了其他模板时会存在一个问题，在有的模板引擎中会出现路径不正常。通过查看 view 实例信息，可以看到其指向目录是在 node_modules，而实际上是存在根目录的。</p>\n<p><img src=\"/images/posts/hexo_theme_layout/view.png\" alt=\"view\"></p>\n<p>翻看 view 源码可以看到 source 是获取的 this._theme.base ，而 this._theme.base 往上找就 theme_dir，也就是主题存放的目录，最后又通过 renderer.compile 设置模板渲染到，导致传入 path 不正确。</p>\n<p><img src=\"/images/posts/hexo_theme_layout/view_code.png\" alt=\"view-code\"></p>\n<p>知道了原因我对上面代码进行修正，设置后重新获取到 view，然后手动根据路径信息。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">setView</span> = (<span class=\"params\">fullpath</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> path = <span class=\"string\">&quot;async&quot;</span> + fullpath.<span class=\"title function_\">replace</span>(layoutDir, <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// 约定固定前缀为 async</span></span><br><span class=\"line\">    hexo.<span class=\"property\">theme</span>.<span class=\"title function_\">setView</span>(path, <span class=\"title function_\">readFileSync</span>(fullpath, &#123; <span class=\"attr\">encoding</span>: <span class=\"string\">&quot;utf8&quot;</span> &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> view = hexo.<span class=\"property\">theme</span>.<span class=\"title function_\">getView</span>(path);</span><br><span class=\"line\">    view.<span class=\"property\">source</span> = fullpath; <span class=\"comment\">// 修正原文件路径</span></span><br><span class=\"line\">    view.<span class=\"title function_\">_precompile</span>(); <span class=\"comment\">// 重新调用渲染器的初始化</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>将上面操作，放置在在 Hexo 的 <strong>generateBefore</strong> 中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; resolve &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; watch, readdirSync, statSync &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;hexo-fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hexo.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;generateBefore&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> layoutDir = <span class=\"title function_\">resolve</span>(hexo.<span class=\"property\">base_dir</span>, hexo.<span class=\"property\">theme</span>.<span class=\"property\">config</span>.<span class=\"property\">layout</span>.<span class=\"property\">path</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">setView</span> = (<span class=\"params\">fullpath</span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> path = <span class=\"string\">&quot;async&quot;</span> + fullpath.<span class=\"title function_\">replace</span>(layoutDir, <span class=\"string\">&quot;&quot;</span>); <span class=\"comment\">// 约定固定前缀为 async</span></span><br><span class=\"line\">        hexo.<span class=\"property\">theme</span>.<span class=\"title function_\">setView</span>(path, <span class=\"title function_\">readFileSync</span>(fullpath, &#123; <span class=\"attr\">encoding</span>: <span class=\"string\">&quot;utf8&quot;</span> &#125;));</span><br><span class=\"line\">        <span class=\"keyword\">const</span> view = hexo.<span class=\"property\">theme</span>.<span class=\"title function_\">getView</span>(path);</span><br><span class=\"line\">        view.<span class=\"property\">source</span> = fullpath; <span class=\"comment\">// 修正原文件路径</span></span><br><span class=\"line\">        view.<span class=\"title function_\">_precompile</span>(); <span class=\"comment\">// 重新调用渲染器的初始化</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">watch</span>(layoutDir, &#123;</span><br><span class=\"line\">        <span class=\"attr\">persistent</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">awaitWriteFinish</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">stabilityThreshold</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">watcher</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        watcher.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;add&quot;</span>, <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> <span class=\"title function_\">setView</span>(path));</span><br><span class=\"line\">        watcher.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;change&quot;</span>, <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> <span class=\"title function_\">setView</span>(path));</span><br><span class=\"line\">        watcher.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;unlink&quot;</span>, <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> path = <span class=\"string\">&quot;async&quot;</span> + path.<span class=\"title function_\">replace</span>(layoutDir, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            hexo.<span class=\"property\">theme</span>.<span class=\"title function_\">removeView</span>(path);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        watcher.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;addDir&quot;</span>, <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> <span class=\"title function_\">loadDir</span>(path));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">loadDir</span> = (<span class=\"params\">base</span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> dirs = <span class=\"title function_\">readdirSync</span>(base);</span><br><span class=\"line\">        dirs.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> fullpath = <span class=\"title function_\">resolve</span>(base, path);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> stats = <span class=\"title function_\">statSync</span>(fullpath);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stats.<span class=\"title function_\">isDirectory</span>()) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">loadDir</span>(fullpath);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stats.<span class=\"title function_\">isFile</span>()) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">setView</span>(fullpath);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">loadDir</span>(layoutDir);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>到此主要功能以及实现了，其他待优化项这里就不描述了，可以看看完整实现源码。</p>\n<h3 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h3><p>以为 hexo-theme-async 为例，在根目录新建 layout 目录，再目录下添加 sidebar.ejs 文件，结构如下：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">┌── blog</span><br><span class=\"line\">│   └── layout</span><br><span class=\"line\">│          └── sidebar.ejs</span><br><span class=\"line\">│   └── scaffolds</span><br><span class=\"line\">│   └── source</span><br><span class=\"line\">│   └── themes</span><br></pre></td></tr></table></figure>\n\n<p>sidebar.ejs 添加一点内容</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>111<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 _config.async.yml 中修改 layout 配置，替换掉默认 sidebar 模板。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">layout:</span></span><br><span class=\"line\">    <span class=\"attr\">sidebar:</span> <span class=\"string\">async/sidebar</span></span><br></pre></td></tr></table></figure>\n\n<p>运行起来后，可以看到效果和 <a href=\"#%E4%BF%AE%E6%94%B9%E7%A4%BA%E4%BE%8B\">修改示例</a> 中的效果一样，但是简化了用户使用。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>通过上面方式，可以在使用 npm 安装主题时，也支持自定义替换部分区域，来个性化的目的，当主题版本迭代升级后，也更方便用户更新升级。</p>\n<p>完整实现源码可以参考 <a href=\"https://github.com/MaLuns/hexo-theme-async/blob/dev/packages/hexo-theme-async/scripts/events/layout.js\">hexo-theme-async</a> 中源码。</p>"},{"title":"Vue2.x 响应式部分源码阅读记录","comments":1,"date":"2020-03-06T12:38:27.000Z","keywords":"vue,vue响应式,vue源码","_content":"\n之前也用了一段时间 Vue，对其用法也较为熟练了，但是对各种用法和各种 api 使用都是只知其然而不知其所以然。最近利用空闲时间尝试的去看看 Vue 的源码，以便更了解其具体原理实现，跟着学习学习。\n\n<!--more -->\n\n<!-- 之前一直对 Vue又几个困惑\n\n- 传的 data 进去的 怎么就 变得 this.xxx 可以访问到了\n- 如何实现数据劫持，监听数据的读写操作 ？\n- 如何实现依赖缓存 ？ -->\n\n## Proxy 对 data 代理  ##\n\n传的 data 进去的为什么可以用 this.xxx 访问，而不需要 this.data.xxx 呢?\n\n``` js \n// vue\\src\\core\\instance\\state.js\n\nconst sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n}\n\nexport function proxy (target: Object, sourceKey: string, key: string) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  }\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition)\n}\n\nfunction initData (vm: Component) {\n  let data = vm.$options.data\n  //...\n  const keys = Object.keys(data)\n  //...\n  let i = keys.length\n  while (i--) {\n    const key = keys[i]\n    //....\n     proxy(vm, `_data`, key)\n  }\n\n  observe(data, true /* asRootData */)\n}\n\n```\n这段代码看起来还是很简单的，将 data 中得 key 遍历一遍，然后全部新增到实例上去，当我们访问修改 this.xxx 得时候，都是在访问修改 this._data.xxx\n\n## observer 模块 ##\n>模块源码路径 vue\\src\\core\\observer\n\nobserver 模块可以说是 Vue 响应式得核心了，observer 模块主要是 Observer、Dep、Watcher这三个部分了\n- **Observer** 观察者，对数据进行观察和依赖收集等\n- **Dep** 是 Observer 和 Watcher 得一个桥梁，Observer 对数据进行响应式处理时候，会给每个属性生成一个 Dep 对象，然后通过调用 dep.depend() ，如果当前存在 Watcher 将当前 Dep 加入到 Watcher 中,然后在将 Watcher 添加到当前 Dep 中\n- **Watcher** 订阅者，数据变化会收到通知，然后进行相关操作，例如视图更新等\n\n关系如下 \n\n```\n\n\n      -------get 收集依赖--------   ----------- 订阅 -------------\n      |                         |  |                            |\n      |                         V  |                            |\n------------                ------------                  -------------\n| Obserser | ----  set ---->|    Dep   |------- 通知 ---->|  Watcher  |\n------------                ------------                  -------------\n                                                                |\n                                                              update\n                                                                |\n                                                          -------------\n                                                          |   View    |\n                                                          -------------\n\n```\n\n### 1.Observer ###\ninitData() 方法调用了  observe(data, true /* asRootData */) 先来看下这个方法\n\n``` js \n//对 value 进行观察处理\nexport function observe (value: any, asRootData: ?boolean): Observer | void {\n\n  //判断处理 value 必须是对象 并且不能是 VNode\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n\n  let ob: Observer | void\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value)\n  }\n  if (asRootData && ob) {\n    ob.vmCount++\n  }\n  return ob\n}\n\n```\n\n如果 data.\\_\\_ob\\_\\_ 已经存在直接返回，否则 new 一个新的 Observer 实例，下面是 Observer 类代码\n\n``` js \nexport class Observer {\n  value: any;\n  dep: Dep;\n  vmCount: number; // number of vms that have this object as root $data\n\n  constructor (value: any) {\n    this.value = value\n    // 这个dep 在 value 的属性新增 删除时候会用到\n    //value 如果是数组 也是通过 这里的进行 依赖收集更新的\n    this.dep = new Dep() \n    this.vmCount = 0\n    def(value, '__ob__', this)\n    if (Array.isArray(value)) {\n\n      //这里是对数组原型对象 拦截 处理\n      if (hasProto) {\n        protoAugment(value, arrayMethods)\n      } else {\n        copyAugment(value, arrayMethods, arrayKeys)\n      }\n\n\n      this.observeArray(value)\n    } else {\n      this.walk(value)\n    }\n  }\n\n  walk (obj: Object) {\n    const keys = Object.keys(obj)\n    for (let i = 0; i < keys.length; i++) {\n      defineReactive(obj, keys[i])\n    }\n  }\n\n  observeArray (items: Array<any>) {\n    for (let i = 0, l = items.length; i < l; i++) {\n      observe(items[i])\n    }\n  }\n}\n```\n\n在构造函数中，会给 value（data）增加 \\_\\_ob\\_\\_  (当前 Observer实例 ) 属性。如果 value 是数组，会调用 observeArray 对数组进行遍历，在调用 observe 方法对每个元素进行观察。如果是对象，调用 walk 遍历 value 去调用 defineReactive 去修改属性的 get/set。 \n\n``` js \n//defineReactive 函数\n\nexport function defineReactive (\n  obj: Object,\n  key: string, //遍历的key\n  val: any,\n  customSetter?: ?Function,\n  shallow?: boolean\n) {\n\n  const dep = new Dep()\n\n  const property = Object.getOwnPropertyDescriptor(obj, key)\n  if (property && property.configurable === false)  return\n  \n\n  // cater for pre-defined getter/setters\n  const getter = property && property.get\n  const setter = property && property.set\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key]\n  }\n\n  //如果 key 的值是 对象 的话，对其 value 也会进行响应处理\n  let childOb = !shallow && observe(val)\n\n  //为当前 key 添加get/set\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      const value = getter ? getter.call(obj) : val\n      \n      if (Dep.target) {\n\n        dep.depend() //对当前属性 进行依赖收集\n\n        if (childOb) {\n          //如果属性值是 对象 ，则对属性值本身进行依赖收集\n          childOb.dep.depend()\n          if (Array.isArray(value)) {\n            //如果值是数组 对数组的每个元素进行依赖收集\n            dependArray(value)\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      const value = getter ? getter.call(obj) : val\n\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n\n      if (getter && !setter) return\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n\n      //对新值 进行观察处理\n      childOb = !shallow && observe(newVal)\n      //通知 Watcher\n      dep.notify()\n    }\n  })\n}\n\n\nfunction dependArray (value: Array<any>) {\n  for (let e, i = 0, l = value.length; i < l; i++) {\n    e = value[i]\n    e && e.__ob__ && e.__ob__.dep.depend()\n    if (Array.isArray(e)) {\n      dependArray(e)\n    }\n  }\n}\n\n```\n\n上面有两个地方有存在 Dep\n- 一个是Observer 类 属性上有个 Dep ,这里主要是对数组（数组没有 get/set 不能像对象属性那样）和对象本身进行依赖收集和通知\n![](/images/posts/js_vue/20200312225611.png)\n![](/images/posts/js_vue/20200312225648.png)\n- 一个是对属性 get/set 处理时候的 Dep ,这个主要是对象的属性进行依赖收集和通知\n\n### 2.Dep ###\nDep 是 Observer 与 Watcher 桥梁，也可以认为 Dep 是服务于 Observer 的订阅系统。Watcher 订阅某个 Observer 的 Dep，当 Observer 观察的数据发生变化时，通过 Dep 通知各个已经订阅的 Watcher。\n\n``` js\nexport default class Dep {\n  static target: ?Watcher;\n  id: number;\n  subs: Array<Watcher>;\n\n  constructor () {\n    this.id = uid++\n    this.subs = [] //Watcher实例\n  }\n\n  //接收的参数为Watcher实例，并把Watcher实例存入记录依赖的数组中\n  addSub (sub: Watcher) {\n    this.subs.push(sub)\n  }\n\n  //与addSub对应，作用是将Watcher实例从记录依赖的数组中移除\n  removeSub (sub: Watcher) {\n    remove(this.subs, sub)\n  }\n\n  //依赖收集\n  depend () {\n    if (Dep.target) { //存放当前Wather实例\n      //将当前 Dep 存放到 Watcher（观察者） 中的依赖中\n      Dep.target.addDep(this)\n    }\n  }\n\n  //通知依赖数组中所有的watcher进行更新操作\n  notify () {\n    const subs = this.subs.slice()\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()\n    }\n  }\n}\n\nDep.target = null\nconst targetStack = []\n\nexport function pushTarget (target: ?Watcher) {\n  targetStack.push(target)\n  Dep.target = target\n}\n\nexport function popTarget () {\n  targetStack.pop()\n  Dep.target = targetStack[targetStack.length - 1]\n}\n\n```\n\n### 3.Watcher ###\n\n先看 Watcher 的构造函数\n\n``` js\nconstructor( \n    vm: Component,\n    expOrFn: string | Function,\n    cb: Function,\n    options?: ?Object,\n    isRenderWatcher?: boolean)\n{\n    ...\n\n    if (typeof expOrFn === 'function') {\n      this.getter = expOrFn\n    } else {\n      this.getter = parsePath(expOrFn)\n      if (!this.getter) {\n        this.getter = noop\n      }\n    }\n\n    this.value = this.lazy\n      ? undefined\n      : this.get()\n}\n\n```\n\nexpOrFn，对于初始化用来渲染视图的 watcher 来说，就是 render 方法，对于 computed 来说就是表达式，对于 watch 才是 key，而 getter 方法是用来取 value 的。最后调用了 get()方法\n\n\n``` js\n\nget () {\n    //将Dep.target设置为当前watcher实例\n    pushTarget(this)\n\n    let value\n    const vm = this.vm\n    try {\n      // 执行一次get 收集依赖\n      value = this.getter.call(vm, vm) \n    } catch (e) {\n      if (this.user) {\n        handleError(e, vm, `getter for watcher \"${this.expression}\"`)\n      } else {\n        throw e\n      }\n    } finally {\n      if (this.deep) {\n        traverse(value)\n      }\n      popTarget()\n      this.cleanupDeps() //清楚依赖\n    }\n    return value\n}\n\n```\n假如当前 Watcher 实例中 getter 是 render，当 render 遇到模板中的 {{xxx}} 表达式的时候，就是去读取 data.xxx，这个时候就触发 data.xxx 的 get 方法，这个时候 get 中会执行 Dep.depend(),而此时 Dep.target 就是当前 watcher ，然后调用 watcher.addDep()。也就将 data.xxx 与 当前 watcher 关联起来了\n\n```js\n\n//watcher 的其他方法\n\n//接收参数dep(Dep实例)，让当前watcher订阅dep\naddDep (dep: Dep) {\n  const id = dep.id\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id)\n    this.newDeps.push(dep)\n    if (!this.depIds.has(id)) {\n      //将watcher实例 也添加到 Dep实例中\n      dep.addSub(this)\n    }\n  }\n}\n\n//清楚对dep的订阅信息\ncleanupDeps () {\n  \n}\n\n//立刻运行watcher或者将watcher加入队列中\nupdate () {\n  if (this.lazy) {\n    this.dirty = true\n  } else if (this.sync) {\n    this.run()\n  } else {\n    queueWatcher(this)\n  }\n}\n\n//运行watcher，调用this.get()求值，然后触发回调\nrun () {\n  if (this.active) {\n    const value = this.get()\n    if (\n      value !== this.value || isObject(value) || this.deep\n    ) {\n      const oldValue = this.value\n      this.value = value\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue)\n        } catch (e) {\n          handleError(e, this.vm, `callback for watcher \"${this.expression}\"`)\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue)\n      }\n    }\n  }\n}\n\n//调用this.get()求值\nevaluate () {\n  this.value = this.get()\n  this.dirty = false\n}\n\n//遍历this.deps，让当前watcher实例订阅所有dep\ndepend () {\n  let i = this.deps.length\n  while (i--) {\n    this.deps[i].depend()\n  }\n}\n\n//去除当前watcher实例所有的订阅\nteardown () {\n  if (this.active) {\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this)\n    }\n    let i = this.deps.length\n    while (i--) {\n      this.deps[i].removeSub(this)\n    }\n    this.active = false\n  }\n}\n```","source":"_posts/js_vue.md","raw":"---\ntitle: Vue2.x 响应式部分源码阅读记录\ncomments: true\ndate: 2020-03-06 20:38:27\ntags: [vue]\ncategories: 记录类\nkeywords: vue,vue响应式,vue源码\n---\n\n之前也用了一段时间 Vue，对其用法也较为熟练了，但是对各种用法和各种 api 使用都是只知其然而不知其所以然。最近利用空闲时间尝试的去看看 Vue 的源码，以便更了解其具体原理实现，跟着学习学习。\n\n<!--more -->\n\n<!-- 之前一直对 Vue又几个困惑\n\n- 传的 data 进去的 怎么就 变得 this.xxx 可以访问到了\n- 如何实现数据劫持，监听数据的读写操作 ？\n- 如何实现依赖缓存 ？ -->\n\n## Proxy 对 data 代理  ##\n\n传的 data 进去的为什么可以用 this.xxx 访问，而不需要 this.data.xxx 呢?\n\n``` js \n// vue\\src\\core\\instance\\state.js\n\nconst sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n}\n\nexport function proxy (target: Object, sourceKey: string, key: string) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  }\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition)\n}\n\nfunction initData (vm: Component) {\n  let data = vm.$options.data\n  //...\n  const keys = Object.keys(data)\n  //...\n  let i = keys.length\n  while (i--) {\n    const key = keys[i]\n    //....\n     proxy(vm, `_data`, key)\n  }\n\n  observe(data, true /* asRootData */)\n}\n\n```\n这段代码看起来还是很简单的，将 data 中得 key 遍历一遍，然后全部新增到实例上去，当我们访问修改 this.xxx 得时候，都是在访问修改 this._data.xxx\n\n## observer 模块 ##\n>模块源码路径 vue\\src\\core\\observer\n\nobserver 模块可以说是 Vue 响应式得核心了，observer 模块主要是 Observer、Dep、Watcher这三个部分了\n- **Observer** 观察者，对数据进行观察和依赖收集等\n- **Dep** 是 Observer 和 Watcher 得一个桥梁，Observer 对数据进行响应式处理时候，会给每个属性生成一个 Dep 对象，然后通过调用 dep.depend() ，如果当前存在 Watcher 将当前 Dep 加入到 Watcher 中,然后在将 Watcher 添加到当前 Dep 中\n- **Watcher** 订阅者，数据变化会收到通知，然后进行相关操作，例如视图更新等\n\n关系如下 \n\n```\n\n\n      -------get 收集依赖--------   ----------- 订阅 -------------\n      |                         |  |                            |\n      |                         V  |                            |\n------------                ------------                  -------------\n| Obserser | ----  set ---->|    Dep   |------- 通知 ---->|  Watcher  |\n------------                ------------                  -------------\n                                                                |\n                                                              update\n                                                                |\n                                                          -------------\n                                                          |   View    |\n                                                          -------------\n\n```\n\n### 1.Observer ###\ninitData() 方法调用了  observe(data, true /* asRootData */) 先来看下这个方法\n\n``` js \n//对 value 进行观察处理\nexport function observe (value: any, asRootData: ?boolean): Observer | void {\n\n  //判断处理 value 必须是对象 并且不能是 VNode\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n\n  let ob: Observer | void\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value)\n  }\n  if (asRootData && ob) {\n    ob.vmCount++\n  }\n  return ob\n}\n\n```\n\n如果 data.\\_\\_ob\\_\\_ 已经存在直接返回，否则 new 一个新的 Observer 实例，下面是 Observer 类代码\n\n``` js \nexport class Observer {\n  value: any;\n  dep: Dep;\n  vmCount: number; // number of vms that have this object as root $data\n\n  constructor (value: any) {\n    this.value = value\n    // 这个dep 在 value 的属性新增 删除时候会用到\n    //value 如果是数组 也是通过 这里的进行 依赖收集更新的\n    this.dep = new Dep() \n    this.vmCount = 0\n    def(value, '__ob__', this)\n    if (Array.isArray(value)) {\n\n      //这里是对数组原型对象 拦截 处理\n      if (hasProto) {\n        protoAugment(value, arrayMethods)\n      } else {\n        copyAugment(value, arrayMethods, arrayKeys)\n      }\n\n\n      this.observeArray(value)\n    } else {\n      this.walk(value)\n    }\n  }\n\n  walk (obj: Object) {\n    const keys = Object.keys(obj)\n    for (let i = 0; i < keys.length; i++) {\n      defineReactive(obj, keys[i])\n    }\n  }\n\n  observeArray (items: Array<any>) {\n    for (let i = 0, l = items.length; i < l; i++) {\n      observe(items[i])\n    }\n  }\n}\n```\n\n在构造函数中，会给 value（data）增加 \\_\\_ob\\_\\_  (当前 Observer实例 ) 属性。如果 value 是数组，会调用 observeArray 对数组进行遍历，在调用 observe 方法对每个元素进行观察。如果是对象，调用 walk 遍历 value 去调用 defineReactive 去修改属性的 get/set。 \n\n``` js \n//defineReactive 函数\n\nexport function defineReactive (\n  obj: Object,\n  key: string, //遍历的key\n  val: any,\n  customSetter?: ?Function,\n  shallow?: boolean\n) {\n\n  const dep = new Dep()\n\n  const property = Object.getOwnPropertyDescriptor(obj, key)\n  if (property && property.configurable === false)  return\n  \n\n  // cater for pre-defined getter/setters\n  const getter = property && property.get\n  const setter = property && property.set\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key]\n  }\n\n  //如果 key 的值是 对象 的话，对其 value 也会进行响应处理\n  let childOb = !shallow && observe(val)\n\n  //为当前 key 添加get/set\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      const value = getter ? getter.call(obj) : val\n      \n      if (Dep.target) {\n\n        dep.depend() //对当前属性 进行依赖收集\n\n        if (childOb) {\n          //如果属性值是 对象 ，则对属性值本身进行依赖收集\n          childOb.dep.depend()\n          if (Array.isArray(value)) {\n            //如果值是数组 对数组的每个元素进行依赖收集\n            dependArray(value)\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      const value = getter ? getter.call(obj) : val\n\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n\n      if (getter && !setter) return\n      if (setter) {\n        setter.call(obj, newVal)\n      } else {\n        val = newVal\n      }\n\n      //对新值 进行观察处理\n      childOb = !shallow && observe(newVal)\n      //通知 Watcher\n      dep.notify()\n    }\n  })\n}\n\n\nfunction dependArray (value: Array<any>) {\n  for (let e, i = 0, l = value.length; i < l; i++) {\n    e = value[i]\n    e && e.__ob__ && e.__ob__.dep.depend()\n    if (Array.isArray(e)) {\n      dependArray(e)\n    }\n  }\n}\n\n```\n\n上面有两个地方有存在 Dep\n- 一个是Observer 类 属性上有个 Dep ,这里主要是对数组（数组没有 get/set 不能像对象属性那样）和对象本身进行依赖收集和通知\n![](/images/posts/js_vue/20200312225611.png)\n![](/images/posts/js_vue/20200312225648.png)\n- 一个是对属性 get/set 处理时候的 Dep ,这个主要是对象的属性进行依赖收集和通知\n\n### 2.Dep ###\nDep 是 Observer 与 Watcher 桥梁，也可以认为 Dep 是服务于 Observer 的订阅系统。Watcher 订阅某个 Observer 的 Dep，当 Observer 观察的数据发生变化时，通过 Dep 通知各个已经订阅的 Watcher。\n\n``` js\nexport default class Dep {\n  static target: ?Watcher;\n  id: number;\n  subs: Array<Watcher>;\n\n  constructor () {\n    this.id = uid++\n    this.subs = [] //Watcher实例\n  }\n\n  //接收的参数为Watcher实例，并把Watcher实例存入记录依赖的数组中\n  addSub (sub: Watcher) {\n    this.subs.push(sub)\n  }\n\n  //与addSub对应，作用是将Watcher实例从记录依赖的数组中移除\n  removeSub (sub: Watcher) {\n    remove(this.subs, sub)\n  }\n\n  //依赖收集\n  depend () {\n    if (Dep.target) { //存放当前Wather实例\n      //将当前 Dep 存放到 Watcher（观察者） 中的依赖中\n      Dep.target.addDep(this)\n    }\n  }\n\n  //通知依赖数组中所有的watcher进行更新操作\n  notify () {\n    const subs = this.subs.slice()\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()\n    }\n  }\n}\n\nDep.target = null\nconst targetStack = []\n\nexport function pushTarget (target: ?Watcher) {\n  targetStack.push(target)\n  Dep.target = target\n}\n\nexport function popTarget () {\n  targetStack.pop()\n  Dep.target = targetStack[targetStack.length - 1]\n}\n\n```\n\n### 3.Watcher ###\n\n先看 Watcher 的构造函数\n\n``` js\nconstructor( \n    vm: Component,\n    expOrFn: string | Function,\n    cb: Function,\n    options?: ?Object,\n    isRenderWatcher?: boolean)\n{\n    ...\n\n    if (typeof expOrFn === 'function') {\n      this.getter = expOrFn\n    } else {\n      this.getter = parsePath(expOrFn)\n      if (!this.getter) {\n        this.getter = noop\n      }\n    }\n\n    this.value = this.lazy\n      ? undefined\n      : this.get()\n}\n\n```\n\nexpOrFn，对于初始化用来渲染视图的 watcher 来说，就是 render 方法，对于 computed 来说就是表达式，对于 watch 才是 key，而 getter 方法是用来取 value 的。最后调用了 get()方法\n\n\n``` js\n\nget () {\n    //将Dep.target设置为当前watcher实例\n    pushTarget(this)\n\n    let value\n    const vm = this.vm\n    try {\n      // 执行一次get 收集依赖\n      value = this.getter.call(vm, vm) \n    } catch (e) {\n      if (this.user) {\n        handleError(e, vm, `getter for watcher \"${this.expression}\"`)\n      } else {\n        throw e\n      }\n    } finally {\n      if (this.deep) {\n        traverse(value)\n      }\n      popTarget()\n      this.cleanupDeps() //清楚依赖\n    }\n    return value\n}\n\n```\n假如当前 Watcher 实例中 getter 是 render，当 render 遇到模板中的 {{xxx}} 表达式的时候，就是去读取 data.xxx，这个时候就触发 data.xxx 的 get 方法，这个时候 get 中会执行 Dep.depend(),而此时 Dep.target 就是当前 watcher ，然后调用 watcher.addDep()。也就将 data.xxx 与 当前 watcher 关联起来了\n\n```js\n\n//watcher 的其他方法\n\n//接收参数dep(Dep实例)，让当前watcher订阅dep\naddDep (dep: Dep) {\n  const id = dep.id\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id)\n    this.newDeps.push(dep)\n    if (!this.depIds.has(id)) {\n      //将watcher实例 也添加到 Dep实例中\n      dep.addSub(this)\n    }\n  }\n}\n\n//清楚对dep的订阅信息\ncleanupDeps () {\n  \n}\n\n//立刻运行watcher或者将watcher加入队列中\nupdate () {\n  if (this.lazy) {\n    this.dirty = true\n  } else if (this.sync) {\n    this.run()\n  } else {\n    queueWatcher(this)\n  }\n}\n\n//运行watcher，调用this.get()求值，然后触发回调\nrun () {\n  if (this.active) {\n    const value = this.get()\n    if (\n      value !== this.value || isObject(value) || this.deep\n    ) {\n      const oldValue = this.value\n      this.value = value\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue)\n        } catch (e) {\n          handleError(e, this.vm, `callback for watcher \"${this.expression}\"`)\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue)\n      }\n    }\n  }\n}\n\n//调用this.get()求值\nevaluate () {\n  this.value = this.get()\n  this.dirty = false\n}\n\n//遍历this.deps，让当前watcher实例订阅所有dep\ndepend () {\n  let i = this.deps.length\n  while (i--) {\n    this.deps[i].depend()\n  }\n}\n\n//去除当前watcher实例所有的订阅\nteardown () {\n  if (this.active) {\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this)\n    }\n    let i = this.deps.length\n    while (i--) {\n      this.deps[i].removeSub(this)\n    }\n    this.active = false\n  }\n}\n```","slug":"js_vue","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vrl001r98lg0nfs9y8o","content":"<p>之前也用了一段时间 Vue，对其用法也较为熟练了，但是对各种用法和各种 api 使用都是只知其然而不知其所以然。最近利用空闲时间尝试的去看看 Vue 的源码，以便更了解其具体原理实现，跟着学习学习。</p>\n<span id=\"more\"></span>\n\n<!-- 之前一直对 Vue又几个困惑\n\n- 传的 data 进去的 怎么就 变得 this.xxx 可以访问到了\n- 如何实现数据劫持，监听数据的读写操作 ？\n- 如何实现依赖缓存 ？ -->\n\n<h2 id=\"Proxy-对-data-代理\"><a href=\"#Proxy-对-data-代理\" class=\"headerlink\" title=\"Proxy 对 data 代理\"></a>Proxy 对 data 代理</h2><p>传的 data 进去的为什么可以用 this.xxx 访问，而不需要 this.data.xxx 呢?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue\\src\\core\\instance\\state.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sharedPropertyDefinition = &#123;</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">get</span>: noop,</span><br><span class=\"line\">  <span class=\"attr\">set</span>: noop</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">proxy</span> (<span class=\"attr\">target</span>: <span class=\"title class_\">Object</span>, <span class=\"attr\">sourceKey</span>: string, <span class=\"attr\">key</span>: string) &#123;</span><br><span class=\"line\">  sharedPropertyDefinition.<span class=\"property\">get</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">proxyGetter</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>[sourceKey][key]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sharedPropertyDefinition.<span class=\"property\">set</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">proxySetter</span> (val) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>[sourceKey][key] = val</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(target, key, sharedPropertyDefinition)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initData</span> (<span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = vm.<span class=\"property\">$options</span>.<span class=\"property\">data</span></span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(data)</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = keys.<span class=\"property\">length</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">    <span class=\"comment\">//....</span></span><br><span class=\"line\">     <span class=\"title function_\">proxy</span>(vm, <span class=\"string\">`_data`</span>, key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">observe</span>(data, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这段代码看起来还是很简单的，将 data 中得 key 遍历一遍，然后全部新增到实例上去，当我们访问修改 this.xxx 得时候，都是在访问修改 this._data.xxx</p>\n<h2 id=\"observer-模块\"><a href=\"#observer-模块\" class=\"headerlink\" title=\"observer 模块\"></a>observer 模块</h2><blockquote>\n<p>模块源码路径 vue\\src\\core\\observer</p>\n</blockquote>\n<p>observer 模块可以说是 Vue 响应式得核心了，observer 模块主要是 Observer、Dep、Watcher这三个部分了</p>\n<ul>\n<li><strong>Observer</strong> 观察者，对数据进行观察和依赖收集等</li>\n<li><strong>Dep</strong> 是 Observer 和 Watcher 得一个桥梁，Observer 对数据进行响应式处理时候，会给每个属性生成一个 Dep 对象，然后通过调用 dep.depend() ，如果当前存在 Watcher 将当前 Dep 加入到 Watcher 中,然后在将 Watcher 添加到当前 Dep 中</li>\n<li><strong>Watcher</strong> 订阅者，数据变化会收到通知，然后进行相关操作，例如视图更新等</li>\n</ul>\n<p>关系如下 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      -------get 收集依赖--------   ----------- 订阅 -------------</span><br><span class=\"line\">      |                         |  |                            |</span><br><span class=\"line\">      |                         V  |                            |</span><br><span class=\"line\">------------                ------------                  -------------</span><br><span class=\"line\">| Obserser | ----  set ----&gt;|    Dep   |------- 通知 ----&gt;|  Watcher  |</span><br><span class=\"line\">------------                ------------                  -------------</span><br><span class=\"line\">                                                                |</span><br><span class=\"line\">                                                              update</span><br><span class=\"line\">                                                                |</span><br><span class=\"line\">                                                          -------------</span><br><span class=\"line\">                                                          |   View    |</span><br><span class=\"line\">                                                          -------------</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-Observer\"><a href=\"#1-Observer\" class=\"headerlink\" title=\"1.Observer\"></a>1.Observer</h3><p>initData() 方法调用了  observe(data, true &#x2F;* asRootData *&#x2F;) 先来看下这个方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对 value 进行观察处理</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">observe</span> (<span class=\"attr\">value</span>: any, <span class=\"attr\">asRootData</span>: ?boolean): <span class=\"title class_\">Observer</span> | <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//判断处理 value 必须是对象 并且不能是 VNode</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title function_\">isObject</span>(value) || value <span class=\"keyword\">instanceof</span> <span class=\"title class_\">VNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">ob</span>: <span class=\"title class_\">Observer</span> | <span class=\"keyword\">void</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">hasOwn</span>(value, <span class=\"string\">&#x27;__ob__&#x27;</span>) &amp;&amp; value.<span class=\"property\">__ob__</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Observer</span>) &#123;</span><br><span class=\"line\">    ob = value.<span class=\"property\">__ob__</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    shouldObserve &amp;&amp;</span><br><span class=\"line\">    !<span class=\"title function_\">isServerRendering</span>() &amp;&amp;</span><br><span class=\"line\">    (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(value) || <span class=\"title function_\">isPlainObject</span>(value)) &amp;&amp;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">isExtensible</span>(value) &amp;&amp;</span><br><span class=\"line\">    !value.<span class=\"property\">_isVue</span></span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    ob = <span class=\"keyword\">new</span> <span class=\"title class_\">Observer</span>(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (asRootData &amp;&amp; ob) &#123;</span><br><span class=\"line\">    ob.<span class=\"property\">vmCount</span>++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ob</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果 data.__ob__ 已经存在直接返回，否则 new 一个新的 Observer 实例，下面是 Observer 类代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: any;</span><br><span class=\"line\">  <span class=\"attr\">dep</span>: <span class=\"title class_\">Dep</span>;</span><br><span class=\"line\">  <span class=\"attr\">vmCount</span>: number; <span class=\"comment\">// number of vms that have this object as root $data</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span> (<span class=\"attr\">value</span>: any) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value</span><br><span class=\"line\">    <span class=\"comment\">// 这个dep 在 value 的属性新增 删除时候会用到</span></span><br><span class=\"line\">    <span class=\"comment\">//value 如果是数组 也是通过 这里的进行 依赖收集更新的</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">dep</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>() </span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">vmCount</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"title function_\">def</span>(value, <span class=\"string\">&#x27;__ob__&#x27;</span>, <span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(value)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//这里是对数组原型对象 拦截 处理</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hasProto) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">protoAugment</span>(value, arrayMethods)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">copyAugment</span>(value, arrayMethods, arrayKeys)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">observeArray</span>(value)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">walk</span>(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  walk (<span class=\"attr\">obj</span>: <span class=\"title class_\">Object</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">defineReactive</span>(obj, keys[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  observeArray (<span class=\"attr\">items</span>: <span class=\"title class_\">Array</span>&lt;any&gt;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = items.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">observe</span>(items[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在构造函数中，会给 value（data）增加 __ob__  (当前 Observer实例 ) 属性。如果 value 是数组，会调用 observeArray 对数组进行遍历，在调用 observe 方法对每个元素进行观察。如果是对象，调用 walk 遍历 value 去调用 defineReactive 去修改属性的 get&#x2F;set。 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//defineReactive 函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">defineReactive</span> (</span><br><span class=\"line\">  <span class=\"attr\">obj</span>: <span class=\"title class_\">Object</span>,</span><br><span class=\"line\">  <span class=\"attr\">key</span>: string, <span class=\"comment\">//遍历的key</span></span><br><span class=\"line\">  <span class=\"attr\">val</span>: any,</span><br><span class=\"line\">  customSetter?: ?<span class=\"title class_\">Function</span>,</span><br><span class=\"line\">  shallow?: boolean</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> property = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(obj, key)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (property &amp;&amp; property.<span class=\"property\">configurable</span> === <span class=\"literal\">false</span>)  <span class=\"keyword\">return</span></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// cater for pre-defined getter/setters</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> getter = property &amp;&amp; property.<span class=\"property\">get</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> setter = property &amp;&amp; property.<span class=\"property\">set</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((!getter || setter) &amp;&amp; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span> === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    val = obj[key]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//如果 key 的值是 对象 的话，对其 value 也会进行响应处理</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> childOb = !shallow &amp;&amp; <span class=\"title function_\">observe</span>(val)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//为当前 key 添加get/set</span></span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, key, &#123;</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveGetter</span> () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.<span class=\"title function_\">call</span>(obj) : val</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        dep.<span class=\"title function_\">depend</span>() <span class=\"comment\">//对当前属性 进行依赖收集</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//如果属性值是 对象 ，则对属性值本身进行依赖收集</span></span><br><span class=\"line\">          childOb.<span class=\"property\">dep</span>.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(value)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果值是数组 对数组的每个元素进行依赖收集</span></span><br><span class=\"line\">            <span class=\"title function_\">dependArray</span>(value)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveSetter</span> (newVal) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.<span class=\"title function_\">call</span>(obj) : val</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (getter &amp;&amp; !setter) <span class=\"keyword\">return</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">        setter.<span class=\"title function_\">call</span>(obj, newVal)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        val = newVal</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//对新值 进行观察处理</span></span><br><span class=\"line\">      childOb = !shallow &amp;&amp; <span class=\"title function_\">observe</span>(newVal)</span><br><span class=\"line\">      <span class=\"comment\">//通知 Watcher</span></span><br><span class=\"line\">      dep.<span class=\"title function_\">notify</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dependArray</span> (<span class=\"attr\">value</span>: <span class=\"title class_\">Array</span>&lt;any&gt;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> e, i = <span class=\"number\">0</span>, l = value.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">    e = value[i]</span><br><span class=\"line\">    e &amp;&amp; e.<span class=\"property\">__ob__</span> &amp;&amp; e.<span class=\"property\">__ob__</span>.<span class=\"property\">dep</span>.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(e)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dependArray</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面有两个地方有存在 Dep</p>\n<ul>\n<li>一个是Observer 类 属性上有个 Dep ,这里主要是对数组（数组没有 get&#x2F;set 不能像对象属性那样）和对象本身进行依赖收集和通知<br><img src=\"/images/posts/js_vue/20200312225611.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><br><img src=\"/images/posts/js_vue/20200312225648.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></li>\n<li>一个是对属性 get&#x2F;set 处理时候的 Dep ,这个主要是对象的属性进行依赖收集和通知</li>\n</ul>\n<h3 id=\"2-Dep\"><a href=\"#2-Dep\" class=\"headerlink\" title=\"2.Dep\"></a>2.Dep</h3><p>Dep 是 Observer 与 Watcher 桥梁，也可以认为 Dep 是服务于 Observer 的订阅系统。Watcher 订阅某个 Observer 的 Dep，当 Observer 观察的数据发生变化时，通过 Dep 通知各个已经订阅的 Watcher。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"attr\">target</span>: ?<span class=\"title class_\">Watcher</span>;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: number;</span><br><span class=\"line\">  <span class=\"attr\">subs</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Watcher</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = uid++</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span> = [] <span class=\"comment\">//Watcher实例</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//接收的参数为Watcher实例，并把Watcher实例存入记录依赖的数组中</span></span><br><span class=\"line\">  addSub (<span class=\"attr\">sub</span>: <span class=\"title class_\">Watcher</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>.<span class=\"title function_\">push</span>(sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//与addSub对应，作用是将Watcher实例从记录依赖的数组中移除</span></span><br><span class=\"line\">  removeSub (<span class=\"attr\">sub</span>: <span class=\"title class_\">Watcher</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">remove</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>, sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//依赖收集</span></span><br><span class=\"line\">  depend () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>) &#123; <span class=\"comment\">//存放当前Wather实例</span></span><br><span class=\"line\">      <span class=\"comment\">//将当前 Dep 存放到 Watcher（观察者） 中的依赖中</span></span><br><span class=\"line\">      <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>.<span class=\"title function_\">addDep</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//通知依赖数组中所有的watcher进行更新操作</span></span><br><span class=\"line\">  notify () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> subs = <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>.<span class=\"title function_\">slice</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = subs.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">      subs[i].<span class=\"title function_\">update</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> targetStack = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">pushTarget</span> (<span class=\"attr\">target</span>: ?<span class=\"title class_\">Watcher</span>) &#123;</span><br><span class=\"line\">  targetStack.<span class=\"title function_\">push</span>(target)</span><br><span class=\"line\">  <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">popTarget</span> () &#123;</span><br><span class=\"line\">  targetStack.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">  <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = targetStack[targetStack.<span class=\"property\">length</span> - <span class=\"number\">1</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Watcher\"><a href=\"#3-Watcher\" class=\"headerlink\" title=\"3.Watcher\"></a>3.Watcher</h3><p>先看 Watcher 的构造函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"> </span></span><br><span class=\"line\"><span class=\"params\">    vm: Component,</span></span><br><span class=\"line\"><span class=\"params\">    expOrFn: string | <span class=\"built_in\">Function</span>,</span></span><br><span class=\"line\"><span class=\"params\">    cb: <span class=\"built_in\">Function</span>,</span></span><br><span class=\"line\"><span class=\"params\">    options?: ?<span class=\"built_in\">Object</span>,</span></span><br><span class=\"line\"><span class=\"params\">    isRenderWatcher?: boolean</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> expOrFn === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = expOrFn</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = <span class=\"title function_\">parsePath</span>(expOrFn)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">getter</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = noop</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span></span><br><span class=\"line\">      ? <span class=\"literal\">undefined</span></span><br><span class=\"line\">      : <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>expOrFn，对于初始化用来渲染视图的 watcher 来说，就是 render 方法，对于 computed 来说就是表达式，对于 watch 才是 key，而 getter 方法是用来取 value 的。最后调用了 get()方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">get () &#123;</span><br><span class=\"line\">    <span class=\"comment\">//将Dep.target设置为当前watcher实例</span></span><br><span class=\"line\">    <span class=\"title function_\">pushTarget</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 执行一次get 收集依赖</span></span><br><span class=\"line\">      value = <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span>.<span class=\"title function_\">call</span>(vm, vm) </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">user</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">handleError</span>(e, vm, <span class=\"string\">`getter for watcher &quot;<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">deep</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">traverse</span>(value)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">popTarget</span>()</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">cleanupDeps</span>() <span class=\"comment\">//清楚依赖</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>假如当前 Watcher 实例中 getter 是 render，当 render 遇到模板中的  表达式的时候，就是去读取 data.xxx，这个时候就触发 data.xxx 的 get 方法，这个时候 get 中会执行 Dep.depend(),而此时 Dep.target 就是当前 watcher ，然后调用 watcher.addDep()。也就将 data.xxx 与 当前 watcher 关联起来了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//watcher 的其他方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接收参数dep(Dep实例)，让当前watcher订阅dep</span></span><br><span class=\"line\">addDep (<span class=\"attr\">dep</span>: <span class=\"title class_\">Dep</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = dep.<span class=\"property\">id</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span>.<span class=\"title function_\">has</span>(id)) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span>.<span class=\"title function_\">add</span>(id)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDeps</span>.<span class=\"title function_\">push</span>(dep)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">depIds</span>.<span class=\"title function_\">has</span>(id)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//将watcher实例 也添加到 Dep实例中</span></span><br><span class=\"line\">      dep.<span class=\"title function_\">addSub</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//清楚对dep的订阅信息</span></span><br><span class=\"line\">cleanupDeps () &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//立刻运行watcher或者将watcher加入队列中</span></span><br><span class=\"line\">update () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">dirty</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">sync</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">run</span>()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">queueWatcher</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//运行watcher，调用this.get()求值，然后触发回调</span></span><br><span class=\"line\">run () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">active</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      value !== <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> || <span class=\"title function_\">isObject</span>(value) || <span class=\"variable language_\">this</span>.<span class=\"property\">deep</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> oldValue = <span class=\"variable language_\">this</span>.<span class=\"property\">value</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">user</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, value, oldValue)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">handleError</span>(e, <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, <span class=\"string\">`callback for watcher &quot;<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, value, oldValue)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用this.get()求值</span></span><br><span class=\"line\">evaluate () &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>()</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">dirty</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍历this.deps，让当前watcher实例订阅所有dep</span></span><br><span class=\"line\">depend () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>.<span class=\"property\">length</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>[i].<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//去除当前watcher实例所有的订阅</span></span><br><span class=\"line\">teardown () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">active</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>.<span class=\"property\">_isBeingDestroyed</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">remove</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>.<span class=\"property\">_watchers</span>, <span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>[i].<span class=\"title function_\">removeSub</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">active</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"<p>之前也用了一段时间 Vue，对其用法也较为熟练了，但是对各种用法和各种 api 使用都是只知其然而不知其所以然。最近利用空闲时间尝试的去看看 Vue 的源码，以便更了解其具体原理实现，跟着学习学习。</p>","more":"<!-- 之前一直对 Vue又几个困惑\n\n- 传的 data 进去的 怎么就 变得 this.xxx 可以访问到了\n- 如何实现数据劫持，监听数据的读写操作 ？\n- 如何实现依赖缓存 ？ -->\n\n<h2 id=\"Proxy-对-data-代理\"><a href=\"#Proxy-对-data-代理\" class=\"headerlink\" title=\"Proxy 对 data 代理\"></a>Proxy 对 data 代理</h2><p>传的 data 进去的为什么可以用 this.xxx 访问，而不需要 this.data.xxx 呢?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue\\src\\core\\instance\\state.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sharedPropertyDefinition = &#123;</span><br><span class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">get</span>: noop,</span><br><span class=\"line\">  <span class=\"attr\">set</span>: noop</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">proxy</span> (<span class=\"attr\">target</span>: <span class=\"title class_\">Object</span>, <span class=\"attr\">sourceKey</span>: string, <span class=\"attr\">key</span>: string) &#123;</span><br><span class=\"line\">  sharedPropertyDefinition.<span class=\"property\">get</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">proxyGetter</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>[sourceKey][key]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sharedPropertyDefinition.<span class=\"property\">set</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">proxySetter</span> (val) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>[sourceKey][key] = val</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(target, key, sharedPropertyDefinition)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initData</span> (<span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = vm.<span class=\"property\">$options</span>.<span class=\"property\">data</span></span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(data)</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = keys.<span class=\"property\">length</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">    <span class=\"comment\">//....</span></span><br><span class=\"line\">     <span class=\"title function_\">proxy</span>(vm, <span class=\"string\">`_data`</span>, key)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">observe</span>(data, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这段代码看起来还是很简单的，将 data 中得 key 遍历一遍，然后全部新增到实例上去，当我们访问修改 this.xxx 得时候，都是在访问修改 this._data.xxx</p>\n<h2 id=\"observer-模块\"><a href=\"#observer-模块\" class=\"headerlink\" title=\"observer 模块\"></a>observer 模块</h2><blockquote>\n<p>模块源码路径 vue\\src\\core\\observer</p>\n</blockquote>\n<p>observer 模块可以说是 Vue 响应式得核心了，observer 模块主要是 Observer、Dep、Watcher这三个部分了</p>\n<ul>\n<li><strong>Observer</strong> 观察者，对数据进行观察和依赖收集等</li>\n<li><strong>Dep</strong> 是 Observer 和 Watcher 得一个桥梁，Observer 对数据进行响应式处理时候，会给每个属性生成一个 Dep 对象，然后通过调用 dep.depend() ，如果当前存在 Watcher 将当前 Dep 加入到 Watcher 中,然后在将 Watcher 添加到当前 Dep 中</li>\n<li><strong>Watcher</strong> 订阅者，数据变化会收到通知，然后进行相关操作，例如视图更新等</li>\n</ul>\n<p>关系如下 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      -------get 收集依赖--------   ----------- 订阅 -------------</span><br><span class=\"line\">      |                         |  |                            |</span><br><span class=\"line\">      |                         V  |                            |</span><br><span class=\"line\">------------                ------------                  -------------</span><br><span class=\"line\">| Obserser | ----  set ----&gt;|    Dep   |------- 通知 ----&gt;|  Watcher  |</span><br><span class=\"line\">------------                ------------                  -------------</span><br><span class=\"line\">                                                                |</span><br><span class=\"line\">                                                              update</span><br><span class=\"line\">                                                                |</span><br><span class=\"line\">                                                          -------------</span><br><span class=\"line\">                                                          |   View    |</span><br><span class=\"line\">                                                          -------------</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-Observer\"><a href=\"#1-Observer\" class=\"headerlink\" title=\"1.Observer\"></a>1.Observer</h3><p>initData() 方法调用了  observe(data, true &#x2F;* asRootData *&#x2F;) 先来看下这个方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对 value 进行观察处理</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">observe</span> (<span class=\"attr\">value</span>: any, <span class=\"attr\">asRootData</span>: ?boolean): <span class=\"title class_\">Observer</span> | <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//判断处理 value 必须是对象 并且不能是 VNode</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title function_\">isObject</span>(value) || value <span class=\"keyword\">instanceof</span> <span class=\"title class_\">VNode</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">ob</span>: <span class=\"title class_\">Observer</span> | <span class=\"keyword\">void</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">hasOwn</span>(value, <span class=\"string\">&#x27;__ob__&#x27;</span>) &amp;&amp; value.<span class=\"property\">__ob__</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Observer</span>) &#123;</span><br><span class=\"line\">    ob = value.<span class=\"property\">__ob__</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    shouldObserve &amp;&amp;</span><br><span class=\"line\">    !<span class=\"title function_\">isServerRendering</span>() &amp;&amp;</span><br><span class=\"line\">    (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(value) || <span class=\"title function_\">isPlainObject</span>(value)) &amp;&amp;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">isExtensible</span>(value) &amp;&amp;</span><br><span class=\"line\">    !value.<span class=\"property\">_isVue</span></span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    ob = <span class=\"keyword\">new</span> <span class=\"title class_\">Observer</span>(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (asRootData &amp;&amp; ob) &#123;</span><br><span class=\"line\">    ob.<span class=\"property\">vmCount</span>++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ob</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果 data.__ob__ 已经存在直接返回，否则 new 一个新的 Observer 实例，下面是 Observer 类代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: any;</span><br><span class=\"line\">  <span class=\"attr\">dep</span>: <span class=\"title class_\">Dep</span>;</span><br><span class=\"line\">  <span class=\"attr\">vmCount</span>: number; <span class=\"comment\">// number of vms that have this object as root $data</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span> (<span class=\"attr\">value</span>: any) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value</span><br><span class=\"line\">    <span class=\"comment\">// 这个dep 在 value 的属性新增 删除时候会用到</span></span><br><span class=\"line\">    <span class=\"comment\">//value 如果是数组 也是通过 这里的进行 依赖收集更新的</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">dep</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>() </span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">vmCount</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"title function_\">def</span>(value, <span class=\"string\">&#x27;__ob__&#x27;</span>, <span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(value)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//这里是对数组原型对象 拦截 处理</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hasProto) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">protoAugment</span>(value, arrayMethods)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">copyAugment</span>(value, arrayMethods, arrayKeys)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">observeArray</span>(value)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">walk</span>(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  walk (<span class=\"attr\">obj</span>: <span class=\"title class_\">Object</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">defineReactive</span>(obj, keys[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  observeArray (<span class=\"attr\">items</span>: <span class=\"title class_\">Array</span>&lt;any&gt;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = items.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">observe</span>(items[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在构造函数中，会给 value（data）增加 __ob__  (当前 Observer实例 ) 属性。如果 value 是数组，会调用 observeArray 对数组进行遍历，在调用 observe 方法对每个元素进行观察。如果是对象，调用 walk 遍历 value 去调用 defineReactive 去修改属性的 get&#x2F;set。 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//defineReactive 函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">defineReactive</span> (</span><br><span class=\"line\">  <span class=\"attr\">obj</span>: <span class=\"title class_\">Object</span>,</span><br><span class=\"line\">  <span class=\"attr\">key</span>: string, <span class=\"comment\">//遍历的key</span></span><br><span class=\"line\">  <span class=\"attr\">val</span>: any,</span><br><span class=\"line\">  customSetter?: ?<span class=\"title class_\">Function</span>,</span><br><span class=\"line\">  shallow?: boolean</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> property = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(obj, key)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (property &amp;&amp; property.<span class=\"property\">configurable</span> === <span class=\"literal\">false</span>)  <span class=\"keyword\">return</span></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// cater for pre-defined getter/setters</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> getter = property &amp;&amp; property.<span class=\"property\">get</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> setter = property &amp;&amp; property.<span class=\"property\">set</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((!getter || setter) &amp;&amp; <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span> === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    val = obj[key]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//如果 key 的值是 对象 的话，对其 value 也会进行响应处理</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> childOb = !shallow &amp;&amp; <span class=\"title function_\">observe</span>(val)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//为当前 key 添加get/set</span></span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, key, &#123;</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveGetter</span> () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.<span class=\"title function_\">call</span>(obj) : val</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        dep.<span class=\"title function_\">depend</span>() <span class=\"comment\">//对当前属性 进行依赖收集</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//如果属性值是 对象 ，则对属性值本身进行依赖收集</span></span><br><span class=\"line\">          childOb.<span class=\"property\">dep</span>.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(value)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果值是数组 对数组的每个元素进行依赖收集</span></span><br><span class=\"line\">            <span class=\"title function_\">dependArray</span>(value)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveSetter</span> (newVal) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.<span class=\"title function_\">call</span>(obj) : val</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (getter &amp;&amp; !setter) <span class=\"keyword\">return</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (setter) &#123;</span><br><span class=\"line\">        setter.<span class=\"title function_\">call</span>(obj, newVal)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        val = newVal</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//对新值 进行观察处理</span></span><br><span class=\"line\">      childOb = !shallow &amp;&amp; <span class=\"title function_\">observe</span>(newVal)</span><br><span class=\"line\">      <span class=\"comment\">//通知 Watcher</span></span><br><span class=\"line\">      dep.<span class=\"title function_\">notify</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dependArray</span> (<span class=\"attr\">value</span>: <span class=\"title class_\">Array</span>&lt;any&gt;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> e, i = <span class=\"number\">0</span>, l = value.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">    e = value[i]</span><br><span class=\"line\">    e &amp;&amp; e.<span class=\"property\">__ob__</span> &amp;&amp; e.<span class=\"property\">__ob__</span>.<span class=\"property\">dep</span>.<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(e)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dependArray</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面有两个地方有存在 Dep</p>\n<ul>\n<li>一个是Observer 类 属性上有个 Dep ,这里主要是对数组（数组没有 get&#x2F;set 不能像对象属性那样）和对象本身进行依赖收集和通知<br><img src=\"/images/posts/js_vue/20200312225611.png\"><br><img src=\"/images/posts/js_vue/20200312225648.png\"></li>\n<li>一个是对属性 get&#x2F;set 处理时候的 Dep ,这个主要是对象的属性进行依赖收集和通知</li>\n</ul>\n<h3 id=\"2-Dep\"><a href=\"#2-Dep\" class=\"headerlink\" title=\"2.Dep\"></a>2.Dep</h3><p>Dep 是 Observer 与 Watcher 桥梁，也可以认为 Dep 是服务于 Observer 的订阅系统。Watcher 订阅某个 Observer 的 Dep，当 Observer 观察的数据发生变化时，通过 Dep 通知各个已经订阅的 Watcher。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"attr\">target</span>: ?<span class=\"title class_\">Watcher</span>;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: number;</span><br><span class=\"line\">  <span class=\"attr\">subs</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">Watcher</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = uid++</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span> = [] <span class=\"comment\">//Watcher实例</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//接收的参数为Watcher实例，并把Watcher实例存入记录依赖的数组中</span></span><br><span class=\"line\">  addSub (<span class=\"attr\">sub</span>: <span class=\"title class_\">Watcher</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>.<span class=\"title function_\">push</span>(sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//与addSub对应，作用是将Watcher实例从记录依赖的数组中移除</span></span><br><span class=\"line\">  removeSub (<span class=\"attr\">sub</span>: <span class=\"title class_\">Watcher</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">remove</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>, sub)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//依赖收集</span></span><br><span class=\"line\">  depend () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>) &#123; <span class=\"comment\">//存放当前Wather实例</span></span><br><span class=\"line\">      <span class=\"comment\">//将当前 Dep 存放到 Watcher（观察者） 中的依赖中</span></span><br><span class=\"line\">      <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>.<span class=\"title function_\">addDep</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//通知依赖数组中所有的watcher进行更新操作</span></span><br><span class=\"line\">  notify () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> subs = <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>.<span class=\"title function_\">slice</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = subs.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">      subs[i].<span class=\"title function_\">update</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> targetStack = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">pushTarget</span> (<span class=\"attr\">target</span>: ?<span class=\"title class_\">Watcher</span>) &#123;</span><br><span class=\"line\">  targetStack.<span class=\"title function_\">push</span>(target)</span><br><span class=\"line\">  <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">popTarget</span> () &#123;</span><br><span class=\"line\">  targetStack.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">  <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = targetStack[targetStack.<span class=\"property\">length</span> - <span class=\"number\">1</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-Watcher\"><a href=\"#3-Watcher\" class=\"headerlink\" title=\"3.Watcher\"></a>3.Watcher</h3><p>先看 Watcher 的构造函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span>(<span class=\"params\"> </span></span><br><span class=\"line\"><span class=\"params\">    vm: Component,</span></span><br><span class=\"line\"><span class=\"params\">    expOrFn: string | <span class=\"built_in\">Function</span>,</span></span><br><span class=\"line\"><span class=\"params\">    cb: <span class=\"built_in\">Function</span>,</span></span><br><span class=\"line\"><span class=\"params\">    options?: ?<span class=\"built_in\">Object</span>,</span></span><br><span class=\"line\"><span class=\"params\">    isRenderWatcher?: boolean</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> expOrFn === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = expOrFn</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = <span class=\"title function_\">parsePath</span>(expOrFn)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">getter</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = noop</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span></span><br><span class=\"line\">      ? <span class=\"literal\">undefined</span></span><br><span class=\"line\">      : <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>expOrFn，对于初始化用来渲染视图的 watcher 来说，就是 render 方法，对于 computed 来说就是表达式，对于 watch 才是 key，而 getter 方法是用来取 value 的。最后调用了 get()方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">get () &#123;</span><br><span class=\"line\">    <span class=\"comment\">//将Dep.target设置为当前watcher实例</span></span><br><span class=\"line\">    <span class=\"title function_\">pushTarget</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 执行一次get 收集依赖</span></span><br><span class=\"line\">      value = <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span>.<span class=\"title function_\">call</span>(vm, vm) </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">user</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">handleError</span>(e, vm, <span class=\"string\">`getter for watcher &quot;<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">deep</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">traverse</span>(value)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">popTarget</span>()</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">cleanupDeps</span>() <span class=\"comment\">//清楚依赖</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>假如当前 Watcher 实例中 getter 是 render，当 render 遇到模板中的  表达式的时候，就是去读取 data.xxx，这个时候就触发 data.xxx 的 get 方法，这个时候 get 中会执行 Dep.depend(),而此时 Dep.target 就是当前 watcher ，然后调用 watcher.addDep()。也就将 data.xxx 与 当前 watcher 关联起来了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//watcher 的其他方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接收参数dep(Dep实例)，让当前watcher订阅dep</span></span><br><span class=\"line\">addDep (<span class=\"attr\">dep</span>: <span class=\"title class_\">Dep</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> id = dep.<span class=\"property\">id</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span>.<span class=\"title function_\">has</span>(id)) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span>.<span class=\"title function_\">add</span>(id)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newDeps</span>.<span class=\"title function_\">push</span>(dep)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">depIds</span>.<span class=\"title function_\">has</span>(id)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//将watcher实例 也添加到 Dep实例中</span></span><br><span class=\"line\">      dep.<span class=\"title function_\">addSub</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//清楚对dep的订阅信息</span></span><br><span class=\"line\">cleanupDeps () &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//立刻运行watcher或者将watcher加入队列中</span></span><br><span class=\"line\">update () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">dirty</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">sync</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">run</span>()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">queueWatcher</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//运行watcher，调用this.get()求值，然后触发回调</span></span><br><span class=\"line\">run () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">active</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      value !== <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> || <span class=\"title function_\">isObject</span>(value) || <span class=\"variable language_\">this</span>.<span class=\"property\">deep</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> oldValue = <span class=\"variable language_\">this</span>.<span class=\"property\">value</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">user</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, value, oldValue)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">handleError</span>(e, <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, <span class=\"string\">`callback for watcher &quot;<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, value, oldValue)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用this.get()求值</span></span><br><span class=\"line\">evaluate () &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>()</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">dirty</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//遍历this.deps，让当前watcher实例订阅所有dep</span></span><br><span class=\"line\">depend () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>.<span class=\"property\">length</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>[i].<span class=\"title function_\">depend</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//去除当前watcher实例所有的订阅</span></span><br><span class=\"line\">teardown () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">active</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>.<span class=\"property\">_isBeingDestroyed</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">remove</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>.<span class=\"property\">_watchers</span>, <span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>[i].<span class=\"title function_\">removeSub</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">active</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JavaScript中的 [[prototype]]、prototype、__proto__ 关系","date":"2020-03-03T02:16:09.000Z","comments":1,"keywords":"js,原型对象,prototype,_proto,js继承机制","_content":"说到 prototype、\\_\\_proto\\_\\_ 首先就得去理解 JavaScript 语言的继承机制。在典型的面向对象的语言中，如C#，都存在类（class）的概念， 类就是对象的模板，对象就是类的实例。C# 中的 继承允许我们根据一个类来定义另一个类，这使得创建和维护应用程序变得更容易。同时也有利于重用代码和节省开发时间。在 JavaScript 是不存在 类 和 子类 概念的，全靠原型链的模式来实现继承 (后面出 class 在这基础上的语法糖)。\n\n<!--more -->\n\n这里举一个简单 C# 类和继承例子，一类 People，其中包含一个 Say 方法。另外两个类 Man 和 Woman 都继承 People 这个类，这样这两个子类都拥有了父类的 Say 方法，这是一个典型的继承。\n\n``` C# \n//C# Code\nusing System;\n\nnamespace ConsoleApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Man man = new Man();\n            man.Work();\n            man.Say(\"累死爷了\");\n\n            Woman woman = new Woman();\n            woman.Shop();\n            woman.Say(\"花钱真爽\");\n\n            Console.Read();\n        }\n    }\n\n    class People\n    {\n        public People()\n        {\n\n        }\n\n        public void Say(string text)\n        {\n            Console.WriteLine(text);\n        }\n    }\n\n    class Man : People\n    {\n        public void Work()\n        {\n            Console.WriteLine(\"工作工作.....赚钱赚钱...\");\n        }\n    }\n\n    class Woman : People\n    {\n        public void Shop()\n        {\n            Console.WriteLine(\"买买买.....\");\n        }\n    }\n\n}\n\n```\n\n# prototype 的由来 #\n\n当初 JavaScript 之父在开发 JavaScript 的时候，觉得没有必要做的很复杂，只需要做些简单操作就可以了，所以没有引入类的概念。\n在 JavaScript 中也是通过 new 生成一个对象实例的，例如在 C# 中生成一个对象实例会这样写 new People()，会调用类的构造函数。在 JavaScript 简化了这个操作，new 后面跟的不是类，而是构造函数。\n用 JavaScript 来实现上面 C# 例子\n\n``` js\nvar people = {\n    Say:function(text){\n        console.log(text)\n    } \n}\n\nfunction Man(){\n    this.Work=function(){\n        console.log(\"工作工作.....赚钱赚钱...\");\n    }\n    this.Say=people.Say;\n}\n\nfunction Woman(){\n    this.Shop=function(){\n        console.log(\"买买买.....\");\n    }\n    this.Say=people.Say;\n}\n\nvar man = new Man();\nman.Work();\nman.Say(\"累死爷了\");\n\nvar woman = new Woman();\nwoman.Shop();\nwoman.Say(\"花钱真爽\");\n\n```\n\n但是用构造函数生成实例对象，有一个缺点，那就是无法共享属性和方法。\n\n``` js\npeople.Say=function(){\n    console.log(\"...\")\n}\n \nman.Say(\"累死爷了\"); //累死爷了\nwoman.Say(\"花钱真爽\");//花钱真爽\n\nvar man2=new Man();\nman2.Say();//...\n\nman.Say=null;\nwoman.Say(\"花钱真爽\");//花钱真爽\n\n//这里即使修改了 people.Say 也不会对以生成实例有影响,修改一个也不会对另一个有影响,每个实例都是相互独立的\n```\n\n每一个实例对象，都有自己的属性和方法的副本。这不仅无法做到数据共享，也是极大的资源浪费。于是 JavaScript 之父 为了解决这个问题就在构造函数加入了个 prototype 属性。这个属性是一个对象(常称 原型对象)，把一些公用的属性和方法都放在这个对象里，一些是私有的就放在构造函数里。\n\n实例对象被创建时候，会自动引用原型对象的属性和方法，这样实例对象属性就分为两种了，一种是构造函数里私有自己的，另一种则是来着引用 原型对象。一旦原型对象属性和方法修改后，实例的对象也会跟着变化。原型对象 不仅共享了数据，也减少了对资源的占用。\n\n那么用 JS 来实现上面 C# 例子就可以这样写\n\n``` js\nvar people = {\n    Say:function(text){\n        console.log(text)\n    } \n}\n\nfunction Man(){\n    this.Work=function(){\n        console.log(\"工作工作.....赚钱赚钱...\");\n    }\n}\n\nMan.prototype = people;\n\nfunction Woman(){\n    this.Shop=function(){\n        console.log(\"买买买.....\");\n    }\n}\n\nWoman.prototype = people;\n\nvar man = new Man();\nman.Work();\nman.Say(\"累死爷了\");\n\nvar woman = new Woman();\nwoman.Shop();\nwoman.Say(\"花钱真爽\");\n\n//这个时候加入个 people 在加入个 eat 方法, man 和 woman 实例对象也是可以使用的\npeople.Eat=function(){\n     console.log(\"吃吃吃.....\");\n}\n\nman.Eat();\nwoman.Eat();\n```\n\n# prototype 和 \\_\\_proto\\_\\_ 和  [[prototype]] 关系 #\n\nJavaScript 中任意对象都有一个内置属性[[prototype]]，在 ES5 之前没有标准的方法访问这个内置属性，但是大多数浏览器都支持通过 \\_\\_proto\\_\\_ 来访问,\n\nprototype 和 \\_\\_proto\\_\\_ 关系\n\n![](/images/posts/js_prototype/proto.jpg)\n\n>JavaScript 只有一种结构：对象。每个实例对象（ object ）都有一个私有属性（称之为 \\_\\_proto\\_\\_ ）指向它的构造函数的原型对象（ prototype ）。该原型对象也有一个自己的原型对象( \\_\\_proto\\_\\_ ) ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。几乎所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例。\n\n看文字可能会有点蒙,用上面例子来举例说明下\n\n``` js\nvar people = {\n    Say:function(text){\n        console.log(text)\n    } \n}\n\nfunction Man(){}\n\nMan.prototype = people;\n\nvar man = new Man();\n\n/* man 是构造函数的原型对象是  Man.prototyp\n   所以 man.__proto__ === Man.prototype */\nconsole.log(man.__proto__ === Man.prototype && man.__proto__  === people) //true\n\n/* Man 构造函数也是对象,也有自己的 __proto__ 属性\n  而函数 Man 是由 Function 构造的 */\nconsole.log(Man.__proto__ === Function.prototype)\n\n/* Function 对象也有自己的 __proto__ 属性\n   Function 是由 Function自己实例来的 */\nconsole.log(Function.__proto__ === Function.prototype)\n\n/* Object 和  Function 同理*/\nconsole.log(Object.__proto__ === Function.prototype)\nconsole.log(Object.__proto__ === Function.__proto__)\n\n/* Function 的 原型对象 也有自己的 __proto__\n   Function 的 原型对象 是由 Object 来的*/\nconsole.log(Function.prototype.__proto__ === Object.prototype)\n\n/* Object 的 原型对象 在最顶层 所以他的 __proto__ 为 null */\nconsole.log(Object.prototype.__proto__ === null)\n```\n\n\n","source":"_posts/js_prototype.md","raw":"---\ntitle: JavaScript中的 [[prototype]]、prototype、__proto__ 关系\ndate: 2020-03-03 10:16:09\ntags: [JavaScript]\ncategories: 记录类\ncomments: true\nkeywords: js,原型对象,prototype,_proto,js继承机制\n---\n说到 prototype、\\_\\_proto\\_\\_ 首先就得去理解 JavaScript 语言的继承机制。在典型的面向对象的语言中，如C#，都存在类（class）的概念， 类就是对象的模板，对象就是类的实例。C# 中的 继承允许我们根据一个类来定义另一个类，这使得创建和维护应用程序变得更容易。同时也有利于重用代码和节省开发时间。在 JavaScript 是不存在 类 和 子类 概念的，全靠原型链的模式来实现继承 (后面出 class 在这基础上的语法糖)。\n\n<!--more -->\n\n这里举一个简单 C# 类和继承例子，一类 People，其中包含一个 Say 方法。另外两个类 Man 和 Woman 都继承 People 这个类，这样这两个子类都拥有了父类的 Say 方法，这是一个典型的继承。\n\n``` C# \n//C# Code\nusing System;\n\nnamespace ConsoleApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Man man = new Man();\n            man.Work();\n            man.Say(\"累死爷了\");\n\n            Woman woman = new Woman();\n            woman.Shop();\n            woman.Say(\"花钱真爽\");\n\n            Console.Read();\n        }\n    }\n\n    class People\n    {\n        public People()\n        {\n\n        }\n\n        public void Say(string text)\n        {\n            Console.WriteLine(text);\n        }\n    }\n\n    class Man : People\n    {\n        public void Work()\n        {\n            Console.WriteLine(\"工作工作.....赚钱赚钱...\");\n        }\n    }\n\n    class Woman : People\n    {\n        public void Shop()\n        {\n            Console.WriteLine(\"买买买.....\");\n        }\n    }\n\n}\n\n```\n\n# prototype 的由来 #\n\n当初 JavaScript 之父在开发 JavaScript 的时候，觉得没有必要做的很复杂，只需要做些简单操作就可以了，所以没有引入类的概念。\n在 JavaScript 中也是通过 new 生成一个对象实例的，例如在 C# 中生成一个对象实例会这样写 new People()，会调用类的构造函数。在 JavaScript 简化了这个操作，new 后面跟的不是类，而是构造函数。\n用 JavaScript 来实现上面 C# 例子\n\n``` js\nvar people = {\n    Say:function(text){\n        console.log(text)\n    } \n}\n\nfunction Man(){\n    this.Work=function(){\n        console.log(\"工作工作.....赚钱赚钱...\");\n    }\n    this.Say=people.Say;\n}\n\nfunction Woman(){\n    this.Shop=function(){\n        console.log(\"买买买.....\");\n    }\n    this.Say=people.Say;\n}\n\nvar man = new Man();\nman.Work();\nman.Say(\"累死爷了\");\n\nvar woman = new Woman();\nwoman.Shop();\nwoman.Say(\"花钱真爽\");\n\n```\n\n但是用构造函数生成实例对象，有一个缺点，那就是无法共享属性和方法。\n\n``` js\npeople.Say=function(){\n    console.log(\"...\")\n}\n \nman.Say(\"累死爷了\"); //累死爷了\nwoman.Say(\"花钱真爽\");//花钱真爽\n\nvar man2=new Man();\nman2.Say();//...\n\nman.Say=null;\nwoman.Say(\"花钱真爽\");//花钱真爽\n\n//这里即使修改了 people.Say 也不会对以生成实例有影响,修改一个也不会对另一个有影响,每个实例都是相互独立的\n```\n\n每一个实例对象，都有自己的属性和方法的副本。这不仅无法做到数据共享，也是极大的资源浪费。于是 JavaScript 之父 为了解决这个问题就在构造函数加入了个 prototype 属性。这个属性是一个对象(常称 原型对象)，把一些公用的属性和方法都放在这个对象里，一些是私有的就放在构造函数里。\n\n实例对象被创建时候，会自动引用原型对象的属性和方法，这样实例对象属性就分为两种了，一种是构造函数里私有自己的，另一种则是来着引用 原型对象。一旦原型对象属性和方法修改后，实例的对象也会跟着变化。原型对象 不仅共享了数据，也减少了对资源的占用。\n\n那么用 JS 来实现上面 C# 例子就可以这样写\n\n``` js\nvar people = {\n    Say:function(text){\n        console.log(text)\n    } \n}\n\nfunction Man(){\n    this.Work=function(){\n        console.log(\"工作工作.....赚钱赚钱...\");\n    }\n}\n\nMan.prototype = people;\n\nfunction Woman(){\n    this.Shop=function(){\n        console.log(\"买买买.....\");\n    }\n}\n\nWoman.prototype = people;\n\nvar man = new Man();\nman.Work();\nman.Say(\"累死爷了\");\n\nvar woman = new Woman();\nwoman.Shop();\nwoman.Say(\"花钱真爽\");\n\n//这个时候加入个 people 在加入个 eat 方法, man 和 woman 实例对象也是可以使用的\npeople.Eat=function(){\n     console.log(\"吃吃吃.....\");\n}\n\nman.Eat();\nwoman.Eat();\n```\n\n# prototype 和 \\_\\_proto\\_\\_ 和  [[prototype]] 关系 #\n\nJavaScript 中任意对象都有一个内置属性[[prototype]]，在 ES5 之前没有标准的方法访问这个内置属性，但是大多数浏览器都支持通过 \\_\\_proto\\_\\_ 来访问,\n\nprototype 和 \\_\\_proto\\_\\_ 关系\n\n![](/images/posts/js_prototype/proto.jpg)\n\n>JavaScript 只有一种结构：对象。每个实例对象（ object ）都有一个私有属性（称之为 \\_\\_proto\\_\\_ ）指向它的构造函数的原型对象（ prototype ）。该原型对象也有一个自己的原型对象( \\_\\_proto\\_\\_ ) ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。几乎所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例。\n\n看文字可能会有点蒙,用上面例子来举例说明下\n\n``` js\nvar people = {\n    Say:function(text){\n        console.log(text)\n    } \n}\n\nfunction Man(){}\n\nMan.prototype = people;\n\nvar man = new Man();\n\n/* man 是构造函数的原型对象是  Man.prototyp\n   所以 man.__proto__ === Man.prototype */\nconsole.log(man.__proto__ === Man.prototype && man.__proto__  === people) //true\n\n/* Man 构造函数也是对象,也有自己的 __proto__ 属性\n  而函数 Man 是由 Function 构造的 */\nconsole.log(Man.__proto__ === Function.prototype)\n\n/* Function 对象也有自己的 __proto__ 属性\n   Function 是由 Function自己实例来的 */\nconsole.log(Function.__proto__ === Function.prototype)\n\n/* Object 和  Function 同理*/\nconsole.log(Object.__proto__ === Function.prototype)\nconsole.log(Object.__proto__ === Function.__proto__)\n\n/* Function 的 原型对象 也有自己的 __proto__\n   Function 的 原型对象 是由 Object 来的*/\nconsole.log(Function.prototype.__proto__ === Object.prototype)\n\n/* Object 的 原型对象 在最顶层 所以他的 __proto__ 为 null */\nconsole.log(Object.prototype.__proto__ === null)\n```\n\n\n","slug":"js_prototype","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vrm001u98lg0tba593h","content":"<p>说到 prototype、__proto__ 首先就得去理解 JavaScript 语言的继承机制。在典型的面向对象的语言中，如C#，都存在类（class）的概念， 类就是对象的模板，对象就是类的实例。C# 中的 继承允许我们根据一个类来定义另一个类，这使得创建和维护应用程序变得更容易。同时也有利于重用代码和节省开发时间。在 JavaScript 是不存在 类 和 子类 概念的，全靠原型链的模式来实现继承 (后面出 class 在这基础上的语法糖)。</p>\n<span id=\"more\"></span>\n\n<p>这里举一个简单 C# 类和继承例子，一类 People，其中包含一个 Say 方法。另外两个类 Man 和 Woman 都继承 People 这个类，这样这两个子类都拥有了父类的 Say 方法，这是一个典型的继承。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//C# Code</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ConsoleApp</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Man man = <span class=\"keyword\">new</span> Man();</span><br><span class=\"line\">            man.Work();</span><br><span class=\"line\">            man.Say(<span class=\"string\">&quot;累死爷了&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Woman woman = <span class=\"keyword\">new</span> Woman();</span><br><span class=\"line\">            woman.Shop();</span><br><span class=\"line\">            woman.Say(<span class=\"string\">&quot;花钱真爽&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Console.Read();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">People</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">People</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Say</span>(<span class=\"params\"><span class=\"built_in\">string</span> text</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(text);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Man</span> : <span class=\"title\">People</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Work</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;工作工作.....赚钱赚钱...&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Woman</span> : <span class=\"title\">People</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Shop</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;买买买.....&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"prototype-的由来\"><a href=\"#prototype-的由来\" class=\"headerlink\" title=\"prototype 的由来\"></a>prototype 的由来</h1><p>当初 JavaScript 之父在开发 JavaScript 的时候，觉得没有必要做的很复杂，只需要做些简单操作就可以了，所以没有引入类的概念。<br>在 JavaScript 中也是通过 new 生成一个对象实例的，例如在 C# 中生成一个对象实例会这样写 new People()，会调用类的构造函数。在 JavaScript 简化了这个操作，new 后面跟的不是类，而是构造函数。<br>用 JavaScript 来实现上面 C# 例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> people = &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Say</span>:<span class=\"keyword\">function</span>(<span class=\"params\">text</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(text)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Man</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">Work</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;工作工作.....赚钱赚钱...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">Say</span>=people.<span class=\"property\">Say</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Woman</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">Shop</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;买买买.....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">Say</span>=people.<span class=\"property\">Say</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> <span class=\"title class_\">Man</span>();</span><br><span class=\"line\">man.<span class=\"title class_\">Work</span>();</span><br><span class=\"line\">man.<span class=\"title class_\">Say</span>(<span class=\"string\">&quot;累死爷了&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> woman = <span class=\"keyword\">new</span> <span class=\"title class_\">Woman</span>();</span><br><span class=\"line\">woman.<span class=\"title class_\">Shop</span>();</span><br><span class=\"line\">woman.<span class=\"title class_\">Say</span>(<span class=\"string\">&quot;花钱真爽&quot;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>但是用构造函数生成实例对象，有一个缺点，那就是无法共享属性和方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">people.<span class=\"property\">Say</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;...&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">man.<span class=\"title class_\">Say</span>(<span class=\"string\">&quot;累死爷了&quot;</span>); <span class=\"comment\">//累死爷了</span></span><br><span class=\"line\">woman.<span class=\"title class_\">Say</span>(<span class=\"string\">&quot;花钱真爽&quot;</span>);<span class=\"comment\">//花钱真爽</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> man2=<span class=\"keyword\">new</span> <span class=\"title class_\">Man</span>();</span><br><span class=\"line\">man2.<span class=\"title class_\">Say</span>();<span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\">man.<span class=\"property\">Say</span>=<span class=\"literal\">null</span>;</span><br><span class=\"line\">woman.<span class=\"title class_\">Say</span>(<span class=\"string\">&quot;花钱真爽&quot;</span>);<span class=\"comment\">//花钱真爽</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这里即使修改了 people.Say 也不会对以生成实例有影响,修改一个也不会对另一个有影响,每个实例都是相互独立的</span></span><br></pre></td></tr></table></figure>\n\n<p>每一个实例对象，都有自己的属性和方法的副本。这不仅无法做到数据共享，也是极大的资源浪费。于是 JavaScript 之父 为了解决这个问题就在构造函数加入了个 prototype 属性。这个属性是一个对象(常称 原型对象)，把一些公用的属性和方法都放在这个对象里，一些是私有的就放在构造函数里。</p>\n<p>实例对象被创建时候，会自动引用原型对象的属性和方法，这样实例对象属性就分为两种了，一种是构造函数里私有自己的，另一种则是来着引用 原型对象。一旦原型对象属性和方法修改后，实例的对象也会跟着变化。原型对象 不仅共享了数据，也减少了对资源的占用。</p>\n<p>那么用 JS 来实现上面 C# 例子就可以这样写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> people = &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Say</span>:<span class=\"keyword\">function</span>(<span class=\"params\">text</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(text)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Man</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">Work</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;工作工作.....赚钱赚钱...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Man</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = people;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Woman</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">Shop</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;买买买.....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Woman</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = people;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> <span class=\"title class_\">Man</span>();</span><br><span class=\"line\">man.<span class=\"title class_\">Work</span>();</span><br><span class=\"line\">man.<span class=\"title class_\">Say</span>(<span class=\"string\">&quot;累死爷了&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> woman = <span class=\"keyword\">new</span> <span class=\"title class_\">Woman</span>();</span><br><span class=\"line\">woman.<span class=\"title class_\">Shop</span>();</span><br><span class=\"line\">woman.<span class=\"title class_\">Say</span>(<span class=\"string\">&quot;花钱真爽&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这个时候加入个 people 在加入个 eat 方法, man 和 woman 实例对象也是可以使用的</span></span><br><span class=\"line\">people.<span class=\"property\">Eat</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;吃吃吃.....&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">man.<span class=\"title class_\">Eat</span>();</span><br><span class=\"line\">woman.<span class=\"title class_\">Eat</span>();</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"prototype-和-proto-和-prototype-关系\"><a href=\"#prototype-和-proto-和-prototype-关系\" class=\"headerlink\" title=\"prototype 和 __proto__ 和  [[prototype]] 关系\"></a>prototype 和 __proto__ 和  [[prototype]] 关系</h1><p>JavaScript 中任意对象都有一个内置属性[[prototype]]，在 ES5 之前没有标准的方法访问这个内置属性，但是大多数浏览器都支持通过 __proto__ 来访问,</p>\n<p>prototype 和 __proto__ 关系</p>\n<p><img src=\"/images/posts/js_prototype/proto.jpg\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<blockquote>\n<p>JavaScript 只有一种结构：对象。每个实例对象（ object ）都有一个私有属性（称之为 __proto__ ）指向它的构造函数的原型对象（ prototype ）。该原型对象也有一个自己的原型对象( __proto__ ) ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。几乎所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例。</p>\n</blockquote>\n<p>看文字可能会有点蒙,用上面例子来举例说明下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> people = &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Say</span>:<span class=\"keyword\">function</span>(<span class=\"params\">text</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(text)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Man</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Man</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = people;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> <span class=\"title class_\">Man</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* man 是构造函数的原型对象是  Man.prototyp</span></span><br><span class=\"line\"><span class=\"comment\">   所以 man.__proto__ === Man.prototype */</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(man.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Man</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> &amp;&amp; man.<span class=\"property\">__proto__</span>  === people) <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Man 构造函数也是对象,也有自己的 __proto__ 属性</span></span><br><span class=\"line\"><span class=\"comment\">  而函数 Man 是由 Function 构造的 */</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Man</span>.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Function 对象也有自己的 __proto__ 属性</span></span><br><span class=\"line\"><span class=\"comment\">   Function 是由 Function自己实例来的 */</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Function</span>.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Object 和  Function 同理*/</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Function</span>.<span class=\"property\">__proto__</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Function 的 原型对象 也有自己的 __proto__</span></span><br><span class=\"line\"><span class=\"comment\">   Function 的 原型对象 是由 Object 来的*/</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Object 的 原型对象 在最顶层 所以他的 __proto__ 为 null */</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> === <span class=\"literal\">null</span>)</span><br></pre></td></tr></table></figure>\n\n\n","excerpt":"<p>说到 prototype、__proto__ 首先就得去理解 JavaScript 语言的继承机制。在典型的面向对象的语言中，如C#，都存在类（class）的概念， 类就是对象的模板，对象就是类的实例。C# 中的 继承允许我们根据一个类来定义另一个类，这使得创建和维护应用程序变得更容易。同时也有利于重用代码和节省开发时间。在 JavaScript 是不存在 类 和 子类 概念的，全靠原型链的模式来实现继承 (后面出 class 在这基础上的语法糖)。</p>","more":"<p>这里举一个简单 C# 类和继承例子，一类 People，其中包含一个 Say 方法。另外两个类 Man 和 Woman 都继承 People 这个类，这样这两个子类都拥有了父类的 Say 方法，这是一个典型的继承。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//C# Code</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ConsoleApp</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Man man = <span class=\"keyword\">new</span> Man();</span><br><span class=\"line\">            man.Work();</span><br><span class=\"line\">            man.Say(<span class=\"string\">&quot;累死爷了&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Woman woman = <span class=\"keyword\">new</span> Woman();</span><br><span class=\"line\">            woman.Shop();</span><br><span class=\"line\">            woman.Say(<span class=\"string\">&quot;花钱真爽&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            Console.Read();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">People</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">People</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Say</span>(<span class=\"params\"><span class=\"built_in\">string</span> text</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(text);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Man</span> : <span class=\"title\">People</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Work</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;工作工作.....赚钱赚钱...&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Woman</span> : <span class=\"title\">People</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Shop</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;买买买.....&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"prototype-的由来\"><a href=\"#prototype-的由来\" class=\"headerlink\" title=\"prototype 的由来\"></a>prototype 的由来</h1><p>当初 JavaScript 之父在开发 JavaScript 的时候，觉得没有必要做的很复杂，只需要做些简单操作就可以了，所以没有引入类的概念。<br>在 JavaScript 中也是通过 new 生成一个对象实例的，例如在 C# 中生成一个对象实例会这样写 new People()，会调用类的构造函数。在 JavaScript 简化了这个操作，new 后面跟的不是类，而是构造函数。<br>用 JavaScript 来实现上面 C# 例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> people = &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Say</span>:<span class=\"keyword\">function</span>(<span class=\"params\">text</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(text)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Man</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">Work</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;工作工作.....赚钱赚钱...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">Say</span>=people.<span class=\"property\">Say</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Woman</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">Shop</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;买买买.....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">Say</span>=people.<span class=\"property\">Say</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> <span class=\"title class_\">Man</span>();</span><br><span class=\"line\">man.<span class=\"title class_\">Work</span>();</span><br><span class=\"line\">man.<span class=\"title class_\">Say</span>(<span class=\"string\">&quot;累死爷了&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> woman = <span class=\"keyword\">new</span> <span class=\"title class_\">Woman</span>();</span><br><span class=\"line\">woman.<span class=\"title class_\">Shop</span>();</span><br><span class=\"line\">woman.<span class=\"title class_\">Say</span>(<span class=\"string\">&quot;花钱真爽&quot;</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>但是用构造函数生成实例对象，有一个缺点，那就是无法共享属性和方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">people.<span class=\"property\">Say</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;...&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">man.<span class=\"title class_\">Say</span>(<span class=\"string\">&quot;累死爷了&quot;</span>); <span class=\"comment\">//累死爷了</span></span><br><span class=\"line\">woman.<span class=\"title class_\">Say</span>(<span class=\"string\">&quot;花钱真爽&quot;</span>);<span class=\"comment\">//花钱真爽</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> man2=<span class=\"keyword\">new</span> <span class=\"title class_\">Man</span>();</span><br><span class=\"line\">man2.<span class=\"title class_\">Say</span>();<span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\">man.<span class=\"property\">Say</span>=<span class=\"literal\">null</span>;</span><br><span class=\"line\">woman.<span class=\"title class_\">Say</span>(<span class=\"string\">&quot;花钱真爽&quot;</span>);<span class=\"comment\">//花钱真爽</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这里即使修改了 people.Say 也不会对以生成实例有影响,修改一个也不会对另一个有影响,每个实例都是相互独立的</span></span><br></pre></td></tr></table></figure>\n\n<p>每一个实例对象，都有自己的属性和方法的副本。这不仅无法做到数据共享，也是极大的资源浪费。于是 JavaScript 之父 为了解决这个问题就在构造函数加入了个 prototype 属性。这个属性是一个对象(常称 原型对象)，把一些公用的属性和方法都放在这个对象里，一些是私有的就放在构造函数里。</p>\n<p>实例对象被创建时候，会自动引用原型对象的属性和方法，这样实例对象属性就分为两种了，一种是构造函数里私有自己的，另一种则是来着引用 原型对象。一旦原型对象属性和方法修改后，实例的对象也会跟着变化。原型对象 不仅共享了数据，也减少了对资源的占用。</p>\n<p>那么用 JS 来实现上面 C# 例子就可以这样写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> people = &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Say</span>:<span class=\"keyword\">function</span>(<span class=\"params\">text</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(text)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Man</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">Work</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;工作工作.....赚钱赚钱...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Man</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = people;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Woman</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">Shop</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;买买买.....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Woman</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = people;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> <span class=\"title class_\">Man</span>();</span><br><span class=\"line\">man.<span class=\"title class_\">Work</span>();</span><br><span class=\"line\">man.<span class=\"title class_\">Say</span>(<span class=\"string\">&quot;累死爷了&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> woman = <span class=\"keyword\">new</span> <span class=\"title class_\">Woman</span>();</span><br><span class=\"line\">woman.<span class=\"title class_\">Shop</span>();</span><br><span class=\"line\">woman.<span class=\"title class_\">Say</span>(<span class=\"string\">&quot;花钱真爽&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这个时候加入个 people 在加入个 eat 方法, man 和 woman 实例对象也是可以使用的</span></span><br><span class=\"line\">people.<span class=\"property\">Eat</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;吃吃吃.....&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">man.<span class=\"title class_\">Eat</span>();</span><br><span class=\"line\">woman.<span class=\"title class_\">Eat</span>();</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"prototype-和-proto-和-prototype-关系\"><a href=\"#prototype-和-proto-和-prototype-关系\" class=\"headerlink\" title=\"prototype 和 __proto__ 和  [[prototype]] 关系\"></a>prototype 和 __proto__ 和  [[prototype]] 关系</h1><p>JavaScript 中任意对象都有一个内置属性[[prototype]]，在 ES5 之前没有标准的方法访问这个内置属性，但是大多数浏览器都支持通过 __proto__ 来访问,</p>\n<p>prototype 和 __proto__ 关系</p>\n<p><img src=\"/images/posts/js_prototype/proto.jpg\"></p>\n<blockquote>\n<p>JavaScript 只有一种结构：对象。每个实例对象（ object ）都有一个私有属性（称之为 __proto__ ）指向它的构造函数的原型对象（ prototype ）。该原型对象也有一个自己的原型对象( __proto__ ) ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。几乎所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例。</p>\n</blockquote>\n<p>看文字可能会有点蒙,用上面例子来举例说明下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> people = &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Say</span>:<span class=\"keyword\">function</span>(<span class=\"params\">text</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(text)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Man</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Man</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = people;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> <span class=\"title class_\">Man</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* man 是构造函数的原型对象是  Man.prototyp</span></span><br><span class=\"line\"><span class=\"comment\">   所以 man.__proto__ === Man.prototype */</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(man.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Man</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> &amp;&amp; man.<span class=\"property\">__proto__</span>  === people) <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Man 构造函数也是对象,也有自己的 __proto__ 属性</span></span><br><span class=\"line\"><span class=\"comment\">  而函数 Man 是由 Function 构造的 */</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Man</span>.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Function 对象也有自己的 __proto__ 属性</span></span><br><span class=\"line\"><span class=\"comment\">   Function 是由 Function自己实例来的 */</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Function</span>.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Object 和  Function 同理*/</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Function</span>.<span class=\"property\">__proto__</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Function 的 原型对象 也有自己的 __proto__</span></span><br><span class=\"line\"><span class=\"comment\">   Function 的 原型对象 是由 Object 来的*/</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Object 的 原型对象 在最顶层 所以他的 __proto__ 为 null */</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> === <span class=\"literal\">null</span>)</span><br></pre></td></tr></table></figure>"},{"title":"深入理解 JavaScript 事件（ 第1章 ）","date":"2019-12-28T02:16:09.000Z","comments":1,"_content":"\n事件！事件到底是怎么工作的？JavaScrip t出现了多久，对 JavaScript 异步事件模型就迷惘了多久。迷惘导致 bug，bug 导致愤怒，然后尤达大师就会教我们如何如何......不过本质上，从概念上看，JavaScript事件模型既优雅又实用。一旦大家接受了这种语言的单线程设计，就会觉得 JavaScript 事件模型更像是一种功能，而不是一种局限。它意味着我们的代码是不可中断的，也意味着调度的事件会整整齐齐排好队，有条不紊地运行。本章将介绍JavaScript的异步机制，并破除一些常见的误解。我们会看到setTimeout 真正做了些什么。接着会讨论回调中抛出错误的处理。最后会奠定本书的主旨：为了清晰和可维护性，努力组织异步代码。\n <!-- more -->\n\n## 事件的调度 ##\n如果想让 JavaScript 中的某段代码将来再运行，可以将它放在回调中。回调就是一种普通函数，只不过它是传给像 setTimeout 这样的函数，或者绑定为像 document.onready 这样的属性。运行回调时，我们称已触发某事件（譬如延时结束或页面加载完毕）。当然，可怕的总是那些细节，哪怕是像 setTimeout 这样看起来很简单的东西。对 setTimeout 的描述通常像这样：\n\n> 给定一个回调及n毫秒的延迟，setTimeout就会在n毫秒后运行该回调。\n\n但是，正如我们将在这一节乃至这一章里看到的，以上描述存在严重缺陷。大多数情况下，该描述只能算接近正确，而在其他情况下则完全是谬误。要想真正理解 setTimeout，必须先大体理解 JavaScript 事件模型。\n\n### 现在还是将来运行 ###\n\n在探究setTimeout之前，先来看一个简单的例子。该情形常常会迷惑JavaScript新手，特别是那些刚刚从Java和Ruby等多线程语言迁移过来的新手\n\n``` javascript\n    for (var i = 1; i <= 3; i++) {   \n        setTimeout(function(){ \n            console.log(i); \n        }, 0); \n    };\n```\n\n4 4 4 \n\n大多数刚接触JavaScript语言的人都会认为以上循环会输出1，2，3，或者重复输出这3个数字，因为这里的3次延时都抢着要第一个触发（每次暂停都调度为0毫秒后到时）。\n\n要理解为什么输出是4，4，4，需要知道以下3件事。\n\n> 1: 这里只有一个名为i的变量，其作用域由声明语句var i定义（该声明语句在不经意间让i的作用域不是循环内部，而是扩散至蕴含循环的那个最内侧函数）。\n> 2: 循环结束后，i===4一直递增，直到不再满足条件i<=3为止。\n> 3: JavaScript事件处理器在线程空闲之前不会运行。\n\n\n前两条还属于JavaScript 101的范畴，但第三个更像是一个“惊喜”。一开始使用JavaScript的时候，我也不太相信会这样。Java令我担心自己的代码随时会被中断。上百万种潜在的边界情况让我焦虑万分，我一直在想：“要是在这两行代码之间发生了什么稀奇古怪的事，会怎么样呢？”然后，终于有一天，我再也没有这样的担心了......\n\n### 线程的阻塞 ###\n下面这段代码打破了我对JavaScript事件的成见。\n\n``` javascript\n//EventModel/loopBlockingTimeout.js \nvar start = new Date; \nsetTimeout(function(){ \n     var end = new Date;  \n    console.log('Time elapsed:', end - start, 'ms');\n}, 500);\n\nwhile (new Date - start < 1000) {\n\n};\n```\n\n按照多线程的思维定势，我会预计500毫秒后计时函数就会运行。不过这要求中断欲持续整整一秒钟的循环。如果运行代码，会得到类似这样的结果：\n\nTime elapsed: 1002ms\n\n大家得到的数字可能会稍有不同，这是因为setTimeout和setIn- terval一样，  其计时精度要比我们的期望值差很多（请参阅1.2.2节）。不过，这个数字肯定至少是1000，因为setTimeout回调在while循环结束运行之前不可能被触发。\n\n那么，如果setTimeout没有使用另一个线程，那它到底在做什么呢？\n\n### 队列 ###\n调用setTimeout的时候，会有一个延时事件排入队列。然后setTimeout调用之后的那行代码运行，接着是再下一行代码，直到再也没有任何代码。这时JavaScript虚拟机才会问：“队列里都有谁啊？”\n\n如果队列中至少有一个事件适合于“触发”（就像1000毫秒之前设定好的那个为期500毫秒的延时事件），则虚拟机会挑选一个事件，并调用此事件的处理器（譬如传给setTimeout的那个函数）。事件处理器返回后，我们又回到队列处。\n\n输入事件的工作方式完全一样：用户单击一个已附加有单击事件处理器的DOM（Document Object Model，文档对象模型）元素时，会有一个单击事件排入队列。但是，该单击事件处理器要等到当前所有正在运行的代码均已结束后（可能还要等其他此前已排队的事件也依次结束）才会执行。因此，使用JavaScript的那些网页一不小心就会变得毫无反应。你可能听过事件循环这个术语，它是用于描述队列工作方式的。所谓事件循环，就像代码从一个循环中不断取出而运行一样：\n\n``` javascript\nrunYourScript();\nwhile (atLeastOneEventIsQueued) { \n       fireNextQueuedEvent(); \n};\n```\n\n这隐含着一个意思，即触发的每个事件都会位于堆栈轨迹的底部。关于这一点，1.4节会进一步阐述。\n\n事件的易调度性是JavaScript语言最大的特色之一。像setTimeout这样的异步函数只是简单地做延迟执行，而不是孵化新的线程。JavaScript代码永远不会被中断，这是因为代码在运行期间只需要排队事件即可，而这些事件在代码运行结束之前不会被触发。\n\n下一节将更细致地考查异步JavaScript代码的构造块。\n\n## 异步函数的类型 ##\n\n每一种JavaScript环境都有自己的异步函数集。有些函数，如setTimeout和setInterval，是各种JavaScript环境普遍都有的。另一些函数则专属于某些浏览器或某几种服务器端框架。JavaScript环境提供的异步函数通常可以分为两大类：I/O函数和计时函数。如果想在应用中定义复杂的异步行为，就要使用这两类异步函数作为基本的构造块。\n\n### 异步的I/O函数\n\n创造Node.js，并不是为了人们能在服务器上运行JavaScript，仅仅是因为Ryan Dahl想要一个建立在某高级语言之上的事件驱动型服务器框架。JavaScript碰巧就是适合干这个的语言。为什么？因为JavaScript语言可以完美地实现非阻塞式I/O。\n\n在其他语言中，一不小心就会“阻塞”应用（通常是运行循环）直到完成I/O请求为止。而在JavaScript中，这种阻塞方式几乎沦为无稽之谈。类似如下的循环将永远运行下去，不可能停下来。\n\n``` js\nvar ajaxRequest = new XMLHttpRequest; \najaxRequest.open('GET', url); \najaxRequest.send(null); \nwhile (ajaxRequest.readyState === XMLHttpRequest.UNSENT) {  \n     // readyState在循环返回之前不会有更改。\n}; \n```\n\n相反，我们需要附加一个事件处理器，随即返回事件队列。\n\n``` js\nvar ajaxRequest = new XMLHttpRequest; \najaxRequest.open('GET', url);\najaxRequest.send(null); \najaxRequest.onreadystatechange = function() {  \n    // ... \n};\n```\n\n就是这么回事。不论是在等待用户的按键行为，还是在等待远程服务器的批量数据，所需要做的就是定义一个回调，除非JavaScript环境提供的某个同步I/O函数已经替我们完成了阻塞。\n\n在浏览器端，Ajax方法有一个可设置为false的async选项（但永远、永远别这么做），这会挂起整个浏览器窗格直到收到应答为止。在Node.js中，同步的API方法在名称上会有明确的标示，譬如fs.readFileSync。编写短小的脚本时，这些同步方法会很方便。但是，如果所编写的应用需要处理并行的多个请求或多项操作，则应该避免使用它们。可在今天，还有哪个应用不是这样的呢？\n\n有些I/O函数既有同步效应，也有异步效应。举例来说，在现代浏览器中操纵DOM对象时，从脚本角度看，更改是即时生效的，但从视效角度看，在返回事件队列之前不会渲染这些DOM对象更改。这可以防止DOM对象被渲染成不一致的状态。\n\n>console.log是异步的吗？\n\nWebKit的console.log由于表现出异步行为而让很多开发者惊诧不已。在Chrome或Safari中，以下这段代码会在控制台记录{foo:bar}。\n\n``` js\nvar obj = {};    \nconsole.log(obj);    \nobj.foo = 'bar';\n```\n\n怎么会这样？We b K i t的console.log并没有立即拍摄对象快照，相反，它只存储了一个指向对象的引用，然后在代码返回事件队列时才去拍摄快照。Node的console.log是另一回事，它是严格同步的，因此同样的代码输出的却为{}。\n\nJavaScript采用了非阻塞式I/O，这对新手来说是最大的一个障碍，但这同样也是该语言的核心优势之一。有了非阻塞式I/O，就能自然而然地写出高效的基于事件的代码。\n\n### 异步的计时函数 ###\n\n我们已经看到，异步函数非常适合用于I/O操作，但有些时候，我们仅仅是因为需要异步而想要异步性。换句话说，我们想让一个函数在将来某个时刻再运行——这样的函数可能是为了作动画或模拟。基于时间的事件涉及两个著名的函数，即setTimeout与setInterval。遗憾的是，这两个著名的计时器函数都有自己的一些缺陷。正如我们在1.1.2节中看到的，其中有个缺陷是无法弥补的：当同一个JavaScript进程正运行着代码时，任何JavaScript计时函数都无法使其他代码运行起来。但是，即便容忍了这一局限性，setTimeout及setInterval的不确定性也会令人犯怵。下面是一个示例。\n\n``` js\nvar fireCount = 0; \nvar start = new Date; \nvar timer = setInterval(function() {\n     if (new Date-start > 1000) { \n            clearInterval(timer);     \n            console.log(fireCount);   \n            return;   \n    }   \n    fireCount++; \n}, 0);\n```\n\n如果使用setInterval调度事件且延迟设定为0毫秒，则会尽可能频繁地运行此事件，对吗？那么，在运行于高速英特尔i7处理器之上的现代浏览器中，此事件的触发频率到底如何呢？\n\n大约为200次/秒。这是Chrome、Safari和Firefox等浏览器的平均值。在Node环境下，此事件的触发频率大约能达到1000次/秒。（若使用setTimeout来调度事件，重复这些实验也会得到类似的结果。）作为对比，如果将setInterval替换成简单的while循环，则在Chrome中此事件的触发频率将达到400万次/秒，而在Node中会达到500万次/秒\n\n这是怎么回事？最后我们发现，setTimeout和setInterval就是想设计成慢吞吞的！事实上，HTML规范（这是所有主要浏览器都遵守的规范）推行的延时/时隔的最小值就是4毫秒！\n\n那么，如果需要更细粒度的计时，该怎么办呢？有些运行时环境提供了备选方案。\n\n>1: 在Node中，process.nextTick允许将事件调度成尽可能快地触发。对于笔者的系统，process.nextTick事件的触发频率可以超过10万次/秒。\n>2: 一些现代浏览器（含IE9+）带有一个requestAnimationFrame函数。此函数有两个目标：一方面，它允许以60+帧/秒的速度运行JavaScript动画；另一方面，它又避免后台选项卡运行这些动画，从而节约CPU周期。在最新版的Chrome浏览器中，甚至能实现亚毫秒级的精度\n\n尽管这些计时函数是异步JavaScript混饭吃的家伙什儿，但永远不要忘记，setTimeout和setInterval就是些不精确的计时工具。在Node中，如果只是想产生一个短时延迟，请使用process.nextTick。在浏览器端，请尝试使用垫片技术（shim）③：在支持requestAnimationFrame的浏览器中，推荐使用requestAnimationFrame；在不支持requestAnimationFrame的浏览器中，则退而使用setTimeout。\n\n到这里，关于JavaScript基本异步函数的简要概览就结束了。但怎样才能知道一个函数到底何时异步呢？下一节中，我们在亲自编写异步函数的同时再思考这个问题\n\n## 异步函数的编写 ##\n\nJavaScript中的每个异步函数都构建在其他某个或某些异步函数之上。凡是异步函数，从上到下（一直到原生代码）都是异步的！\n\n反之亦然：任何函数只要使用了异步的函数，就必须以异步的方式给出其操作结果。正如我们在1.1.2节学到的，JavaScript并没有提供一种机制以阻止函数在其异步操作结束之前返回。事实上，除非函数返回，否则不会触发任何异步事件。\n\n本节将考察异步函数设计的一些常见模式。我们将看到有些函数如反复无常的小人，非得等到特定时候才下决心成为异步的。不过，我们先来精确地定义异步函数。\n\n### 何时称函数为异步的 ###\n\n异步函数这个术语有点名不副实：调用一个函数时，程序只在该函数返回之后才能继续。JavaScript写手如果称一个函数为“异步的”，其意思是这个函数会导致将来再运行另一个函数，后者取自于事件队列（若后面这个函数是作为参数传递给前者的，则称其为回调函数，简称为回调）  。于是，一个取用回调的异步函数永远都能通过以下测试\n\n``` js\nvar functionHasReturned = false; \nasyncFunction(function() {  \n     console.assert(functionHasReturned); \n}); \nfunctionHasReturned = true;\n```\n\n异步函数还涉及另一个术语，即非阻塞。非阻塞这个词强调了异步函数的高速度：异步MySQL数据库驱动程序做一个查询可能要花上一小时，但负责发送查询请求的那个函数却能以微秒级速度返回。这对于那些需要快速处理海量请求的网站服务器来说，绝对是个福音。\n\n通常，那些取用回调的函数都会将其作为自己的最后一个参数。（可惜的是，老资格的setTimeout和setInterval都是这一约定的特例。）不过，有些异步函数也会间接取用回调，它们会返回Promise对象或使用PubSub模式。本书稍后就会介绍这些异步设计模式。\n\n遗憾的是，要想确认某个函数异步与否，唯一的方法就是审查其源代码。有些同步函数却拥有看起来像是异步的API，这或者是因为它们将来可能会变成异步的，又或者是因为回调这种形式能方便地返回多个参数。一旦存疑，请别指望函数就是异步的。\n\n### 间或异步的函数 ###\n\n有些函数某些时候是异步的，但其他时候却不然。举个例子，jQuery的同名函数（通常记作$）可用于延迟函数直至DOM已经结束加载。但是，若DOM早已结束了加载，则不存在任何延迟，$的回调将会立即触发。\n\n不注意的话，这种行为的不可预知性会带来很多麻烦。我曾经看到也犯过这样一个错误，即假定$会在已加载本页面其他脚本之后再运行一个函数。\n\n``` js\n// application.js \n$(function () {\n    utils.log('Ready');\n});\n\n// utils.js \nwindow.utils = {\n    log: function () {\n        if (window.console)\n            console.log.apply(console, arguments);\n    }\n};\n\n<script src ＝\"application.js\" ></script >\n<script src ＝\"util.js\" ></script >\n```\n这段代码运行得很好，但前提是浏览器并未从缓存中加载页面（这会导致DOM早在脚本运行之前就已加载就绪）。如果出现这种情况，传递给$的回调就会在设置utils.log之前运行，从而导致一个错误。（为了避免这种情况，应该采用一种更现代的管理客户端依赖性的方法。请参阅第6章。）\n\n下面来看另一个例子。\n\n### 缓存型异步函数 ###\n间或异步的函数有一个常见变种是可缓存结果的异步请求类函数。举例来说，假设正在编写一个基于浏览器的计算器，它使用了网页Wo r k e r对象以单独开一个线程来进行计算。（第5章将介绍网页Worker对象的API。）主脚本看起来像这样：\n\n``` js\nvar calculationCache = {},\n    calculationCallbacks = {},\n    mathWorker = new Worker('calculator.js');\n\nmathWorker.addEventListener('message', function(e) { \n    var message = e.data;   \n    calculationCache[message.formula] = message.result;   \n    calculationCallbacks[message.formula](message.result); \n}); \n\nfunction runCalculation(formula, callback) { \n    if (formula in calculationCache) { \n        return callback(calculationCache[formula]);   \n    };  \n    \n    if (formula in calculationCallbacks) {  \n        return setTimeout(function() {       \n            runCalculation(formula, callback);    \n        }, 0);   \n    };   \n\n    mathWorker.postMessage(formula);   \n    calculationCallbacks[formula] = callback; \n} \n\n```\n\n在这里，当结果已经缓存时，runCalculation函数是同步的，否则就是异步的。\n存在3种可能的情景。\n\n1: 公式已经计算完成，于是结果位于calculationCache中。这种情况下，runCalculation是同步的。\n2: 公式已经发送给Worker对象，但尚未收到结果。这种情况下，runCalculation设定了一个延时以便再次调用自身；重复这一过程直到结果位于calculationCache中为止。\n3: 公式尚未发送给Worker对象。这种情况下，将会从Worker对象的'message'事件监听器激活回调。\n\n请注意，在第2种和第3种情景中，我们按照两种不同的方式来等待任务的完成。这个例子写成这样，就是为了演示依据哪几种常见方式来等待某些东西发生改变（如缓存型计算公式的值）。是不是应该倾向于其中某种方式呢？我们接着往下看。\n\n### 异步递归与回调存储 ###\n\n在runCalculation函数中，为了等待Worker对象完成自己的工作，或者通过延时而重复相同的函数调用（即异步递归），或者简单地存储回调结果。\n\n哪种方式更好呢？乍一看，只使用异步递归是最简单的，因为这里不再需要calculationCallbacks对象。出于这个目的，JavaScript新手常常会使用setTimeout，因为它很像线程型语言的风格。此程序的Java版本可能会有这样一个循环：\n\n``` js\nwhile (!calculationCache.get(formula)) {\n     Thread.sleep(0); \n}; \n```\n\n但是，延时并不是免费的午餐。大量延时的话，会造成巨大的计算荷载。异步递归有一点很可怕，即在等待任务完成期间，可触发之延时的次数是不受限的！此外，异步递归还毫无必要地复杂化了应用程序的事件结构。基于这些原因，应将异步递归视作一种“反模式”的方式。\n\n在这个计算器例子中，为了避免异步递归，可以为每个公式存储一个回调数组。\n\n```js\nvar calculationCache = {},     \n    calculationCallbacks = {},     \n    mathWorker = new Worker('calculator.js'); \n\nmathWorker.addEventListener('message', function(e) { \n    var message = e.data;   \n    calculationCache[message.formula] = message.result;   \n    calculationCallbacks[message.formula].forEach(function(callback) {     \n        callback(message.result);   \n    }); \n}); \n\nfunction runCalculation(formula, callback) {  \n    if (formula in calculationCache) {\n         return callback(calculationCache[formula]);   \n    }; \n\n    if (formula in calculationCallbacks) { \n        return calculationCallbacks[formula].push(callback);   \n    };   \n\n    mathWorker.postMessage(formula);   \n    calculationCallbacks[formula] = [callback]; \n} \n```\n\n没有了延时，我们的代码要直观得多，也高效得多。\n\n总的来说，请避免异步递归。仅当所采用的库提供了异步功能但没有提供任何形式的回调机制时，异步递归才有必要。如果真的遇到这种情况，要做的第一件事应该是为该库写一个补丁。或者，干脆找一个更好的库。\n\n### 返值与回调的混搭 ###\n\n在以上两种runCalculation实现中，有时会用到返值技术。这是出于简洁的目的而随意作出的选择。下面这行代码\n\n``` js \nreturn callback(calculationCache[formula]);  \n```\n\n很容易即可改写成\n\n``` js \ncallback(calculationCache[formula]); \nreturn; \n```\n\n这是因为并没有打算使用这个返值。这是JavaScript的一种普遍做法，而且通常无害。\n\n不过，有些函数既返回有用的值，又要取用回调。这类情况下，切记回调有可能被同步调用（返值之前），也有可能被异步调用（返值之后）。永远不要定义一个潜在同步而返值却有可能用于回调的函数。举个例子，下面这个负责打开WebSocket连接以连至给定服务器的函数（使用缓存技术以确保每个服务器只有一个连接）就违反了上述规则。\n\n``` js\nvar webSocketCache = {}; \nfunction openWebSocket(serverAddress, callback) { \n    var socket; \n    if (serverAddress in webSocketCache) {     \n        socket = webSocketCache[serverAddress]; \n        if (socket.readyState === WebSocket.OPEN) {       \n            callback();     \n        } else {       \n            socket.onopen = _.compose(callback, socket.onopen);    \n        };   \n    } else {     \n        socket = new WebSocket(serverAddress);     \n        webSocketCache[serverAddress] = socket;\n        socket.onopen = callback;   \n    };  \n\n    return socket; \n}; \n```\n\n（这段代码依赖于Underscore.js库。_.compose定义的这个新函数既运行了callback，又运行了初始的socket.onopen回调。）这段代码的问题在于，如果套接字已经缓存且打开，则会在函数返值之前就运行回调，这会使以下代码崩溃。\n\n```js\nvar socket = openWebSocket(url, function() {   \n    socket.send('Hello, server!'); \n});\n```\n\n怎么解决呢？将回调封装在setTimeout中即可。\n\n```js\nif (socket.readyState === WebSocket.OPEN) {   \n    setTimeout(callback, 0);\n } else {  \n     // ... \n}\n```\n\n这里使用延时会让人感觉是在东拼西凑，但这总比API自相矛盾要好得多。\n\n在本节中，我们看到了一些编写异步函数的最佳实践。请勿依赖那些看似始终异步的函数，除非已经阅读其源代码。请避免使用计时器方法来等待某个会变化的东西。如果同一个函数既返值又运行回调，则请确保回调在返值之后才运行。\n\n一次消化这些信息确实太多了一点，不过，编写好的异步函数确实是写出优秀JavaScript代码的关键所在。\n\n## 异步错误的处理 ##\n\n像很多时髦的语言一样，JavaScript也允许抛出异常，随后再用一个try/catch语句块捕获。如果抛出的异常未被捕获，大多数JavaScript环境都会提供一个有用的堆栈轨迹。举个例子，下面这段代码由于'{'为无效JSON对象而抛出异常。\n\n```js\n//EventModel/stackTrace.js \nfunction JSONToObject(jsonStr) { \n    return JSON.parse(jsonStr);\n} \nvar obj = JSONToObject('{');  \n\nSyntaxError: Unexpected end of input     \n    at Object.parse (native)     \n    at JSONToObject (/AsyncJS/stackTrace.js:2:15)     \n    at Object.<anonymous> (/AsyncJS/stackTrace.js:4:11) \n```\n\n堆栈轨迹不仅告诉我们哪里抛出了错误，而且说明了最初出错的地方：第4行代码。遗憾的是，自顶向下地跟踪异步错误起源并不都这么直截了当。在本节中，我们会看到为什么throw很少用作回调内错误处理的正确工具，还会了解如何设计异步API以绕开这一局限。\n\n### 回调内抛出的错误 ###\n\n如果从异步回调中抛出错误，会发生什么事？让我们先来做个测试。\n\n```js\n//EventModel/nestedErrors.js \nsetTimeout(function A() {   \n    setTimeout(function B() { \n        setTimeout(function C() { \n            throw new Error('Something terrible has happened!');     \n        }, 0);   \n    }, 0); \n}, 0); \n```\n\n上述应用的结果是一条极其简短的堆栈轨迹。\n\n```\nError: Something terrible has happened!     \n    at Timer.C (/AsyncJS/nestedErrors.js:4:13) \n```\n\n等等，A和B发生了什么事？为什么它们没有出现在堆栈轨迹中？这是因为运行C的时候，A和B并不在内存堆栈里。这3个函数都是从事件队列直接运行的。\n\n基于同样的理由，利用try/catch语句块并不能捕获从异步回调中抛出的错误。下面进行演示。\n\n```js\ntry {   \n    setTimeout(function() {\n         throw new Error('Catch me if you can!');   \n    }, 0); \n} catch (e) {  \n    console.error(e);\n} \n```\n\n看到这里的问题了吗？这里的try/catch语句块只捕获setTimeout函数自身内部发生的那些错误。因为setTimeout异步地运行其回调，所以即使延时设置为0，回调抛出的错误也会直接流向应用程序的未捕获异常处理器（请参阅1.4.2节）\n\n总的来说，取用异步回调的函数即使包装上try/catch语句块，也只是无用之举。（特例是，该异步函数确实是在同步地做某些事且容易出错。例如，Node的fs.watch(file,callback)就是这样一个函数，它在目标文件不存在时会抛出一个错误。）正因为此，Node.js中的回调几乎总是接受一个错误作为其首个参数，这样就允许回调自己来决定如何处理这个错误。举个例子，下面这个Node应用尝试异步地读取一个文件，还负责记录下任何错误（如“文件不存在”）。\n\n```js\n//EventModel/readFile.js \nvar fs = require('fs'); \nfs.readFile('fhgwgdz.txt', function(err, data) { \n    if (err) { \n        return console.error(err);   \n    };   \n    console.log(data.toString('utf8')); \n}); \n```\n\n客户端JavaScript库的一致性要稍微差些，不过最常见的模式是，针对成败这两种情形各规定一个单独的回调。jQuery的Ajax方法就遵循了这个模式。\n\n```js\n$.get('/data', {  \n     success: successHandler,   \n     failure: failureHandler }); \n```\n不管API形态像什么，始终要记住的是，只能在回调内部处理源于回调的异步错误。异步尤达大师会说：“做，或者不做，没有试试看一说。”\n\n### 未捕获异常的处理 ###\n如果是从回调中抛出异常的，则由那个调用了回调的人负责捕获该异常。但如果异常从未被捕获，又会怎么样？这时，不同的JavaScript图环境有着不同的游戏规则......\n\n1.在浏览器环境中现代浏览器会在开发人员控制台显示那些未捕获的异常，接着返回事件队列。要想修改这种行为，可以给window.onerror附加一个处理器。如果windows.onerror处理器返回true，则能阻止浏览器的默认错误处理行为。\n\n```js\nwindow.onerror = function(err) { \n    return true;  \n    //彻底忽略所有错误\n}; \n```\n\n在成品应用中，会考虑某种JavaScript错误处理服务，譬如Errorception①。Errorception提供了一个现成的windows.onerror处理器，它向应用服务器报告所有未捕获的异常，接着应用服务器发送消息通知我们。\n\n2.在Node.js环境中在Node环境中，window.onerror的类似物就是process对象的uncaughtException事件。正常情况下，Node应用会因未捕获的异常而立即退出。但只要至少还有一个uncaughtException事件处理器，Node应用就会直接返回事件队列。\n\n```js\nprocess.on('uncaughtException', function(err) {   \n    console.error(err);  \n    //避免了关停的命运！\n}); \n```\n\n但是，自Node  0.8.4起，uncaughtException事件就被废弃了。据其文档所言，对异常处理而言，uncaughtException是一种非常粗暴的机制，它在将来可能会被放弃......\n\n>请勿使用uncaughtException，而应使用Domain对象。Domain对象又是什么？你可能会这样问。\n\nDomain对象是事件化对象（第2章会详细讨论），它将throw转化为'error'事件。下面是一个例子。\n\n```js\n//EventModel/domainThrow.js \nvar myDomain = require('domain').create();\nmyDomain.run(function () {\n    setTimeout(function () {\n        throw new Error('Listen to me!')\n    }, 50);\n});\nmyDomain.on('error', function (err) {\n    console.log('Error ignored!');\n}); \n```\n\n源于延时事件的throw只是简单地触发了Domain对象的错误处理器。 \nError ignored!   \n很奇妙，是不是？Domain对象让throw语句生动了很多。遗憾的是，仅在Node  0.8+环境中才能使用Domain对象；在我写作本书时，Domain对象仍被视作试验性的特性。更多信息请参阅Node文档。②不管在浏览器端还是服务器端，全局的异常处理器都应被视作最后一根救命稻草。请仅在调试时才使用它。\n\n### 抛出还是不抛出 ###\n遇到错误时，最简单的解决方法就是抛出这个错误。在Node代码中，大家会经常看到类似这样的回调：\n\n``` js\nfunction(err) {\n    if (err) throw err;   // ... \n}\n```\n\n在第4章中，我们会经常沿用这一做法。但是，在成品应用中，允许例行的异常及致命的错误像踢皮球一样踢给全局处理器，这是不可接受的。回调中的throw相当于JavaScript写手在说“现在我还不想考虑这个”。\n\n如果抛出那些自己知道肯定会被捕获的异常呢？这种做法同样凶险万分。2011年，Isaac Schlueter（npm的开发者，在任的Node开发负责人）就主张try/catch是一种“反模式”的方式。\n>try/catch只是包装着漂亮花括弧的goto语句。一旦跑去处理错误，就无法回到中断之处继续向下执行。更糟糕的是，通过throw语句的代码，完全不知道自己会跳到什么地方。返回错误码的时候，就相当于正在履行合约。抛出错误的时候，就好像在说，“我知道我正在和你说话，但我现在不想搭理你，我要先找你老板谈谈”，这太粗俗无礼了。如果不是什么紧急情况，请别这么做；如果确实是紧急情况，则应该直接崩溃掉。\n\nSchlueter提倡完全将throw用作断言似的构造结构，作为一种挂起应用的方式——当应用在做完全没预料到的事时，即挂起应用。Node社区主要遵循这一建议，尽管这种情况可能会随着Domain对象的出现而改变。\n\n那么，关于异步错误的处理，目前的最佳实践是什么呢？我认为应该听从Schlueter的建议：如果想让整个应用停止工作，请勇往直前地大胆使用throw。否则，请认真考虑一下应该如何处理错误。是想给用户显示一条出错消息吗？是想重试请求吗？还是想唱一曲“雏菊铃之歌”？那就这么处理吧，只是请尽可能地靠近错误源头。\n\n## 嵌套式回调的解嵌套 ##\n\nJavaScript中最常见的反模式做法是，回调内部再嵌套回调。还记得前言里提到的金字塔厄运吗？我们先来看一个具体的例子，你也可能在Node服务器上看到过类似的代码。\n\n```js\nfunction checkPassword(username, passwordGuess, callback) {\n    var queryStr = 'SELECT * FROM user WHERE username = ?';\n    db.query(queryStr, username,\n        function (err, result) {\n            if (err) throw err; \n            hash(passwordGuess,function (passwordGuessHash) {\n                    callback(passwordGuessHash === result['password_hash']);\n            });\n        });\n} \n```\n\n这里定义了一个异步函数checkPassword，它触发了另一个异步函数db.query，而后者又可能触发另外一个异步函数hash。（在之前，无法确认这些函数是否真的异步，但这里的几个函数理应如此。）\n\n这段代码有什么问题呢？目前为止，没有任何问题。它能用，而且简洁明了。但是，如果试图向其添加新特性，它就会变得毛里毛躁、险象环生，比如去处理那个数据库错误，而不是抛出错误（请参阅1.4.3节）、记录尝试访问数据库的次数、阻塞访问数据库，等等。\n\n嵌套式回调诱惑我们通过添加更多代码来添加更多特性，而不是将这些特性实现为可管理、可重用的代码片段。checkPassword有一种可以避免出现上述苗头的等价实现方式，如下：\n\n```js\nfunction checkPassword(username, passwordGuess, callback) {\n    var passwordHash; var queryStr = 'SELECT * FROM user WHERE username = ?';\n    db.query(qyeryStr, username, queryCallback);\n\n    function queryCallback(err, result) {\n        if (err) throw err; passwordHash = result['password_hash'];\n        hash(passwordGuess, hashCallback);\n    }\n\n    function hashCallback(passwordGuessHash) {\n        callback(passwordHash === passwordGuessHash);\n    }\n}\n```\n\n这种写法更啰嗦一些，但读起来更清晰，也更容易扩展。由于这里赋予了异步结果（即passwordHash）更宽广的作用域，所以获得了更大的灵活性。\n按照惯例，请避免两层以上的函数嵌套。关键是找到一种在激活异步调用之函数的外部存储异步结果的方式，这样回调本身就没有必要再嵌套了。\n\n如果这样听起来有点诘聱难懂，请别担心。我们在后续几章中会看到大量的异步事件例子，那里的异步事件顺序运行且没有嵌套式事件处理器。","source":"_posts/jsasync.md","raw":"---\ntitle: 深入理解 JavaScript 事件（ 第1章 ）\ndate: 2019-12-28 10:16:09\ntags: [JavaScript]\ncategories: 转载\ncomments: true\n---\n\n事件！事件到底是怎么工作的？JavaScrip t出现了多久，对 JavaScript 异步事件模型就迷惘了多久。迷惘导致 bug，bug 导致愤怒，然后尤达大师就会教我们如何如何......不过本质上，从概念上看，JavaScript事件模型既优雅又实用。一旦大家接受了这种语言的单线程设计，就会觉得 JavaScript 事件模型更像是一种功能，而不是一种局限。它意味着我们的代码是不可中断的，也意味着调度的事件会整整齐齐排好队，有条不紊地运行。本章将介绍JavaScript的异步机制，并破除一些常见的误解。我们会看到setTimeout 真正做了些什么。接着会讨论回调中抛出错误的处理。最后会奠定本书的主旨：为了清晰和可维护性，努力组织异步代码。\n <!-- more -->\n\n## 事件的调度 ##\n如果想让 JavaScript 中的某段代码将来再运行，可以将它放在回调中。回调就是一种普通函数，只不过它是传给像 setTimeout 这样的函数，或者绑定为像 document.onready 这样的属性。运行回调时，我们称已触发某事件（譬如延时结束或页面加载完毕）。当然，可怕的总是那些细节，哪怕是像 setTimeout 这样看起来很简单的东西。对 setTimeout 的描述通常像这样：\n\n> 给定一个回调及n毫秒的延迟，setTimeout就会在n毫秒后运行该回调。\n\n但是，正如我们将在这一节乃至这一章里看到的，以上描述存在严重缺陷。大多数情况下，该描述只能算接近正确，而在其他情况下则完全是谬误。要想真正理解 setTimeout，必须先大体理解 JavaScript 事件模型。\n\n### 现在还是将来运行 ###\n\n在探究setTimeout之前，先来看一个简单的例子。该情形常常会迷惑JavaScript新手，特别是那些刚刚从Java和Ruby等多线程语言迁移过来的新手\n\n``` javascript\n    for (var i = 1; i <= 3; i++) {   \n        setTimeout(function(){ \n            console.log(i); \n        }, 0); \n    };\n```\n\n4 4 4 \n\n大多数刚接触JavaScript语言的人都会认为以上循环会输出1，2，3，或者重复输出这3个数字，因为这里的3次延时都抢着要第一个触发（每次暂停都调度为0毫秒后到时）。\n\n要理解为什么输出是4，4，4，需要知道以下3件事。\n\n> 1: 这里只有一个名为i的变量，其作用域由声明语句var i定义（该声明语句在不经意间让i的作用域不是循环内部，而是扩散至蕴含循环的那个最内侧函数）。\n> 2: 循环结束后，i===4一直递增，直到不再满足条件i<=3为止。\n> 3: JavaScript事件处理器在线程空闲之前不会运行。\n\n\n前两条还属于JavaScript 101的范畴，但第三个更像是一个“惊喜”。一开始使用JavaScript的时候，我也不太相信会这样。Java令我担心自己的代码随时会被中断。上百万种潜在的边界情况让我焦虑万分，我一直在想：“要是在这两行代码之间发生了什么稀奇古怪的事，会怎么样呢？”然后，终于有一天，我再也没有这样的担心了......\n\n### 线程的阻塞 ###\n下面这段代码打破了我对JavaScript事件的成见。\n\n``` javascript\n//EventModel/loopBlockingTimeout.js \nvar start = new Date; \nsetTimeout(function(){ \n     var end = new Date;  \n    console.log('Time elapsed:', end - start, 'ms');\n}, 500);\n\nwhile (new Date - start < 1000) {\n\n};\n```\n\n按照多线程的思维定势，我会预计500毫秒后计时函数就会运行。不过这要求中断欲持续整整一秒钟的循环。如果运行代码，会得到类似这样的结果：\n\nTime elapsed: 1002ms\n\n大家得到的数字可能会稍有不同，这是因为setTimeout和setIn- terval一样，  其计时精度要比我们的期望值差很多（请参阅1.2.2节）。不过，这个数字肯定至少是1000，因为setTimeout回调在while循环结束运行之前不可能被触发。\n\n那么，如果setTimeout没有使用另一个线程，那它到底在做什么呢？\n\n### 队列 ###\n调用setTimeout的时候，会有一个延时事件排入队列。然后setTimeout调用之后的那行代码运行，接着是再下一行代码，直到再也没有任何代码。这时JavaScript虚拟机才会问：“队列里都有谁啊？”\n\n如果队列中至少有一个事件适合于“触发”（就像1000毫秒之前设定好的那个为期500毫秒的延时事件），则虚拟机会挑选一个事件，并调用此事件的处理器（譬如传给setTimeout的那个函数）。事件处理器返回后，我们又回到队列处。\n\n输入事件的工作方式完全一样：用户单击一个已附加有单击事件处理器的DOM（Document Object Model，文档对象模型）元素时，会有一个单击事件排入队列。但是，该单击事件处理器要等到当前所有正在运行的代码均已结束后（可能还要等其他此前已排队的事件也依次结束）才会执行。因此，使用JavaScript的那些网页一不小心就会变得毫无反应。你可能听过事件循环这个术语，它是用于描述队列工作方式的。所谓事件循环，就像代码从一个循环中不断取出而运行一样：\n\n``` javascript\nrunYourScript();\nwhile (atLeastOneEventIsQueued) { \n       fireNextQueuedEvent(); \n};\n```\n\n这隐含着一个意思，即触发的每个事件都会位于堆栈轨迹的底部。关于这一点，1.4节会进一步阐述。\n\n事件的易调度性是JavaScript语言最大的特色之一。像setTimeout这样的异步函数只是简单地做延迟执行，而不是孵化新的线程。JavaScript代码永远不会被中断，这是因为代码在运行期间只需要排队事件即可，而这些事件在代码运行结束之前不会被触发。\n\n下一节将更细致地考查异步JavaScript代码的构造块。\n\n## 异步函数的类型 ##\n\n每一种JavaScript环境都有自己的异步函数集。有些函数，如setTimeout和setInterval，是各种JavaScript环境普遍都有的。另一些函数则专属于某些浏览器或某几种服务器端框架。JavaScript环境提供的异步函数通常可以分为两大类：I/O函数和计时函数。如果想在应用中定义复杂的异步行为，就要使用这两类异步函数作为基本的构造块。\n\n### 异步的I/O函数\n\n创造Node.js，并不是为了人们能在服务器上运行JavaScript，仅仅是因为Ryan Dahl想要一个建立在某高级语言之上的事件驱动型服务器框架。JavaScript碰巧就是适合干这个的语言。为什么？因为JavaScript语言可以完美地实现非阻塞式I/O。\n\n在其他语言中，一不小心就会“阻塞”应用（通常是运行循环）直到完成I/O请求为止。而在JavaScript中，这种阻塞方式几乎沦为无稽之谈。类似如下的循环将永远运行下去，不可能停下来。\n\n``` js\nvar ajaxRequest = new XMLHttpRequest; \najaxRequest.open('GET', url); \najaxRequest.send(null); \nwhile (ajaxRequest.readyState === XMLHttpRequest.UNSENT) {  \n     // readyState在循环返回之前不会有更改。\n}; \n```\n\n相反，我们需要附加一个事件处理器，随即返回事件队列。\n\n``` js\nvar ajaxRequest = new XMLHttpRequest; \najaxRequest.open('GET', url);\najaxRequest.send(null); \najaxRequest.onreadystatechange = function() {  \n    // ... \n};\n```\n\n就是这么回事。不论是在等待用户的按键行为，还是在等待远程服务器的批量数据，所需要做的就是定义一个回调，除非JavaScript环境提供的某个同步I/O函数已经替我们完成了阻塞。\n\n在浏览器端，Ajax方法有一个可设置为false的async选项（但永远、永远别这么做），这会挂起整个浏览器窗格直到收到应答为止。在Node.js中，同步的API方法在名称上会有明确的标示，譬如fs.readFileSync。编写短小的脚本时，这些同步方法会很方便。但是，如果所编写的应用需要处理并行的多个请求或多项操作，则应该避免使用它们。可在今天，还有哪个应用不是这样的呢？\n\n有些I/O函数既有同步效应，也有异步效应。举例来说，在现代浏览器中操纵DOM对象时，从脚本角度看，更改是即时生效的，但从视效角度看，在返回事件队列之前不会渲染这些DOM对象更改。这可以防止DOM对象被渲染成不一致的状态。\n\n>console.log是异步的吗？\n\nWebKit的console.log由于表现出异步行为而让很多开发者惊诧不已。在Chrome或Safari中，以下这段代码会在控制台记录{foo:bar}。\n\n``` js\nvar obj = {};    \nconsole.log(obj);    \nobj.foo = 'bar';\n```\n\n怎么会这样？We b K i t的console.log并没有立即拍摄对象快照，相反，它只存储了一个指向对象的引用，然后在代码返回事件队列时才去拍摄快照。Node的console.log是另一回事，它是严格同步的，因此同样的代码输出的却为{}。\n\nJavaScript采用了非阻塞式I/O，这对新手来说是最大的一个障碍，但这同样也是该语言的核心优势之一。有了非阻塞式I/O，就能自然而然地写出高效的基于事件的代码。\n\n### 异步的计时函数 ###\n\n我们已经看到，异步函数非常适合用于I/O操作，但有些时候，我们仅仅是因为需要异步而想要异步性。换句话说，我们想让一个函数在将来某个时刻再运行——这样的函数可能是为了作动画或模拟。基于时间的事件涉及两个著名的函数，即setTimeout与setInterval。遗憾的是，这两个著名的计时器函数都有自己的一些缺陷。正如我们在1.1.2节中看到的，其中有个缺陷是无法弥补的：当同一个JavaScript进程正运行着代码时，任何JavaScript计时函数都无法使其他代码运行起来。但是，即便容忍了这一局限性，setTimeout及setInterval的不确定性也会令人犯怵。下面是一个示例。\n\n``` js\nvar fireCount = 0; \nvar start = new Date; \nvar timer = setInterval(function() {\n     if (new Date-start > 1000) { \n            clearInterval(timer);     \n            console.log(fireCount);   \n            return;   \n    }   \n    fireCount++; \n}, 0);\n```\n\n如果使用setInterval调度事件且延迟设定为0毫秒，则会尽可能频繁地运行此事件，对吗？那么，在运行于高速英特尔i7处理器之上的现代浏览器中，此事件的触发频率到底如何呢？\n\n大约为200次/秒。这是Chrome、Safari和Firefox等浏览器的平均值。在Node环境下，此事件的触发频率大约能达到1000次/秒。（若使用setTimeout来调度事件，重复这些实验也会得到类似的结果。）作为对比，如果将setInterval替换成简单的while循环，则在Chrome中此事件的触发频率将达到400万次/秒，而在Node中会达到500万次/秒\n\n这是怎么回事？最后我们发现，setTimeout和setInterval就是想设计成慢吞吞的！事实上，HTML规范（这是所有主要浏览器都遵守的规范）推行的延时/时隔的最小值就是4毫秒！\n\n那么，如果需要更细粒度的计时，该怎么办呢？有些运行时环境提供了备选方案。\n\n>1: 在Node中，process.nextTick允许将事件调度成尽可能快地触发。对于笔者的系统，process.nextTick事件的触发频率可以超过10万次/秒。\n>2: 一些现代浏览器（含IE9+）带有一个requestAnimationFrame函数。此函数有两个目标：一方面，它允许以60+帧/秒的速度运行JavaScript动画；另一方面，它又避免后台选项卡运行这些动画，从而节约CPU周期。在最新版的Chrome浏览器中，甚至能实现亚毫秒级的精度\n\n尽管这些计时函数是异步JavaScript混饭吃的家伙什儿，但永远不要忘记，setTimeout和setInterval就是些不精确的计时工具。在Node中，如果只是想产生一个短时延迟，请使用process.nextTick。在浏览器端，请尝试使用垫片技术（shim）③：在支持requestAnimationFrame的浏览器中，推荐使用requestAnimationFrame；在不支持requestAnimationFrame的浏览器中，则退而使用setTimeout。\n\n到这里，关于JavaScript基本异步函数的简要概览就结束了。但怎样才能知道一个函数到底何时异步呢？下一节中，我们在亲自编写异步函数的同时再思考这个问题\n\n## 异步函数的编写 ##\n\nJavaScript中的每个异步函数都构建在其他某个或某些异步函数之上。凡是异步函数，从上到下（一直到原生代码）都是异步的！\n\n反之亦然：任何函数只要使用了异步的函数，就必须以异步的方式给出其操作结果。正如我们在1.1.2节学到的，JavaScript并没有提供一种机制以阻止函数在其异步操作结束之前返回。事实上，除非函数返回，否则不会触发任何异步事件。\n\n本节将考察异步函数设计的一些常见模式。我们将看到有些函数如反复无常的小人，非得等到特定时候才下决心成为异步的。不过，我们先来精确地定义异步函数。\n\n### 何时称函数为异步的 ###\n\n异步函数这个术语有点名不副实：调用一个函数时，程序只在该函数返回之后才能继续。JavaScript写手如果称一个函数为“异步的”，其意思是这个函数会导致将来再运行另一个函数，后者取自于事件队列（若后面这个函数是作为参数传递给前者的，则称其为回调函数，简称为回调）  。于是，一个取用回调的异步函数永远都能通过以下测试\n\n``` js\nvar functionHasReturned = false; \nasyncFunction(function() {  \n     console.assert(functionHasReturned); \n}); \nfunctionHasReturned = true;\n```\n\n异步函数还涉及另一个术语，即非阻塞。非阻塞这个词强调了异步函数的高速度：异步MySQL数据库驱动程序做一个查询可能要花上一小时，但负责发送查询请求的那个函数却能以微秒级速度返回。这对于那些需要快速处理海量请求的网站服务器来说，绝对是个福音。\n\n通常，那些取用回调的函数都会将其作为自己的最后一个参数。（可惜的是，老资格的setTimeout和setInterval都是这一约定的特例。）不过，有些异步函数也会间接取用回调，它们会返回Promise对象或使用PubSub模式。本书稍后就会介绍这些异步设计模式。\n\n遗憾的是，要想确认某个函数异步与否，唯一的方法就是审查其源代码。有些同步函数却拥有看起来像是异步的API，这或者是因为它们将来可能会变成异步的，又或者是因为回调这种形式能方便地返回多个参数。一旦存疑，请别指望函数就是异步的。\n\n### 间或异步的函数 ###\n\n有些函数某些时候是异步的，但其他时候却不然。举个例子，jQuery的同名函数（通常记作$）可用于延迟函数直至DOM已经结束加载。但是，若DOM早已结束了加载，则不存在任何延迟，$的回调将会立即触发。\n\n不注意的话，这种行为的不可预知性会带来很多麻烦。我曾经看到也犯过这样一个错误，即假定$会在已加载本页面其他脚本之后再运行一个函数。\n\n``` js\n// application.js \n$(function () {\n    utils.log('Ready');\n});\n\n// utils.js \nwindow.utils = {\n    log: function () {\n        if (window.console)\n            console.log.apply(console, arguments);\n    }\n};\n\n<script src ＝\"application.js\" ></script >\n<script src ＝\"util.js\" ></script >\n```\n这段代码运行得很好，但前提是浏览器并未从缓存中加载页面（这会导致DOM早在脚本运行之前就已加载就绪）。如果出现这种情况，传递给$的回调就会在设置utils.log之前运行，从而导致一个错误。（为了避免这种情况，应该采用一种更现代的管理客户端依赖性的方法。请参阅第6章。）\n\n下面来看另一个例子。\n\n### 缓存型异步函数 ###\n间或异步的函数有一个常见变种是可缓存结果的异步请求类函数。举例来说，假设正在编写一个基于浏览器的计算器，它使用了网页Wo r k e r对象以单独开一个线程来进行计算。（第5章将介绍网页Worker对象的API。）主脚本看起来像这样：\n\n``` js\nvar calculationCache = {},\n    calculationCallbacks = {},\n    mathWorker = new Worker('calculator.js');\n\nmathWorker.addEventListener('message', function(e) { \n    var message = e.data;   \n    calculationCache[message.formula] = message.result;   \n    calculationCallbacks[message.formula](message.result); \n}); \n\nfunction runCalculation(formula, callback) { \n    if (formula in calculationCache) { \n        return callback(calculationCache[formula]);   \n    };  \n    \n    if (formula in calculationCallbacks) {  \n        return setTimeout(function() {       \n            runCalculation(formula, callback);    \n        }, 0);   \n    };   \n\n    mathWorker.postMessage(formula);   \n    calculationCallbacks[formula] = callback; \n} \n\n```\n\n在这里，当结果已经缓存时，runCalculation函数是同步的，否则就是异步的。\n存在3种可能的情景。\n\n1: 公式已经计算完成，于是结果位于calculationCache中。这种情况下，runCalculation是同步的。\n2: 公式已经发送给Worker对象，但尚未收到结果。这种情况下，runCalculation设定了一个延时以便再次调用自身；重复这一过程直到结果位于calculationCache中为止。\n3: 公式尚未发送给Worker对象。这种情况下，将会从Worker对象的'message'事件监听器激活回调。\n\n请注意，在第2种和第3种情景中，我们按照两种不同的方式来等待任务的完成。这个例子写成这样，就是为了演示依据哪几种常见方式来等待某些东西发生改变（如缓存型计算公式的值）。是不是应该倾向于其中某种方式呢？我们接着往下看。\n\n### 异步递归与回调存储 ###\n\n在runCalculation函数中，为了等待Worker对象完成自己的工作，或者通过延时而重复相同的函数调用（即异步递归），或者简单地存储回调结果。\n\n哪种方式更好呢？乍一看，只使用异步递归是最简单的，因为这里不再需要calculationCallbacks对象。出于这个目的，JavaScript新手常常会使用setTimeout，因为它很像线程型语言的风格。此程序的Java版本可能会有这样一个循环：\n\n``` js\nwhile (!calculationCache.get(formula)) {\n     Thread.sleep(0); \n}; \n```\n\n但是，延时并不是免费的午餐。大量延时的话，会造成巨大的计算荷载。异步递归有一点很可怕，即在等待任务完成期间，可触发之延时的次数是不受限的！此外，异步递归还毫无必要地复杂化了应用程序的事件结构。基于这些原因，应将异步递归视作一种“反模式”的方式。\n\n在这个计算器例子中，为了避免异步递归，可以为每个公式存储一个回调数组。\n\n```js\nvar calculationCache = {},     \n    calculationCallbacks = {},     \n    mathWorker = new Worker('calculator.js'); \n\nmathWorker.addEventListener('message', function(e) { \n    var message = e.data;   \n    calculationCache[message.formula] = message.result;   \n    calculationCallbacks[message.formula].forEach(function(callback) {     \n        callback(message.result);   \n    }); \n}); \n\nfunction runCalculation(formula, callback) {  \n    if (formula in calculationCache) {\n         return callback(calculationCache[formula]);   \n    }; \n\n    if (formula in calculationCallbacks) { \n        return calculationCallbacks[formula].push(callback);   \n    };   \n\n    mathWorker.postMessage(formula);   \n    calculationCallbacks[formula] = [callback]; \n} \n```\n\n没有了延时，我们的代码要直观得多，也高效得多。\n\n总的来说，请避免异步递归。仅当所采用的库提供了异步功能但没有提供任何形式的回调机制时，异步递归才有必要。如果真的遇到这种情况，要做的第一件事应该是为该库写一个补丁。或者，干脆找一个更好的库。\n\n### 返值与回调的混搭 ###\n\n在以上两种runCalculation实现中，有时会用到返值技术。这是出于简洁的目的而随意作出的选择。下面这行代码\n\n``` js \nreturn callback(calculationCache[formula]);  \n```\n\n很容易即可改写成\n\n``` js \ncallback(calculationCache[formula]); \nreturn; \n```\n\n这是因为并没有打算使用这个返值。这是JavaScript的一种普遍做法，而且通常无害。\n\n不过，有些函数既返回有用的值，又要取用回调。这类情况下，切记回调有可能被同步调用（返值之前），也有可能被异步调用（返值之后）。永远不要定义一个潜在同步而返值却有可能用于回调的函数。举个例子，下面这个负责打开WebSocket连接以连至给定服务器的函数（使用缓存技术以确保每个服务器只有一个连接）就违反了上述规则。\n\n``` js\nvar webSocketCache = {}; \nfunction openWebSocket(serverAddress, callback) { \n    var socket; \n    if (serverAddress in webSocketCache) {     \n        socket = webSocketCache[serverAddress]; \n        if (socket.readyState === WebSocket.OPEN) {       \n            callback();     \n        } else {       \n            socket.onopen = _.compose(callback, socket.onopen);    \n        };   \n    } else {     \n        socket = new WebSocket(serverAddress);     \n        webSocketCache[serverAddress] = socket;\n        socket.onopen = callback;   \n    };  \n\n    return socket; \n}; \n```\n\n（这段代码依赖于Underscore.js库。_.compose定义的这个新函数既运行了callback，又运行了初始的socket.onopen回调。）这段代码的问题在于，如果套接字已经缓存且打开，则会在函数返值之前就运行回调，这会使以下代码崩溃。\n\n```js\nvar socket = openWebSocket(url, function() {   \n    socket.send('Hello, server!'); \n});\n```\n\n怎么解决呢？将回调封装在setTimeout中即可。\n\n```js\nif (socket.readyState === WebSocket.OPEN) {   \n    setTimeout(callback, 0);\n } else {  \n     // ... \n}\n```\n\n这里使用延时会让人感觉是在东拼西凑，但这总比API自相矛盾要好得多。\n\n在本节中，我们看到了一些编写异步函数的最佳实践。请勿依赖那些看似始终异步的函数，除非已经阅读其源代码。请避免使用计时器方法来等待某个会变化的东西。如果同一个函数既返值又运行回调，则请确保回调在返值之后才运行。\n\n一次消化这些信息确实太多了一点，不过，编写好的异步函数确实是写出优秀JavaScript代码的关键所在。\n\n## 异步错误的处理 ##\n\n像很多时髦的语言一样，JavaScript也允许抛出异常，随后再用一个try/catch语句块捕获。如果抛出的异常未被捕获，大多数JavaScript环境都会提供一个有用的堆栈轨迹。举个例子，下面这段代码由于'{'为无效JSON对象而抛出异常。\n\n```js\n//EventModel/stackTrace.js \nfunction JSONToObject(jsonStr) { \n    return JSON.parse(jsonStr);\n} \nvar obj = JSONToObject('{');  \n\nSyntaxError: Unexpected end of input     \n    at Object.parse (native)     \n    at JSONToObject (/AsyncJS/stackTrace.js:2:15)     \n    at Object.<anonymous> (/AsyncJS/stackTrace.js:4:11) \n```\n\n堆栈轨迹不仅告诉我们哪里抛出了错误，而且说明了最初出错的地方：第4行代码。遗憾的是，自顶向下地跟踪异步错误起源并不都这么直截了当。在本节中，我们会看到为什么throw很少用作回调内错误处理的正确工具，还会了解如何设计异步API以绕开这一局限。\n\n### 回调内抛出的错误 ###\n\n如果从异步回调中抛出错误，会发生什么事？让我们先来做个测试。\n\n```js\n//EventModel/nestedErrors.js \nsetTimeout(function A() {   \n    setTimeout(function B() { \n        setTimeout(function C() { \n            throw new Error('Something terrible has happened!');     \n        }, 0);   \n    }, 0); \n}, 0); \n```\n\n上述应用的结果是一条极其简短的堆栈轨迹。\n\n```\nError: Something terrible has happened!     \n    at Timer.C (/AsyncJS/nestedErrors.js:4:13) \n```\n\n等等，A和B发生了什么事？为什么它们没有出现在堆栈轨迹中？这是因为运行C的时候，A和B并不在内存堆栈里。这3个函数都是从事件队列直接运行的。\n\n基于同样的理由，利用try/catch语句块并不能捕获从异步回调中抛出的错误。下面进行演示。\n\n```js\ntry {   \n    setTimeout(function() {\n         throw new Error('Catch me if you can!');   \n    }, 0); \n} catch (e) {  \n    console.error(e);\n} \n```\n\n看到这里的问题了吗？这里的try/catch语句块只捕获setTimeout函数自身内部发生的那些错误。因为setTimeout异步地运行其回调，所以即使延时设置为0，回调抛出的错误也会直接流向应用程序的未捕获异常处理器（请参阅1.4.2节）\n\n总的来说，取用异步回调的函数即使包装上try/catch语句块，也只是无用之举。（特例是，该异步函数确实是在同步地做某些事且容易出错。例如，Node的fs.watch(file,callback)就是这样一个函数，它在目标文件不存在时会抛出一个错误。）正因为此，Node.js中的回调几乎总是接受一个错误作为其首个参数，这样就允许回调自己来决定如何处理这个错误。举个例子，下面这个Node应用尝试异步地读取一个文件，还负责记录下任何错误（如“文件不存在”）。\n\n```js\n//EventModel/readFile.js \nvar fs = require('fs'); \nfs.readFile('fhgwgdz.txt', function(err, data) { \n    if (err) { \n        return console.error(err);   \n    };   \n    console.log(data.toString('utf8')); \n}); \n```\n\n客户端JavaScript库的一致性要稍微差些，不过最常见的模式是，针对成败这两种情形各规定一个单独的回调。jQuery的Ajax方法就遵循了这个模式。\n\n```js\n$.get('/data', {  \n     success: successHandler,   \n     failure: failureHandler }); \n```\n不管API形态像什么，始终要记住的是，只能在回调内部处理源于回调的异步错误。异步尤达大师会说：“做，或者不做，没有试试看一说。”\n\n### 未捕获异常的处理 ###\n如果是从回调中抛出异常的，则由那个调用了回调的人负责捕获该异常。但如果异常从未被捕获，又会怎么样？这时，不同的JavaScript图环境有着不同的游戏规则......\n\n1.在浏览器环境中现代浏览器会在开发人员控制台显示那些未捕获的异常，接着返回事件队列。要想修改这种行为，可以给window.onerror附加一个处理器。如果windows.onerror处理器返回true，则能阻止浏览器的默认错误处理行为。\n\n```js\nwindow.onerror = function(err) { \n    return true;  \n    //彻底忽略所有错误\n}; \n```\n\n在成品应用中，会考虑某种JavaScript错误处理服务，譬如Errorception①。Errorception提供了一个现成的windows.onerror处理器，它向应用服务器报告所有未捕获的异常，接着应用服务器发送消息通知我们。\n\n2.在Node.js环境中在Node环境中，window.onerror的类似物就是process对象的uncaughtException事件。正常情况下，Node应用会因未捕获的异常而立即退出。但只要至少还有一个uncaughtException事件处理器，Node应用就会直接返回事件队列。\n\n```js\nprocess.on('uncaughtException', function(err) {   \n    console.error(err);  \n    //避免了关停的命运！\n}); \n```\n\n但是，自Node  0.8.4起，uncaughtException事件就被废弃了。据其文档所言，对异常处理而言，uncaughtException是一种非常粗暴的机制，它在将来可能会被放弃......\n\n>请勿使用uncaughtException，而应使用Domain对象。Domain对象又是什么？你可能会这样问。\n\nDomain对象是事件化对象（第2章会详细讨论），它将throw转化为'error'事件。下面是一个例子。\n\n```js\n//EventModel/domainThrow.js \nvar myDomain = require('domain').create();\nmyDomain.run(function () {\n    setTimeout(function () {\n        throw new Error('Listen to me!')\n    }, 50);\n});\nmyDomain.on('error', function (err) {\n    console.log('Error ignored!');\n}); \n```\n\n源于延时事件的throw只是简单地触发了Domain对象的错误处理器。 \nError ignored!   \n很奇妙，是不是？Domain对象让throw语句生动了很多。遗憾的是，仅在Node  0.8+环境中才能使用Domain对象；在我写作本书时，Domain对象仍被视作试验性的特性。更多信息请参阅Node文档。②不管在浏览器端还是服务器端，全局的异常处理器都应被视作最后一根救命稻草。请仅在调试时才使用它。\n\n### 抛出还是不抛出 ###\n遇到错误时，最简单的解决方法就是抛出这个错误。在Node代码中，大家会经常看到类似这样的回调：\n\n``` js\nfunction(err) {\n    if (err) throw err;   // ... \n}\n```\n\n在第4章中，我们会经常沿用这一做法。但是，在成品应用中，允许例行的异常及致命的错误像踢皮球一样踢给全局处理器，这是不可接受的。回调中的throw相当于JavaScript写手在说“现在我还不想考虑这个”。\n\n如果抛出那些自己知道肯定会被捕获的异常呢？这种做法同样凶险万分。2011年，Isaac Schlueter（npm的开发者，在任的Node开发负责人）就主张try/catch是一种“反模式”的方式。\n>try/catch只是包装着漂亮花括弧的goto语句。一旦跑去处理错误，就无法回到中断之处继续向下执行。更糟糕的是，通过throw语句的代码，完全不知道自己会跳到什么地方。返回错误码的时候，就相当于正在履行合约。抛出错误的时候，就好像在说，“我知道我正在和你说话，但我现在不想搭理你，我要先找你老板谈谈”，这太粗俗无礼了。如果不是什么紧急情况，请别这么做；如果确实是紧急情况，则应该直接崩溃掉。\n\nSchlueter提倡完全将throw用作断言似的构造结构，作为一种挂起应用的方式——当应用在做完全没预料到的事时，即挂起应用。Node社区主要遵循这一建议，尽管这种情况可能会随着Domain对象的出现而改变。\n\n那么，关于异步错误的处理，目前的最佳实践是什么呢？我认为应该听从Schlueter的建议：如果想让整个应用停止工作，请勇往直前地大胆使用throw。否则，请认真考虑一下应该如何处理错误。是想给用户显示一条出错消息吗？是想重试请求吗？还是想唱一曲“雏菊铃之歌”？那就这么处理吧，只是请尽可能地靠近错误源头。\n\n## 嵌套式回调的解嵌套 ##\n\nJavaScript中最常见的反模式做法是，回调内部再嵌套回调。还记得前言里提到的金字塔厄运吗？我们先来看一个具体的例子，你也可能在Node服务器上看到过类似的代码。\n\n```js\nfunction checkPassword(username, passwordGuess, callback) {\n    var queryStr = 'SELECT * FROM user WHERE username = ?';\n    db.query(queryStr, username,\n        function (err, result) {\n            if (err) throw err; \n            hash(passwordGuess,function (passwordGuessHash) {\n                    callback(passwordGuessHash === result['password_hash']);\n            });\n        });\n} \n```\n\n这里定义了一个异步函数checkPassword，它触发了另一个异步函数db.query，而后者又可能触发另外一个异步函数hash。（在之前，无法确认这些函数是否真的异步，但这里的几个函数理应如此。）\n\n这段代码有什么问题呢？目前为止，没有任何问题。它能用，而且简洁明了。但是，如果试图向其添加新特性，它就会变得毛里毛躁、险象环生，比如去处理那个数据库错误，而不是抛出错误（请参阅1.4.3节）、记录尝试访问数据库的次数、阻塞访问数据库，等等。\n\n嵌套式回调诱惑我们通过添加更多代码来添加更多特性，而不是将这些特性实现为可管理、可重用的代码片段。checkPassword有一种可以避免出现上述苗头的等价实现方式，如下：\n\n```js\nfunction checkPassword(username, passwordGuess, callback) {\n    var passwordHash; var queryStr = 'SELECT * FROM user WHERE username = ?';\n    db.query(qyeryStr, username, queryCallback);\n\n    function queryCallback(err, result) {\n        if (err) throw err; passwordHash = result['password_hash'];\n        hash(passwordGuess, hashCallback);\n    }\n\n    function hashCallback(passwordGuessHash) {\n        callback(passwordHash === passwordGuessHash);\n    }\n}\n```\n\n这种写法更啰嗦一些，但读起来更清晰，也更容易扩展。由于这里赋予了异步结果（即passwordHash）更宽广的作用域，所以获得了更大的灵活性。\n按照惯例，请避免两层以上的函数嵌套。关键是找到一种在激活异步调用之函数的外部存储异步结果的方式，这样回调本身就没有必要再嵌套了。\n\n如果这样听起来有点诘聱难懂，请别担心。我们在后续几章中会看到大量的异步事件例子，那里的异步事件顺序运行且没有嵌套式事件处理器。","slug":"jsasync","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vrm001x98lghckcc4wn","content":"<p>事件！事件到底是怎么工作的？JavaScrip t出现了多久，对 JavaScript 异步事件模型就迷惘了多久。迷惘导致 bug，bug 导致愤怒，然后尤达大师就会教我们如何如何……不过本质上，从概念上看，JavaScript事件模型既优雅又实用。一旦大家接受了这种语言的单线程设计，就会觉得 JavaScript 事件模型更像是一种功能，而不是一种局限。它意味着我们的代码是不可中断的，也意味着调度的事件会整整齐齐排好队，有条不紊地运行。本章将介绍JavaScript的异步机制，并破除一些常见的误解。我们会看到setTimeout 真正做了些什么。接着会讨论回调中抛出错误的处理。最后会奠定本书的主旨：为了清晰和可维护性，努力组织异步代码。<br> <span id=\"more\"></span></p>\n<h2 id=\"事件的调度\"><a href=\"#事件的调度\" class=\"headerlink\" title=\"事件的调度\"></a>事件的调度</h2><p>如果想让 JavaScript 中的某段代码将来再运行，可以将它放在回调中。回调就是一种普通函数，只不过它是传给像 setTimeout 这样的函数，或者绑定为像 document.onready 这样的属性。运行回调时，我们称已触发某事件（譬如延时结束或页面加载完毕）。当然，可怕的总是那些细节，哪怕是像 setTimeout 这样看起来很简单的东西。对 setTimeout 的描述通常像这样：</p>\n<blockquote>\n<p>给定一个回调及n毫秒的延迟，setTimeout就会在n毫秒后运行该回调。</p>\n</blockquote>\n<p>但是，正如我们将在这一节乃至这一章里看到的，以上描述存在严重缺陷。大多数情况下，该描述只能算接近正确，而在其他情况下则完全是谬误。要想真正理解 setTimeout，必须先大体理解 JavaScript 事件模型。</p>\n<h3 id=\"现在还是将来运行\"><a href=\"#现在还是将来运行\" class=\"headerlink\" title=\"现在还是将来运行\"></a>现在还是将来运行</h3><p>在探究setTimeout之前，先来看一个简单的例子。该情形常常会迷惑JavaScript新手，特别是那些刚刚从Java和Ruby等多线程语言迁移过来的新手</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span>; i++) &#123;   </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123; </span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); </span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>); </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>4 4 4 </p>\n<p>大多数刚接触JavaScript语言的人都会认为以上循环会输出1，2，3，或者重复输出这3个数字，因为这里的3次延时都抢着要第一个触发（每次暂停都调度为0毫秒后到时）。</p>\n<p>要理解为什么输出是4，4，4，需要知道以下3件事。</p>\n<blockquote>\n<p>1: 这里只有一个名为i的变量，其作用域由声明语句var i定义（该声明语句在不经意间让i的作用域不是循环内部，而是扩散至蕴含循环的那个最内侧函数）。<br>2: 循环结束后，i&#x3D;&#x3D;&#x3D;4一直递增，直到不再满足条件i&lt;&#x3D;3为止。<br>3: JavaScript事件处理器在线程空闲之前不会运行。</p>\n</blockquote>\n<p>前两条还属于JavaScript 101的范畴，但第三个更像是一个“惊喜”。一开始使用JavaScript的时候，我也不太相信会这样。Java令我担心自己的代码随时会被中断。上百万种潜在的边界情况让我焦虑万分，我一直在想：“要是在这两行代码之间发生了什么稀奇古怪的事，会怎么样呢？”然后，终于有一天，我再也没有这样的担心了……</p>\n<h3 id=\"线程的阻塞\"><a href=\"#线程的阻塞\" class=\"headerlink\" title=\"线程的阻塞\"></a>线程的阻塞</h3><p>下面这段代码打破了我对JavaScript事件的成见。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//EventModel/loopBlockingTimeout.js </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>; </span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123; </span><br><span class=\"line\">     <span class=\"keyword\">var</span> end = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>;  </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Time elapsed:&#x27;</span>, end - start, <span class=\"string\">&#x27;ms&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span> - start &lt; <span class=\"number\">1000</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>按照多线程的思维定势，我会预计500毫秒后计时函数就会运行。不过这要求中断欲持续整整一秒钟的循环。如果运行代码，会得到类似这样的结果：</p>\n<p>Time elapsed: 1002ms</p>\n<p>大家得到的数字可能会稍有不同，这是因为setTimeout和setIn- terval一样，  其计时精度要比我们的期望值差很多（请参阅1.2.2节）。不过，这个数字肯定至少是1000，因为setTimeout回调在while循环结束运行之前不可能被触发。</p>\n<p>那么，如果setTimeout没有使用另一个线程，那它到底在做什么呢？</p>\n<h3 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h3><p>调用setTimeout的时候，会有一个延时事件排入队列。然后setTimeout调用之后的那行代码运行，接着是再下一行代码，直到再也没有任何代码。这时JavaScript虚拟机才会问：“队列里都有谁啊？”</p>\n<p>如果队列中至少有一个事件适合于“触发”（就像1000毫秒之前设定好的那个为期500毫秒的延时事件），则虚拟机会挑选一个事件，并调用此事件的处理器（譬如传给setTimeout的那个函数）。事件处理器返回后，我们又回到队列处。</p>\n<p>输入事件的工作方式完全一样：用户单击一个已附加有单击事件处理器的DOM（Document Object Model，文档对象模型）元素时，会有一个单击事件排入队列。但是，该单击事件处理器要等到当前所有正在运行的代码均已结束后（可能还要等其他此前已排队的事件也依次结束）才会执行。因此，使用JavaScript的那些网页一不小心就会变得毫无反应。你可能听过事件循环这个术语，它是用于描述队列工作方式的。所谓事件循环，就像代码从一个循环中不断取出而运行一样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">runYourScript</span>();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (atLeastOneEventIsQueued) &#123; </span><br><span class=\"line\">       <span class=\"title function_\">fireNextQueuedEvent</span>(); </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这隐含着一个意思，即触发的每个事件都会位于堆栈轨迹的底部。关于这一点，1.4节会进一步阐述。</p>\n<p>事件的易调度性是JavaScript语言最大的特色之一。像setTimeout这样的异步函数只是简单地做延迟执行，而不是孵化新的线程。JavaScript代码永远不会被中断，这是因为代码在运行期间只需要排队事件即可，而这些事件在代码运行结束之前不会被触发。</p>\n<p>下一节将更细致地考查异步JavaScript代码的构造块。</p>\n<h2 id=\"异步函数的类型\"><a href=\"#异步函数的类型\" class=\"headerlink\" title=\"异步函数的类型\"></a>异步函数的类型</h2><p>每一种JavaScript环境都有自己的异步函数集。有些函数，如setTimeout和setInterval，是各种JavaScript环境普遍都有的。另一些函数则专属于某些浏览器或某几种服务器端框架。JavaScript环境提供的异步函数通常可以分为两大类：I&#x2F;O函数和计时函数。如果想在应用中定义复杂的异步行为，就要使用这两类异步函数作为基本的构造块。</p>\n<h3 id=\"异步的I-O函数\"><a href=\"#异步的I-O函数\" class=\"headerlink\" title=\"异步的I&#x2F;O函数\"></a>异步的I&#x2F;O函数</h3><p>创造Node.js，并不是为了人们能在服务器上运行JavaScript，仅仅是因为Ryan Dahl想要一个建立在某高级语言之上的事件驱动型服务器框架。JavaScript碰巧就是适合干这个的语言。为什么？因为JavaScript语言可以完美地实现非阻塞式I&#x2F;O。</p>\n<p>在其他语言中，一不小心就会“阻塞”应用（通常是运行循环）直到完成I&#x2F;O请求为止。而在JavaScript中，这种阻塞方式几乎沦为无稽之谈。类似如下的循环将永远运行下去，不可能停下来。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ajaxRequest = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>; </span><br><span class=\"line\">ajaxRequest.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, url); </span><br><span class=\"line\">ajaxRequest.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>); </span><br><span class=\"line\"><span class=\"keyword\">while</span> (ajaxRequest.<span class=\"property\">readyState</span> === <span class=\"title class_\">XMLHttpRequest</span>.<span class=\"property\">UNSENT</span>) &#123;  </span><br><span class=\"line\">     <span class=\"comment\">// readyState在循环返回之前不会有更改。</span></span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<p>相反，我们需要附加一个事件处理器，随即返回事件队列。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ajaxRequest = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>; </span><br><span class=\"line\">ajaxRequest.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, url);</span><br><span class=\"line\">ajaxRequest.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>); </span><br><span class=\"line\">ajaxRequest.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>就是这么回事。不论是在等待用户的按键行为，还是在等待远程服务器的批量数据，所需要做的就是定义一个回调，除非JavaScript环境提供的某个同步I&#x2F;O函数已经替我们完成了阻塞。</p>\n<p>在浏览器端，Ajax方法有一个可设置为false的async选项（但永远、永远别这么做），这会挂起整个浏览器窗格直到收到应答为止。在Node.js中，同步的API方法在名称上会有明确的标示，譬如fs.readFileSync。编写短小的脚本时，这些同步方法会很方便。但是，如果所编写的应用需要处理并行的多个请求或多项操作，则应该避免使用它们。可在今天，还有哪个应用不是这样的呢？</p>\n<p>有些I&#x2F;O函数既有同步效应，也有异步效应。举例来说，在现代浏览器中操纵DOM对象时，从脚本角度看，更改是即时生效的，但从视效角度看，在返回事件队列之前不会渲染这些DOM对象更改。这可以防止DOM对象被渲染成不一致的状态。</p>\n<blockquote>\n<p>console.log是异步的吗？</p>\n</blockquote>\n<p>WebKit的console.log由于表现出异步行为而让很多开发者惊诧不已。在Chrome或Safari中，以下这段代码会在控制台记录{foo:bar}。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;    </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj);    </span><br><span class=\"line\">obj.<span class=\"property\">foo</span> = <span class=\"string\">&#x27;bar&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>怎么会这样？We b K i t的console.log并没有立即拍摄对象快照，相反，它只存储了一个指向对象的引用，然后在代码返回事件队列时才去拍摄快照。Node的console.log是另一回事，它是严格同步的，因此同样的代码输出的却为{}。</p>\n<p>JavaScript采用了非阻塞式I&#x2F;O，这对新手来说是最大的一个障碍，但这同样也是该语言的核心优势之一。有了非阻塞式I&#x2F;O，就能自然而然地写出高效的基于事件的代码。</p>\n<h3 id=\"异步的计时函数\"><a href=\"#异步的计时函数\" class=\"headerlink\" title=\"异步的计时函数\"></a>异步的计时函数</h3><p>我们已经看到，异步函数非常适合用于I&#x2F;O操作，但有些时候，我们仅仅是因为需要异步而想要异步性。换句话说，我们想让一个函数在将来某个时刻再运行——这样的函数可能是为了作动画或模拟。基于时间的事件涉及两个著名的函数，即setTimeout与setInterval。遗憾的是，这两个著名的计时器函数都有自己的一些缺陷。正如我们在1.1.2节中看到的，其中有个缺陷是无法弥补的：当同一个JavaScript进程正运行着代码时，任何JavaScript计时函数都无法使其他代码运行起来。但是，即便容忍了这一局限性，setTimeout及setInterval的不确定性也会令人犯怵。下面是一个示例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fireCount = <span class=\"number\">0</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>-start &gt; <span class=\"number\">1000</span>) &#123; </span><br><span class=\"line\">            <span class=\"built_in\">clearInterval</span>(timer);     </span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fireCount);   </span><br><span class=\"line\">            <span class=\"keyword\">return</span>;   </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    fireCount++; </span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如果使用setInterval调度事件且延迟设定为0毫秒，则会尽可能频繁地运行此事件，对吗？那么，在运行于高速英特尔i7处理器之上的现代浏览器中，此事件的触发频率到底如何呢？</p>\n<p>大约为200次&#x2F;秒。这是Chrome、Safari和Firefox等浏览器的平均值。在Node环境下，此事件的触发频率大约能达到1000次&#x2F;秒。（若使用setTimeout来调度事件，重复这些实验也会得到类似的结果。）作为对比，如果将setInterval替换成简单的while循环，则在Chrome中此事件的触发频率将达到400万次&#x2F;秒，而在Node中会达到500万次&#x2F;秒</p>\n<p>这是怎么回事？最后我们发现，setTimeout和setInterval就是想设计成慢吞吞的！事实上，HTML规范（这是所有主要浏览器都遵守的规范）推行的延时&#x2F;时隔的最小值就是4毫秒！</p>\n<p>那么，如果需要更细粒度的计时，该怎么办呢？有些运行时环境提供了备选方案。</p>\n<blockquote>\n<p>1: 在Node中，process.nextTick允许将事件调度成尽可能快地触发。对于笔者的系统，process.nextTick事件的触发频率可以超过10万次&#x2F;秒。<br>2: 一些现代浏览器（含IE9+）带有一个requestAnimationFrame函数。此函数有两个目标：一方面，它允许以60+帧&#x2F;秒的速度运行JavaScript动画；另一方面，它又避免后台选项卡运行这些动画，从而节约CPU周期。在最新版的Chrome浏览器中，甚至能实现亚毫秒级的精度</p>\n</blockquote>\n<p>尽管这些计时函数是异步JavaScript混饭吃的家伙什儿，但永远不要忘记，setTimeout和setInterval就是些不精确的计时工具。在Node中，如果只是想产生一个短时延迟，请使用process.nextTick。在浏览器端，请尝试使用垫片技术（shim）③：在支持requestAnimationFrame的浏览器中，推荐使用requestAnimationFrame；在不支持requestAnimationFrame的浏览器中，则退而使用setTimeout。</p>\n<p>到这里，关于JavaScript基本异步函数的简要概览就结束了。但怎样才能知道一个函数到底何时异步呢？下一节中，我们在亲自编写异步函数的同时再思考这个问题</p>\n<h2 id=\"异步函数的编写\"><a href=\"#异步函数的编写\" class=\"headerlink\" title=\"异步函数的编写\"></a>异步函数的编写</h2><p>JavaScript中的每个异步函数都构建在其他某个或某些异步函数之上。凡是异步函数，从上到下（一直到原生代码）都是异步的！</p>\n<p>反之亦然：任何函数只要使用了异步的函数，就必须以异步的方式给出其操作结果。正如我们在1.1.2节学到的，JavaScript并没有提供一种机制以阻止函数在其异步操作结束之前返回。事实上，除非函数返回，否则不会触发任何异步事件。</p>\n<p>本节将考察异步函数设计的一些常见模式。我们将看到有些函数如反复无常的小人，非得等到特定时候才下决心成为异步的。不过，我们先来精确地定义异步函数。</p>\n<h3 id=\"何时称函数为异步的\"><a href=\"#何时称函数为异步的\" class=\"headerlink\" title=\"何时称函数为异步的\"></a>何时称函数为异步的</h3><p>异步函数这个术语有点名不副实：调用一个函数时，程序只在该函数返回之后才能继续。JavaScript写手如果称一个函数为“异步的”，其意思是这个函数会导致将来再运行另一个函数，后者取自于事件队列（若后面这个函数是作为参数传递给前者的，则称其为回调函数，简称为回调）  。于是，一个取用回调的异步函数永远都能通过以下测试</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> functionHasReturned = <span class=\"literal\">false</span>; </span><br><span class=\"line\"><span class=\"title function_\">asyncFunction</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;  </span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">assert</span>(functionHasReturned); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">functionHasReturned = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>异步函数还涉及另一个术语，即非阻塞。非阻塞这个词强调了异步函数的高速度：异步MySQL数据库驱动程序做一个查询可能要花上一小时，但负责发送查询请求的那个函数却能以微秒级速度返回。这对于那些需要快速处理海量请求的网站服务器来说，绝对是个福音。</p>\n<p>通常，那些取用回调的函数都会将其作为自己的最后一个参数。（可惜的是，老资格的setTimeout和setInterval都是这一约定的特例。）不过，有些异步函数也会间接取用回调，它们会返回Promise对象或使用PubSub模式。本书稍后就会介绍这些异步设计模式。</p>\n<p>遗憾的是，要想确认某个函数异步与否，唯一的方法就是审查其源代码。有些同步函数却拥有看起来像是异步的API，这或者是因为它们将来可能会变成异步的，又或者是因为回调这种形式能方便地返回多个参数。一旦存疑，请别指望函数就是异步的。</p>\n<h3 id=\"间或异步的函数\"><a href=\"#间或异步的函数\" class=\"headerlink\" title=\"间或异步的函数\"></a>间或异步的函数</h3><p>有些函数某些时候是异步的，但其他时候却不然。举个例子，jQuery的同名函数（通常记作$）可用于延迟函数直至DOM已经结束加载。但是，若DOM早已结束了加载，则不存在任何延迟，$的回调将会立即触发。</p>\n<p>不注意的话，这种行为的不可预知性会带来很多麻烦。我曾经看到也犯过这样一个错误，即假定$会在已加载本页面其他脚本之后再运行一个函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// application.js </span></span><br><span class=\"line\">$(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    utils.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Ready&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// utils.js </span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">utils</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">log</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">console</span>)</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"property\">log</span>.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">console</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script src ＝&quot;application.js&quot; &gt;&lt;/script &gt;</span><br><span class=\"line\">&lt;script src ＝&quot;util.js&quot; &gt;&lt;/script &gt;</span><br></pre></td></tr></table></figure>\n<p>这段代码运行得很好，但前提是浏览器并未从缓存中加载页面（这会导致DOM早在脚本运行之前就已加载就绪）。如果出现这种情况，传递给$的回调就会在设置utils.log之前运行，从而导致一个错误。（为了避免这种情况，应该采用一种更现代的管理客户端依赖性的方法。请参阅第6章。）</p>\n<p>下面来看另一个例子。</p>\n<h3 id=\"缓存型异步函数\"><a href=\"#缓存型异步函数\" class=\"headerlink\" title=\"缓存型异步函数\"></a>缓存型异步函数</h3><p>间或异步的函数有一个常见变种是可缓存结果的异步请求类函数。举例来说，假设正在编写一个基于浏览器的计算器，它使用了网页Wo r k e r对象以单独开一个线程来进行计算。（第5章将介绍网页Worker对象的API。）主脚本看起来像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> calculationCache = &#123;&#125;,</span><br><span class=\"line\">    calculationCallbacks = &#123;&#125;,</span><br><span class=\"line\">    mathWorker = <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>(<span class=\"string\">&#x27;calculator.js&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">mathWorker.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">var</span> message = e.<span class=\"property\">data</span>;   </span><br><span class=\"line\">    calculationCache[message.<span class=\"property\">formula</span>] = message.<span class=\"property\">result</span>;   </span><br><span class=\"line\">    calculationCallbacks[message.<span class=\"property\">formula</span>](message.<span class=\"property\">result</span>); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">runCalculation</span>(<span class=\"params\">formula, callback</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (formula <span class=\"keyword\">in</span> calculationCache) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(calculationCache[formula]);   </span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (formula <span class=\"keyword\">in</span> calculationCallbacks) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;       </span><br><span class=\"line\">            <span class=\"title function_\">runCalculation</span>(formula, callback);    </span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);   </span><br><span class=\"line\">    &#125;;   </span><br><span class=\"line\"></span><br><span class=\"line\">    mathWorker.<span class=\"title function_\">postMessage</span>(formula);   </span><br><span class=\"line\">    calculationCallbacks[formula] = callback; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在这里，当结果已经缓存时，runCalculation函数是同步的，否则就是异步的。<br>存在3种可能的情景。</p>\n<p>1: 公式已经计算完成，于是结果位于calculationCache中。这种情况下，runCalculation是同步的。<br>2: 公式已经发送给Worker对象，但尚未收到结果。这种情况下，runCalculation设定了一个延时以便再次调用自身；重复这一过程直到结果位于calculationCache中为止。<br>3: 公式尚未发送给Worker对象。这种情况下，将会从Worker对象的’message’事件监听器激活回调。</p>\n<p>请注意，在第2种和第3种情景中，我们按照两种不同的方式来等待任务的完成。这个例子写成这样，就是为了演示依据哪几种常见方式来等待某些东西发生改变（如缓存型计算公式的值）。是不是应该倾向于其中某种方式呢？我们接着往下看。</p>\n<h3 id=\"异步递归与回调存储\"><a href=\"#异步递归与回调存储\" class=\"headerlink\" title=\"异步递归与回调存储\"></a>异步递归与回调存储</h3><p>在runCalculation函数中，为了等待Worker对象完成自己的工作，或者通过延时而重复相同的函数调用（即异步递归），或者简单地存储回调结果。</p>\n<p>哪种方式更好呢？乍一看，只使用异步递归是最简单的，因为这里不再需要calculationCallbacks对象。出于这个目的，JavaScript新手常常会使用setTimeout，因为它很像线程型语言的风格。此程序的Java版本可能会有这样一个循环：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (!calculationCache.<span class=\"title function_\">get</span>(formula)) &#123;</span><br><span class=\"line\">     <span class=\"title class_\">Thread</span>.<span class=\"title function_\">sleep</span>(<span class=\"number\">0</span>); </span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<p>但是，延时并不是免费的午餐。大量延时的话，会造成巨大的计算荷载。异步递归有一点很可怕，即在等待任务完成期间，可触发之延时的次数是不受限的！此外，异步递归还毫无必要地复杂化了应用程序的事件结构。基于这些原因，应将异步递归视作一种“反模式”的方式。</p>\n<p>在这个计算器例子中，为了避免异步递归，可以为每个公式存储一个回调数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> calculationCache = &#123;&#125;,     </span><br><span class=\"line\">    calculationCallbacks = &#123;&#125;,     </span><br><span class=\"line\">    mathWorker = <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>(<span class=\"string\">&#x27;calculator.js&#x27;</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">mathWorker.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">var</span> message = e.<span class=\"property\">data</span>;   </span><br><span class=\"line\">    calculationCache[message.<span class=\"property\">formula</span>] = message.<span class=\"property\">result</span>;   </span><br><span class=\"line\">    calculationCallbacks[message.<span class=\"property\">formula</span>].<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) &#123;     </span><br><span class=\"line\">        <span class=\"title function_\">callback</span>(message.<span class=\"property\">result</span>);   </span><br><span class=\"line\">    &#125;); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">runCalculation</span>(<span class=\"params\">formula, callback</span>) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (formula <span class=\"keyword\">in</span> calculationCache) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(calculationCache[formula]);   </span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (formula <span class=\"keyword\">in</span> calculationCallbacks) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> calculationCallbacks[formula].<span class=\"title function_\">push</span>(callback);   </span><br><span class=\"line\">    &#125;;   </span><br><span class=\"line\"></span><br><span class=\"line\">    mathWorker.<span class=\"title function_\">postMessage</span>(formula);   </span><br><span class=\"line\">    calculationCallbacks[formula] = [callback]; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>没有了延时，我们的代码要直观得多，也高效得多。</p>\n<p>总的来说，请避免异步递归。仅当所采用的库提供了异步功能但没有提供任何形式的回调机制时，异步递归才有必要。如果真的遇到这种情况，要做的第一件事应该是为该库写一个补丁。或者，干脆找一个更好的库。</p>\n<h3 id=\"返值与回调的混搭\"><a href=\"#返值与回调的混搭\" class=\"headerlink\" title=\"返值与回调的混搭\"></a>返值与回调的混搭</h3><p>在以上两种runCalculation实现中，有时会用到返值技术。这是出于简洁的目的而随意作出的选择。下面这行代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(calculationCache[formula]);  </span><br></pre></td></tr></table></figure>\n\n<p>很容易即可改写成</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">callback</span>(calculationCache[formula]); </span><br><span class=\"line\"><span class=\"keyword\">return</span>; </span><br></pre></td></tr></table></figure>\n\n<p>这是因为并没有打算使用这个返值。这是JavaScript的一种普遍做法，而且通常无害。</p>\n<p>不过，有些函数既返回有用的值，又要取用回调。这类情况下，切记回调有可能被同步调用（返值之前），也有可能被异步调用（返值之后）。永远不要定义一个潜在同步而返值却有可能用于回调的函数。举个例子，下面这个负责打开WebSocket连接以连至给定服务器的函数（使用缓存技术以确保每个服务器只有一个连接）就违反了上述规则。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> webSocketCache = &#123;&#125;; </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">openWebSocket</span>(<span class=\"params\">serverAddress, callback</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">var</span> socket; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (serverAddress <span class=\"keyword\">in</span> webSocketCache) &#123;     </span><br><span class=\"line\">        socket = webSocketCache[serverAddress]; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (socket.<span class=\"property\">readyState</span> === <span class=\"title class_\">WebSocket</span>.<span class=\"property\">OPEN</span>) &#123;       </span><br><span class=\"line\">            <span class=\"title function_\">callback</span>();     </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;       </span><br><span class=\"line\">            socket.<span class=\"property\">onopen</span> = _.<span class=\"title function_\">compose</span>(callback, socket.<span class=\"property\">onopen</span>);    </span><br><span class=\"line\">        &#125;;   </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;     </span><br><span class=\"line\">        socket = <span class=\"keyword\">new</span> <span class=\"title class_\">WebSocket</span>(serverAddress);     </span><br><span class=\"line\">        webSocketCache[serverAddress] = socket;</span><br><span class=\"line\">        socket.<span class=\"property\">onopen</span> = callback;   </span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> socket; </span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<p>（这段代码依赖于Underscore.js库。_.compose定义的这个新函数既运行了callback，又运行了初始的socket.onopen回调。）这段代码的问题在于，如果套接字已经缓存且打开，则会在函数返值之前就运行回调，这会使以下代码崩溃。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> socket = <span class=\"title function_\">openWebSocket</span>(url, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;   </span><br><span class=\"line\">    socket.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;Hello, server!&#x27;</span>); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>怎么解决呢？将回调封装在setTimeout中即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (socket.<span class=\"property\">readyState</span> === <span class=\"title class_\">WebSocket</span>.<span class=\"property\">OPEN</span>) &#123;   </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(callback, <span class=\"number\">0</span>);</span><br><span class=\"line\"> &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">     <span class=\"comment\">// ... </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里使用延时会让人感觉是在东拼西凑，但这总比API自相矛盾要好得多。</p>\n<p>在本节中，我们看到了一些编写异步函数的最佳实践。请勿依赖那些看似始终异步的函数，除非已经阅读其源代码。请避免使用计时器方法来等待某个会变化的东西。如果同一个函数既返值又运行回调，则请确保回调在返值之后才运行。</p>\n<p>一次消化这些信息确实太多了一点，不过，编写好的异步函数确实是写出优秀JavaScript代码的关键所在。</p>\n<h2 id=\"异步错误的处理\"><a href=\"#异步错误的处理\" class=\"headerlink\" title=\"异步错误的处理\"></a>异步错误的处理</h2><p>像很多时髦的语言一样，JavaScript也允许抛出异常，随后再用一个try&#x2F;catch语句块捕获。如果抛出的异常未被捕获，大多数JavaScript环境都会提供一个有用的堆栈轨迹。举个例子，下面这段代码由于’{‘为无效JSON对象而抛出异常。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//EventModel/stackTrace.js </span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">JSONToObject</span>(<span class=\"params\">jsonStr</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(jsonStr);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"title class_\">JSON</span>ToObject(<span class=\"string\">&#x27;&#123;&#x27;</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">SyntaxError</span>: <span class=\"title class_\">Unexpected</span> end <span class=\"keyword\">of</span> input     </span><br><span class=\"line\">    at <span class=\"title class_\">Object</span>.<span class=\"property\">parse</span> (native)     </span><br><span class=\"line\">    at <span class=\"title class_\">JSON</span>ToObject (<span class=\"regexp\">/AsyncJS/</span>stackTrace.<span class=\"property\">js</span>:<span class=\"number\">2</span>:<span class=\"number\">15</span>)     </span><br><span class=\"line\">    at <span class=\"title class_\">Object</span>.&lt;anonymous&gt; (<span class=\"regexp\">/AsyncJS/</span>stackTrace.<span class=\"property\">js</span>:<span class=\"number\">4</span>:<span class=\"number\">11</span>) </span><br></pre></td></tr></table></figure>\n\n<p>堆栈轨迹不仅告诉我们哪里抛出了错误，而且说明了最初出错的地方：第4行代码。遗憾的是，自顶向下地跟踪异步错误起源并不都这么直截了当。在本节中，我们会看到为什么throw很少用作回调内错误处理的正确工具，还会了解如何设计异步API以绕开这一局限。</p>\n<h3 id=\"回调内抛出的错误\"><a href=\"#回调内抛出的错误\" class=\"headerlink\" title=\"回调内抛出的错误\"></a>回调内抛出的错误</h3><p>如果从异步回调中抛出错误，会发生什么事？让我们先来做个测试。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//EventModel/nestedErrors.js </span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;   </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">B</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">C</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Something terrible has happened!&#x27;</span>);     </span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);   </span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>); </span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>); </span><br></pre></td></tr></table></figure>\n\n<p>上述应用的结果是一条极其简短的堆栈轨迹。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: Something terrible has happened!     </span><br><span class=\"line\">    at Timer.C (/AsyncJS/nestedErrors.js:4:13) </span><br></pre></td></tr></table></figure>\n\n<p>等等，A和B发生了什么事？为什么它们没有出现在堆栈轨迹中？这是因为运行C的时候，A和B并不在内存堆栈里。这3个函数都是从事件队列直接运行的。</p>\n<p>基于同样的理由，利用try&#x2F;catch语句块并不能捕获从异步回调中抛出的错误。下面进行演示。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;   </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Catch me if you can!&#x27;</span>);   </span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>); </span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;  </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(e);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>看到这里的问题了吗？这里的try&#x2F;catch语句块只捕获setTimeout函数自身内部发生的那些错误。因为setTimeout异步地运行其回调，所以即使延时设置为0，回调抛出的错误也会直接流向应用程序的未捕获异常处理器（请参阅1.4.2节）</p>\n<p>总的来说，取用异步回调的函数即使包装上try&#x2F;catch语句块，也只是无用之举。（特例是，该异步函数确实是在同步地做某些事且容易出错。例如，Node的fs.watch(file,callback)就是这样一个函数，它在目标文件不存在时会抛出一个错误。）正因为此，Node.js中的回调几乎总是接受一个错误作为其首个参数，这样就允许回调自己来决定如何处理这个错误。举个例子，下面这个Node应用尝试异步地读取一个文件，还负责记录下任何错误（如“文件不存在”）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//EventModel/readFile.js </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>); </span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;fhgwgdz.txt&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err);   </span><br><span class=\"line\">    &#125;;   </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data.<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;utf8&#x27;</span>)); </span><br><span class=\"line\">&#125;); </span><br></pre></td></tr></table></figure>\n\n<p>客户端JavaScript库的一致性要稍微差些，不过最常见的模式是，针对成败这两种情形各规定一个单独的回调。jQuery的Ajax方法就遵循了这个模式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/data&#x27;</span>, &#123;  </span><br><span class=\"line\">     <span class=\"attr\">success</span>: successHandler,   </span><br><span class=\"line\">     <span class=\"attr\">failure</span>: failureHandler &#125;); </span><br></pre></td></tr></table></figure>\n<p>不管API形态像什么，始终要记住的是，只能在回调内部处理源于回调的异步错误。异步尤达大师会说：“做，或者不做，没有试试看一说。”</p>\n<h3 id=\"未捕获异常的处理\"><a href=\"#未捕获异常的处理\" class=\"headerlink\" title=\"未捕获异常的处理\"></a>未捕获异常的处理</h3><p>如果是从回调中抛出异常的，则由那个调用了回调的人负责捕获该异常。但如果异常从未被捕获，又会怎么样？这时，不同的JavaScript图环境有着不同的游戏规则……</p>\n<p>1.在浏览器环境中现代浏览器会在开发人员控制台显示那些未捕获的异常，接着返回事件队列。要想修改这种行为，可以给window.onerror附加一个处理器。如果windows.onerror处理器返回true，则能阻止浏览器的默认错误处理行为。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">    <span class=\"comment\">//彻底忽略所有错误</span></span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<p>在成品应用中，会考虑某种JavaScript错误处理服务，譬如Errorception①。Errorception提供了一个现成的windows.onerror处理器，它向应用服务器报告所有未捕获的异常，接着应用服务器发送消息通知我们。</p>\n<p>2.在Node.js环境中在Node环境中，window.onerror的类似物就是process对象的uncaughtException事件。正常情况下，Node应用会因未捕获的异常而立即退出。但只要至少还有一个uncaughtException事件处理器，Node应用就会直接返回事件队列。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;uncaughtException&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123;   </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err);  </span><br><span class=\"line\">    <span class=\"comment\">//避免了关停的命运！</span></span><br><span class=\"line\">&#125;); </span><br></pre></td></tr></table></figure>\n\n<p>但是，自Node  0.8.4起，uncaughtException事件就被废弃了。据其文档所言，对异常处理而言，uncaughtException是一种非常粗暴的机制，它在将来可能会被放弃……</p>\n<blockquote>\n<p>请勿使用uncaughtException，而应使用Domain对象。Domain对象又是什么？你可能会这样问。</p>\n</blockquote>\n<p>Domain对象是事件化对象（第2章会详细讨论），它将throw转化为’error’事件。下面是一个例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//EventModel/domainThrow.js </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myDomain = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;domain&#x27;</span>).<span class=\"title function_\">create</span>();</span><br><span class=\"line\">myDomain.<span class=\"title function_\">run</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Listen to me!&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">50</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myDomain.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Error ignored!&#x27;</span>);</span><br><span class=\"line\">&#125;); </span><br></pre></td></tr></table></figure>\n\n<p>源于延时事件的throw只是简单地触发了Domain对象的错误处理器。<br>Error ignored!<br>很奇妙，是不是？Domain对象让throw语句生动了很多。遗憾的是，仅在Node  0.8+环境中才能使用Domain对象；在我写作本书时，Domain对象仍被视作试验性的特性。更多信息请参阅Node文档。②不管在浏览器端还是服务器端，全局的异常处理器都应被视作最后一根救命稻草。请仅在调试时才使用它。</p>\n<h3 id=\"抛出还是不抛出\"><a href=\"#抛出还是不抛出\" class=\"headerlink\" title=\"抛出还是不抛出\"></a>抛出还是不抛出</h3><p>遇到错误时，最简单的解决方法就是抛出这个错误。在Node代码中，大家会经常看到类似这样的回调：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;   <span class=\"comment\">// ... </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在第4章中，我们会经常沿用这一做法。但是，在成品应用中，允许例行的异常及致命的错误像踢皮球一样踢给全局处理器，这是不可接受的。回调中的throw相当于JavaScript写手在说“现在我还不想考虑这个”。</p>\n<p>如果抛出那些自己知道肯定会被捕获的异常呢？这种做法同样凶险万分。2011年，Isaac Schlueter（npm的开发者，在任的Node开发负责人）就主张try&#x2F;catch是一种“反模式”的方式。</p>\n<blockquote>\n<p>try&#x2F;catch只是包装着漂亮花括弧的goto语句。一旦跑去处理错误，就无法回到中断之处继续向下执行。更糟糕的是，通过throw语句的代码，完全不知道自己会跳到什么地方。返回错误码的时候，就相当于正在履行合约。抛出错误的时候，就好像在说，“我知道我正在和你说话，但我现在不想搭理你，我要先找你老板谈谈”，这太粗俗无礼了。如果不是什么紧急情况，请别这么做；如果确实是紧急情况，则应该直接崩溃掉。</p>\n</blockquote>\n<p>Schlueter提倡完全将throw用作断言似的构造结构，作为一种挂起应用的方式——当应用在做完全没预料到的事时，即挂起应用。Node社区主要遵循这一建议，尽管这种情况可能会随着Domain对象的出现而改变。</p>\n<p>那么，关于异步错误的处理，目前的最佳实践是什么呢？我认为应该听从Schlueter的建议：如果想让整个应用停止工作，请勇往直前地大胆使用throw。否则，请认真考虑一下应该如何处理错误。是想给用户显示一条出错消息吗？是想重试请求吗？还是想唱一曲“雏菊铃之歌”？那就这么处理吧，只是请尽可能地靠近错误源头。</p>\n<h2 id=\"嵌套式回调的解嵌套\"><a href=\"#嵌套式回调的解嵌套\" class=\"headerlink\" title=\"嵌套式回调的解嵌套\"></a>嵌套式回调的解嵌套</h2><p>JavaScript中最常见的反模式做法是，回调内部再嵌套回调。还记得前言里提到的金字塔厄运吗？我们先来看一个具体的例子，你也可能在Node服务器上看到过类似的代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">checkPassword</span>(<span class=\"params\">username, passwordGuess, callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> queryStr = <span class=\"string\">&#x27;SELECT * FROM user WHERE username = ?&#x27;</span>;</span><br><span class=\"line\">    db.<span class=\"title function_\">query</span>(queryStr, username,</span><br><span class=\"line\">        <span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err; </span><br><span class=\"line\">            <span class=\"title function_\">hash</span>(passwordGuess,<span class=\"keyword\">function</span> (<span class=\"params\">passwordGuessHash</span>) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">callback</span>(passwordGuessHash === result[<span class=\"string\">&#x27;password_hash&#x27;</span>]);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>这里定义了一个异步函数checkPassword，它触发了另一个异步函数db.query，而后者又可能触发另外一个异步函数hash。（在之前，无法确认这些函数是否真的异步，但这里的几个函数理应如此。）</p>\n<p>这段代码有什么问题呢？目前为止，没有任何问题。它能用，而且简洁明了。但是，如果试图向其添加新特性，它就会变得毛里毛躁、险象环生，比如去处理那个数据库错误，而不是抛出错误（请参阅1.4.3节）、记录尝试访问数据库的次数、阻塞访问数据库，等等。</p>\n<p>嵌套式回调诱惑我们通过添加更多代码来添加更多特性，而不是将这些特性实现为可管理、可重用的代码片段。checkPassword有一种可以避免出现上述苗头的等价实现方式，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">checkPassword</span>(<span class=\"params\">username, passwordGuess, callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> passwordHash; <span class=\"keyword\">var</span> queryStr = <span class=\"string\">&#x27;SELECT * FROM user WHERE username = ?&#x27;</span>;</span><br><span class=\"line\">    db.<span class=\"title function_\">query</span>(qyeryStr, username, queryCallback);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">queryCallback</span>(<span class=\"params\">err, result</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err; passwordHash = result[<span class=\"string\">&#x27;password_hash&#x27;</span>];</span><br><span class=\"line\">        <span class=\"title function_\">hash</span>(passwordGuess, hashCallback);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">hashCallback</span>(<span class=\"params\">passwordGuessHash</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">callback</span>(passwordHash === passwordGuessHash);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种写法更啰嗦一些，但读起来更清晰，也更容易扩展。由于这里赋予了异步结果（即passwordHash）更宽广的作用域，所以获得了更大的灵活性。<br>按照惯例，请避免两层以上的函数嵌套。关键是找到一种在激活异步调用之函数的外部存储异步结果的方式，这样回调本身就没有必要再嵌套了。</p>\n<p>如果这样听起来有点诘聱难懂，请别担心。我们在后续几章中会看到大量的异步事件例子，那里的异步事件顺序运行且没有嵌套式事件处理器。</p>\n","excerpt":"<p>事件！事件到底是怎么工作的？JavaScrip t出现了多久，对 JavaScript 异步事件模型就迷惘了多久。迷惘导致 bug，bug 导致愤怒，然后尤达大师就会教我们如何如何……不过本质上，从概念上看，JavaScript事件模型既优雅又实用。一旦大家接受了这种语言的单线程设计，就会觉得 JavaScript 事件模型更像是一种功能，而不是一种局限。它意味着我们的代码是不可中断的，也意味着调度的事件会整整齐齐排好队，有条不紊地运行。本章将介绍JavaScript的异步机制，并破除一些常见的误解。我们会看到setTimeout 真正做了些什么。接着会讨论回调中抛出错误的处理。最后会奠定本书的主旨：为了清晰和可维护性，努力组织异步代码。<br>","more":"</p>\n<h2 id=\"事件的调度\"><a href=\"#事件的调度\" class=\"headerlink\" title=\"事件的调度\"></a>事件的调度</h2><p>如果想让 JavaScript 中的某段代码将来再运行，可以将它放在回调中。回调就是一种普通函数，只不过它是传给像 setTimeout 这样的函数，或者绑定为像 document.onready 这样的属性。运行回调时，我们称已触发某事件（譬如延时结束或页面加载完毕）。当然，可怕的总是那些细节，哪怕是像 setTimeout 这样看起来很简单的东西。对 setTimeout 的描述通常像这样：</p>\n<blockquote>\n<p>给定一个回调及n毫秒的延迟，setTimeout就会在n毫秒后运行该回调。</p>\n</blockquote>\n<p>但是，正如我们将在这一节乃至这一章里看到的，以上描述存在严重缺陷。大多数情况下，该描述只能算接近正确，而在其他情况下则完全是谬误。要想真正理解 setTimeout，必须先大体理解 JavaScript 事件模型。</p>\n<h3 id=\"现在还是将来运行\"><a href=\"#现在还是将来运行\" class=\"headerlink\" title=\"现在还是将来运行\"></a>现在还是将来运行</h3><p>在探究setTimeout之前，先来看一个简单的例子。该情形常常会迷惑JavaScript新手，特别是那些刚刚从Java和Ruby等多线程语言迁移过来的新手</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span>; i++) &#123;   </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123; </span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); </span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>); </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>4 4 4 </p>\n<p>大多数刚接触JavaScript语言的人都会认为以上循环会输出1，2，3，或者重复输出这3个数字，因为这里的3次延时都抢着要第一个触发（每次暂停都调度为0毫秒后到时）。</p>\n<p>要理解为什么输出是4，4，4，需要知道以下3件事。</p>\n<blockquote>\n<p>1: 这里只有一个名为i的变量，其作用域由声明语句var i定义（该声明语句在不经意间让i的作用域不是循环内部，而是扩散至蕴含循环的那个最内侧函数）。<br>2: 循环结束后，i&#x3D;&#x3D;&#x3D;4一直递增，直到不再满足条件i&lt;&#x3D;3为止。<br>3: JavaScript事件处理器在线程空闲之前不会运行。</p>\n</blockquote>\n<p>前两条还属于JavaScript 101的范畴，但第三个更像是一个“惊喜”。一开始使用JavaScript的时候，我也不太相信会这样。Java令我担心自己的代码随时会被中断。上百万种潜在的边界情况让我焦虑万分，我一直在想：“要是在这两行代码之间发生了什么稀奇古怪的事，会怎么样呢？”然后，终于有一天，我再也没有这样的担心了……</p>\n<h3 id=\"线程的阻塞\"><a href=\"#线程的阻塞\" class=\"headerlink\" title=\"线程的阻塞\"></a>线程的阻塞</h3><p>下面这段代码打破了我对JavaScript事件的成见。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//EventModel/loopBlockingTimeout.js </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>; </span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123; </span><br><span class=\"line\">     <span class=\"keyword\">var</span> end = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>;  </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Time elapsed:&#x27;</span>, end - start, <span class=\"string\">&#x27;ms&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span> - start &lt; <span class=\"number\">1000</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>按照多线程的思维定势，我会预计500毫秒后计时函数就会运行。不过这要求中断欲持续整整一秒钟的循环。如果运行代码，会得到类似这样的结果：</p>\n<p>Time elapsed: 1002ms</p>\n<p>大家得到的数字可能会稍有不同，这是因为setTimeout和setIn- terval一样，  其计时精度要比我们的期望值差很多（请参阅1.2.2节）。不过，这个数字肯定至少是1000，因为setTimeout回调在while循环结束运行之前不可能被触发。</p>\n<p>那么，如果setTimeout没有使用另一个线程，那它到底在做什么呢？</p>\n<h3 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h3><p>调用setTimeout的时候，会有一个延时事件排入队列。然后setTimeout调用之后的那行代码运行，接着是再下一行代码，直到再也没有任何代码。这时JavaScript虚拟机才会问：“队列里都有谁啊？”</p>\n<p>如果队列中至少有一个事件适合于“触发”（就像1000毫秒之前设定好的那个为期500毫秒的延时事件），则虚拟机会挑选一个事件，并调用此事件的处理器（譬如传给setTimeout的那个函数）。事件处理器返回后，我们又回到队列处。</p>\n<p>输入事件的工作方式完全一样：用户单击一个已附加有单击事件处理器的DOM（Document Object Model，文档对象模型）元素时，会有一个单击事件排入队列。但是，该单击事件处理器要等到当前所有正在运行的代码均已结束后（可能还要等其他此前已排队的事件也依次结束）才会执行。因此，使用JavaScript的那些网页一不小心就会变得毫无反应。你可能听过事件循环这个术语，它是用于描述队列工作方式的。所谓事件循环，就像代码从一个循环中不断取出而运行一样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">runYourScript</span>();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (atLeastOneEventIsQueued) &#123; </span><br><span class=\"line\">       <span class=\"title function_\">fireNextQueuedEvent</span>(); </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这隐含着一个意思，即触发的每个事件都会位于堆栈轨迹的底部。关于这一点，1.4节会进一步阐述。</p>\n<p>事件的易调度性是JavaScript语言最大的特色之一。像setTimeout这样的异步函数只是简单地做延迟执行，而不是孵化新的线程。JavaScript代码永远不会被中断，这是因为代码在运行期间只需要排队事件即可，而这些事件在代码运行结束之前不会被触发。</p>\n<p>下一节将更细致地考查异步JavaScript代码的构造块。</p>\n<h2 id=\"异步函数的类型\"><a href=\"#异步函数的类型\" class=\"headerlink\" title=\"异步函数的类型\"></a>异步函数的类型</h2><p>每一种JavaScript环境都有自己的异步函数集。有些函数，如setTimeout和setInterval，是各种JavaScript环境普遍都有的。另一些函数则专属于某些浏览器或某几种服务器端框架。JavaScript环境提供的异步函数通常可以分为两大类：I&#x2F;O函数和计时函数。如果想在应用中定义复杂的异步行为，就要使用这两类异步函数作为基本的构造块。</p>\n<h3 id=\"异步的I-O函数\"><a href=\"#异步的I-O函数\" class=\"headerlink\" title=\"异步的I&#x2F;O函数\"></a>异步的I&#x2F;O函数</h3><p>创造Node.js，并不是为了人们能在服务器上运行JavaScript，仅仅是因为Ryan Dahl想要一个建立在某高级语言之上的事件驱动型服务器框架。JavaScript碰巧就是适合干这个的语言。为什么？因为JavaScript语言可以完美地实现非阻塞式I&#x2F;O。</p>\n<p>在其他语言中，一不小心就会“阻塞”应用（通常是运行循环）直到完成I&#x2F;O请求为止。而在JavaScript中，这种阻塞方式几乎沦为无稽之谈。类似如下的循环将永远运行下去，不可能停下来。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ajaxRequest = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>; </span><br><span class=\"line\">ajaxRequest.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, url); </span><br><span class=\"line\">ajaxRequest.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>); </span><br><span class=\"line\"><span class=\"keyword\">while</span> (ajaxRequest.<span class=\"property\">readyState</span> === <span class=\"title class_\">XMLHttpRequest</span>.<span class=\"property\">UNSENT</span>) &#123;  </span><br><span class=\"line\">     <span class=\"comment\">// readyState在循环返回之前不会有更改。</span></span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<p>相反，我们需要附加一个事件处理器，随即返回事件队列。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ajaxRequest = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>; </span><br><span class=\"line\">ajaxRequest.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, url);</span><br><span class=\"line\">ajaxRequest.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>); </span><br><span class=\"line\">ajaxRequest.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;  </span><br><span class=\"line\">    <span class=\"comment\">// ... </span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>就是这么回事。不论是在等待用户的按键行为，还是在等待远程服务器的批量数据，所需要做的就是定义一个回调，除非JavaScript环境提供的某个同步I&#x2F;O函数已经替我们完成了阻塞。</p>\n<p>在浏览器端，Ajax方法有一个可设置为false的async选项（但永远、永远别这么做），这会挂起整个浏览器窗格直到收到应答为止。在Node.js中，同步的API方法在名称上会有明确的标示，譬如fs.readFileSync。编写短小的脚本时，这些同步方法会很方便。但是，如果所编写的应用需要处理并行的多个请求或多项操作，则应该避免使用它们。可在今天，还有哪个应用不是这样的呢？</p>\n<p>有些I&#x2F;O函数既有同步效应，也有异步效应。举例来说，在现代浏览器中操纵DOM对象时，从脚本角度看，更改是即时生效的，但从视效角度看，在返回事件队列之前不会渲染这些DOM对象更改。这可以防止DOM对象被渲染成不一致的状态。</p>\n<blockquote>\n<p>console.log是异步的吗？</p>\n</blockquote>\n<p>WebKit的console.log由于表现出异步行为而让很多开发者惊诧不已。在Chrome或Safari中，以下这段代码会在控制台记录{foo:bar}。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;    </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj);    </span><br><span class=\"line\">obj.<span class=\"property\">foo</span> = <span class=\"string\">&#x27;bar&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>怎么会这样？We b K i t的console.log并没有立即拍摄对象快照，相反，它只存储了一个指向对象的引用，然后在代码返回事件队列时才去拍摄快照。Node的console.log是另一回事，它是严格同步的，因此同样的代码输出的却为{}。</p>\n<p>JavaScript采用了非阻塞式I&#x2F;O，这对新手来说是最大的一个障碍，但这同样也是该语言的核心优势之一。有了非阻塞式I&#x2F;O，就能自然而然地写出高效的基于事件的代码。</p>\n<h3 id=\"异步的计时函数\"><a href=\"#异步的计时函数\" class=\"headerlink\" title=\"异步的计时函数\"></a>异步的计时函数</h3><p>我们已经看到，异步函数非常适合用于I&#x2F;O操作，但有些时候，我们仅仅是因为需要异步而想要异步性。换句话说，我们想让一个函数在将来某个时刻再运行——这样的函数可能是为了作动画或模拟。基于时间的事件涉及两个著名的函数，即setTimeout与setInterval。遗憾的是，这两个著名的计时器函数都有自己的一些缺陷。正如我们在1.1.2节中看到的，其中有个缺陷是无法弥补的：当同一个JavaScript进程正运行着代码时，任何JavaScript计时函数都无法使其他代码运行起来。但是，即便容忍了这一局限性，setTimeout及setInterval的不确定性也会令人犯怵。下面是一个示例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fireCount = <span class=\"number\">0</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> timer = <span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>-start &gt; <span class=\"number\">1000</span>) &#123; </span><br><span class=\"line\">            <span class=\"built_in\">clearInterval</span>(timer);     </span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fireCount);   </span><br><span class=\"line\">            <span class=\"keyword\">return</span>;   </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    fireCount++; </span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如果使用setInterval调度事件且延迟设定为0毫秒，则会尽可能频繁地运行此事件，对吗？那么，在运行于高速英特尔i7处理器之上的现代浏览器中，此事件的触发频率到底如何呢？</p>\n<p>大约为200次&#x2F;秒。这是Chrome、Safari和Firefox等浏览器的平均值。在Node环境下，此事件的触发频率大约能达到1000次&#x2F;秒。（若使用setTimeout来调度事件，重复这些实验也会得到类似的结果。）作为对比，如果将setInterval替换成简单的while循环，则在Chrome中此事件的触发频率将达到400万次&#x2F;秒，而在Node中会达到500万次&#x2F;秒</p>\n<p>这是怎么回事？最后我们发现，setTimeout和setInterval就是想设计成慢吞吞的！事实上，HTML规范（这是所有主要浏览器都遵守的规范）推行的延时&#x2F;时隔的最小值就是4毫秒！</p>\n<p>那么，如果需要更细粒度的计时，该怎么办呢？有些运行时环境提供了备选方案。</p>\n<blockquote>\n<p>1: 在Node中，process.nextTick允许将事件调度成尽可能快地触发。对于笔者的系统，process.nextTick事件的触发频率可以超过10万次&#x2F;秒。<br>2: 一些现代浏览器（含IE9+）带有一个requestAnimationFrame函数。此函数有两个目标：一方面，它允许以60+帧&#x2F;秒的速度运行JavaScript动画；另一方面，它又避免后台选项卡运行这些动画，从而节约CPU周期。在最新版的Chrome浏览器中，甚至能实现亚毫秒级的精度</p>\n</blockquote>\n<p>尽管这些计时函数是异步JavaScript混饭吃的家伙什儿，但永远不要忘记，setTimeout和setInterval就是些不精确的计时工具。在Node中，如果只是想产生一个短时延迟，请使用process.nextTick。在浏览器端，请尝试使用垫片技术（shim）③：在支持requestAnimationFrame的浏览器中，推荐使用requestAnimationFrame；在不支持requestAnimationFrame的浏览器中，则退而使用setTimeout。</p>\n<p>到这里，关于JavaScript基本异步函数的简要概览就结束了。但怎样才能知道一个函数到底何时异步呢？下一节中，我们在亲自编写异步函数的同时再思考这个问题</p>\n<h2 id=\"异步函数的编写\"><a href=\"#异步函数的编写\" class=\"headerlink\" title=\"异步函数的编写\"></a>异步函数的编写</h2><p>JavaScript中的每个异步函数都构建在其他某个或某些异步函数之上。凡是异步函数，从上到下（一直到原生代码）都是异步的！</p>\n<p>反之亦然：任何函数只要使用了异步的函数，就必须以异步的方式给出其操作结果。正如我们在1.1.2节学到的，JavaScript并没有提供一种机制以阻止函数在其异步操作结束之前返回。事实上，除非函数返回，否则不会触发任何异步事件。</p>\n<p>本节将考察异步函数设计的一些常见模式。我们将看到有些函数如反复无常的小人，非得等到特定时候才下决心成为异步的。不过，我们先来精确地定义异步函数。</p>\n<h3 id=\"何时称函数为异步的\"><a href=\"#何时称函数为异步的\" class=\"headerlink\" title=\"何时称函数为异步的\"></a>何时称函数为异步的</h3><p>异步函数这个术语有点名不副实：调用一个函数时，程序只在该函数返回之后才能继续。JavaScript写手如果称一个函数为“异步的”，其意思是这个函数会导致将来再运行另一个函数，后者取自于事件队列（若后面这个函数是作为参数传递给前者的，则称其为回调函数，简称为回调）  。于是，一个取用回调的异步函数永远都能通过以下测试</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> functionHasReturned = <span class=\"literal\">false</span>; </span><br><span class=\"line\"><span class=\"title function_\">asyncFunction</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;  </span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">assert</span>(functionHasReturned); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">functionHasReturned = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>异步函数还涉及另一个术语，即非阻塞。非阻塞这个词强调了异步函数的高速度：异步MySQL数据库驱动程序做一个查询可能要花上一小时，但负责发送查询请求的那个函数却能以微秒级速度返回。这对于那些需要快速处理海量请求的网站服务器来说，绝对是个福音。</p>\n<p>通常，那些取用回调的函数都会将其作为自己的最后一个参数。（可惜的是，老资格的setTimeout和setInterval都是这一约定的特例。）不过，有些异步函数也会间接取用回调，它们会返回Promise对象或使用PubSub模式。本书稍后就会介绍这些异步设计模式。</p>\n<p>遗憾的是，要想确认某个函数异步与否，唯一的方法就是审查其源代码。有些同步函数却拥有看起来像是异步的API，这或者是因为它们将来可能会变成异步的，又或者是因为回调这种形式能方便地返回多个参数。一旦存疑，请别指望函数就是异步的。</p>\n<h3 id=\"间或异步的函数\"><a href=\"#间或异步的函数\" class=\"headerlink\" title=\"间或异步的函数\"></a>间或异步的函数</h3><p>有些函数某些时候是异步的，但其他时候却不然。举个例子，jQuery的同名函数（通常记作$）可用于延迟函数直至DOM已经结束加载。但是，若DOM早已结束了加载，则不存在任何延迟，$的回调将会立即触发。</p>\n<p>不注意的话，这种行为的不可预知性会带来很多麻烦。我曾经看到也犯过这样一个错误，即假定$会在已加载本页面其他脚本之后再运行一个函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// application.js </span></span><br><span class=\"line\">$(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    utils.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Ready&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// utils.js </span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">utils</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">log</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">console</span>)</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"property\">log</span>.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">console</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script src ＝&quot;application.js&quot; &gt;&lt;/script &gt;</span><br><span class=\"line\">&lt;script src ＝&quot;util.js&quot; &gt;&lt;/script &gt;</span><br></pre></td></tr></table></figure>\n<p>这段代码运行得很好，但前提是浏览器并未从缓存中加载页面（这会导致DOM早在脚本运行之前就已加载就绪）。如果出现这种情况，传递给$的回调就会在设置utils.log之前运行，从而导致一个错误。（为了避免这种情况，应该采用一种更现代的管理客户端依赖性的方法。请参阅第6章。）</p>\n<p>下面来看另一个例子。</p>\n<h3 id=\"缓存型异步函数\"><a href=\"#缓存型异步函数\" class=\"headerlink\" title=\"缓存型异步函数\"></a>缓存型异步函数</h3><p>间或异步的函数有一个常见变种是可缓存结果的异步请求类函数。举例来说，假设正在编写一个基于浏览器的计算器，它使用了网页Wo r k e r对象以单独开一个线程来进行计算。（第5章将介绍网页Worker对象的API。）主脚本看起来像这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> calculationCache = &#123;&#125;,</span><br><span class=\"line\">    calculationCallbacks = &#123;&#125;,</span><br><span class=\"line\">    mathWorker = <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>(<span class=\"string\">&#x27;calculator.js&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">mathWorker.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">var</span> message = e.<span class=\"property\">data</span>;   </span><br><span class=\"line\">    calculationCache[message.<span class=\"property\">formula</span>] = message.<span class=\"property\">result</span>;   </span><br><span class=\"line\">    calculationCallbacks[message.<span class=\"property\">formula</span>](message.<span class=\"property\">result</span>); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">runCalculation</span>(<span class=\"params\">formula, callback</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (formula <span class=\"keyword\">in</span> calculationCache) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(calculationCache[formula]);   </span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (formula <span class=\"keyword\">in</span> calculationCallbacks) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;       </span><br><span class=\"line\">            <span class=\"title function_\">runCalculation</span>(formula, callback);    </span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);   </span><br><span class=\"line\">    &#125;;   </span><br><span class=\"line\"></span><br><span class=\"line\">    mathWorker.<span class=\"title function_\">postMessage</span>(formula);   </span><br><span class=\"line\">    calculationCallbacks[formula] = callback; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在这里，当结果已经缓存时，runCalculation函数是同步的，否则就是异步的。<br>存在3种可能的情景。</p>\n<p>1: 公式已经计算完成，于是结果位于calculationCache中。这种情况下，runCalculation是同步的。<br>2: 公式已经发送给Worker对象，但尚未收到结果。这种情况下，runCalculation设定了一个延时以便再次调用自身；重复这一过程直到结果位于calculationCache中为止。<br>3: 公式尚未发送给Worker对象。这种情况下，将会从Worker对象的’message’事件监听器激活回调。</p>\n<p>请注意，在第2种和第3种情景中，我们按照两种不同的方式来等待任务的完成。这个例子写成这样，就是为了演示依据哪几种常见方式来等待某些东西发生改变（如缓存型计算公式的值）。是不是应该倾向于其中某种方式呢？我们接着往下看。</p>\n<h3 id=\"异步递归与回调存储\"><a href=\"#异步递归与回调存储\" class=\"headerlink\" title=\"异步递归与回调存储\"></a>异步递归与回调存储</h3><p>在runCalculation函数中，为了等待Worker对象完成自己的工作，或者通过延时而重复相同的函数调用（即异步递归），或者简单地存储回调结果。</p>\n<p>哪种方式更好呢？乍一看，只使用异步递归是最简单的，因为这里不再需要calculationCallbacks对象。出于这个目的，JavaScript新手常常会使用setTimeout，因为它很像线程型语言的风格。此程序的Java版本可能会有这样一个循环：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (!calculationCache.<span class=\"title function_\">get</span>(formula)) &#123;</span><br><span class=\"line\">     <span class=\"title class_\">Thread</span>.<span class=\"title function_\">sleep</span>(<span class=\"number\">0</span>); </span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<p>但是，延时并不是免费的午餐。大量延时的话，会造成巨大的计算荷载。异步递归有一点很可怕，即在等待任务完成期间，可触发之延时的次数是不受限的！此外，异步递归还毫无必要地复杂化了应用程序的事件结构。基于这些原因，应将异步递归视作一种“反模式”的方式。</p>\n<p>在这个计算器例子中，为了避免异步递归，可以为每个公式存储一个回调数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> calculationCache = &#123;&#125;,     </span><br><span class=\"line\">    calculationCallbacks = &#123;&#125;,     </span><br><span class=\"line\">    mathWorker = <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>(<span class=\"string\">&#x27;calculator.js&#x27;</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">mathWorker.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">var</span> message = e.<span class=\"property\">data</span>;   </span><br><span class=\"line\">    calculationCache[message.<span class=\"property\">formula</span>] = message.<span class=\"property\">result</span>;   </span><br><span class=\"line\">    calculationCallbacks[message.<span class=\"property\">formula</span>].<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) &#123;     </span><br><span class=\"line\">        <span class=\"title function_\">callback</span>(message.<span class=\"property\">result</span>);   </span><br><span class=\"line\">    &#125;); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">runCalculation</span>(<span class=\"params\">formula, callback</span>) &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (formula <span class=\"keyword\">in</span> calculationCache) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(calculationCache[formula]);   </span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (formula <span class=\"keyword\">in</span> calculationCallbacks) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> calculationCallbacks[formula].<span class=\"title function_\">push</span>(callback);   </span><br><span class=\"line\">    &#125;;   </span><br><span class=\"line\"></span><br><span class=\"line\">    mathWorker.<span class=\"title function_\">postMessage</span>(formula);   </span><br><span class=\"line\">    calculationCallbacks[formula] = [callback]; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>没有了延时，我们的代码要直观得多，也高效得多。</p>\n<p>总的来说，请避免异步递归。仅当所采用的库提供了异步功能但没有提供任何形式的回调机制时，异步递归才有必要。如果真的遇到这种情况，要做的第一件事应该是为该库写一个补丁。或者，干脆找一个更好的库。</p>\n<h3 id=\"返值与回调的混搭\"><a href=\"#返值与回调的混搭\" class=\"headerlink\" title=\"返值与回调的混搭\"></a>返值与回调的混搭</h3><p>在以上两种runCalculation实现中，有时会用到返值技术。这是出于简洁的目的而随意作出的选择。下面这行代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"title function_\">callback</span>(calculationCache[formula]);  </span><br></pre></td></tr></table></figure>\n\n<p>很容易即可改写成</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">callback</span>(calculationCache[formula]); </span><br><span class=\"line\"><span class=\"keyword\">return</span>; </span><br></pre></td></tr></table></figure>\n\n<p>这是因为并没有打算使用这个返值。这是JavaScript的一种普遍做法，而且通常无害。</p>\n<p>不过，有些函数既返回有用的值，又要取用回调。这类情况下，切记回调有可能被同步调用（返值之前），也有可能被异步调用（返值之后）。永远不要定义一个潜在同步而返值却有可能用于回调的函数。举个例子，下面这个负责打开WebSocket连接以连至给定服务器的函数（使用缓存技术以确保每个服务器只有一个连接）就违反了上述规则。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> webSocketCache = &#123;&#125;; </span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">openWebSocket</span>(<span class=\"params\">serverAddress, callback</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">var</span> socket; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (serverAddress <span class=\"keyword\">in</span> webSocketCache) &#123;     </span><br><span class=\"line\">        socket = webSocketCache[serverAddress]; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (socket.<span class=\"property\">readyState</span> === <span class=\"title class_\">WebSocket</span>.<span class=\"property\">OPEN</span>) &#123;       </span><br><span class=\"line\">            <span class=\"title function_\">callback</span>();     </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;       </span><br><span class=\"line\">            socket.<span class=\"property\">onopen</span> = _.<span class=\"title function_\">compose</span>(callback, socket.<span class=\"property\">onopen</span>);    </span><br><span class=\"line\">        &#125;;   </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;     </span><br><span class=\"line\">        socket = <span class=\"keyword\">new</span> <span class=\"title class_\">WebSocket</span>(serverAddress);     </span><br><span class=\"line\">        webSocketCache[serverAddress] = socket;</span><br><span class=\"line\">        socket.<span class=\"property\">onopen</span> = callback;   </span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> socket; </span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<p>（这段代码依赖于Underscore.js库。_.compose定义的这个新函数既运行了callback，又运行了初始的socket.onopen回调。）这段代码的问题在于，如果套接字已经缓存且打开，则会在函数返值之前就运行回调，这会使以下代码崩溃。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> socket = <span class=\"title function_\">openWebSocket</span>(url, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;   </span><br><span class=\"line\">    socket.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;Hello, server!&#x27;</span>); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>怎么解决呢？将回调封装在setTimeout中即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (socket.<span class=\"property\">readyState</span> === <span class=\"title class_\">WebSocket</span>.<span class=\"property\">OPEN</span>) &#123;   </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(callback, <span class=\"number\">0</span>);</span><br><span class=\"line\"> &#125; <span class=\"keyword\">else</span> &#123;  </span><br><span class=\"line\">     <span class=\"comment\">// ... </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里使用延时会让人感觉是在东拼西凑，但这总比API自相矛盾要好得多。</p>\n<p>在本节中，我们看到了一些编写异步函数的最佳实践。请勿依赖那些看似始终异步的函数，除非已经阅读其源代码。请避免使用计时器方法来等待某个会变化的东西。如果同一个函数既返值又运行回调，则请确保回调在返值之后才运行。</p>\n<p>一次消化这些信息确实太多了一点，不过，编写好的异步函数确实是写出优秀JavaScript代码的关键所在。</p>\n<h2 id=\"异步错误的处理\"><a href=\"#异步错误的处理\" class=\"headerlink\" title=\"异步错误的处理\"></a>异步错误的处理</h2><p>像很多时髦的语言一样，JavaScript也允许抛出异常，随后再用一个try&#x2F;catch语句块捕获。如果抛出的异常未被捕获，大多数JavaScript环境都会提供一个有用的堆栈轨迹。举个例子，下面这段代码由于’{‘为无效JSON对象而抛出异常。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//EventModel/stackTrace.js </span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">JSONToObject</span>(<span class=\"params\">jsonStr</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(jsonStr);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"title class_\">JSON</span>ToObject(<span class=\"string\">&#x27;&#123;&#x27;</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">SyntaxError</span>: <span class=\"title class_\">Unexpected</span> end <span class=\"keyword\">of</span> input     </span><br><span class=\"line\">    at <span class=\"title class_\">Object</span>.<span class=\"property\">parse</span> (native)     </span><br><span class=\"line\">    at <span class=\"title class_\">JSON</span>ToObject (<span class=\"regexp\">/AsyncJS/</span>stackTrace.<span class=\"property\">js</span>:<span class=\"number\">2</span>:<span class=\"number\">15</span>)     </span><br><span class=\"line\">    at <span class=\"title class_\">Object</span>.&lt;anonymous&gt; (<span class=\"regexp\">/AsyncJS/</span>stackTrace.<span class=\"property\">js</span>:<span class=\"number\">4</span>:<span class=\"number\">11</span>) </span><br></pre></td></tr></table></figure>\n\n<p>堆栈轨迹不仅告诉我们哪里抛出了错误，而且说明了最初出错的地方：第4行代码。遗憾的是，自顶向下地跟踪异步错误起源并不都这么直截了当。在本节中，我们会看到为什么throw很少用作回调内错误处理的正确工具，还会了解如何设计异步API以绕开这一局限。</p>\n<h3 id=\"回调内抛出的错误\"><a href=\"#回调内抛出的错误\" class=\"headerlink\" title=\"回调内抛出的错误\"></a>回调内抛出的错误</h3><p>如果从异步回调中抛出错误，会发生什么事？让我们先来做个测试。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//EventModel/nestedErrors.js </span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;   </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">B</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">C</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Something terrible has happened!&#x27;</span>);     </span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);   </span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>); </span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>); </span><br></pre></td></tr></table></figure>\n\n<p>上述应用的结果是一条极其简短的堆栈轨迹。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: Something terrible has happened!     </span><br><span class=\"line\">    at Timer.C (/AsyncJS/nestedErrors.js:4:13) </span><br></pre></td></tr></table></figure>\n\n<p>等等，A和B发生了什么事？为什么它们没有出现在堆栈轨迹中？这是因为运行C的时候，A和B并不在内存堆栈里。这3个函数都是从事件队列直接运行的。</p>\n<p>基于同样的理由，利用try&#x2F;catch语句块并不能捕获从异步回调中抛出的错误。下面进行演示。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;   </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Catch me if you can!&#x27;</span>);   </span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>); </span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;  </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(e);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>看到这里的问题了吗？这里的try&#x2F;catch语句块只捕获setTimeout函数自身内部发生的那些错误。因为setTimeout异步地运行其回调，所以即使延时设置为0，回调抛出的错误也会直接流向应用程序的未捕获异常处理器（请参阅1.4.2节）</p>\n<p>总的来说，取用异步回调的函数即使包装上try&#x2F;catch语句块，也只是无用之举。（特例是，该异步函数确实是在同步地做某些事且容易出错。例如，Node的fs.watch(file,callback)就是这样一个函数，它在目标文件不存在时会抛出一个错误。）正因为此，Node.js中的回调几乎总是接受一个错误作为其首个参数，这样就允许回调自己来决定如何处理这个错误。举个例子，下面这个Node应用尝试异步地读取一个文件，还负责记录下任何错误（如“文件不存在”）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//EventModel/readFile.js </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>); </span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;fhgwgdz.txt&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err);   </span><br><span class=\"line\">    &#125;;   </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data.<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;utf8&#x27;</span>)); </span><br><span class=\"line\">&#125;); </span><br></pre></td></tr></table></figure>\n\n<p>客户端JavaScript库的一致性要稍微差些，不过最常见的模式是，针对成败这两种情形各规定一个单独的回调。jQuery的Ajax方法就遵循了这个模式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/data&#x27;</span>, &#123;  </span><br><span class=\"line\">     <span class=\"attr\">success</span>: successHandler,   </span><br><span class=\"line\">     <span class=\"attr\">failure</span>: failureHandler &#125;); </span><br></pre></td></tr></table></figure>\n<p>不管API形态像什么，始终要记住的是，只能在回调内部处理源于回调的异步错误。异步尤达大师会说：“做，或者不做，没有试试看一说。”</p>\n<h3 id=\"未捕获异常的处理\"><a href=\"#未捕获异常的处理\" class=\"headerlink\" title=\"未捕获异常的处理\"></a>未捕获异常的处理</h3><p>如果是从回调中抛出异常的，则由那个调用了回调的人负责捕获该异常。但如果异常从未被捕获，又会怎么样？这时，不同的JavaScript图环境有着不同的游戏规则……</p>\n<p>1.在浏览器环境中现代浏览器会在开发人员控制台显示那些未捕获的异常，接着返回事件队列。要想修改这种行为，可以给window.onerror附加一个处理器。如果windows.onerror处理器返回true，则能阻止浏览器的默认错误处理行为。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">    <span class=\"comment\">//彻底忽略所有错误</span></span><br><span class=\"line\">&#125;; </span><br></pre></td></tr></table></figure>\n\n<p>在成品应用中，会考虑某种JavaScript错误处理服务，譬如Errorception①。Errorception提供了一个现成的windows.onerror处理器，它向应用服务器报告所有未捕获的异常，接着应用服务器发送消息通知我们。</p>\n<p>2.在Node.js环境中在Node环境中，window.onerror的类似物就是process对象的uncaughtException事件。正常情况下，Node应用会因未捕获的异常而立即退出。但只要至少还有一个uncaughtException事件处理器，Node应用就会直接返回事件队列。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;uncaughtException&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123;   </span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err);  </span><br><span class=\"line\">    <span class=\"comment\">//避免了关停的命运！</span></span><br><span class=\"line\">&#125;); </span><br></pre></td></tr></table></figure>\n\n<p>但是，自Node  0.8.4起，uncaughtException事件就被废弃了。据其文档所言，对异常处理而言，uncaughtException是一种非常粗暴的机制，它在将来可能会被放弃……</p>\n<blockquote>\n<p>请勿使用uncaughtException，而应使用Domain对象。Domain对象又是什么？你可能会这样问。</p>\n</blockquote>\n<p>Domain对象是事件化对象（第2章会详细讨论），它将throw转化为’error’事件。下面是一个例子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//EventModel/domainThrow.js </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myDomain = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;domain&#x27;</span>).<span class=\"title function_\">create</span>();</span><br><span class=\"line\">myDomain.<span class=\"title function_\">run</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Listen to me!&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">50</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">myDomain.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Error ignored!&#x27;</span>);</span><br><span class=\"line\">&#125;); </span><br></pre></td></tr></table></figure>\n\n<p>源于延时事件的throw只是简单地触发了Domain对象的错误处理器。<br>Error ignored!<br>很奇妙，是不是？Domain对象让throw语句生动了很多。遗憾的是，仅在Node  0.8+环境中才能使用Domain对象；在我写作本书时，Domain对象仍被视作试验性的特性。更多信息请参阅Node文档。②不管在浏览器端还是服务器端，全局的异常处理器都应被视作最后一根救命稻草。请仅在调试时才使用它。</p>\n<h3 id=\"抛出还是不抛出\"><a href=\"#抛出还是不抛出\" class=\"headerlink\" title=\"抛出还是不抛出\"></a>抛出还是不抛出</h3><p>遇到错误时，最简单的解决方法就是抛出这个错误。在Node代码中，大家会经常看到类似这样的回调：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;   <span class=\"comment\">// ... </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在第4章中，我们会经常沿用这一做法。但是，在成品应用中，允许例行的异常及致命的错误像踢皮球一样踢给全局处理器，这是不可接受的。回调中的throw相当于JavaScript写手在说“现在我还不想考虑这个”。</p>\n<p>如果抛出那些自己知道肯定会被捕获的异常呢？这种做法同样凶险万分。2011年，Isaac Schlueter（npm的开发者，在任的Node开发负责人）就主张try&#x2F;catch是一种“反模式”的方式。</p>\n<blockquote>\n<p>try&#x2F;catch只是包装着漂亮花括弧的goto语句。一旦跑去处理错误，就无法回到中断之处继续向下执行。更糟糕的是，通过throw语句的代码，完全不知道自己会跳到什么地方。返回错误码的时候，就相当于正在履行合约。抛出错误的时候，就好像在说，“我知道我正在和你说话，但我现在不想搭理你，我要先找你老板谈谈”，这太粗俗无礼了。如果不是什么紧急情况，请别这么做；如果确实是紧急情况，则应该直接崩溃掉。</p>\n</blockquote>\n<p>Schlueter提倡完全将throw用作断言似的构造结构，作为一种挂起应用的方式——当应用在做完全没预料到的事时，即挂起应用。Node社区主要遵循这一建议，尽管这种情况可能会随着Domain对象的出现而改变。</p>\n<p>那么，关于异步错误的处理，目前的最佳实践是什么呢？我认为应该听从Schlueter的建议：如果想让整个应用停止工作，请勇往直前地大胆使用throw。否则，请认真考虑一下应该如何处理错误。是想给用户显示一条出错消息吗？是想重试请求吗？还是想唱一曲“雏菊铃之歌”？那就这么处理吧，只是请尽可能地靠近错误源头。</p>\n<h2 id=\"嵌套式回调的解嵌套\"><a href=\"#嵌套式回调的解嵌套\" class=\"headerlink\" title=\"嵌套式回调的解嵌套\"></a>嵌套式回调的解嵌套</h2><p>JavaScript中最常见的反模式做法是，回调内部再嵌套回调。还记得前言里提到的金字塔厄运吗？我们先来看一个具体的例子，你也可能在Node服务器上看到过类似的代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">checkPassword</span>(<span class=\"params\">username, passwordGuess, callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> queryStr = <span class=\"string\">&#x27;SELECT * FROM user WHERE username = ?&#x27;</span>;</span><br><span class=\"line\">    db.<span class=\"title function_\">query</span>(queryStr, username,</span><br><span class=\"line\">        <span class=\"keyword\">function</span> (<span class=\"params\">err, result</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err; </span><br><span class=\"line\">            <span class=\"title function_\">hash</span>(passwordGuess,<span class=\"keyword\">function</span> (<span class=\"params\">passwordGuessHash</span>) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">callback</span>(passwordGuessHash === result[<span class=\"string\">&#x27;password_hash&#x27;</span>]);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>这里定义了一个异步函数checkPassword，它触发了另一个异步函数db.query，而后者又可能触发另外一个异步函数hash。（在之前，无法确认这些函数是否真的异步，但这里的几个函数理应如此。）</p>\n<p>这段代码有什么问题呢？目前为止，没有任何问题。它能用，而且简洁明了。但是，如果试图向其添加新特性，它就会变得毛里毛躁、险象环生，比如去处理那个数据库错误，而不是抛出错误（请参阅1.4.3节）、记录尝试访问数据库的次数、阻塞访问数据库，等等。</p>\n<p>嵌套式回调诱惑我们通过添加更多代码来添加更多特性，而不是将这些特性实现为可管理、可重用的代码片段。checkPassword有一种可以避免出现上述苗头的等价实现方式，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">checkPassword</span>(<span class=\"params\">username, passwordGuess, callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> passwordHash; <span class=\"keyword\">var</span> queryStr = <span class=\"string\">&#x27;SELECT * FROM user WHERE username = ?&#x27;</span>;</span><br><span class=\"line\">    db.<span class=\"title function_\">query</span>(qyeryStr, username, queryCallback);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">queryCallback</span>(<span class=\"params\">err, result</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err; passwordHash = result[<span class=\"string\">&#x27;password_hash&#x27;</span>];</span><br><span class=\"line\">        <span class=\"title function_\">hash</span>(passwordGuess, hashCallback);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">hashCallback</span>(<span class=\"params\">passwordGuessHash</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">callback</span>(passwordHash === passwordGuessHash);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种写法更啰嗦一些，但读起来更清晰，也更容易扩展。由于这里赋予了异步结果（即passwordHash）更宽广的作用域，所以获得了更大的灵活性。<br>按照惯例，请避免两层以上的函数嵌套。关键是找到一种在激活异步调用之函数的外部存储异步结果的方式，这样回调本身就没有必要再嵌套了。</p>\n<p>如果这样听起来有点诘聱难懂，请别担心。我们在后续几章中会看到大量的异步事件例子，那里的异步事件顺序运行且没有嵌套式事件处理器。</p>"},{"title":"MongoDB基础篇（一）","comments":1,"date":"2021-04-13T12:28:49.000Z","description":null,"keywords":"mongoDB,nosql","_content":"MongoDB 是一个介于关系数据库和非关系数据库之间的产品。面向文档的 NoSQL 的数据库，存储结构也非常自由，是类似 json 的 bson 格式，因此可以存储比较复杂的数据类型。其强大的查询语言几乎支持绝大部分关系数据的的查询的功能。\n<!-- more -->\n\n## 基本组成\n在 MongoDB 中基本的概念是文档、集合、数据库，没有关系型数据库中表、行等这些概念的\n\n|  MongoDB   | SQL  | 说明 |\n|  --------  | --------  | --------  |\n| database  | database | 数据库 |\n| collection  | table | 集合/表 |\n| document  | row | 文档/行 |\n| field  | column | 域/字段 |\n| index  | index | 索引 |\n| 不支持 |table joins | 连表 |\n\nMongoDB 曾经是不支持连表的，在 3.2 以后版本增加了 $lookup 可以实现左连接 \n\n\n## 集合\n``` javascript\n// 查看集合\nshow collections\n\n/// 集合名称，配置选项（可选）\ndb.createCollection('table_name', {\n    //(可选）指定是否创建固定大小集合，如果是true 在达到最大值的时候会覆盖最早的文档\n    capped: true ,\n    //(可选）为固定集合指定一个最大大小\n    size:1000000, \n    //(可选）指定固定集合中包含文档的最大数量\n    max:100 \n    // 指定创建固定集合后,里面的文档不可以删除了,除非删除整个集合重新创建\n})\n\n// 删除集合\ndb.table_name.drop()\n```\n\n## 新增\nMongoDB 提供了三个方法\n- insert 插入单个或者多个\n- insertOne 插入单个文档\n- insertMany 插入多个文档\n\n如果插入文档没有提供 _id,MongoDB 会默认生成一个 ObjectId 的 _id,\n``` javascript\ndb.table_name.insert(\n    [\n        { title:'插入多个1' },\n        { _id:'12312312', title:'插入多个2'}\n    ],\n    { // insertOne,insertMany也可以设置\n        writeConcern: { // 写入策略\n            w: 1,  // 0 不要求进行写入确认  1 要求进行写入确认  majority 要求已写入到副本集中的大多数服务器中 , 默认为1 \n            j: false, // 如果为true，写入请求将等到日志同步完成后再返回,默认false\n            wtimeout: 5000 // 超时时间\n        },\n        ordered: false // 指定是否有序插入默认为true\n    }\n)\n\n// insertOne 配置没有 ordered\ndb.table_name.insertOne({\n    title:'插入单个'\n})\n\ndb.table_name.insertMany([\n    { title:'插入多个1'},\n    { _id:'12312312', title:'插入多个2'}\n])\n```\n## 删除\n删除也内部提供了三个方法\n- remove  删除单个或者多个文档\n- deleteOne 删除单个文档,3.2+ 提供的\n- deleteMany 删除多个文档,3.2+ 提供的\n\n``` javascript\ndb.table_name.remove(\n    { // 指定过滤条件\n        title: '插入多个1'\n    },\n    {// 配置,可忽略\n        justOne: true,// 指定是否仅删除一个\n        writeConcern:{},// 写入策略\n        collation:{} // Collation允许根据语言指定自定义排序规则,低版本里默认是按字节对比的\n    }\n)\n// 不指定条件,默认删除所有\ndb.table_name.remove({})\n\n// deleteOne,deleteMany与remove 类似,去掉了justOne配置,增加了hint 指定索引\ndb.table_name.deleteOne({},{})\ndb.table_name.deleteMany({},{})\n\n```\n\n## 查询\n查询也提供了单个和多个文档查询等\n- find 查找集合中符合条件的所有记录\n- findOne 查询单条\n\n### 常用条件使用方式\nfind 传入两个参数，一个指定查询条件文档，一个指定字段\n``` javascript\n// 语法\n// projection 可选，不指定projection默认查所有\ndb.collection.find(query, projection)\n\n// 增加几条示例数据\n[\n    { title: \"插入多个1\", status: \"A\", obj: { statue:1,title:'A' }, arr: [ { statue:1,title:'A' } ] },\n    { title: \"插入多个2\", status: \"A\", obj: { statue:9,title:'A' }, arr: [ { statue:9,title:'A' },{ statue:1,title:'A' } ] },\n    { title: \"插入多个3\", status: \"A\", obj: { statue:9,title:'C' }, arr: [ { statue:9,title:'C' },{ statue:1,title:'A' } ] }\n]\n\n// 普通查询\ndb.table_name.find({ title:\"插入多个1\" })\n```\n查询数组中嵌套文档\n``` javascript\n// 查询 arr 数组, 查询条件里的结构顺序必须和存储的保持一直， 如果是 arr:{ title:'A'，statue:1 } 则查询不出来\ndb.table_name.find({ \n    arr:{ \n        statue:1,\n        title:'A'\n    } \n})\n// arr 数组中对象字段作为条件\ndb.table_name.find({ \n    'arr.statue': 9 \n})\n// 使用多个字段作为条件的时候，看的上面的可能会联想到这写。 实际上这样会把第2，3条都查询出来，这样实际是查询 statue为9和title为A的，但是并不需要是同一个文档里\ndb.table_name.find({ \n    'arr.statue': 9 ,\n    'arr.title': 'A' \n})\n// 想要使用一个文档中多个字段 需要使用 运算符 $elemMatch\ndb.table_name.find({\n  arr:{\n    $elemMatch:{\n      title:\"A\",\n      statue: 1\n    }\n  }\n})\n```\n查询嵌套的文档\n``` javascript\n// 这样写 和数组一样，都是完全匹配一致\ndb.table_name.find({\n  obj:{\n    statue:1,\n    title:'A'\n  }\n})\n// 指定文档字段\ndb.table_name.find({\n 'obj.statue':1\n})\n```\n### 指定返回字段\n默认情况下，MongoDB 中的查询返回匹配文档中的所有字段,可以配置一个 projection 文档以指定或限制要返回的字段。\n\n``` javascript\n// 示例数据结构\n{ title: \"插入多个1\", status: \"A\", obj: { statue:1,title:'A' }, arr: [ { statue:1,title:'A' } ] }\n\ndb.table_name.find({ title:'插入多个1' })\n// 类似sql的\nselect * from table_name where title='插入多个1'\n\n// 指定返回字段\ndb.table_name.find({ title:'插入多个1' },{ title: 1,staus:1  })  // 1 代表返回字段, 0 代表过滤的字段\n// 类似sql的\nselect _id,title,staus from table_name where title='插入多个1'\n// _id MongoDB是默认指定返回的,如果想要不返回 可以指定 { _id:0 }\n\n// 指定嵌套文档返回字段  4.4以后版本,还可以直接嵌套使用 { title: 1,obj:{ statue:1  } }\n// 嵌套的数组和嵌套文档操作一致\ndb.table_name.find({ title:'插入多个1' },{ title: 1,'obj.statue': 1, 'arr.title': 1 }) \n// 返回结果\n{  title: \"插入多个1\", obj: { statue:1 }, arr: [{ title:1 }]}\n\n// 利用运算符 数组指定数据 $slice 返回数组最后一个\ndb.table_name.find({ title:'插入多个1' },{ title: 1,'obj.statue': 1, arr: { $slice: -1 } }) \n```\n使用查询运算符和映射运算符，还能实现更为复杂的条件过滤和字段匹配\n\n\n### 查询常用的运算符\n\n- $eq,$gt 等这类比较大小的。\n- $in,$nin 类似 sql 中的 in 和 not in 。\n- $regex 使用正则匹配。\n- $exists 判断是否有指定字段。\n- $and 类似 sql 的 and。\n- $or 类似 sql 的 or。\n- $not 查询指定条件以外的数据。\n- $nor 和 $or 结果是相反的。\n- $all 匹配包含查询中指定的所有元素的数组。\n- $elemMatch 如果 array 字段中的元素符合所有指定 $elemMatch 条件，则选择文档。\n- $size 如果数组字段为指定大小，则选择文档。\n### 查询中的映射\n- $ 数组中匹配查询条件的第一个元素。\n- $elemMatch 符合指定 $elemMatch 条件的数组中的第一个元素。\n- $meta 项目在 $text 操作期间分配的文档分数。\n- $slice 限制从数组中投影的元素数量。支持 limit 和 skip。\n\n### 查询修饰符\n- $comment 向查询添加注释，以标识数据库探查器输出中的查询。\n- $explain 强制 MongoDB 报告查询执行计划。请参阅 explain()。\n- $hint 仅强制 MongoDB 使用特定索引。请看 hint()\n- $max 指定要在查询中使用的索引的排他上限。请参阅 max()。\n- $maxTimeMS 指定对游标进行处理操作的累积时间限制（以毫秒为单位）。请参阅 maxTimeMS()。\n- $min 指定一个包容性的下限为索引在查询中使用。请参阅 min()。\n- $orderby 返回带有根据排序规范排序的文档的游标。请参阅 sort()。\n- $query 包装查询文档。\n- $returnKey 强制游标仅返回索引中包含的字段。\n- $showDiskLoc 修改返回的文档以包括对每个文档在磁盘上位置的引用。\n\n## 更新\nMongoDB中更新文档，需要与更新运算符结合使用来修改字段值。\n提供的更新方法\n- update 更新或替换单个或者多个文档\n- updateOne 更新单个文档\n- updateMany 更新多个文档\n- replaceOne 替换单个文档 \n基本使用方式\n``` javascript\n// 增加几条示例数据\n[\n    { title: \"插入多个1\", status: \"A\", obj: { statue:1,title:'A' }, arr: [ { statue:1,title:'A' } ] },\n    { title: \"插入多个2\", status: \"B\", obj: { statue:9,title:'A' }, arr: [ { statue:9,title:'A' },{ statue:1,title:'A' } ] },\n    { title: \"插入多个3\", status: \"C\", obj: { statue:9,title:'C' }, arr: [ { statue:9,title:'C' },{ statue:1,title:'A' } ] }\n]\n\n// 语法 \ndb.table_name.update('查询条件','更新管道','设置')\n\n// 替换查询的整个文档\ndb.table_name.update({ title:'插入多个1' },{ status:'D' })\n// 更新指定字段\ndb.table_name.update(\n  { title:'插入多个1' },\n  { \n    $set:{\n      status:'D' \n    }\n  },\n  {\n    multi: true ,// 默认false, 是否更新多条\n    upsert: true,// 默认fals, 如果不存在文档这新增一条\n  }\n)\n\n// 修改嵌套数组字段\ndb.table_name.update(\n  { title: \"插入多个1\", \"arr.statue\": 1 },\n  {\n    \"$set\": {\n        //\"arr.0.statue\": 3 // 修改第1条\n        \"arr.$.statue\": 3 // 单个修改需要指定数组条件\n        //\"arr.$[].statue\": 3 //修改多个\n    }\n  }\n)\n\n// 去除字段\ndb.table_name.update(\n  { title: \"插入多个1\" },\n  {\n      \"$unset\":{\n          status: 0\n      }\n  }\n)\n\n// 4.2后的版本还可以将聚合管道用来更新\n// 将合计值更新到 total 上\ndb.collection.update({},\n[\n  {\n    \"$set\": {\n      total: {\n        \"$sum\": [\n          \"$arr.statue\"\n        ]\n      }\n    }\n  }\n],\n{\n  multi: true\n})\n```\n\n### 字段更新运算符\n- $currentDate 将字段的值设置为当前日期，即日期或时间戳。\n- $inc 将字段的值增加指定的数量。\n- $min 仅当指定值小于现有字段值时才更新该字段。\n- $max 仅当指定值大于现有字段值时才更新该字段。\n- $mul 将字段的值乘以指定的数量。\n- $rename 重命名字段。\n- $set 设置文档中字段的值。\n- $setOnInsert 如果更新导致插入文档，则设置字段的值。对修改现有文档的更新操作没有影响。\n- $unset 从文档中删除指定的字段。\n\n### 数组更新运算符\n\n- $[] 充当占位符，以更新匹配查询条件的文档的数组中的所有元素。\n- $ 充当占位符，以更新与查询条件匹配的第一个元素。\n- $[<identifier>] 充当占位符，以更新 arrayFilters 与查询条件匹配的文档中所有与条件匹配的元素。\n- $addToSet 仅当元素不存在于集合中时才将它们添加到数组中。\n- $pop 删除数组的第一项或最后一项。\n- $pull 删除与指定查询匹配的所有数组元素。\n- $push 将项目添加到数组。\n- $pullAll 从数组中删除所有匹配的值。\n\n","source":"_posts/mongodb_sql.md","raw":"---\ntitle: MongoDB基础篇（一）\ncomments: true\ndate: 2021-04-13 20:28:49\ntags: [MongoDB]\ndescription:\ncategories: 记录类\nkeywords: mongoDB,nosql\n---\nMongoDB 是一个介于关系数据库和非关系数据库之间的产品。面向文档的 NoSQL 的数据库，存储结构也非常自由，是类似 json 的 bson 格式，因此可以存储比较复杂的数据类型。其强大的查询语言几乎支持绝大部分关系数据的的查询的功能。\n<!-- more -->\n\n## 基本组成\n在 MongoDB 中基本的概念是文档、集合、数据库，没有关系型数据库中表、行等这些概念的\n\n|  MongoDB   | SQL  | 说明 |\n|  --------  | --------  | --------  |\n| database  | database | 数据库 |\n| collection  | table | 集合/表 |\n| document  | row | 文档/行 |\n| field  | column | 域/字段 |\n| index  | index | 索引 |\n| 不支持 |table joins | 连表 |\n\nMongoDB 曾经是不支持连表的，在 3.2 以后版本增加了 $lookup 可以实现左连接 \n\n\n## 集合\n``` javascript\n// 查看集合\nshow collections\n\n/// 集合名称，配置选项（可选）\ndb.createCollection('table_name', {\n    //(可选）指定是否创建固定大小集合，如果是true 在达到最大值的时候会覆盖最早的文档\n    capped: true ,\n    //(可选）为固定集合指定一个最大大小\n    size:1000000, \n    //(可选）指定固定集合中包含文档的最大数量\n    max:100 \n    // 指定创建固定集合后,里面的文档不可以删除了,除非删除整个集合重新创建\n})\n\n// 删除集合\ndb.table_name.drop()\n```\n\n## 新增\nMongoDB 提供了三个方法\n- insert 插入单个或者多个\n- insertOne 插入单个文档\n- insertMany 插入多个文档\n\n如果插入文档没有提供 _id,MongoDB 会默认生成一个 ObjectId 的 _id,\n``` javascript\ndb.table_name.insert(\n    [\n        { title:'插入多个1' },\n        { _id:'12312312', title:'插入多个2'}\n    ],\n    { // insertOne,insertMany也可以设置\n        writeConcern: { // 写入策略\n            w: 1,  // 0 不要求进行写入确认  1 要求进行写入确认  majority 要求已写入到副本集中的大多数服务器中 , 默认为1 \n            j: false, // 如果为true，写入请求将等到日志同步完成后再返回,默认false\n            wtimeout: 5000 // 超时时间\n        },\n        ordered: false // 指定是否有序插入默认为true\n    }\n)\n\n// insertOne 配置没有 ordered\ndb.table_name.insertOne({\n    title:'插入单个'\n})\n\ndb.table_name.insertMany([\n    { title:'插入多个1'},\n    { _id:'12312312', title:'插入多个2'}\n])\n```\n## 删除\n删除也内部提供了三个方法\n- remove  删除单个或者多个文档\n- deleteOne 删除单个文档,3.2+ 提供的\n- deleteMany 删除多个文档,3.2+ 提供的\n\n``` javascript\ndb.table_name.remove(\n    { // 指定过滤条件\n        title: '插入多个1'\n    },\n    {// 配置,可忽略\n        justOne: true,// 指定是否仅删除一个\n        writeConcern:{},// 写入策略\n        collation:{} // Collation允许根据语言指定自定义排序规则,低版本里默认是按字节对比的\n    }\n)\n// 不指定条件,默认删除所有\ndb.table_name.remove({})\n\n// deleteOne,deleteMany与remove 类似,去掉了justOne配置,增加了hint 指定索引\ndb.table_name.deleteOne({},{})\ndb.table_name.deleteMany({},{})\n\n```\n\n## 查询\n查询也提供了单个和多个文档查询等\n- find 查找集合中符合条件的所有记录\n- findOne 查询单条\n\n### 常用条件使用方式\nfind 传入两个参数，一个指定查询条件文档，一个指定字段\n``` javascript\n// 语法\n// projection 可选，不指定projection默认查所有\ndb.collection.find(query, projection)\n\n// 增加几条示例数据\n[\n    { title: \"插入多个1\", status: \"A\", obj: { statue:1,title:'A' }, arr: [ { statue:1,title:'A' } ] },\n    { title: \"插入多个2\", status: \"A\", obj: { statue:9,title:'A' }, arr: [ { statue:9,title:'A' },{ statue:1,title:'A' } ] },\n    { title: \"插入多个3\", status: \"A\", obj: { statue:9,title:'C' }, arr: [ { statue:9,title:'C' },{ statue:1,title:'A' } ] }\n]\n\n// 普通查询\ndb.table_name.find({ title:\"插入多个1\" })\n```\n查询数组中嵌套文档\n``` javascript\n// 查询 arr 数组, 查询条件里的结构顺序必须和存储的保持一直， 如果是 arr:{ title:'A'，statue:1 } 则查询不出来\ndb.table_name.find({ \n    arr:{ \n        statue:1,\n        title:'A'\n    } \n})\n// arr 数组中对象字段作为条件\ndb.table_name.find({ \n    'arr.statue': 9 \n})\n// 使用多个字段作为条件的时候，看的上面的可能会联想到这写。 实际上这样会把第2，3条都查询出来，这样实际是查询 statue为9和title为A的，但是并不需要是同一个文档里\ndb.table_name.find({ \n    'arr.statue': 9 ,\n    'arr.title': 'A' \n})\n// 想要使用一个文档中多个字段 需要使用 运算符 $elemMatch\ndb.table_name.find({\n  arr:{\n    $elemMatch:{\n      title:\"A\",\n      statue: 1\n    }\n  }\n})\n```\n查询嵌套的文档\n``` javascript\n// 这样写 和数组一样，都是完全匹配一致\ndb.table_name.find({\n  obj:{\n    statue:1,\n    title:'A'\n  }\n})\n// 指定文档字段\ndb.table_name.find({\n 'obj.statue':1\n})\n```\n### 指定返回字段\n默认情况下，MongoDB 中的查询返回匹配文档中的所有字段,可以配置一个 projection 文档以指定或限制要返回的字段。\n\n``` javascript\n// 示例数据结构\n{ title: \"插入多个1\", status: \"A\", obj: { statue:1,title:'A' }, arr: [ { statue:1,title:'A' } ] }\n\ndb.table_name.find({ title:'插入多个1' })\n// 类似sql的\nselect * from table_name where title='插入多个1'\n\n// 指定返回字段\ndb.table_name.find({ title:'插入多个1' },{ title: 1,staus:1  })  // 1 代表返回字段, 0 代表过滤的字段\n// 类似sql的\nselect _id,title,staus from table_name where title='插入多个1'\n// _id MongoDB是默认指定返回的,如果想要不返回 可以指定 { _id:0 }\n\n// 指定嵌套文档返回字段  4.4以后版本,还可以直接嵌套使用 { title: 1,obj:{ statue:1  } }\n// 嵌套的数组和嵌套文档操作一致\ndb.table_name.find({ title:'插入多个1' },{ title: 1,'obj.statue': 1, 'arr.title': 1 }) \n// 返回结果\n{  title: \"插入多个1\", obj: { statue:1 }, arr: [{ title:1 }]}\n\n// 利用运算符 数组指定数据 $slice 返回数组最后一个\ndb.table_name.find({ title:'插入多个1' },{ title: 1,'obj.statue': 1, arr: { $slice: -1 } }) \n```\n使用查询运算符和映射运算符，还能实现更为复杂的条件过滤和字段匹配\n\n\n### 查询常用的运算符\n\n- $eq,$gt 等这类比较大小的。\n- $in,$nin 类似 sql 中的 in 和 not in 。\n- $regex 使用正则匹配。\n- $exists 判断是否有指定字段。\n- $and 类似 sql 的 and。\n- $or 类似 sql 的 or。\n- $not 查询指定条件以外的数据。\n- $nor 和 $or 结果是相反的。\n- $all 匹配包含查询中指定的所有元素的数组。\n- $elemMatch 如果 array 字段中的元素符合所有指定 $elemMatch 条件，则选择文档。\n- $size 如果数组字段为指定大小，则选择文档。\n### 查询中的映射\n- $ 数组中匹配查询条件的第一个元素。\n- $elemMatch 符合指定 $elemMatch 条件的数组中的第一个元素。\n- $meta 项目在 $text 操作期间分配的文档分数。\n- $slice 限制从数组中投影的元素数量。支持 limit 和 skip。\n\n### 查询修饰符\n- $comment 向查询添加注释，以标识数据库探查器输出中的查询。\n- $explain 强制 MongoDB 报告查询执行计划。请参阅 explain()。\n- $hint 仅强制 MongoDB 使用特定索引。请看 hint()\n- $max 指定要在查询中使用的索引的排他上限。请参阅 max()。\n- $maxTimeMS 指定对游标进行处理操作的累积时间限制（以毫秒为单位）。请参阅 maxTimeMS()。\n- $min 指定一个包容性的下限为索引在查询中使用。请参阅 min()。\n- $orderby 返回带有根据排序规范排序的文档的游标。请参阅 sort()。\n- $query 包装查询文档。\n- $returnKey 强制游标仅返回索引中包含的字段。\n- $showDiskLoc 修改返回的文档以包括对每个文档在磁盘上位置的引用。\n\n## 更新\nMongoDB中更新文档，需要与更新运算符结合使用来修改字段值。\n提供的更新方法\n- update 更新或替换单个或者多个文档\n- updateOne 更新单个文档\n- updateMany 更新多个文档\n- replaceOne 替换单个文档 \n基本使用方式\n``` javascript\n// 增加几条示例数据\n[\n    { title: \"插入多个1\", status: \"A\", obj: { statue:1,title:'A' }, arr: [ { statue:1,title:'A' } ] },\n    { title: \"插入多个2\", status: \"B\", obj: { statue:9,title:'A' }, arr: [ { statue:9,title:'A' },{ statue:1,title:'A' } ] },\n    { title: \"插入多个3\", status: \"C\", obj: { statue:9,title:'C' }, arr: [ { statue:9,title:'C' },{ statue:1,title:'A' } ] }\n]\n\n// 语法 \ndb.table_name.update('查询条件','更新管道','设置')\n\n// 替换查询的整个文档\ndb.table_name.update({ title:'插入多个1' },{ status:'D' })\n// 更新指定字段\ndb.table_name.update(\n  { title:'插入多个1' },\n  { \n    $set:{\n      status:'D' \n    }\n  },\n  {\n    multi: true ,// 默认false, 是否更新多条\n    upsert: true,// 默认fals, 如果不存在文档这新增一条\n  }\n)\n\n// 修改嵌套数组字段\ndb.table_name.update(\n  { title: \"插入多个1\", \"arr.statue\": 1 },\n  {\n    \"$set\": {\n        //\"arr.0.statue\": 3 // 修改第1条\n        \"arr.$.statue\": 3 // 单个修改需要指定数组条件\n        //\"arr.$[].statue\": 3 //修改多个\n    }\n  }\n)\n\n// 去除字段\ndb.table_name.update(\n  { title: \"插入多个1\" },\n  {\n      \"$unset\":{\n          status: 0\n      }\n  }\n)\n\n// 4.2后的版本还可以将聚合管道用来更新\n// 将合计值更新到 total 上\ndb.collection.update({},\n[\n  {\n    \"$set\": {\n      total: {\n        \"$sum\": [\n          \"$arr.statue\"\n        ]\n      }\n    }\n  }\n],\n{\n  multi: true\n})\n```\n\n### 字段更新运算符\n- $currentDate 将字段的值设置为当前日期，即日期或时间戳。\n- $inc 将字段的值增加指定的数量。\n- $min 仅当指定值小于现有字段值时才更新该字段。\n- $max 仅当指定值大于现有字段值时才更新该字段。\n- $mul 将字段的值乘以指定的数量。\n- $rename 重命名字段。\n- $set 设置文档中字段的值。\n- $setOnInsert 如果更新导致插入文档，则设置字段的值。对修改现有文档的更新操作没有影响。\n- $unset 从文档中删除指定的字段。\n\n### 数组更新运算符\n\n- $[] 充当占位符，以更新匹配查询条件的文档的数组中的所有元素。\n- $ 充当占位符，以更新与查询条件匹配的第一个元素。\n- $[<identifier>] 充当占位符，以更新 arrayFilters 与查询条件匹配的文档中所有与条件匹配的元素。\n- $addToSet 仅当元素不存在于集合中时才将它们添加到数组中。\n- $pop 删除数组的第一项或最后一项。\n- $pull 删除与指定查询匹配的所有数组元素。\n- $push 将项目添加到数组。\n- $pullAll 从数组中删除所有匹配的值。\n\n","slug":"mongodb_sql","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vrr002198lg9om73r4w","content":"<p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品。面向文档的 NoSQL 的数据库，存储结构也非常自由，是类似 json 的 bson 格式，因此可以存储比较复杂的数据类型。其强大的查询语言几乎支持绝大部分关系数据的的查询的功能。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"基本组成\"><a href=\"#基本组成\" class=\"headerlink\" title=\"基本组成\"></a>基本组成</h2><p>在 MongoDB 中基本的概念是文档、集合、数据库，没有关系型数据库中表、行等这些概念的</p>\n<table>\n<thead>\n<tr>\n<th>MongoDB</th>\n<th>SQL</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>database</td>\n<td>database</td>\n<td>数据库</td>\n</tr>\n<tr>\n<td>collection</td>\n<td>table</td>\n<td>集合&#x2F;表</td>\n</tr>\n<tr>\n<td>document</td>\n<td>row</td>\n<td>文档&#x2F;行</td>\n</tr>\n<tr>\n<td>field</td>\n<td>column</td>\n<td>域&#x2F;字段</td>\n</tr>\n<tr>\n<td>index</td>\n<td>index</td>\n<td>索引</td>\n</tr>\n<tr>\n<td>不支持</td>\n<td>table joins</td>\n<td>连表</td>\n</tr>\n</tbody></table>\n<p>MongoDB 曾经是不支持连表的，在 3.2 以后版本增加了 $lookup 可以实现左连接 </p>\n<h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查看集合</span></span><br><span class=\"line\">show collections</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// 集合名称，配置选项（可选）</span></span><br><span class=\"line\">db.<span class=\"title function_\">createCollection</span>(<span class=\"string\">&#x27;table_name&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">//(可选）指定是否创建固定大小集合，如果是true 在达到最大值的时候会覆盖最早的文档</span></span><br><span class=\"line\">    <span class=\"attr\">capped</span>: <span class=\"literal\">true</span> ,</span><br><span class=\"line\">    <span class=\"comment\">//(可选）为固定集合指定一个最大大小</span></span><br><span class=\"line\">    <span class=\"attr\">size</span>:<span class=\"number\">1000000</span>, </span><br><span class=\"line\">    <span class=\"comment\">//(可选）指定固定集合中包含文档的最大数量</span></span><br><span class=\"line\">    <span class=\"attr\">max</span>:<span class=\"number\">100</span> </span><br><span class=\"line\">    <span class=\"comment\">// 指定创建固定集合后,里面的文档不可以删除了,除非删除整个集合重新创建</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除集合</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">drop</span>()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新增\"><a href=\"#新增\" class=\"headerlink\" title=\"新增\"></a>新增</h2><p>MongoDB 提供了三个方法</p>\n<ul>\n<li>insert 插入单个或者多个</li>\n<li>insertOne 插入单个文档</li>\n<li>insertMany 插入多个文档</li>\n</ul>\n<p>如果插入文档没有提供 _id,MongoDB 会默认生成一个 ObjectId 的 _id,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">insert</span>(</span><br><span class=\"line\">    [</span><br><span class=\"line\">        &#123; <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入多个1&#x27;</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">_id</span>:<span class=\"string\">&#x27;12312312&#x27;</span>, <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入多个2&#x27;</span>&#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &#123; <span class=\"comment\">// insertOne,insertMany也可以设置</span></span><br><span class=\"line\">        <span class=\"attr\">writeConcern</span>: &#123; <span class=\"comment\">// 写入策略</span></span><br><span class=\"line\">            <span class=\"attr\">w</span>: <span class=\"number\">1</span>,  <span class=\"comment\">// 0 不要求进行写入确认  1 要求进行写入确认  majority 要求已写入到副本集中的大多数服务器中 , 默认为1 </span></span><br><span class=\"line\">            <span class=\"attr\">j</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果为true，写入请求将等到日志同步完成后再返回,默认false</span></span><br><span class=\"line\">            <span class=\"attr\">wtimeout</span>: <span class=\"number\">5000</span> <span class=\"comment\">// 超时时间</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">ordered</span>: <span class=\"literal\">false</span> <span class=\"comment\">// 指定是否有序插入默认为true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// insertOne 配置没有 ordered</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">insertOne</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入单个&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">insertMany</span>([</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入多个1&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>:<span class=\"string\">&#x27;12312312&#x27;</span>, <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入多个2&#x27;</span>&#125;</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><p>删除也内部提供了三个方法</p>\n<ul>\n<li>remove  删除单个或者多个文档</li>\n<li>deleteOne 删除单个文档,3.2+ 提供的</li>\n<li>deleteMany 删除多个文档,3.2+ 提供的</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">remove</span>(</span><br><span class=\"line\">    &#123; <span class=\"comment\">// 指定过滤条件</span></span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">&#x27;插入多个1&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;<span class=\"comment\">// 配置,可忽略</span></span><br><span class=\"line\">        <span class=\"attr\">justOne</span>: <span class=\"literal\">true</span>,<span class=\"comment\">// 指定是否仅删除一个</span></span><br><span class=\"line\">        <span class=\"attr\">writeConcern</span>:&#123;&#125;,<span class=\"comment\">// 写入策略</span></span><br><span class=\"line\">        <span class=\"attr\">collation</span>:&#123;&#125; <span class=\"comment\">// Collation允许根据语言指定自定义排序规则,低版本里默认是按字节对比的</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// 不指定条件,默认删除所有</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">remove</span>(&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// deleteOne,deleteMany与remove 类似,去掉了justOne配置,增加了hint 指定索引</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">deleteOne</span>(&#123;&#125;,&#123;&#125;)</span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">deleteMany</span>(&#123;&#125;,&#123;&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h2><p>查询也提供了单个和多个文档查询等</p>\n<ul>\n<li>find 查找集合中符合条件的所有记录</li>\n<li>findOne 查询单条</li>\n</ul>\n<h3 id=\"常用条件使用方式\"><a href=\"#常用条件使用方式\" class=\"headerlink\" title=\"常用条件使用方式\"></a>常用条件使用方式</h3><p>find 传入两个参数，一个指定查询条件文档，一个指定字段</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 语法</span></span><br><span class=\"line\"><span class=\"comment\">// projection 可选，不指定projection默认查所有</span></span><br><span class=\"line\">db.<span class=\"property\">collection</span>.<span class=\"title function_\">find</span>(query, projection)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 增加几条示例数据</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>: <span class=\"string\">&quot;插入多个1&quot;</span>, <span class=\"attr\">status</span>: <span class=\"string\">&quot;A&quot;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125;, <span class=\"attr\">arr</span>: [ &#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125; ] &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>: <span class=\"string\">&quot;插入多个2&quot;</span>, <span class=\"attr\">status</span>: <span class=\"string\">&quot;A&quot;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">statue</span>:<span class=\"number\">9</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125;, <span class=\"attr\">arr</span>: [ &#123; <span class=\"attr\">statue</span>:<span class=\"number\">9</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125;,&#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125; ] &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>: <span class=\"string\">&quot;插入多个3&quot;</span>, <span class=\"attr\">status</span>: <span class=\"string\">&quot;A&quot;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">statue</span>:<span class=\"number\">9</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;C&#x27;</span> &#125;, <span class=\"attr\">arr</span>: [ &#123; <span class=\"attr\">statue</span>:<span class=\"number\">9</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;C&#x27;</span> &#125;,&#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125; ] &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 普通查询</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">title</span>:<span class=\"string\">&quot;插入多个1&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>\n<p>查询数组中嵌套文档</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询 arr 数组, 查询条件里的结构顺序必须和存储的保持一直， 如果是 arr:&#123; title:&#x27;A&#x27;，statue:1 &#125; 则查询不出来</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123; </span><br><span class=\"line\">    <span class=\"attr\">arr</span>:&#123; </span><br><span class=\"line\">        <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// arr 数组中对象字段作为条件</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123; </span><br><span class=\"line\">    <span class=\"string\">&#x27;arr.statue&#x27;</span>: <span class=\"number\">9</span> </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 使用多个字段作为条件的时候，看的上面的可能会联想到这写。 实际上这样会把第2，3条都查询出来，这样实际是查询 statue为9和title为A的，但是并不需要是同一个文档里</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123; </span><br><span class=\"line\">    <span class=\"string\">&#x27;arr.statue&#x27;</span>: <span class=\"number\">9</span> ,</span><br><span class=\"line\">    <span class=\"string\">&#x27;arr.title&#x27;</span>: <span class=\"string\">&#x27;A&#x27;</span> </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 想要使用一个文档中多个字段 需要使用 运算符 $elemMatch</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">arr</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">$elemMatch</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>:<span class=\"string\">&quot;A&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">statue</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>查询嵌套的文档</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这样写 和数组一样，都是完全匹配一致</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">obj</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 指定文档字段</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123;</span><br><span class=\"line\"> <span class=\"string\">&#x27;obj.statue&#x27;</span>:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"指定返回字段\"><a href=\"#指定返回字段\" class=\"headerlink\" title=\"指定返回字段\"></a>指定返回字段</h3><p>默认情况下，MongoDB 中的查询返回匹配文档中的所有字段,可以配置一个 projection 文档以指定或限制要返回的字段。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 示例数据结构</span></span><br><span class=\"line\">&#123; <span class=\"attr\">title</span>: <span class=\"string\">&quot;插入多个1&quot;</span>, <span class=\"attr\">status</span>: <span class=\"string\">&quot;A&quot;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125;, <span class=\"attr\">arr</span>: [ &#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125; ] &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入多个1&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 类似sql的</span></span><br><span class=\"line\">select * <span class=\"keyword\">from</span> table_name where title=<span class=\"string\">&#x27;插入多个1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定返回字段</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入多个1&#x27;</span> &#125;,&#123; <span class=\"attr\">title</span>: <span class=\"number\">1</span>,<span class=\"attr\">staus</span>:<span class=\"number\">1</span>  &#125;)  <span class=\"comment\">// 1 代表返回字段, 0 代表过滤的字段</span></span><br><span class=\"line\"><span class=\"comment\">// 类似sql的</span></span><br><span class=\"line\">select _id,title,staus <span class=\"keyword\">from</span> table_name where title=<span class=\"string\">&#x27;插入多个1&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// _id MongoDB是默认指定返回的,如果想要不返回 可以指定 &#123; _id:0 &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定嵌套文档返回字段  4.4以后版本,还可以直接嵌套使用 &#123; title: 1,obj:&#123; statue:1  &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 嵌套的数组和嵌套文档操作一致</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入多个1&#x27;</span> &#125;,&#123; <span class=\"attr\">title</span>: <span class=\"number\">1</span>,<span class=\"string\">&#x27;obj.statue&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;arr.title&#x27;</span>: <span class=\"number\">1</span> &#125;) </span><br><span class=\"line\"><span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">&#123;  <span class=\"attr\">title</span>: <span class=\"string\">&quot;插入多个1&quot;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span> &#125;, <span class=\"attr\">arr</span>: [&#123; <span class=\"attr\">title</span>:<span class=\"number\">1</span> &#125;]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 利用运算符 数组指定数据 $slice 返回数组最后一个</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入多个1&#x27;</span> &#125;,&#123; <span class=\"attr\">title</span>: <span class=\"number\">1</span>,<span class=\"string\">&#x27;obj.statue&#x27;</span>: <span class=\"number\">1</span>, <span class=\"attr\">arr</span>: &#123; <span class=\"attr\">$slice</span>: -<span class=\"number\">1</span> &#125; &#125;) </span><br></pre></td></tr></table></figure>\n<p>使用查询运算符和映射运算符，还能实现更为复杂的条件过滤和字段匹配</p>\n<h3 id=\"查询常用的运算符\"><a href=\"#查询常用的运算符\" class=\"headerlink\" title=\"查询常用的运算符\"></a>查询常用的运算符</h3><ul>\n<li>$eq,$gt 等这类比较大小的。</li>\n<li>$in,$nin 类似 sql 中的 in 和 not in 。</li>\n<li>$regex 使用正则匹配。</li>\n<li>$exists 判断是否有指定字段。</li>\n<li>$and 类似 sql 的 and。</li>\n<li>$or 类似 sql 的 or。</li>\n<li>$not 查询指定条件以外的数据。</li>\n<li>$nor 和 $or 结果是相反的。</li>\n<li>$all 匹配包含查询中指定的所有元素的数组。</li>\n<li>$elemMatch 如果 array 字段中的元素符合所有指定 $elemMatch 条件，则选择文档。</li>\n<li>$size 如果数组字段为指定大小，则选择文档。</li>\n</ul>\n<h3 id=\"查询中的映射\"><a href=\"#查询中的映射\" class=\"headerlink\" title=\"查询中的映射\"></a>查询中的映射</h3><ul>\n<li>$ 数组中匹配查询条件的第一个元素。</li>\n<li>$elemMatch 符合指定 $elemMatch 条件的数组中的第一个元素。</li>\n<li>$meta 项目在 $text 操作期间分配的文档分数。</li>\n<li>$slice 限制从数组中投影的元素数量。支持 limit 和 skip。</li>\n</ul>\n<h3 id=\"查询修饰符\"><a href=\"#查询修饰符\" class=\"headerlink\" title=\"查询修饰符\"></a>查询修饰符</h3><ul>\n<li>$comment 向查询添加注释，以标识数据库探查器输出中的查询。</li>\n<li>$explain 强制 MongoDB 报告查询执行计划。请参阅 explain()。</li>\n<li>$hint 仅强制 MongoDB 使用特定索引。请看 hint()</li>\n<li>$max 指定要在查询中使用的索引的排他上限。请参阅 max()。</li>\n<li>$maxTimeMS 指定对游标进行处理操作的累积时间限制（以毫秒为单位）。请参阅 maxTimeMS()。</li>\n<li>$min 指定一个包容性的下限为索引在查询中使用。请参阅 min()。</li>\n<li>$orderby 返回带有根据排序规范排序的文档的游标。请参阅 sort()。</li>\n<li>$query 包装查询文档。</li>\n<li>$returnKey 强制游标仅返回索引中包含的字段。</li>\n<li>$showDiskLoc 修改返回的文档以包括对每个文档在磁盘上位置的引用。</li>\n</ul>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p>MongoDB中更新文档，需要与更新运算符结合使用来修改字段值。<br>提供的更新方法</p>\n<ul>\n<li>update 更新或替换单个或者多个文档</li>\n<li>updateOne 更新单个文档</li>\n<li>updateMany 更新多个文档</li>\n<li>replaceOne 替换单个文档<br>基本使用方式<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 增加几条示例数据</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>: <span class=\"string\">&quot;插入多个1&quot;</span>, <span class=\"attr\">status</span>: <span class=\"string\">&quot;A&quot;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125;, <span class=\"attr\">arr</span>: [ &#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125; ] &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>: <span class=\"string\">&quot;插入多个2&quot;</span>, <span class=\"attr\">status</span>: <span class=\"string\">&quot;B&quot;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">statue</span>:<span class=\"number\">9</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125;, <span class=\"attr\">arr</span>: [ &#123; <span class=\"attr\">statue</span>:<span class=\"number\">9</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125;,&#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125; ] &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>: <span class=\"string\">&quot;插入多个3&quot;</span>, <span class=\"attr\">status</span>: <span class=\"string\">&quot;C&quot;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">statue</span>:<span class=\"number\">9</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;C&#x27;</span> &#125;, <span class=\"attr\">arr</span>: [ &#123; <span class=\"attr\">statue</span>:<span class=\"number\">9</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;C&#x27;</span> &#125;,&#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125; ] &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 语法 </span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">update</span>(<span class=\"string\">&#x27;查询条件&#x27;</span>,<span class=\"string\">&#x27;更新管道&#x27;</span>,<span class=\"string\">&#x27;设置&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 替换查询的整个文档</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">update</span>(&#123; <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入多个1&#x27;</span> &#125;,&#123; <span class=\"attr\">status</span>:<span class=\"string\">&#x27;D&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 更新指定字段</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">update</span>(</span><br><span class=\"line\">  &#123; <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入多个1&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; </span><br><span class=\"line\">    <span class=\"attr\">$set</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">status</span>:<span class=\"string\">&#x27;D&#x27;</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">multi</span>: <span class=\"literal\">true</span> ,<span class=\"comment\">// 默认false, 是否更新多条</span></span><br><span class=\"line\">    <span class=\"attr\">upsert</span>: <span class=\"literal\">true</span>,<span class=\"comment\">// 默认fals, 如果不存在文档这新增一条</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改嵌套数组字段</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">update</span>(</span><br><span class=\"line\">  &#123; <span class=\"attr\">title</span>: <span class=\"string\">&quot;插入多个1&quot;</span>, <span class=\"string\">&quot;arr.statue&quot;</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;$set&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">//&quot;arr.0.statue&quot;: 3 // 修改第1条</span></span><br><span class=\"line\">        <span class=\"string\">&quot;arr.$.statue&quot;</span>: <span class=\"number\">3</span> <span class=\"comment\">// 单个修改需要指定数组条件</span></span><br><span class=\"line\">        <span class=\"comment\">//&quot;arr.$[].statue&quot;: 3 //修改多个</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 去除字段</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">update</span>(</span><br><span class=\"line\">  &#123; <span class=\"attr\">title</span>: <span class=\"string\">&quot;插入多个1&quot;</span> &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;$unset&quot;</span>:&#123;</span><br><span class=\"line\">          <span class=\"attr\">status</span>: <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4.2后的版本还可以将聚合管道用来更新</span></span><br><span class=\"line\"><span class=\"comment\">// 将合计值更新到 total 上</span></span><br><span class=\"line\">db.<span class=\"property\">collection</span>.<span class=\"title function_\">update</span>(&#123;&#125;,</span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;$set&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">total</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;$sum&quot;</span>: [</span><br><span class=\"line\">          <span class=\"string\">&quot;$arr.statue&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">],</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">multi</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"字段更新运算符\"><a href=\"#字段更新运算符\" class=\"headerlink\" title=\"字段更新运算符\"></a>字段更新运算符</h3><ul>\n<li>$currentDate 将字段的值设置为当前日期，即日期或时间戳。</li>\n<li>$inc 将字段的值增加指定的数量。</li>\n<li>$min 仅当指定值小于现有字段值时才更新该字段。</li>\n<li>$max 仅当指定值大于现有字段值时才更新该字段。</li>\n<li>$mul 将字段的值乘以指定的数量。</li>\n<li>$rename 重命名字段。</li>\n<li>$set 设置文档中字段的值。</li>\n<li>$setOnInsert 如果更新导致插入文档，则设置字段的值。对修改现有文档的更新操作没有影响。</li>\n<li>$unset 从文档中删除指定的字段。</li>\n</ul>\n<h3 id=\"数组更新运算符\"><a href=\"#数组更新运算符\" class=\"headerlink\" title=\"数组更新运算符\"></a>数组更新运算符</h3><ul>\n<li>$[] 充当占位符，以更新匹配查询条件的文档的数组中的所有元素。</li>\n<li>$ 充当占位符，以更新与查询条件匹配的第一个元素。</li>\n<li>$[<identifier>] 充当占位符，以更新 arrayFilters 与查询条件匹配的文档中所有与条件匹配的元素。</li>\n<li>$addToSet 仅当元素不存在于集合中时才将它们添加到数组中。</li>\n<li>$pop 删除数组的第一项或最后一项。</li>\n<li>$pull 删除与指定查询匹配的所有数组元素。</li>\n<li>$push 将项目添加到数组。</li>\n<li>$pullAll 从数组中删除所有匹配的值。</li>\n</ul>\n","excerpt":"<p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品。面向文档的 NoSQL 的数据库，存储结构也非常自由，是类似 json 的 bson 格式，因此可以存储比较复杂的数据类型。其强大的查询语言几乎支持绝大部分关系数据的的查询的功能。</p>","more":"<h2 id=\"基本组成\"><a href=\"#基本组成\" class=\"headerlink\" title=\"基本组成\"></a>基本组成</h2><p>在 MongoDB 中基本的概念是文档、集合、数据库，没有关系型数据库中表、行等这些概念的</p>\n<table>\n<thead>\n<tr>\n<th>MongoDB</th>\n<th>SQL</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>database</td>\n<td>database</td>\n<td>数据库</td>\n</tr>\n<tr>\n<td>collection</td>\n<td>table</td>\n<td>集合&#x2F;表</td>\n</tr>\n<tr>\n<td>document</td>\n<td>row</td>\n<td>文档&#x2F;行</td>\n</tr>\n<tr>\n<td>field</td>\n<td>column</td>\n<td>域&#x2F;字段</td>\n</tr>\n<tr>\n<td>index</td>\n<td>index</td>\n<td>索引</td>\n</tr>\n<tr>\n<td>不支持</td>\n<td>table joins</td>\n<td>连表</td>\n</tr>\n</tbody></table>\n<p>MongoDB 曾经是不支持连表的，在 3.2 以后版本增加了 $lookup 可以实现左连接 </p>\n<h2 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查看集合</span></span><br><span class=\"line\">show collections</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// 集合名称，配置选项（可选）</span></span><br><span class=\"line\">db.<span class=\"title function_\">createCollection</span>(<span class=\"string\">&#x27;table_name&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">//(可选）指定是否创建固定大小集合，如果是true 在达到最大值的时候会覆盖最早的文档</span></span><br><span class=\"line\">    <span class=\"attr\">capped</span>: <span class=\"literal\">true</span> ,</span><br><span class=\"line\">    <span class=\"comment\">//(可选）为固定集合指定一个最大大小</span></span><br><span class=\"line\">    <span class=\"attr\">size</span>:<span class=\"number\">1000000</span>, </span><br><span class=\"line\">    <span class=\"comment\">//(可选）指定固定集合中包含文档的最大数量</span></span><br><span class=\"line\">    <span class=\"attr\">max</span>:<span class=\"number\">100</span> </span><br><span class=\"line\">    <span class=\"comment\">// 指定创建固定集合后,里面的文档不可以删除了,除非删除整个集合重新创建</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除集合</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">drop</span>()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新增\"><a href=\"#新增\" class=\"headerlink\" title=\"新增\"></a>新增</h2><p>MongoDB 提供了三个方法</p>\n<ul>\n<li>insert 插入单个或者多个</li>\n<li>insertOne 插入单个文档</li>\n<li>insertMany 插入多个文档</li>\n</ul>\n<p>如果插入文档没有提供 _id,MongoDB 会默认生成一个 ObjectId 的 _id,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">insert</span>(</span><br><span class=\"line\">    [</span><br><span class=\"line\">        &#123; <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入多个1&#x27;</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">_id</span>:<span class=\"string\">&#x27;12312312&#x27;</span>, <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入多个2&#x27;</span>&#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &#123; <span class=\"comment\">// insertOne,insertMany也可以设置</span></span><br><span class=\"line\">        <span class=\"attr\">writeConcern</span>: &#123; <span class=\"comment\">// 写入策略</span></span><br><span class=\"line\">            <span class=\"attr\">w</span>: <span class=\"number\">1</span>,  <span class=\"comment\">// 0 不要求进行写入确认  1 要求进行写入确认  majority 要求已写入到副本集中的大多数服务器中 , 默认为1 </span></span><br><span class=\"line\">            <span class=\"attr\">j</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 如果为true，写入请求将等到日志同步完成后再返回,默认false</span></span><br><span class=\"line\">            <span class=\"attr\">wtimeout</span>: <span class=\"number\">5000</span> <span class=\"comment\">// 超时时间</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">ordered</span>: <span class=\"literal\">false</span> <span class=\"comment\">// 指定是否有序插入默认为true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// insertOne 配置没有 ordered</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">insertOne</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入单个&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">insertMany</span>([</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入多个1&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">_id</span>:<span class=\"string\">&#x27;12312312&#x27;</span>, <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入多个2&#x27;</span>&#125;</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><p>删除也内部提供了三个方法</p>\n<ul>\n<li>remove  删除单个或者多个文档</li>\n<li>deleteOne 删除单个文档,3.2+ 提供的</li>\n<li>deleteMany 删除多个文档,3.2+ 提供的</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">remove</span>(</span><br><span class=\"line\">    &#123; <span class=\"comment\">// 指定过滤条件</span></span><br><span class=\"line\">        <span class=\"attr\">title</span>: <span class=\"string\">&#x27;插入多个1&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;<span class=\"comment\">// 配置,可忽略</span></span><br><span class=\"line\">        <span class=\"attr\">justOne</span>: <span class=\"literal\">true</span>,<span class=\"comment\">// 指定是否仅删除一个</span></span><br><span class=\"line\">        <span class=\"attr\">writeConcern</span>:&#123;&#125;,<span class=\"comment\">// 写入策略</span></span><br><span class=\"line\">        <span class=\"attr\">collation</span>:&#123;&#125; <span class=\"comment\">// Collation允许根据语言指定自定义排序规则,低版本里默认是按字节对比的</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// 不指定条件,默认删除所有</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">remove</span>(&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// deleteOne,deleteMany与remove 类似,去掉了justOne配置,增加了hint 指定索引</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">deleteOne</span>(&#123;&#125;,&#123;&#125;)</span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">deleteMany</span>(&#123;&#125;,&#123;&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h2><p>查询也提供了单个和多个文档查询等</p>\n<ul>\n<li>find 查找集合中符合条件的所有记录</li>\n<li>findOne 查询单条</li>\n</ul>\n<h3 id=\"常用条件使用方式\"><a href=\"#常用条件使用方式\" class=\"headerlink\" title=\"常用条件使用方式\"></a>常用条件使用方式</h3><p>find 传入两个参数，一个指定查询条件文档，一个指定字段</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 语法</span></span><br><span class=\"line\"><span class=\"comment\">// projection 可选，不指定projection默认查所有</span></span><br><span class=\"line\">db.<span class=\"property\">collection</span>.<span class=\"title function_\">find</span>(query, projection)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 增加几条示例数据</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>: <span class=\"string\">&quot;插入多个1&quot;</span>, <span class=\"attr\">status</span>: <span class=\"string\">&quot;A&quot;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125;, <span class=\"attr\">arr</span>: [ &#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125; ] &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>: <span class=\"string\">&quot;插入多个2&quot;</span>, <span class=\"attr\">status</span>: <span class=\"string\">&quot;A&quot;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">statue</span>:<span class=\"number\">9</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125;, <span class=\"attr\">arr</span>: [ &#123; <span class=\"attr\">statue</span>:<span class=\"number\">9</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125;,&#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125; ] &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>: <span class=\"string\">&quot;插入多个3&quot;</span>, <span class=\"attr\">status</span>: <span class=\"string\">&quot;A&quot;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">statue</span>:<span class=\"number\">9</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;C&#x27;</span> &#125;, <span class=\"attr\">arr</span>: [ &#123; <span class=\"attr\">statue</span>:<span class=\"number\">9</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;C&#x27;</span> &#125;,&#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125; ] &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 普通查询</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">title</span>:<span class=\"string\">&quot;插入多个1&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>\n<p>查询数组中嵌套文档</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询 arr 数组, 查询条件里的结构顺序必须和存储的保持一直， 如果是 arr:&#123; title:&#x27;A&#x27;，statue:1 &#125; 则查询不出来</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123; </span><br><span class=\"line\">    <span class=\"attr\">arr</span>:&#123; </span><br><span class=\"line\">        <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// arr 数组中对象字段作为条件</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123; </span><br><span class=\"line\">    <span class=\"string\">&#x27;arr.statue&#x27;</span>: <span class=\"number\">9</span> </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 使用多个字段作为条件的时候，看的上面的可能会联想到这写。 实际上这样会把第2，3条都查询出来，这样实际是查询 statue为9和title为A的，但是并不需要是同一个文档里</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123; </span><br><span class=\"line\">    <span class=\"string\">&#x27;arr.statue&#x27;</span>: <span class=\"number\">9</span> ,</span><br><span class=\"line\">    <span class=\"string\">&#x27;arr.title&#x27;</span>: <span class=\"string\">&#x27;A&#x27;</span> </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 想要使用一个文档中多个字段 需要使用 运算符 $elemMatch</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">arr</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">$elemMatch</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>:<span class=\"string\">&quot;A&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">statue</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>查询嵌套的文档</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这样写 和数组一样，都是完全匹配一致</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">obj</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 指定文档字段</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123;</span><br><span class=\"line\"> <span class=\"string\">&#x27;obj.statue&#x27;</span>:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"指定返回字段\"><a href=\"#指定返回字段\" class=\"headerlink\" title=\"指定返回字段\"></a>指定返回字段</h3><p>默认情况下，MongoDB 中的查询返回匹配文档中的所有字段,可以配置一个 projection 文档以指定或限制要返回的字段。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 示例数据结构</span></span><br><span class=\"line\">&#123; <span class=\"attr\">title</span>: <span class=\"string\">&quot;插入多个1&quot;</span>, <span class=\"attr\">status</span>: <span class=\"string\">&quot;A&quot;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125;, <span class=\"attr\">arr</span>: [ &#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125; ] &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入多个1&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 类似sql的</span></span><br><span class=\"line\">select * <span class=\"keyword\">from</span> table_name where title=<span class=\"string\">&#x27;插入多个1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定返回字段</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入多个1&#x27;</span> &#125;,&#123; <span class=\"attr\">title</span>: <span class=\"number\">1</span>,<span class=\"attr\">staus</span>:<span class=\"number\">1</span>  &#125;)  <span class=\"comment\">// 1 代表返回字段, 0 代表过滤的字段</span></span><br><span class=\"line\"><span class=\"comment\">// 类似sql的</span></span><br><span class=\"line\">select _id,title,staus <span class=\"keyword\">from</span> table_name where title=<span class=\"string\">&#x27;插入多个1&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// _id MongoDB是默认指定返回的,如果想要不返回 可以指定 &#123; _id:0 &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定嵌套文档返回字段  4.4以后版本,还可以直接嵌套使用 &#123; title: 1,obj:&#123; statue:1  &#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 嵌套的数组和嵌套文档操作一致</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入多个1&#x27;</span> &#125;,&#123; <span class=\"attr\">title</span>: <span class=\"number\">1</span>,<span class=\"string\">&#x27;obj.statue&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;arr.title&#x27;</span>: <span class=\"number\">1</span> &#125;) </span><br><span class=\"line\"><span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">&#123;  <span class=\"attr\">title</span>: <span class=\"string\">&quot;插入多个1&quot;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span> &#125;, <span class=\"attr\">arr</span>: [&#123; <span class=\"attr\">title</span>:<span class=\"number\">1</span> &#125;]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 利用运算符 数组指定数据 $slice 返回数组最后一个</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">find</span>(&#123; <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入多个1&#x27;</span> &#125;,&#123; <span class=\"attr\">title</span>: <span class=\"number\">1</span>,<span class=\"string\">&#x27;obj.statue&#x27;</span>: <span class=\"number\">1</span>, <span class=\"attr\">arr</span>: &#123; <span class=\"attr\">$slice</span>: -<span class=\"number\">1</span> &#125; &#125;) </span><br></pre></td></tr></table></figure>\n<p>使用查询运算符和映射运算符，还能实现更为复杂的条件过滤和字段匹配</p>\n<h3 id=\"查询常用的运算符\"><a href=\"#查询常用的运算符\" class=\"headerlink\" title=\"查询常用的运算符\"></a>查询常用的运算符</h3><ul>\n<li>$eq,$gt 等这类比较大小的。</li>\n<li>$in,$nin 类似 sql 中的 in 和 not in 。</li>\n<li>$regex 使用正则匹配。</li>\n<li>$exists 判断是否有指定字段。</li>\n<li>$and 类似 sql 的 and。</li>\n<li>$or 类似 sql 的 or。</li>\n<li>$not 查询指定条件以外的数据。</li>\n<li>$nor 和 $or 结果是相反的。</li>\n<li>$all 匹配包含查询中指定的所有元素的数组。</li>\n<li>$elemMatch 如果 array 字段中的元素符合所有指定 $elemMatch 条件，则选择文档。</li>\n<li>$size 如果数组字段为指定大小，则选择文档。</li>\n</ul>\n<h3 id=\"查询中的映射\"><a href=\"#查询中的映射\" class=\"headerlink\" title=\"查询中的映射\"></a>查询中的映射</h3><ul>\n<li>$ 数组中匹配查询条件的第一个元素。</li>\n<li>$elemMatch 符合指定 $elemMatch 条件的数组中的第一个元素。</li>\n<li>$meta 项目在 $text 操作期间分配的文档分数。</li>\n<li>$slice 限制从数组中投影的元素数量。支持 limit 和 skip。</li>\n</ul>\n<h3 id=\"查询修饰符\"><a href=\"#查询修饰符\" class=\"headerlink\" title=\"查询修饰符\"></a>查询修饰符</h3><ul>\n<li>$comment 向查询添加注释，以标识数据库探查器输出中的查询。</li>\n<li>$explain 强制 MongoDB 报告查询执行计划。请参阅 explain()。</li>\n<li>$hint 仅强制 MongoDB 使用特定索引。请看 hint()</li>\n<li>$max 指定要在查询中使用的索引的排他上限。请参阅 max()。</li>\n<li>$maxTimeMS 指定对游标进行处理操作的累积时间限制（以毫秒为单位）。请参阅 maxTimeMS()。</li>\n<li>$min 指定一个包容性的下限为索引在查询中使用。请参阅 min()。</li>\n<li>$orderby 返回带有根据排序规范排序的文档的游标。请参阅 sort()。</li>\n<li>$query 包装查询文档。</li>\n<li>$returnKey 强制游标仅返回索引中包含的字段。</li>\n<li>$showDiskLoc 修改返回的文档以包括对每个文档在磁盘上位置的引用。</li>\n</ul>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p>MongoDB中更新文档，需要与更新运算符结合使用来修改字段值。<br>提供的更新方法</p>\n<ul>\n<li>update 更新或替换单个或者多个文档</li>\n<li>updateOne 更新单个文档</li>\n<li>updateMany 更新多个文档</li>\n<li>replaceOne 替换单个文档<br>基本使用方式<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 增加几条示例数据</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>: <span class=\"string\">&quot;插入多个1&quot;</span>, <span class=\"attr\">status</span>: <span class=\"string\">&quot;A&quot;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125;, <span class=\"attr\">arr</span>: [ &#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125; ] &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>: <span class=\"string\">&quot;插入多个2&quot;</span>, <span class=\"attr\">status</span>: <span class=\"string\">&quot;B&quot;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">statue</span>:<span class=\"number\">9</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125;, <span class=\"attr\">arr</span>: [ &#123; <span class=\"attr\">statue</span>:<span class=\"number\">9</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125;,&#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125; ] &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">title</span>: <span class=\"string\">&quot;插入多个3&quot;</span>, <span class=\"attr\">status</span>: <span class=\"string\">&quot;C&quot;</span>, <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">statue</span>:<span class=\"number\">9</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;C&#x27;</span> &#125;, <span class=\"attr\">arr</span>: [ &#123; <span class=\"attr\">statue</span>:<span class=\"number\">9</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;C&#x27;</span> &#125;,&#123; <span class=\"attr\">statue</span>:<span class=\"number\">1</span>,<span class=\"attr\">title</span>:<span class=\"string\">&#x27;A&#x27;</span> &#125; ] &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 语法 </span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">update</span>(<span class=\"string\">&#x27;查询条件&#x27;</span>,<span class=\"string\">&#x27;更新管道&#x27;</span>,<span class=\"string\">&#x27;设置&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 替换查询的整个文档</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">update</span>(&#123; <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入多个1&#x27;</span> &#125;,&#123; <span class=\"attr\">status</span>:<span class=\"string\">&#x27;D&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 更新指定字段</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">update</span>(</span><br><span class=\"line\">  &#123; <span class=\"attr\">title</span>:<span class=\"string\">&#x27;插入多个1&#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; </span><br><span class=\"line\">    <span class=\"attr\">$set</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">status</span>:<span class=\"string\">&#x27;D&#x27;</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">multi</span>: <span class=\"literal\">true</span> ,<span class=\"comment\">// 默认false, 是否更新多条</span></span><br><span class=\"line\">    <span class=\"attr\">upsert</span>: <span class=\"literal\">true</span>,<span class=\"comment\">// 默认fals, 如果不存在文档这新增一条</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改嵌套数组字段</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">update</span>(</span><br><span class=\"line\">  &#123; <span class=\"attr\">title</span>: <span class=\"string\">&quot;插入多个1&quot;</span>, <span class=\"string\">&quot;arr.statue&quot;</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;$set&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">//&quot;arr.0.statue&quot;: 3 // 修改第1条</span></span><br><span class=\"line\">        <span class=\"string\">&quot;arr.$.statue&quot;</span>: <span class=\"number\">3</span> <span class=\"comment\">// 单个修改需要指定数组条件</span></span><br><span class=\"line\">        <span class=\"comment\">//&quot;arr.$[].statue&quot;: 3 //修改多个</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 去除字段</span></span><br><span class=\"line\">db.<span class=\"property\">table_name</span>.<span class=\"title function_\">update</span>(</span><br><span class=\"line\">  &#123; <span class=\"attr\">title</span>: <span class=\"string\">&quot;插入多个1&quot;</span> &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;$unset&quot;</span>:&#123;</span><br><span class=\"line\">          <span class=\"attr\">status</span>: <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4.2后的版本还可以将聚合管道用来更新</span></span><br><span class=\"line\"><span class=\"comment\">// 将合计值更新到 total 上</span></span><br><span class=\"line\">db.<span class=\"property\">collection</span>.<span class=\"title function_\">update</span>(&#123;&#125;,</span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;$set&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">total</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;$sum&quot;</span>: [</span><br><span class=\"line\">          <span class=\"string\">&quot;$arr.statue&quot;</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">],</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">multi</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"字段更新运算符\"><a href=\"#字段更新运算符\" class=\"headerlink\" title=\"字段更新运算符\"></a>字段更新运算符</h3><ul>\n<li>$currentDate 将字段的值设置为当前日期，即日期或时间戳。</li>\n<li>$inc 将字段的值增加指定的数量。</li>\n<li>$min 仅当指定值小于现有字段值时才更新该字段。</li>\n<li>$max 仅当指定值大于现有字段值时才更新该字段。</li>\n<li>$mul 将字段的值乘以指定的数量。</li>\n<li>$rename 重命名字段。</li>\n<li>$set 设置文档中字段的值。</li>\n<li>$setOnInsert 如果更新导致插入文档，则设置字段的值。对修改现有文档的更新操作没有影响。</li>\n<li>$unset 从文档中删除指定的字段。</li>\n</ul>\n<h3 id=\"数组更新运算符\"><a href=\"#数组更新运算符\" class=\"headerlink\" title=\"数组更新运算符\"></a>数组更新运算符</h3><ul>\n<li>$[] 充当占位符，以更新匹配查询条件的文档的数组中的所有元素。</li>\n<li>$ 充当占位符，以更新与查询条件匹配的第一个元素。</li>\n<li>$[<identifier>] 充当占位符，以更新 arrayFilters 与查询条件匹配的文档中所有与条件匹配的元素。</li>\n<li>$addToSet 仅当元素不存在于集合中时才将它们添加到数组中。</li>\n<li>$pop 删除数组的第一项或最后一项。</li>\n<li>$pull 删除与指定查询匹配的所有数组元素。</li>\n<li>$push 将项目添加到数组。</li>\n<li>$pullAll 从数组中删除所有匹配的值。</li>\n</ul>"},{"title":"node 实现简单 http 转发","date":"2020-05-12T09:50:55.000Z","comments":1,"keywords":"node代理","_content":"\n\n由于同源策略的限制，前端想要随便调用别人的数据没有那么容易，利用jsonp去调用虽然可以，但是也得别人支持，而且还只能是get 请求。想要随便调用别人数据，最简单就是弄一个代理服务，实现数据的转发。\n<!-- more -->\n\n## node 实现透明转发 ##\n\n主要就是使用 stream.pipe()，将请求得流写入自己写得请求中，再将请求到的数据写入响应流中。\n简单实现例子\n\n``` js\nconst http = require('http')\nconst https = require('https')\nconst os = require('os')\nconst config = {\n    url: 'https://www.imalun.com/',\n    port: 7000,\n    ip: getIpv4(),\n    type: 'http',\n    http,\n    https\n}\n\nlet argv = process.argv;\n\nif (argv.length < 3) {\n    console.log('\\t\\n\\x1B[41m\\x1B[1m%s\\x1B[22m\\x1B[49m  %s\\t\\n', ' error ', '请指定 proxy url \\t\\n demo :  node proxy www.imalun.com ');\n    process.exit(1);\n} else {\n    let [, , ...par] = argv;\n    config.url = par[0];\n    config.port = par[1] || config.port;\n    if (par[0].substr(0, 5) === 'https') {\n        config.type = 'https'\n    } else if (par[0].substr(0, 4) === 'http') {\n        config.type = 'http'\n    }\n}\n\n\nhttp.createServer(function (req, res) {\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    res.setHeader(\"Access-Control-Allow-Headers\", \"content-type\");\n    res.setHeader(\"Access-Control-Allow-Methods\", \"DELETE,PUT,POST,GET,OPTIONS\");\n    if (req.method.toLowerCase() == 'options')\n        res.end();\n    else\n        req.pipe(config[config.type].request(config.url + req.url, (respo) => respo.pipe(res)))\n}).listen(config.port, '0.0.0.0', function () {\n    console.log('\\x1B[42m\\x1B[1m%s\\x1B[22m\\x1B[49m', ' success \\t\\n')\n    console.log('\\x1B[44m\\x1B[1m%s\\x1B[22m\\x1B[49m %s\\t\\n', ' prot ', 'http://' + config.ip + ':' + config.port)\n    console.log('\\x1B[44m\\x1B[1m%s\\x1B[22m\\x1B[49m  %s\\t\\n', ' proxy url ', config.url)\n})\n\n\nfunction getIpv4() {\n    let net = os.networkInterfaces();\n    let ipv4;\n    for (const key in net) {\n        net[key].forEach(element => {\n            if (element.address !== '127.0.0.1' && element.family.toLocaleLowerCase() === 'ipv4') ipv4 = element.address\n        });\n    }\n    return ipv4;\n}\n```\n\n效果如下\n\n![](/images/posts/node_proxy/20200629201153.png)","source":"_posts/node_proxy.md","raw":"---\ntitle: node 实现简单 http 转发\ndate: 2020-05-12 17:50:55\ntags: [node]\ncategories: 记录类\ncomments: true\nkeywords: node代理\n---\n\n\n由于同源策略的限制，前端想要随便调用别人的数据没有那么容易，利用jsonp去调用虽然可以，但是也得别人支持，而且还只能是get 请求。想要随便调用别人数据，最简单就是弄一个代理服务，实现数据的转发。\n<!-- more -->\n\n## node 实现透明转发 ##\n\n主要就是使用 stream.pipe()，将请求得流写入自己写得请求中，再将请求到的数据写入响应流中。\n简单实现例子\n\n``` js\nconst http = require('http')\nconst https = require('https')\nconst os = require('os')\nconst config = {\n    url: 'https://www.imalun.com/',\n    port: 7000,\n    ip: getIpv4(),\n    type: 'http',\n    http,\n    https\n}\n\nlet argv = process.argv;\n\nif (argv.length < 3) {\n    console.log('\\t\\n\\x1B[41m\\x1B[1m%s\\x1B[22m\\x1B[49m  %s\\t\\n', ' error ', '请指定 proxy url \\t\\n demo :  node proxy www.imalun.com ');\n    process.exit(1);\n} else {\n    let [, , ...par] = argv;\n    config.url = par[0];\n    config.port = par[1] || config.port;\n    if (par[0].substr(0, 5) === 'https') {\n        config.type = 'https'\n    } else if (par[0].substr(0, 4) === 'http') {\n        config.type = 'http'\n    }\n}\n\n\nhttp.createServer(function (req, res) {\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    res.setHeader(\"Access-Control-Allow-Headers\", \"content-type\");\n    res.setHeader(\"Access-Control-Allow-Methods\", \"DELETE,PUT,POST,GET,OPTIONS\");\n    if (req.method.toLowerCase() == 'options')\n        res.end();\n    else\n        req.pipe(config[config.type].request(config.url + req.url, (respo) => respo.pipe(res)))\n}).listen(config.port, '0.0.0.0', function () {\n    console.log('\\x1B[42m\\x1B[1m%s\\x1B[22m\\x1B[49m', ' success \\t\\n')\n    console.log('\\x1B[44m\\x1B[1m%s\\x1B[22m\\x1B[49m %s\\t\\n', ' prot ', 'http://' + config.ip + ':' + config.port)\n    console.log('\\x1B[44m\\x1B[1m%s\\x1B[22m\\x1B[49m  %s\\t\\n', ' proxy url ', config.url)\n})\n\n\nfunction getIpv4() {\n    let net = os.networkInterfaces();\n    let ipv4;\n    for (const key in net) {\n        net[key].forEach(element => {\n            if (element.address !== '127.0.0.1' && element.family.toLocaleLowerCase() === 'ipv4') ipv4 = element.address\n        });\n    }\n    return ipv4;\n}\n```\n\n效果如下\n\n![](/images/posts/node_proxy/20200629201153.png)","slug":"node_proxy","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vrt002598lggtgff53c","content":"<p>由于同源策略的限制，前端想要随便调用别人的数据没有那么容易，利用jsonp去调用虽然可以，但是也得别人支持，而且还只能是get 请求。想要随便调用别人数据，最简单就是弄一个代理服务，实现数据的转发。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"node-实现透明转发\"><a href=\"#node-实现透明转发\" class=\"headerlink\" title=\"node 实现透明转发\"></a>node 实现透明转发</h2><p>主要就是使用 stream.pipe()，将请求得流写入自己写得请求中，再将请求到的数据写入响应流中。<br>简单实现例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;https&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> os = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;os&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;https://www.imalun.com/&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">7000</span>,</span><br><span class=\"line\">    <span class=\"attr\">ip</span>: <span class=\"title function_\">getIpv4</span>(),</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;http&#x27;</span>,</span><br><span class=\"line\">    http,</span><br><span class=\"line\">    https</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> argv = process.<span class=\"property\">argv</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (argv.<span class=\"property\">length</span> &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;\\t\\n\\x1B[41m\\x1B[1m%s\\x1B[22m\\x1B[49m  %s\\t\\n&#x27;</span>, <span class=\"string\">&#x27; error &#x27;</span>, <span class=\"string\">&#x27;请指定 proxy url \\t\\n demo :  node proxy www.imalun.com &#x27;</span>);</span><br><span class=\"line\">    process.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [, , ...par] = argv;</span><br><span class=\"line\">    config.<span class=\"property\">url</span> = par[<span class=\"number\">0</span>];</span><br><span class=\"line\">    config.<span class=\"property\">port</span> = par[<span class=\"number\">1</span>] || config.<span class=\"property\">port</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (par[<span class=\"number\">0</span>].<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>, <span class=\"number\">5</span>) === <span class=\"string\">&#x27;https&#x27;</span>) &#123;</span><br><span class=\"line\">        config.<span class=\"property\">type</span> = <span class=\"string\">&#x27;https&#x27;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (par[<span class=\"number\">0</span>].<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>, <span class=\"number\">4</span>) === <span class=\"string\">&#x27;http&#x27;</span>) &#123;</span><br><span class=\"line\">        config.<span class=\"property\">type</span> = <span class=\"string\">&#x27;http&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"string\">&quot;content-type&quot;</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"string\">&quot;DELETE,PUT,POST,GET,OPTIONS&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.<span class=\"property\">method</span>.<span class=\"title function_\">toLowerCase</span>() == <span class=\"string\">&#x27;options&#x27;</span>)</span><br><span class=\"line\">        res.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        req.<span class=\"title function_\">pipe</span>(config[config.<span class=\"property\">type</span>].<span class=\"title function_\">request</span>(config.<span class=\"property\">url</span> + req.<span class=\"property\">url</span>, <span class=\"function\">(<span class=\"params\">respo</span>) =&gt;</span> respo.<span class=\"title function_\">pipe</span>(res)))</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(config.<span class=\"property\">port</span>, <span class=\"string\">&#x27;0.0.0.0&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;\\x1B[42m\\x1B[1m%s\\x1B[22m\\x1B[49m&#x27;</span>, <span class=\"string\">&#x27; success \\t\\n&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;\\x1B[44m\\x1B[1m%s\\x1B[22m\\x1B[49m %s\\t\\n&#x27;</span>, <span class=\"string\">&#x27; prot &#x27;</span>, <span class=\"string\">&#x27;http://&#x27;</span> + config.<span class=\"property\">ip</span> + <span class=\"string\">&#x27;:&#x27;</span> + config.<span class=\"property\">port</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;\\x1B[44m\\x1B[1m%s\\x1B[22m\\x1B[49m  %s\\t\\n&#x27;</span>, <span class=\"string\">&#x27; proxy url &#x27;</span>, config.<span class=\"property\">url</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getIpv4</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> net = os.<span class=\"title function_\">networkInterfaces</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ipv4;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> net) &#123;</span><br><span class=\"line\">        net[key].<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (element.<span class=\"property\">address</span> !== <span class=\"string\">&#x27;127.0.0.1&#x27;</span> &amp;&amp; element.<span class=\"property\">family</span>.<span class=\"title function_\">toLocaleLowerCase</span>() === <span class=\"string\">&#x27;ipv4&#x27;</span>) ipv4 = element.<span class=\"property\">address</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ipv4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下</p>\n<p><img src=\"/images/posts/node_proxy/20200629201153.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n","excerpt":"<p>由于同源策略的限制，前端想要随便调用别人的数据没有那么容易，利用jsonp去调用虽然可以，但是也得别人支持，而且还只能是get 请求。想要随便调用别人数据，最简单就是弄一个代理服务，实现数据的转发。</p>","more":"<h2 id=\"node-实现透明转发\"><a href=\"#node-实现透明转发\" class=\"headerlink\" title=\"node 实现透明转发\"></a>node 实现透明转发</h2><p>主要就是使用 stream.pipe()，将请求得流写入自己写得请求中，再将请求到的数据写入响应流中。<br>简单实现例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;https&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> os = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;os&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;https://www.imalun.com/&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">7000</span>,</span><br><span class=\"line\">    <span class=\"attr\">ip</span>: <span class=\"title function_\">getIpv4</span>(),</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;http&#x27;</span>,</span><br><span class=\"line\">    http,</span><br><span class=\"line\">    https</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> argv = process.<span class=\"property\">argv</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (argv.<span class=\"property\">length</span> &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;\\t\\n\\x1B[41m\\x1B[1m%s\\x1B[22m\\x1B[49m  %s\\t\\n&#x27;</span>, <span class=\"string\">&#x27; error &#x27;</span>, <span class=\"string\">&#x27;请指定 proxy url \\t\\n demo :  node proxy www.imalun.com &#x27;</span>);</span><br><span class=\"line\">    process.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [, , ...par] = argv;</span><br><span class=\"line\">    config.<span class=\"property\">url</span> = par[<span class=\"number\">0</span>];</span><br><span class=\"line\">    config.<span class=\"property\">port</span> = par[<span class=\"number\">1</span>] || config.<span class=\"property\">port</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (par[<span class=\"number\">0</span>].<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>, <span class=\"number\">5</span>) === <span class=\"string\">&#x27;https&#x27;</span>) &#123;</span><br><span class=\"line\">        config.<span class=\"property\">type</span> = <span class=\"string\">&#x27;https&#x27;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (par[<span class=\"number\">0</span>].<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>, <span class=\"number\">4</span>) === <span class=\"string\">&#x27;http&#x27;</span>) &#123;</span><br><span class=\"line\">        config.<span class=\"property\">type</span> = <span class=\"string\">&#x27;http&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"string\">&quot;content-type&quot;</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"string\">&quot;DELETE,PUT,POST,GET,OPTIONS&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.<span class=\"property\">method</span>.<span class=\"title function_\">toLowerCase</span>() == <span class=\"string\">&#x27;options&#x27;</span>)</span><br><span class=\"line\">        res.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        req.<span class=\"title function_\">pipe</span>(config[config.<span class=\"property\">type</span>].<span class=\"title function_\">request</span>(config.<span class=\"property\">url</span> + req.<span class=\"property\">url</span>, <span class=\"function\">(<span class=\"params\">respo</span>) =&gt;</span> respo.<span class=\"title function_\">pipe</span>(res)))</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(config.<span class=\"property\">port</span>, <span class=\"string\">&#x27;0.0.0.0&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;\\x1B[42m\\x1B[1m%s\\x1B[22m\\x1B[49m&#x27;</span>, <span class=\"string\">&#x27; success \\t\\n&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;\\x1B[44m\\x1B[1m%s\\x1B[22m\\x1B[49m %s\\t\\n&#x27;</span>, <span class=\"string\">&#x27; prot &#x27;</span>, <span class=\"string\">&#x27;http://&#x27;</span> + config.<span class=\"property\">ip</span> + <span class=\"string\">&#x27;:&#x27;</span> + config.<span class=\"property\">port</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;\\x1B[44m\\x1B[1m%s\\x1B[22m\\x1B[49m  %s\\t\\n&#x27;</span>, <span class=\"string\">&#x27; proxy url &#x27;</span>, config.<span class=\"property\">url</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getIpv4</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> net = os.<span class=\"title function_\">networkInterfaces</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ipv4;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> net) &#123;</span><br><span class=\"line\">        net[key].<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">element</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (element.<span class=\"property\">address</span> !== <span class=\"string\">&#x27;127.0.0.1&#x27;</span> &amp;&amp; element.<span class=\"property\">family</span>.<span class=\"title function_\">toLocaleLowerCase</span>() === <span class=\"string\">&#x27;ipv4&#x27;</span>) ipv4 = element.<span class=\"property\">address</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ipv4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下</p>\n<p><img src=\"/images/posts/node_proxy/20200629201153.png\"></p>"},{"title":"2023年，还在手动发布 npm 包？","date":"2023-02-10T02:50:55.000Z","keywords":"npm,npm pushlish,github actions,release","toc":false,"_content":"\n还在手动 **npm publish** 发布 **npm** ？ 还在手动更新版本创建发布 **Github Release** ？还在手动添加 **Changelog**？是时候利用  **CI/CD** 解放双手啦。常见的 **CI/CD** 有很多，比如 Jenkins、GitLab CI、CircleCI 、Github Actions 等。本文主要是通过 **Github Actions** 来自动化处理 **npm** 包管理。\n\n## Github Actions \n**GitHub Actions** 距离推出已经好几年了，相信小伙伴们没用过，也听说过。**GitHub Actions** 不仅仅是能自动执行生成、测试和部署操作，还允许您在存储库中发生其他事件时运行工作流程。 例如，您可以运行工作流程，以便在有人在您的存储库中创建新问题时自动添加相应的标签。而且 GitHub 提供 Linux、Windows 和 macOS 多种虚拟机来运行工作流程，可以更具项目选择合适的虚拟机环境。\n\n**GitHub Actions** 其实主要步骤只有两个，**event** (事件触发时机)、**jobs**（工作流程）。如果还不熟悉 **GitHub Actions**，可以[参考文档](https://docs.github.com/zh/actions)对其大致使用有个了解。\n\n## 发布 Npm \n在本地发布 npm 包都是本地打包成组件后，登录 npm 账号运行 npm publish 发布。使用 **GitHub Actions** 来发布 **npm** 可以使用 **Npm Access Tokens**，可以更据需要分配 **Tokens** 权限，不需要使用账号密码登录。\n\n### Github Actions 发布 Npm\n\n首先需要确定你工作流触发时机，这个需要根据你个人习惯决定。\n\n举例：\n\n{% tabs test1 %}\n<!-- tab tag -->\n推送 Tag 时触发\n``` yaml\non:\n  push:\n    tags:\n      - \"v*\"\n```\n<!-- endtab -->\n\n<!-- tab branches -->\n仅在 master 推送时触发\n``` yaml\non:\n  push:\n    branches: [master]\n```\n<!-- endtab -->\n\n<!-- tab paths -->\n仅在 master 推送时，且 docs 下文件修改时触发，更多可以[参考文档](https://docs.github.com/zh/actions/using-workflows/events-that-trigger-workflows)\n``` yaml\non:\n  push:\n    branches: [master]\n    paths:\n      - 'docs/**'\n```\n<!-- endtab -->\n{% endtabs %}\n\n本文就以为推送 Tag 触发为例：\n\n在你项目下添加 **.github\\workflows\\publish.yml** 文件，内容如下\n\n``` yaml\nname: NPM Publish\non:\n  push:\n    tags:\n      - \"v*\"\n```\n#### 代码拉取和Node配置\n在 **jobs** 添加一个名为 **build** 的 job，配置 **build** 的环境和拉取代码。**runs-on: ubuntu-latest** 配置虚拟机为 **ubuntu**，使用官方提取代码拉取和 配置 Node 的 Actions，更多 [官方提供 Actions](https://github.com/actions)\n\n``` yaml\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2   # 拉取代码\n      - uses: actions/setup-node@v3 # 设置 Node 版本\n        with:\n          node-version: 16\n          registry-url: 'https://registry.npmjs.org'\n          cache: yarn\n```\n#### 配置环境密钥\n添加环境变量，在你项目 => Settings => Secrets and variables => Actions 中 添加你的密钥，名称随意取，密钥值为你上面生成的 **Npm Access Tokens**。\n\n例如：\nName => NPM_TOKEN\nSecret => 你的 **Npm Access Tokens**\n\n\n#### 发布 Npm\n\n**build** 的 job 中，添加发布 Npm 操作，利用 NPM_TOKEN 发布 npm 包\n``` yaml\n    steps:\n      - name: Npm Publish\n        run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n```\n到此时，当你推送一个以 v开头 tag 到仓库时，就会执行这个 publish.yml，这个 Action 会将当前仓库发布到 Npm 了。\n\n当然你的包可能还需要执行一些构建操作等等，你可以在 **run** 里执行多条命令\n\n``` yaml\nrun: |\n    npm run build\n    #...更多操作\n    npm publish\n```\n\n### 区分 Beta 和 latest\n\n默认情况下 **npm publish** 发布时正式包，如果需要测试包需要执行 **npm publish --tag beta**。利用 git tag 我们可以将 v1.0.2 格式发为正式包，将 v1.0.2-beta.1 格式发布测试包。\n\n修改 publish 流程，**Github Action** 支持 **if** 操作，并不支持 **else**，只能通过如下模拟 **if else** 操作。\n\n``` yaml\n    steps:\n      - name: Beta Publish\n        if: ${{ contains(github.ref,'beta') }}\n        run: npm publish --tag beta\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n\n      - name: Publish\n        if: ${{ !contains(github.ref,'beta') }}\n        run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n```\n\n### 根据 Tag 更新版本号\n为例避免每次修改 package.json 中版本，我们可以根据 tag 来修改 package.json 中版本，因为上面配置 node 环境，可以直接执行 node 代码，我们直接添加一个 publish.js 文件，去修改 package.json 中 version 。\n\n``` js \nconst fs = require('fs')\nconst path = require('path')\n\nif (process.env.RELEASE_VERSION) {\n    const version = process.env.RELEASE_VERSION.split('/').reverse()[0]\n    console.log('当前版本：', version);\n    const pkg = require('./package.json')\n    pkg.version = version.replace('v', '')\n    fs.writeFileSync(path.resolve(__dirname, './package.json'), JSON.stringify(pkg, null, 4), 'utf-8')\n}\n```\n\n修改 publish 流程，在发布前修改版本，并将 github.ref 添加环境变量 RELEASE_VERSION\n\n``` yaml\n    steps:\n      - name: Build\n        run: node ./publish\n        env:\n          RELEASE_VERSION: ${{ github.ref }}\n```\n\n### 创建发布 Github Release\n官方 **actions/create-release** 不在维护，推荐如下 Actions，可以结合需要选择，你也可以去前往 [marketplace](https://github.com/marketplace) 选择更多 Actions。\n\n* [elgohr/Github-Release-Action](https://github.com/elgohr/Github-Release-Action)\n* [marvinpinto/action-automatic-releases](https://github.com/marvinpinto/action-automatic-releases)\n* [softprops/action-gh-release](https://github.com/softprops/action-gh-release)\n* [ncipollo/release-action](https://github.com/ncipollo/release-action)\n\n\n很多创建 **Release** 的 **Actions**，并不会将你的提交自动生成发版说明，所以我编写了一个发布 **Release** 的 **Actions**，具体实现参考 [MaLuns/add-release](https://github.com/MaLuns/add-release) 以满足我的需求。Github 为我们提供 [**actions/toolkit**](https://github.com/actions/toolkit) 帮助我们简化了很多操作。\n\n简单描述如何实现：\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 730.4648101751317 852.9999999999993\" filter=\"invert(93%) hue-rotate(180deg)\">\n\n  <defs>\n    <style class=\"style-fonts\">\n      @font-face {\n        font-family: \"Virgil\";\n        src: url(\"https://excalidraw.com/Virgil.woff2\");\n      }\n      @font-face {\n        font-family: \"Cascadia\";\n        src: url(\"https://excalidraw.com/Cascadia.woff2\");\n      }\n    </style>\n  </defs>\n  <g stroke-linecap=\"round\" transform=\"translate(10 10) rotate(0 139.5 27.5)\"><path d=\"M13.75 0 M13.75 0 C109.38 -2.41, 205.68 1.99, 265.25 0 M13.75 0 C70.18 2.36, 124.81 0.97, 265.25 0 M265.25 0 C273.89 1.09, 281.74 7.28, 279 13.75 M265.25 0 C277.97 4.59, 274.44 8.78, 279 13.75 M279 13.75 C276.09 18.18, 279.75 24.18, 279 41.25 M279 13.75 C277.83 23.76, 280.05 32.76, 279 41.25 M279 41.25 C280.53 49.75, 271.57 52.1, 265.25 55 M279 41.25 C276.2 54.43, 269.9 58.1, 265.25 55 M265.25 55 C209.34 55.8, 147.98 55.99, 13.75 55 M265.25 55 C169.39 56.68, 70.38 55.24, 13.75 55 M13.75 55 C8.57 51.9, -0.4 48.89, 0 41.25 M13.75 55 C7.04 56.87, -3.65 50.34, 0 41.25 M0 41.25 C0.8 31.53, 3.38 23.71, 0 13.75 M0 41.25 C-1.05 30.71, 0.18 22.03, 0 13.75 M0 13.75 C-0.72 6.24, 2.74 3.88, 13.75 0 M0 13.75 C4.5 8.33, 4.37 -1.58, 13.75 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(28.5 27.5) rotate(0 121 10)\"><text x=\"121\" y=\"14\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">从当前位置开始分页获取提交记录</text></g><g stroke-linecap=\"round\" transform=\"translate(70.88888888888926 119.11111111111086) rotate(0 87 27.5)\"><path d=\"M13.75 0 M13.75 0 C70.27 -1.27, 132.16 -5.78, 160.25 0 M13.75 0 C49.11 3.38, 82.62 0.94, 160.25 0 M160.25 0 C172.31 1.56, 177.77 6.12, 174 13.75 M160.25 0 C168.65 -3.27, 170.67 1.79, 174 13.75 M174 13.75 C170.69 27.99, 173.48 37.63, 174 41.25 M174 13.75 C175.49 23.48, 174.56 32.65, 174 41.25 M174 41.25 C174.25 47.02, 166.12 58.98, 160.25 55 M174 41.25 C170.43 49.95, 167.66 57.46, 160.25 55 M160.25 55 C108.89 54.23, 59.37 55.65, 13.75 55 M160.25 55 C126.86 53.71, 92.28 51.97, 13.75 55 M13.75 55 C4.11 55.89, 2.76 49.69, 0 41.25 M13.75 55 C6.49 52.89, 4.47 54.92, 0 41.25 M0 41.25 C-2.82 31.53, 2.41 23.49, 0 13.75 M0 41.25 C-0.4 35.03, -0.56 28.24, 0 13.75 M0 13.75 C-2.36 7.79, 4.22 1.59, 13.75 0 M0 13.75 C3.15 8.94, 5.15 2.29, 13.75 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(101.38888888888926 137.11111111111086) rotate(0 56.5 9.5)\"><text x=\"56.5\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">获取所有 tags</text></g><g stroke-linecap=\"round\"><g transform=\"translate(150.88997153960383 67.18500722316435) rotate(0 -2.375925603429664 26.98165787361677)\"><path d=\"M-1.36 1.74 C-3.05 10.23, -6.88 42.36, -7.85 50.27 M3.1 0.21 C2.04 9.22, -2.05 45.19, -2.81 53.75\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(150.88997153960383 67.18500722316435) rotate(0 -2.375925603429664 26.98165787361677)\"><path d=\"M-6.52 25.54 C-7.15 35.91, -6.31 49.69, -6.21 57.11 M-9.03 28.39 C-6.66 37.72, -6.6 43.18, -3.49 52.44\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(150.88997153960383 67.18500722316435) rotate(0 -2.375925603429664 26.98165787361677)\"><path d=\"M10.78 27.32 C3.54 36.85, -2.23 49.95, -6.21 57.11 M8.26 30.18 C5.44 38.84, 0.29 43.76, -3.49 52.44\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g stroke-linecap=\"round\" transform=\"translate(76.88888888888852 359.55555555555543) rotate(0 81.00000000000003 26)\"><path d=\"M13 0 M13 0 C48.15 0.59, 83.48 -1.4, 149 0 M13 0 C65.81 -1.5, 120.05 -1.13, 149 0 M149 0 C156.96 3.43, 160.63 2.94, 162 13 M149 0 C155.72 3.81, 163.79 6.52, 162 13 M162 13 C164.97 21.93, 165.32 33.71, 162 39 M162 13 C164.16 18.66, 162.04 22.96, 162 39 M162 39 C165.01 45.04, 159.76 50.22, 149 52 M162 39 C158.91 43.92, 155.83 52.56, 149 52 M149 52 C114.38 51.99, 76.13 50.26, 13 52 M149 52 C111.19 51.86, 73.18 49.38, 13 52 M13 52 C7.36 54.09, 3.81 48.54, 0 39 M13 52 C8.37 50.93, 2.61 49.39, 0 39 M0 39 C-1.37 29.54, -3.76 16.5, 0 13 M0 39 C-1.16 33.31, -0.27 25.99, 0 13 M0 13 C1.34 5.4, 4.26 0.12, 13 0 M0 13 C2.13 1.13, 6.08 -3.88, 13 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(108.88888888888857 376.05555555555543) rotate(0 49 9.5)\"><text x=\"49\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">循环读取记录</text></g><g stroke-linecap=\"round\"><g transform=\"translate(153.3959809829115 291.96031746031736) rotate(0 -0.3315164564070301 34.81390687762939)\"><path d=\"M-1.1 1.87 C-1.35 13.84, -1.54 58.15, -1.67 69.21 M3.5 0.42 C2.86 11.92, -2.91 55.14, -4.16 65.69\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(153.3959809829115 291.96031746031736) rotate(0 -0.3315164564070301 34.81390687762939)\"><path d=\"M-8.15 35.78 C-5.5 44.13, -4.91 50.69, -0.7 68.1 M-12.33 36.4 C-8.54 41.49, -7.37 47.65, -4.34 66.81\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(153.3959809829115 291.96031746031736) rotate(0 -0.3315164564070301 34.81390687762939)\"><path d=\"M12.21 38.34 C8.95 45.78, 3.58 51.59, -0.7 68.1 M8.04 38.96 C7.36 43.64, 4.02 49.23, -4.34 66.81\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g stroke-linecap=\"round\" transform=\"translate(44.6666666666664 485.7777777777778) rotate(0 115.5 39)\"><path d=\"M145 10 M145 10 C162.03 19.72, 175.77 22.64, 202 30 M145 10 C159.69 16.01, 180.29 22.75, 202 30 M202 30 C229.68 38.79, 234.91 36.37, 202 50 M202 30 C234.35 42.28, 233.99 37.91, 202 50 M202 50 C192.22 56.54, 175.36 56.51, 145 68 M202 50 C188.07 54.67, 172.39 58.19, 145 68 M145 68 C115.61 78.88, 117.97 79.22, 87 68 M145 68 C113.83 80.47, 118.56 74.15, 87 68 M87 68 C71.29 61.04, 60.56 59.32, 29 50 M87 68 C74.64 64.74, 64.44 62.94, 29 50 M29 50 C-3.74 39.97, -2.56 38.48, 29 30 M29 50 C-0.37 39.37, 0.33 35.89, 29 30 M29 30 C50.44 21.61, 67.95 19.5, 87 10 M29 30 C39.74 28.07, 53.86 23.06, 87 10 M87 10 C117.55 -3.73, 116.15 -0.35, 145 10 M87 10 C117.11 0.05, 111.75 1.9, 145 10\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(103.6666666666664 515.2777777777778) rotate(0 56.5 9.5)\"><text x=\"56.5\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是否是 tag 处</text></g><g stroke-linecap=\"round\"><g transform=\"translate(149.86229137715839 412.9312169312168) rotate(0 4.208753635864298 44.00826718116923)\"><path d=\"M1.74 2.04 C2.05 16.64, 3.37 73.22, 4.27 87.33 M-0.76 0.69 C0.16 14.55, 8.15 69.98, 9.18 83.55\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(149.86229137715839 412.9312169312168) rotate(0 4.208753635864298 44.00826718116923)\"><path d=\"M-1.29 52.77 C4.13 67.04, 8.41 74.67, 7.63 79.71 M-2.42 55.64 C-2.41 61.14, 1.58 70.44, 9.2 82.95\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(149.86229137715839 412.9312169312168) rotate(0 4.208753635864298 44.00826718116923)\"><path d=\"M19.1 50.44 C16.66 65.86, 13.09 74.39, 7.63 79.71 M17.97 53.31 C13.25 59.65, 12.55 69.49, 9.2 82.95\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g mask=\"url(#mask-lviM0Dprq1R14gecoqO6G)\" stroke-linecap=\"round\"><g transform=\"translate(166.8423381162429 563.3610819644362) rotate(0 -0.029376666403038598 53.384134448982536)\"><path d=\"M0.06 2.21 C0.81 19.68, 2.3 86.2, 3.29 102.65 M-3.35 0.94 C-2.86 19.01, -0.44 88.88, 1.06 105.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(166.8423381162429 563.3610819644362) rotate(0 -0.029376666403038598 53.384134448982536)\"><path d=\"M-7.63 78.3 C-9.36 89.25, -8.79 91.6, -1.31 103.66 M-12.18 79.05 C-6.4 85.8, -5.97 92.15, -0.21 106.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(166.8423381162429 563.3610819644362) rotate(0 -0.029376666403038598 53.384134448982536)\"><path d=\"M12.86 77.13 C5.84 88.39, 1.15 91.04, -1.31 103.66 M8.31 77.88 C9.45 84.56, 5.22 91.18, -0.21 106.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-lviM0Dprq1R14gecoqO6G\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"270.10521586848984\" height=\"766.8482905982908\"/><rect x=\"159.47377699236642\" y=\"605.6046862813637\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(159.47377699236642 605.6046862813635) rotate(0 7.339184457473436 11.140530132055233)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是</text></g><g mask=\"url(#mask-dn1DNiDydmoukLwp9itsL)\" stroke-linecap=\"round\"><g transform=\"translate(272.9215136092465 524.3635848425745) rotate(0 93.08055415379027 2.589871462680776)\"><path d=\"M-2.42 0.27 C29.3 1.24, 156.92 6.29, 188.59 7.23 M1.45 -2.05 C33.19 -1.97, 156.82 2.91, 187.66 3.39\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(272.9215136092465 524.3635848425745) rotate(0 93.08055415379027 2.589871462680776)\"><path d=\"M159.57 16.3 C168.89 13.09, 173.73 7.2, 190.18 3.32 M157.45 12.33 C169.03 10.09, 179.3 6.48, 188.03 3.06\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(272.9215136092465 524.3635848425745) rotate(0 93.08055415379027 2.589871462680776)\"><path d=\"M160.16 -4.22 C169.55 -2.58, 174.25 -3.64, 190.18 3.32 M158.04 -8.18 C169.25 -2.93, 179.3 0.95, 188.03 3.06\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-dn1DNiDydmoukLwp9itsL\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"559.084892031994\" height=\"629.4457914278037\"/><rect x=\"357.0032028206201\" y=\"517.4046881351887\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(357.00320282062034 517.4046881351892) rotate(0 8.99886494241656 9.548768170066296)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">否</text></g><g stroke-linecap=\"round\" transform=\"translate(409.9999999999998 321.33333333333326) rotate(0 111.50000000000006 54.5)\"><path d=\"M140 13.75 M140 13.75 C157.74 27.59, 177.39 33.69, 195 41.25 M140 13.75 C155.68 22.1, 172.88 29.02, 195 41.25 M195 41.25 C223.92 57.76, 223.16 52.04, 195 68.75 M195 41.25 C221.74 55.91, 221.28 54.16, 195 68.75 M195 68.75 C174.48 77.98, 156.9 89.76, 140 95.25 M195 68.75 C176.24 79.02, 157.82 86.35, 140 95.25 M140 95.25 C115.54 111.32, 113.06 111.06, 84 95.25 M140 95.25 C110.54 112.93, 109.07 112.88, 84 95.25 M84 95.25 C72.36 88.5, 55.7 82.61, 28 68.75 M84 95.25 C71.99 87.21, 57.91 82.69, 28 68.75 M28 68.75 C-3.55 52.86, 2.53 52.47, 28 41.25 M28 68.75 C-1.04 54.5, -3.77 51.3, 28 41.25 M28 41.25 C47.04 32.45, 64.14 19.94, 84 13.75 M28 41.25 C41.45 36.17, 49.87 29.58, 84 13.75 M84 13.75 C115.99 -3.48, 108.31 3.81, 140 13.75 M84 13.75 C114.89 2.11, 113.09 -1.44, 140 13.75\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(440.4999999999998 366.33333333333326) rotate(0 81.00000000000006 9.5)\"><text x=\"81\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">此页记录是否循环完成</text></g><g mask=\"url(#mask-xcMQVAjcvj1r3ryoOnPyv)\" stroke-linecap=\"round\"><g stroke-opacity=\"0.8\" fill-opacity=\"0.8\" transform=\"translate(520.0171788653535 317.97819876515473) rotate(0 1.0365626996742208 -65.70638529036205)\"><path d=\"M-0.93 1.37 C-0.81 -8.92, 2.85 -38.98, 2.72 -60.51 C2.59 -82.04, -1.62 -116.07, -1.71 -127.79 M3.76 -0.35 C3.35 -10.26, 0.6 -34.72, 0.61 -56.79 C0.61 -78.86, 3.29 -120.7, 3.78 -132.79\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.8\" fill-opacity=\"0.8\" transform=\"translate(520.0171788653535 317.97819876515473) rotate(0 1.0365626996742208 -65.70638529036205)\"><path d=\"M14.55 -103.79 C9.29 -118.36, 7.19 -123.42, 0.85 -131.58 M12.36 -105.03 C12.28 -112.11, 9.44 -115.41, 5.29 -131.94\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.8\" fill-opacity=\"0.8\" transform=\"translate(520.0171788653535 317.97819876515473) rotate(0 1.0365626996742208 -65.70638529036205)\"><path d=\"M-5.95 -104.84 C-3.57 -118.88, 1.95 -123.56, 0.85 -131.58 M-8.13 -106.09 C-3.76 -112.82, -2.15 -115.89, 5.29 -131.94\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-xcMQVAjcvj1r3ryoOnPyv\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"622.5158286778401\" height=\"546.75576390573\"/><rect x=\"513.5158286778401\" y=\"247.80329352153376\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(513.51582867784 247.80329352153376) rotate(0 7.537912887187588 4.4685199532589195)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是</text></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(56.5555555555552 673.4444444444446) rotate(0 113.5 24.5)\"><path d=\"M12.25 0 M12.25 0 C80.56 1.92, 153.89 -1.93, 214.75 0 M12.25 0 C53.14 1.75, 95.9 2.73, 214.75 0 M214.75 0 C223.7 3.04, 227.3 7.2, 227 12.25 M214.75 0 C219.49 -0.15, 223.59 0.92, 227 12.25 M227 12.25 C223.82 18.43, 225.57 28.52, 227 36.75 M227 12.25 C226.67 21.57, 227.76 28.71, 227 36.75 M227 36.75 C226.75 46.38, 220.69 52.67, 214.75 49 M227 36.75 C227.84 48.84, 227.08 50.17, 214.75 49 M214.75 49 C163.88 47.29, 109.37 51.41, 12.25 49 M214.75 49 C166.16 52.94, 117.26 51.83, 12.25 49 M12.25 49 C7.93 47.41, -3.81 48.45, 0 36.75 M12.25 49 C1.79 52.1, -0.76 40.84, 0 36.75 M0 36.75 C-2.28 29.8, -1.8 17.06, 0 12.25 M0 36.75 C0.07 32.46, -0.16 24.17, 0 12.25 M0 12.25 C2.11 5.72, 6.43 3.54, 12.25 0 M0 12.25 C-3.71 2.03, 0.2 2.71, 12.25 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(73.5555555555552 688.4444444444439) rotate(0 96.5 9.500000000000114)\"><text x=\"96.5\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">处理两个 tag 间提交记录</text></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(461.33333333333326 496.8888888888887) rotate(0 77.00000000000006 27)\"><path d=\"M13.5 0 M13.5 0 C52.54 4.63, 87.08 -1.09, 140.5 0 M13.5 0 C54.78 -0.19, 94.59 -1.46, 140.5 0 M140.5 0 C151.16 2.05, 156.62 7.43, 154 13.5 M140.5 0 C148.78 -4.53, 156.9 4.74, 154 13.5 M154 13.5 C153.67 23.76, 154.01 32.17, 154 40.5 M154 13.5 C153.69 20.03, 155.09 29.48, 154 40.5 M154 40.5 C151.9 48.31, 152.42 55.48, 140.5 54 M154 40.5 C158.58 47.05, 149.9 53.28, 140.5 54 M140.5 54 C92.73 56.56, 44.57 55.85, 13.5 54 M140.5 54 C99.1 54.72, 59.62 55.8, 13.5 54 M13.5 54 C3.64 51.47, 3.88 52.76, 0 40.5 M13.5 54 C3.28 52.41, 2.77 48.88, 0 40.5 M0 40.5 C-3.41 27.56, 0.43 19.97, 0 13.5 M0 40.5 C-1.74 30.09, -0.98 21.58, 0 13.5 M0 13.5 C1.34 3.46, 1.46 -3.49, 13.5 0 M0 13.5 C3.03 0.45, 6.07 3.66, 13.5 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(489.33333333333326 514.3888888888887) rotate(0 49 9.5)\"><text x=\"49\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">存储这条记录</text></g><g stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(526.9611864061793 495.7777777777774) rotate(0 -1.730755265804703 -32.76731269019899)\"><path d=\"M-0.27 -1.78 C0.12 -13.72, 0 -58.07, 0.41 -68.95 M-3.87 3.42 C-3.72 -6.97, -2.95 -54.93, -2.15 -66.12\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(526.9611864061793 495.7777777777774) rotate(0 -1.730755265804703 -32.76731269019899)\"><path d=\"M4.46 -38.39 C2.26 -42.51, 2.85 -47.14, -2.9 -66.91 M5.96 -39.49 C3.91 -47.53, 2.07 -55.37, -2.97 -67.2\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(526.9611864061793 495.7777777777774) rotate(0 -1.730755265804703 -32.76731269019899)\"><path d=\"M-16.05 -39.19 C-13.51 -43.08, -8.2 -47.53, -2.9 -66.91 M-14.55 -40.29 C-9.93 -47.81, -5.1 -55.39, -2.97 -67.2\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g stroke-linecap=\"round\" transform=\"translate(54.3888888888884 232.99999999999932) rotate(0 98.49999999999997 28.5)\"><path d=\"M14.25 0 M14.25 0 C78.38 -3.38, 134.75 -2.41, 182.75 0 M14.25 0 C64.81 3.59, 113.9 1.23, 182.75 0 M182.75 0 C195.67 0.21, 196.9 6.13, 197 14.25 M182.75 0 C188.16 -3.7, 200.62 2.08, 197 14.25 M197 14.25 C196.7 21.46, 196.24 27.54, 197 42.75 M197 14.25 C197.4 24.64, 198.76 34.94, 197 42.75 M197 42.75 C195.52 51.97, 194.74 61, 182.75 57 M197 42.75 C198.44 53.95, 194.09 52.48, 182.75 57 M182.75 57 C141.09 58.76, 94.28 58.09, 14.25 57 M182.75 57 C116.66 53.79, 53.06 54.36, 14.25 57 M14.25 57 C2.51 55.22, 0.37 55.7, 0 42.75 M14.25 57 C7.7 60.72, -2.38 49.94, 0 42.75 M0 42.75 C1.61 35.14, 2.81 28.04, 0 14.25 M0 42.75 C2.18 33.07, -1.43 23.87, 0 14.25 M0 14.25 C3.61 2.93, 4.27 -2.51, 14.25 0 M0 14.25 C1.43 6.72, 3.94 -0.41, 14.25 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(87.88888888888835 251.99999999999932) rotate(0 65 9.5)\"><text x=\"65\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">循环当页提交记录</text></g><g stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(154.8206469186399 177.6770234674325) rotate(0 0.3185349686685299 26.076701043304183)\"><path d=\"M-0.13 -0.37 C0.98 8.05, 3.6 42.58, 4.29 51.5 M-3.65 -3.04 C-2.45 5.79, 2.27 46.6, 3.46 55.2\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(154.8206469186399 177.6770234674325) rotate(0 0.3185349686685299 26.076701043304183)\"><path d=\"M-8.78 36.03 C-5.42 40.54, -0.57 38.94, -0.26 51.91 M-8.41 33.47 C-5.2 39.99, -0.84 45.72, 4.37 56.78\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(154.8206469186399 177.6770234674325) rotate(0 0.3185349686685299 26.076701043304183)\"><path d=\"M8.66 33.86 C8.31 38.81, 9.42 37.68, -0.26 51.91 M9.04 31.3 C6.57 38.21, 5.28 44.64, 4.37 56.78\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g mask=\"url(#mask-B-XvH6s17K3nnXY-_28km)\" stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(412.44444444444423 375.7777777777774) rotate(0 -83.27295419193706 3.372453728701089)\"><path d=\"M-2.06 1.1 C-29.78 1.95, -138.77 6.19, -166.13 7.52 M2.02 -0.78 C-26.13 0.44, -140.18 2.16, -168.57 3.13\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(412.44444444444423 375.7777777777774) rotate(0 -83.27295419193706 3.372453728701089)\"><path d=\"M-139.06 -8.31 C-147.4 -5.49, -153.74 1.12, -171.09 3.37 M-140.15 -7.35 C-151.03 -3.83, -162.8 1.33, -169.1 2.37\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(412.44444444444423 375.7777777777774) rotate(0 -83.27295419193706 3.372453728701089)\"><path d=\"M-138.58 12.2 C-147.42 8.7, -153.9 9.01, -171.09 3.37 M-139.67 13.17 C-150.65 8.7, -162.6 5.87, -169.1 2.37\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-B-XvH6s17K3nnXY-_28km\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"678.2125603864733\" height=\"482.1529406001787\"/><rect x=\"320.56038647342984\" y=\"369.465359188978\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(320.56038647342973 369.465359188978) rotate(0 8.611103779077439 9.684872317500435)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">否</text></g><g stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(169.11111111111074 386.88888888888846) rotate(0 0.1255754212662623 0.5311599435285643)\"><path d=\"M-1.94 -2.01 C-1.84 -1.87, 1.06 2.74, 0.96 2.71 M2.2 3.07 C1.98 2.33, -0.87 -0.27, -0.76 -0.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(169.11111111111074 386.88888888888846) rotate(0 0.1255754212662623 0.5311599435285643)\"><path d=\"M-0.76 -0.83 C-0.76 -0.83, -0.76 -0.83, -0.76 -0.83 M-0.76 -0.83 C-0.76 -0.83, -0.76 -0.83, -0.76 -0.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(169.11111111111074 386.88888888888846) rotate(0 0.1255754212662623 0.5311599435285643)\"><path d=\"M-0.76 -0.83 C-0.76 -0.83, -0.76 -0.83, -0.76 -0.83 M-0.76 -0.83 C-0.76 -0.83, -0.76 -0.83, -0.76 -0.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(420.11111111111074 99.3333333333328) rotate(0 94.5 46)\"><path d=\"M118.75 11.75 M118.75 11.75 C135.03 21.3, 149.19 30.6, 165.25 35.25 M118.75 11.75 C134.18 19.84, 152.05 28.4, 165.25 35.25 M165.25 35.25 C187.48 45.81, 185.7 50.8, 165.25 58.75 M165.25 35.25 C190 47.22, 186.22 49.04, 165.25 58.75 M165.25 58.75 C151.54 67.12, 132.58 74.51, 118.75 80.25 M165.25 58.75 C154.75 64.96, 145.4 68.12, 118.75 80.25 M118.75 80.25 C94.28 92.54, 93.31 91.04, 71.25 80.25 M118.75 80.25 C92.74 93.24, 95.8 87.97, 71.25 80.25 M71.25 80.25 C57.4 74.18, 42.08 68.79, 23.75 58.75 M71.25 80.25 C59.29 75.01, 48.22 72.31, 23.75 58.75 M23.75 58.75 C0.68 45.28, 0.96 49.41, 23.75 35.25 M23.75 58.75 C-4.55 48.6, -0.31 50.72, 23.75 35.25 M23.75 35.25 C39.63 30.01, 56.54 22.76, 71.25 11.75 M23.75 35.25 C36.36 27.73, 51.16 22.03, 71.25 11.75 M71.25 11.75 C91.68 2.98, 95.92 -3.26, 118.75 11.75 M71.25 11.75 C95.13 -0.89, 98.93 3.17, 118.75 11.75\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(465.61111111111074 135.8333333333328) rotate(0 49 9.5)\"><text x=\"49\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是否还有下页</text></g><g mask=\"url(#mask-AIvfQd-vju-X_S_dSBPaU)\" stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(516.8888888888886 100.22222222222172) rotate(0 -110.21043321811385 -31.322581191467634)\"><path d=\"M1.95 1.23 C-0.98 -8.31, 20.56 -46.86, -17.4 -57.53 C-55.37 -68.2, -191.2 -61.99, -225.85 -62.8 M-0.44 -0.57 C-3.62 -9.58, 17.79 -43.72, -18.83 -53.77 C-55.45 -63.82, -185.69 -59.69, -220.13 -60.85\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(516.8888888888886 100.22222222222172) rotate(0 -110.21043321811385 -31.322581191467634)\"><path d=\"M-190.16 -68.91 C-200.21 -70.48, -212.25 -66.55, -222.62 -59.3 M-191.22 -72.17 C-201.37 -66.88, -209.77 -66.92, -220.04 -62.38\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(516.8888888888886 100.22222222222172) rotate(0 -110.21043321811385 -31.322581191467634)\"><path d=\"M-190.22 -48.39 C-200.21 -56.23, -212.23 -58.58, -222.62 -59.3 M-191.28 -51.65 C-201.7 -52.2, -210.09 -58.07, -220.04 -62.38\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-AIvfQd-vju-X_S_dSBPaU\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"840.670309653916\" height=\"260.8790323125929\"/><rect x=\"488.99999999999955\" y=\"32.944444444444116\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(488.9999999999998 32.944444444444116) rotate(0 -82.32154432922493 35.95519658630997)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是</text></g><g mask=\"url(#mask-CU9fllVOFQ9hv_BUEtdnP)\" stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(709.111111111111 149.11111111111086) rotate(0 -203.9724014016603 284.3480313714674)\"><path d=\"M1.47 1.85 C-4.03 88.31, 40.45 427.87, -29.35 519.32 C-99.15 610.77, -352.88 545.12, -417.34 550.53 M5.34 0.38 C-0.48 86.08, 39.39 423.61, -31.38 515.78 C-102.15 607.95, -355.35 546.88, -419.3 553.39\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(709.111111111111 149.11111111111086) rotate(0 -203.9724014016603 284.3480313714674)\"><path d=\"M-387.86 545.53 C-394.94 546.53, -407.83 550.69, -418.15 553.4 M-390.49 546.44 C-396.9 545.93, -404.31 547.57, -418.86 552.24\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(709.111111111111 149.11111111111086) rotate(0 -203.9724014016603 284.3480313714674)\"><path d=\"M-389.19 566.01 C-395.97 561.09, -408.47 559.31, -418.15 553.4 M-391.83 566.92 C-398.26 561.38, -405.35 557.96, -418.86 552.24\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-CU9fllVOFQ9hv_BUEtdnP\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"1230.1111111111109\" height=\"800.1111111111109\"/><rect x=\"670.3788246397446\" y=\"656.2208126174994\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(670.3788246397444 656.2208126174996) rotate(0 -165.24011493029383 -222.76167013492136)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">否</text></g><g stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(602.4444444444442 144.6666666666663) rotate(0 53.916350204956984 1.7562233025888645)\"><path d=\"M-1.22 -0.92 C16.39 -0.04, 86.37 6.44, 104.07 7.41 M3.31 -3.89 C21.9 -4.1, 91.13 0.98, 109.06 2.8\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(54.666666666666515 787.9999999999993) rotate(0 107 27.5)\"><path d=\"M13.75 0 M13.75 0 C87.52 5.11, 154.72 3.57, 200.25 0 M13.75 0 C69.94 -1.17, 120.39 -0.6, 200.25 0 M200.25 0 C207.03 2.66, 217.32 4.98, 214 13.75 M200.25 0 C206.48 -0.5, 217.78 5.61, 214 13.75 M214 13.75 C214.97 21.16, 215.94 34.85, 214 41.25 M214 13.75 C213.24 21.11, 214.99 24.12, 214 41.25 M214 41.25 C216.9 51.08, 208.54 54.2, 200.25 55 M214 41.25 C210.64 51.13, 211.66 58.98, 200.25 55 M200.25 55 C158.88 49.84, 117.18 48.88, 13.75 55 M200.25 55 C160.04 55.32, 124.45 55.88, 13.75 55 M13.75 55 C8.02 51.2, 2.47 48.84, 0 41.25 M13.75 55 C0.75 54.33, 1.13 47.7, 0 41.25 M0 41.25 C3.44 35.46, 4.34 28.78, 0 13.75 M0 41.25 C0.1 31.79, -0.96 26.01, 0 13.75 M0 13.75 C0.83 6.06, 2.07 -2.08, 13.75 0 M0 13.75 C1.75 7.83, 1.69 -3.8, 13.75 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(66.66666666666652 805.9999999999993) rotate(0 95 9.5)\"><text x=\"95\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">根据规则，将记录生成 MD</text></g><g stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(165.71746592082616 725.503082527672) rotate(0 -0.7108549617225322 28.413311323170547)\"><path d=\"M0.43 1.36 C0.75 10.84, 1.42 45.89, 1.35 54.82 M-2.78 -0.36 C-2.56 9.57, 0.17 47.65, 0.43 57.19\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(165.71746592082616 725.503082527672) rotate(0 -0.7108549617225322 28.413311323170547)\"><path d=\"M-8.78 34.34 C-11.31 39.76, -7.97 44.68, -1.84 55.08 M-10.46 29.37 C-8.94 38.42, -5.93 44.32, -1.48 58.42\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(165.71746592082616 725.503082527672) rotate(0 -0.7108549617225322 28.413311323170547)\"><path d=\"M10.74 33.32 C2.73 39.09, 0.6 44.29, -1.84 55.08 M9.06 28.35 C6.28 37.32, 5.01 43.44, -1.48 58.42\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g>\n  </g>\n  <mask/>\n</svg>\n\n编写完自定义 Actions 后，使用自定义 Actions。\n\n``` yaml\n    steps:\n      - name: Release\n        uses: MaLuns/add-release@指定版本\n        with:\n          files: Demo.zip\n          generate_by_commit: true\n```\n\n效果图：\n\n![效果图](https://github.com/MaLuns/add-release/blob/master/demo/demo.png?raw=true)\n\n到此，一个根据 Git tag 自动发布 Npm 和 Release 的工作流编写完成了。你还可以在结合 Github Pages、Vercel 等同时自动化部署你的 Npm 包的文档和示例站点等。","source":"_posts/npm_publish_package.md","raw":"---\ntitle: 2023年，还在手动发布 npm 包？\ndate: 2023-02-10 10:50:55\ntags: [npm]\ncategories: 创作类\nkeywords: npm,npm pushlish,github actions,release\ntoc: false\n---\n\n还在手动 **npm publish** 发布 **npm** ？ 还在手动更新版本创建发布 **Github Release** ？还在手动添加 **Changelog**？是时候利用  **CI/CD** 解放双手啦。常见的 **CI/CD** 有很多，比如 Jenkins、GitLab CI、CircleCI 、Github Actions 等。本文主要是通过 **Github Actions** 来自动化处理 **npm** 包管理。\n\n## Github Actions \n**GitHub Actions** 距离推出已经好几年了，相信小伙伴们没用过，也听说过。**GitHub Actions** 不仅仅是能自动执行生成、测试和部署操作，还允许您在存储库中发生其他事件时运行工作流程。 例如，您可以运行工作流程，以便在有人在您的存储库中创建新问题时自动添加相应的标签。而且 GitHub 提供 Linux、Windows 和 macOS 多种虚拟机来运行工作流程，可以更具项目选择合适的虚拟机环境。\n\n**GitHub Actions** 其实主要步骤只有两个，**event** (事件触发时机)、**jobs**（工作流程）。如果还不熟悉 **GitHub Actions**，可以[参考文档](https://docs.github.com/zh/actions)对其大致使用有个了解。\n\n## 发布 Npm \n在本地发布 npm 包都是本地打包成组件后，登录 npm 账号运行 npm publish 发布。使用 **GitHub Actions** 来发布 **npm** 可以使用 **Npm Access Tokens**，可以更据需要分配 **Tokens** 权限，不需要使用账号密码登录。\n\n### Github Actions 发布 Npm\n\n首先需要确定你工作流触发时机，这个需要根据你个人习惯决定。\n\n举例：\n\n{% tabs test1 %}\n<!-- tab tag -->\n推送 Tag 时触发\n``` yaml\non:\n  push:\n    tags:\n      - \"v*\"\n```\n<!-- endtab -->\n\n<!-- tab branches -->\n仅在 master 推送时触发\n``` yaml\non:\n  push:\n    branches: [master]\n```\n<!-- endtab -->\n\n<!-- tab paths -->\n仅在 master 推送时，且 docs 下文件修改时触发，更多可以[参考文档](https://docs.github.com/zh/actions/using-workflows/events-that-trigger-workflows)\n``` yaml\non:\n  push:\n    branches: [master]\n    paths:\n      - 'docs/**'\n```\n<!-- endtab -->\n{% endtabs %}\n\n本文就以为推送 Tag 触发为例：\n\n在你项目下添加 **.github\\workflows\\publish.yml** 文件，内容如下\n\n``` yaml\nname: NPM Publish\non:\n  push:\n    tags:\n      - \"v*\"\n```\n#### 代码拉取和Node配置\n在 **jobs** 添加一个名为 **build** 的 job，配置 **build** 的环境和拉取代码。**runs-on: ubuntu-latest** 配置虚拟机为 **ubuntu**，使用官方提取代码拉取和 配置 Node 的 Actions，更多 [官方提供 Actions](https://github.com/actions)\n\n``` yaml\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2   # 拉取代码\n      - uses: actions/setup-node@v3 # 设置 Node 版本\n        with:\n          node-version: 16\n          registry-url: 'https://registry.npmjs.org'\n          cache: yarn\n```\n#### 配置环境密钥\n添加环境变量，在你项目 => Settings => Secrets and variables => Actions 中 添加你的密钥，名称随意取，密钥值为你上面生成的 **Npm Access Tokens**。\n\n例如：\nName => NPM_TOKEN\nSecret => 你的 **Npm Access Tokens**\n\n\n#### 发布 Npm\n\n**build** 的 job 中，添加发布 Npm 操作，利用 NPM_TOKEN 发布 npm 包\n``` yaml\n    steps:\n      - name: Npm Publish\n        run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n```\n到此时，当你推送一个以 v开头 tag 到仓库时，就会执行这个 publish.yml，这个 Action 会将当前仓库发布到 Npm 了。\n\n当然你的包可能还需要执行一些构建操作等等，你可以在 **run** 里执行多条命令\n\n``` yaml\nrun: |\n    npm run build\n    #...更多操作\n    npm publish\n```\n\n### 区分 Beta 和 latest\n\n默认情况下 **npm publish** 发布时正式包，如果需要测试包需要执行 **npm publish --tag beta**。利用 git tag 我们可以将 v1.0.2 格式发为正式包，将 v1.0.2-beta.1 格式发布测试包。\n\n修改 publish 流程，**Github Action** 支持 **if** 操作，并不支持 **else**，只能通过如下模拟 **if else** 操作。\n\n``` yaml\n    steps:\n      - name: Beta Publish\n        if: ${{ contains(github.ref,'beta') }}\n        run: npm publish --tag beta\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n\n      - name: Publish\n        if: ${{ !contains(github.ref,'beta') }}\n        run: npm publish\n        env:\n          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}\n```\n\n### 根据 Tag 更新版本号\n为例避免每次修改 package.json 中版本，我们可以根据 tag 来修改 package.json 中版本，因为上面配置 node 环境，可以直接执行 node 代码，我们直接添加一个 publish.js 文件，去修改 package.json 中 version 。\n\n``` js \nconst fs = require('fs')\nconst path = require('path')\n\nif (process.env.RELEASE_VERSION) {\n    const version = process.env.RELEASE_VERSION.split('/').reverse()[0]\n    console.log('当前版本：', version);\n    const pkg = require('./package.json')\n    pkg.version = version.replace('v', '')\n    fs.writeFileSync(path.resolve(__dirname, './package.json'), JSON.stringify(pkg, null, 4), 'utf-8')\n}\n```\n\n修改 publish 流程，在发布前修改版本，并将 github.ref 添加环境变量 RELEASE_VERSION\n\n``` yaml\n    steps:\n      - name: Build\n        run: node ./publish\n        env:\n          RELEASE_VERSION: ${{ github.ref }}\n```\n\n### 创建发布 Github Release\n官方 **actions/create-release** 不在维护，推荐如下 Actions，可以结合需要选择，你也可以去前往 [marketplace](https://github.com/marketplace) 选择更多 Actions。\n\n* [elgohr/Github-Release-Action](https://github.com/elgohr/Github-Release-Action)\n* [marvinpinto/action-automatic-releases](https://github.com/marvinpinto/action-automatic-releases)\n* [softprops/action-gh-release](https://github.com/softprops/action-gh-release)\n* [ncipollo/release-action](https://github.com/ncipollo/release-action)\n\n\n很多创建 **Release** 的 **Actions**，并不会将你的提交自动生成发版说明，所以我编写了一个发布 **Release** 的 **Actions**，具体实现参考 [MaLuns/add-release](https://github.com/MaLuns/add-release) 以满足我的需求。Github 为我们提供 [**actions/toolkit**](https://github.com/actions/toolkit) 帮助我们简化了很多操作。\n\n简单描述如何实现：\n\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 730.4648101751317 852.9999999999993\" filter=\"invert(93%) hue-rotate(180deg)\">\n\n  <defs>\n    <style class=\"style-fonts\">\n      @font-face {\n        font-family: \"Virgil\";\n        src: url(\"https://excalidraw.com/Virgil.woff2\");\n      }\n      @font-face {\n        font-family: \"Cascadia\";\n        src: url(\"https://excalidraw.com/Cascadia.woff2\");\n      }\n    </style>\n  </defs>\n  <g stroke-linecap=\"round\" transform=\"translate(10 10) rotate(0 139.5 27.5)\"><path d=\"M13.75 0 M13.75 0 C109.38 -2.41, 205.68 1.99, 265.25 0 M13.75 0 C70.18 2.36, 124.81 0.97, 265.25 0 M265.25 0 C273.89 1.09, 281.74 7.28, 279 13.75 M265.25 0 C277.97 4.59, 274.44 8.78, 279 13.75 M279 13.75 C276.09 18.18, 279.75 24.18, 279 41.25 M279 13.75 C277.83 23.76, 280.05 32.76, 279 41.25 M279 41.25 C280.53 49.75, 271.57 52.1, 265.25 55 M279 41.25 C276.2 54.43, 269.9 58.1, 265.25 55 M265.25 55 C209.34 55.8, 147.98 55.99, 13.75 55 M265.25 55 C169.39 56.68, 70.38 55.24, 13.75 55 M13.75 55 C8.57 51.9, -0.4 48.89, 0 41.25 M13.75 55 C7.04 56.87, -3.65 50.34, 0 41.25 M0 41.25 C0.8 31.53, 3.38 23.71, 0 13.75 M0 41.25 C-1.05 30.71, 0.18 22.03, 0 13.75 M0 13.75 C-0.72 6.24, 2.74 3.88, 13.75 0 M0 13.75 C4.5 8.33, 4.37 -1.58, 13.75 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(28.5 27.5) rotate(0 121 10)\"><text x=\"121\" y=\"14\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">从当前位置开始分页获取提交记录</text></g><g stroke-linecap=\"round\" transform=\"translate(70.88888888888926 119.11111111111086) rotate(0 87 27.5)\"><path d=\"M13.75 0 M13.75 0 C70.27 -1.27, 132.16 -5.78, 160.25 0 M13.75 0 C49.11 3.38, 82.62 0.94, 160.25 0 M160.25 0 C172.31 1.56, 177.77 6.12, 174 13.75 M160.25 0 C168.65 -3.27, 170.67 1.79, 174 13.75 M174 13.75 C170.69 27.99, 173.48 37.63, 174 41.25 M174 13.75 C175.49 23.48, 174.56 32.65, 174 41.25 M174 41.25 C174.25 47.02, 166.12 58.98, 160.25 55 M174 41.25 C170.43 49.95, 167.66 57.46, 160.25 55 M160.25 55 C108.89 54.23, 59.37 55.65, 13.75 55 M160.25 55 C126.86 53.71, 92.28 51.97, 13.75 55 M13.75 55 C4.11 55.89, 2.76 49.69, 0 41.25 M13.75 55 C6.49 52.89, 4.47 54.92, 0 41.25 M0 41.25 C-2.82 31.53, 2.41 23.49, 0 13.75 M0 41.25 C-0.4 35.03, -0.56 28.24, 0 13.75 M0 13.75 C-2.36 7.79, 4.22 1.59, 13.75 0 M0 13.75 C3.15 8.94, 5.15 2.29, 13.75 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(101.38888888888926 137.11111111111086) rotate(0 56.5 9.5)\"><text x=\"56.5\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">获取所有 tags</text></g><g stroke-linecap=\"round\"><g transform=\"translate(150.88997153960383 67.18500722316435) rotate(0 -2.375925603429664 26.98165787361677)\"><path d=\"M-1.36 1.74 C-3.05 10.23, -6.88 42.36, -7.85 50.27 M3.1 0.21 C2.04 9.22, -2.05 45.19, -2.81 53.75\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(150.88997153960383 67.18500722316435) rotate(0 -2.375925603429664 26.98165787361677)\"><path d=\"M-6.52 25.54 C-7.15 35.91, -6.31 49.69, -6.21 57.11 M-9.03 28.39 C-6.66 37.72, -6.6 43.18, -3.49 52.44\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(150.88997153960383 67.18500722316435) rotate(0 -2.375925603429664 26.98165787361677)\"><path d=\"M10.78 27.32 C3.54 36.85, -2.23 49.95, -6.21 57.11 M8.26 30.18 C5.44 38.84, 0.29 43.76, -3.49 52.44\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g stroke-linecap=\"round\" transform=\"translate(76.88888888888852 359.55555555555543) rotate(0 81.00000000000003 26)\"><path d=\"M13 0 M13 0 C48.15 0.59, 83.48 -1.4, 149 0 M13 0 C65.81 -1.5, 120.05 -1.13, 149 0 M149 0 C156.96 3.43, 160.63 2.94, 162 13 M149 0 C155.72 3.81, 163.79 6.52, 162 13 M162 13 C164.97 21.93, 165.32 33.71, 162 39 M162 13 C164.16 18.66, 162.04 22.96, 162 39 M162 39 C165.01 45.04, 159.76 50.22, 149 52 M162 39 C158.91 43.92, 155.83 52.56, 149 52 M149 52 C114.38 51.99, 76.13 50.26, 13 52 M149 52 C111.19 51.86, 73.18 49.38, 13 52 M13 52 C7.36 54.09, 3.81 48.54, 0 39 M13 52 C8.37 50.93, 2.61 49.39, 0 39 M0 39 C-1.37 29.54, -3.76 16.5, 0 13 M0 39 C-1.16 33.31, -0.27 25.99, 0 13 M0 13 C1.34 5.4, 4.26 0.12, 13 0 M0 13 C2.13 1.13, 6.08 -3.88, 13 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(108.88888888888857 376.05555555555543) rotate(0 49 9.5)\"><text x=\"49\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">循环读取记录</text></g><g stroke-linecap=\"round\"><g transform=\"translate(153.3959809829115 291.96031746031736) rotate(0 -0.3315164564070301 34.81390687762939)\"><path d=\"M-1.1 1.87 C-1.35 13.84, -1.54 58.15, -1.67 69.21 M3.5 0.42 C2.86 11.92, -2.91 55.14, -4.16 65.69\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(153.3959809829115 291.96031746031736) rotate(0 -0.3315164564070301 34.81390687762939)\"><path d=\"M-8.15 35.78 C-5.5 44.13, -4.91 50.69, -0.7 68.1 M-12.33 36.4 C-8.54 41.49, -7.37 47.65, -4.34 66.81\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(153.3959809829115 291.96031746031736) rotate(0 -0.3315164564070301 34.81390687762939)\"><path d=\"M12.21 38.34 C8.95 45.78, 3.58 51.59, -0.7 68.1 M8.04 38.96 C7.36 43.64, 4.02 49.23, -4.34 66.81\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g stroke-linecap=\"round\" transform=\"translate(44.6666666666664 485.7777777777778) rotate(0 115.5 39)\"><path d=\"M145 10 M145 10 C162.03 19.72, 175.77 22.64, 202 30 M145 10 C159.69 16.01, 180.29 22.75, 202 30 M202 30 C229.68 38.79, 234.91 36.37, 202 50 M202 30 C234.35 42.28, 233.99 37.91, 202 50 M202 50 C192.22 56.54, 175.36 56.51, 145 68 M202 50 C188.07 54.67, 172.39 58.19, 145 68 M145 68 C115.61 78.88, 117.97 79.22, 87 68 M145 68 C113.83 80.47, 118.56 74.15, 87 68 M87 68 C71.29 61.04, 60.56 59.32, 29 50 M87 68 C74.64 64.74, 64.44 62.94, 29 50 M29 50 C-3.74 39.97, -2.56 38.48, 29 30 M29 50 C-0.37 39.37, 0.33 35.89, 29 30 M29 30 C50.44 21.61, 67.95 19.5, 87 10 M29 30 C39.74 28.07, 53.86 23.06, 87 10 M87 10 C117.55 -3.73, 116.15 -0.35, 145 10 M87 10 C117.11 0.05, 111.75 1.9, 145 10\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(103.6666666666664 515.2777777777778) rotate(0 56.5 9.5)\"><text x=\"56.5\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是否是 tag 处</text></g><g stroke-linecap=\"round\"><g transform=\"translate(149.86229137715839 412.9312169312168) rotate(0 4.208753635864298 44.00826718116923)\"><path d=\"M1.74 2.04 C2.05 16.64, 3.37 73.22, 4.27 87.33 M-0.76 0.69 C0.16 14.55, 8.15 69.98, 9.18 83.55\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(149.86229137715839 412.9312169312168) rotate(0 4.208753635864298 44.00826718116923)\"><path d=\"M-1.29 52.77 C4.13 67.04, 8.41 74.67, 7.63 79.71 M-2.42 55.64 C-2.41 61.14, 1.58 70.44, 9.2 82.95\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(149.86229137715839 412.9312169312168) rotate(0 4.208753635864298 44.00826718116923)\"><path d=\"M19.1 50.44 C16.66 65.86, 13.09 74.39, 7.63 79.71 M17.97 53.31 C13.25 59.65, 12.55 69.49, 9.2 82.95\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g mask=\"url(#mask-lviM0Dprq1R14gecoqO6G)\" stroke-linecap=\"round\"><g transform=\"translate(166.8423381162429 563.3610819644362) rotate(0 -0.029376666403038598 53.384134448982536)\"><path d=\"M0.06 2.21 C0.81 19.68, 2.3 86.2, 3.29 102.65 M-3.35 0.94 C-2.86 19.01, -0.44 88.88, 1.06 105.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(166.8423381162429 563.3610819644362) rotate(0 -0.029376666403038598 53.384134448982536)\"><path d=\"M-7.63 78.3 C-9.36 89.25, -8.79 91.6, -1.31 103.66 M-12.18 79.05 C-6.4 85.8, -5.97 92.15, -0.21 106.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(166.8423381162429 563.3610819644362) rotate(0 -0.029376666403038598 53.384134448982536)\"><path d=\"M12.86 77.13 C5.84 88.39, 1.15 91.04, -1.31 103.66 M8.31 77.88 C9.45 84.56, 5.22 91.18, -0.21 106.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-lviM0Dprq1R14gecoqO6G\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"270.10521586848984\" height=\"766.8482905982908\"/><rect x=\"159.47377699236642\" y=\"605.6046862813637\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(159.47377699236642 605.6046862813635) rotate(0 7.339184457473436 11.140530132055233)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是</text></g><g mask=\"url(#mask-dn1DNiDydmoukLwp9itsL)\" stroke-linecap=\"round\"><g transform=\"translate(272.9215136092465 524.3635848425745) rotate(0 93.08055415379027 2.589871462680776)\"><path d=\"M-2.42 0.27 C29.3 1.24, 156.92 6.29, 188.59 7.23 M1.45 -2.05 C33.19 -1.97, 156.82 2.91, 187.66 3.39\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(272.9215136092465 524.3635848425745) rotate(0 93.08055415379027 2.589871462680776)\"><path d=\"M159.57 16.3 C168.89 13.09, 173.73 7.2, 190.18 3.32 M157.45 12.33 C169.03 10.09, 179.3 6.48, 188.03 3.06\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(272.9215136092465 524.3635848425745) rotate(0 93.08055415379027 2.589871462680776)\"><path d=\"M160.16 -4.22 C169.55 -2.58, 174.25 -3.64, 190.18 3.32 M158.04 -8.18 C169.25 -2.93, 179.3 0.95, 188.03 3.06\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-dn1DNiDydmoukLwp9itsL\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"559.084892031994\" height=\"629.4457914278037\"/><rect x=\"357.0032028206201\" y=\"517.4046881351887\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(357.00320282062034 517.4046881351892) rotate(0 8.99886494241656 9.548768170066296)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">否</text></g><g stroke-linecap=\"round\" transform=\"translate(409.9999999999998 321.33333333333326) rotate(0 111.50000000000006 54.5)\"><path d=\"M140 13.75 M140 13.75 C157.74 27.59, 177.39 33.69, 195 41.25 M140 13.75 C155.68 22.1, 172.88 29.02, 195 41.25 M195 41.25 C223.92 57.76, 223.16 52.04, 195 68.75 M195 41.25 C221.74 55.91, 221.28 54.16, 195 68.75 M195 68.75 C174.48 77.98, 156.9 89.76, 140 95.25 M195 68.75 C176.24 79.02, 157.82 86.35, 140 95.25 M140 95.25 C115.54 111.32, 113.06 111.06, 84 95.25 M140 95.25 C110.54 112.93, 109.07 112.88, 84 95.25 M84 95.25 C72.36 88.5, 55.7 82.61, 28 68.75 M84 95.25 C71.99 87.21, 57.91 82.69, 28 68.75 M28 68.75 C-3.55 52.86, 2.53 52.47, 28 41.25 M28 68.75 C-1.04 54.5, -3.77 51.3, 28 41.25 M28 41.25 C47.04 32.45, 64.14 19.94, 84 13.75 M28 41.25 C41.45 36.17, 49.87 29.58, 84 13.75 M84 13.75 C115.99 -3.48, 108.31 3.81, 140 13.75 M84 13.75 C114.89 2.11, 113.09 -1.44, 140 13.75\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(440.4999999999998 366.33333333333326) rotate(0 81.00000000000006 9.5)\"><text x=\"81\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">此页记录是否循环完成</text></g><g mask=\"url(#mask-xcMQVAjcvj1r3ryoOnPyv)\" stroke-linecap=\"round\"><g stroke-opacity=\"0.8\" fill-opacity=\"0.8\" transform=\"translate(520.0171788653535 317.97819876515473) rotate(0 1.0365626996742208 -65.70638529036205)\"><path d=\"M-0.93 1.37 C-0.81 -8.92, 2.85 -38.98, 2.72 -60.51 C2.59 -82.04, -1.62 -116.07, -1.71 -127.79 M3.76 -0.35 C3.35 -10.26, 0.6 -34.72, 0.61 -56.79 C0.61 -78.86, 3.29 -120.7, 3.78 -132.79\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.8\" fill-opacity=\"0.8\" transform=\"translate(520.0171788653535 317.97819876515473) rotate(0 1.0365626996742208 -65.70638529036205)\"><path d=\"M14.55 -103.79 C9.29 -118.36, 7.19 -123.42, 0.85 -131.58 M12.36 -105.03 C12.28 -112.11, 9.44 -115.41, 5.29 -131.94\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.8\" fill-opacity=\"0.8\" transform=\"translate(520.0171788653535 317.97819876515473) rotate(0 1.0365626996742208 -65.70638529036205)\"><path d=\"M-5.95 -104.84 C-3.57 -118.88, 1.95 -123.56, 0.85 -131.58 M-8.13 -106.09 C-3.76 -112.82, -2.15 -115.89, 5.29 -131.94\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-xcMQVAjcvj1r3ryoOnPyv\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"622.5158286778401\" height=\"546.75576390573\"/><rect x=\"513.5158286778401\" y=\"247.80329352153376\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(513.51582867784 247.80329352153376) rotate(0 7.537912887187588 4.4685199532589195)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是</text></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(56.5555555555552 673.4444444444446) rotate(0 113.5 24.5)\"><path d=\"M12.25 0 M12.25 0 C80.56 1.92, 153.89 -1.93, 214.75 0 M12.25 0 C53.14 1.75, 95.9 2.73, 214.75 0 M214.75 0 C223.7 3.04, 227.3 7.2, 227 12.25 M214.75 0 C219.49 -0.15, 223.59 0.92, 227 12.25 M227 12.25 C223.82 18.43, 225.57 28.52, 227 36.75 M227 12.25 C226.67 21.57, 227.76 28.71, 227 36.75 M227 36.75 C226.75 46.38, 220.69 52.67, 214.75 49 M227 36.75 C227.84 48.84, 227.08 50.17, 214.75 49 M214.75 49 C163.88 47.29, 109.37 51.41, 12.25 49 M214.75 49 C166.16 52.94, 117.26 51.83, 12.25 49 M12.25 49 C7.93 47.41, -3.81 48.45, 0 36.75 M12.25 49 C1.79 52.1, -0.76 40.84, 0 36.75 M0 36.75 C-2.28 29.8, -1.8 17.06, 0 12.25 M0 36.75 C0.07 32.46, -0.16 24.17, 0 12.25 M0 12.25 C2.11 5.72, 6.43 3.54, 12.25 0 M0 12.25 C-3.71 2.03, 0.2 2.71, 12.25 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(73.5555555555552 688.4444444444439) rotate(0 96.5 9.500000000000114)\"><text x=\"96.5\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">处理两个 tag 间提交记录</text></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(461.33333333333326 496.8888888888887) rotate(0 77.00000000000006 27)\"><path d=\"M13.5 0 M13.5 0 C52.54 4.63, 87.08 -1.09, 140.5 0 M13.5 0 C54.78 -0.19, 94.59 -1.46, 140.5 0 M140.5 0 C151.16 2.05, 156.62 7.43, 154 13.5 M140.5 0 C148.78 -4.53, 156.9 4.74, 154 13.5 M154 13.5 C153.67 23.76, 154.01 32.17, 154 40.5 M154 13.5 C153.69 20.03, 155.09 29.48, 154 40.5 M154 40.5 C151.9 48.31, 152.42 55.48, 140.5 54 M154 40.5 C158.58 47.05, 149.9 53.28, 140.5 54 M140.5 54 C92.73 56.56, 44.57 55.85, 13.5 54 M140.5 54 C99.1 54.72, 59.62 55.8, 13.5 54 M13.5 54 C3.64 51.47, 3.88 52.76, 0 40.5 M13.5 54 C3.28 52.41, 2.77 48.88, 0 40.5 M0 40.5 C-3.41 27.56, 0.43 19.97, 0 13.5 M0 40.5 C-1.74 30.09, -0.98 21.58, 0 13.5 M0 13.5 C1.34 3.46, 1.46 -3.49, 13.5 0 M0 13.5 C3.03 0.45, 6.07 3.66, 13.5 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(489.33333333333326 514.3888888888887) rotate(0 49 9.5)\"><text x=\"49\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">存储这条记录</text></g><g stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(526.9611864061793 495.7777777777774) rotate(0 -1.730755265804703 -32.76731269019899)\"><path d=\"M-0.27 -1.78 C0.12 -13.72, 0 -58.07, 0.41 -68.95 M-3.87 3.42 C-3.72 -6.97, -2.95 -54.93, -2.15 -66.12\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(526.9611864061793 495.7777777777774) rotate(0 -1.730755265804703 -32.76731269019899)\"><path d=\"M4.46 -38.39 C2.26 -42.51, 2.85 -47.14, -2.9 -66.91 M5.96 -39.49 C3.91 -47.53, 2.07 -55.37, -2.97 -67.2\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(526.9611864061793 495.7777777777774) rotate(0 -1.730755265804703 -32.76731269019899)\"><path d=\"M-16.05 -39.19 C-13.51 -43.08, -8.2 -47.53, -2.9 -66.91 M-14.55 -40.29 C-9.93 -47.81, -5.1 -55.39, -2.97 -67.2\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g stroke-linecap=\"round\" transform=\"translate(54.3888888888884 232.99999999999932) rotate(0 98.49999999999997 28.5)\"><path d=\"M14.25 0 M14.25 0 C78.38 -3.38, 134.75 -2.41, 182.75 0 M14.25 0 C64.81 3.59, 113.9 1.23, 182.75 0 M182.75 0 C195.67 0.21, 196.9 6.13, 197 14.25 M182.75 0 C188.16 -3.7, 200.62 2.08, 197 14.25 M197 14.25 C196.7 21.46, 196.24 27.54, 197 42.75 M197 14.25 C197.4 24.64, 198.76 34.94, 197 42.75 M197 42.75 C195.52 51.97, 194.74 61, 182.75 57 M197 42.75 C198.44 53.95, 194.09 52.48, 182.75 57 M182.75 57 C141.09 58.76, 94.28 58.09, 14.25 57 M182.75 57 C116.66 53.79, 53.06 54.36, 14.25 57 M14.25 57 C2.51 55.22, 0.37 55.7, 0 42.75 M14.25 57 C7.7 60.72, -2.38 49.94, 0 42.75 M0 42.75 C1.61 35.14, 2.81 28.04, 0 14.25 M0 42.75 C2.18 33.07, -1.43 23.87, 0 14.25 M0 14.25 C3.61 2.93, 4.27 -2.51, 14.25 0 M0 14.25 C1.43 6.72, 3.94 -0.41, 14.25 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(87.88888888888835 251.99999999999932) rotate(0 65 9.5)\"><text x=\"65\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">循环当页提交记录</text></g><g stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(154.8206469186399 177.6770234674325) rotate(0 0.3185349686685299 26.076701043304183)\"><path d=\"M-0.13 -0.37 C0.98 8.05, 3.6 42.58, 4.29 51.5 M-3.65 -3.04 C-2.45 5.79, 2.27 46.6, 3.46 55.2\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(154.8206469186399 177.6770234674325) rotate(0 0.3185349686685299 26.076701043304183)\"><path d=\"M-8.78 36.03 C-5.42 40.54, -0.57 38.94, -0.26 51.91 M-8.41 33.47 C-5.2 39.99, -0.84 45.72, 4.37 56.78\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(154.8206469186399 177.6770234674325) rotate(0 0.3185349686685299 26.076701043304183)\"><path d=\"M8.66 33.86 C8.31 38.81, 9.42 37.68, -0.26 51.91 M9.04 31.3 C6.57 38.21, 5.28 44.64, 4.37 56.78\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g mask=\"url(#mask-B-XvH6s17K3nnXY-_28km)\" stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(412.44444444444423 375.7777777777774) rotate(0 -83.27295419193706 3.372453728701089)\"><path d=\"M-2.06 1.1 C-29.78 1.95, -138.77 6.19, -166.13 7.52 M2.02 -0.78 C-26.13 0.44, -140.18 2.16, -168.57 3.13\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(412.44444444444423 375.7777777777774) rotate(0 -83.27295419193706 3.372453728701089)\"><path d=\"M-139.06 -8.31 C-147.4 -5.49, -153.74 1.12, -171.09 3.37 M-140.15 -7.35 C-151.03 -3.83, -162.8 1.33, -169.1 2.37\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(412.44444444444423 375.7777777777774) rotate(0 -83.27295419193706 3.372453728701089)\"><path d=\"M-138.58 12.2 C-147.42 8.7, -153.9 9.01, -171.09 3.37 M-139.67 13.17 C-150.65 8.7, -162.6 5.87, -169.1 2.37\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-B-XvH6s17K3nnXY-_28km\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"678.2125603864733\" height=\"482.1529406001787\"/><rect x=\"320.56038647342984\" y=\"369.465359188978\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(320.56038647342973 369.465359188978) rotate(0 8.611103779077439 9.684872317500435)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">否</text></g><g stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(169.11111111111074 386.88888888888846) rotate(0 0.1255754212662623 0.5311599435285643)\"><path d=\"M-1.94 -2.01 C-1.84 -1.87, 1.06 2.74, 0.96 2.71 M2.2 3.07 C1.98 2.33, -0.87 -0.27, -0.76 -0.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(169.11111111111074 386.88888888888846) rotate(0 0.1255754212662623 0.5311599435285643)\"><path d=\"M-0.76 -0.83 C-0.76 -0.83, -0.76 -0.83, -0.76 -0.83 M-0.76 -0.83 C-0.76 -0.83, -0.76 -0.83, -0.76 -0.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(169.11111111111074 386.88888888888846) rotate(0 0.1255754212662623 0.5311599435285643)\"><path d=\"M-0.76 -0.83 C-0.76 -0.83, -0.76 -0.83, -0.76 -0.83 M-0.76 -0.83 C-0.76 -0.83, -0.76 -0.83, -0.76 -0.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(420.11111111111074 99.3333333333328) rotate(0 94.5 46)\"><path d=\"M118.75 11.75 M118.75 11.75 C135.03 21.3, 149.19 30.6, 165.25 35.25 M118.75 11.75 C134.18 19.84, 152.05 28.4, 165.25 35.25 M165.25 35.25 C187.48 45.81, 185.7 50.8, 165.25 58.75 M165.25 35.25 C190 47.22, 186.22 49.04, 165.25 58.75 M165.25 58.75 C151.54 67.12, 132.58 74.51, 118.75 80.25 M165.25 58.75 C154.75 64.96, 145.4 68.12, 118.75 80.25 M118.75 80.25 C94.28 92.54, 93.31 91.04, 71.25 80.25 M118.75 80.25 C92.74 93.24, 95.8 87.97, 71.25 80.25 M71.25 80.25 C57.4 74.18, 42.08 68.79, 23.75 58.75 M71.25 80.25 C59.29 75.01, 48.22 72.31, 23.75 58.75 M23.75 58.75 C0.68 45.28, 0.96 49.41, 23.75 35.25 M23.75 58.75 C-4.55 48.6, -0.31 50.72, 23.75 35.25 M23.75 35.25 C39.63 30.01, 56.54 22.76, 71.25 11.75 M23.75 35.25 C36.36 27.73, 51.16 22.03, 71.25 11.75 M71.25 11.75 C91.68 2.98, 95.92 -3.26, 118.75 11.75 M71.25 11.75 C95.13 -0.89, 98.93 3.17, 118.75 11.75\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(465.61111111111074 135.8333333333328) rotate(0 49 9.5)\"><text x=\"49\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是否还有下页</text></g><g mask=\"url(#mask-AIvfQd-vju-X_S_dSBPaU)\" stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(516.8888888888886 100.22222222222172) rotate(0 -110.21043321811385 -31.322581191467634)\"><path d=\"M1.95 1.23 C-0.98 -8.31, 20.56 -46.86, -17.4 -57.53 C-55.37 -68.2, -191.2 -61.99, -225.85 -62.8 M-0.44 -0.57 C-3.62 -9.58, 17.79 -43.72, -18.83 -53.77 C-55.45 -63.82, -185.69 -59.69, -220.13 -60.85\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(516.8888888888886 100.22222222222172) rotate(0 -110.21043321811385 -31.322581191467634)\"><path d=\"M-190.16 -68.91 C-200.21 -70.48, -212.25 -66.55, -222.62 -59.3 M-191.22 -72.17 C-201.37 -66.88, -209.77 -66.92, -220.04 -62.38\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(516.8888888888886 100.22222222222172) rotate(0 -110.21043321811385 -31.322581191467634)\"><path d=\"M-190.22 -48.39 C-200.21 -56.23, -212.23 -58.58, -222.62 -59.3 M-191.28 -51.65 C-201.7 -52.2, -210.09 -58.07, -220.04 -62.38\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-AIvfQd-vju-X_S_dSBPaU\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"840.670309653916\" height=\"260.8790323125929\"/><rect x=\"488.99999999999955\" y=\"32.944444444444116\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(488.9999999999998 32.944444444444116) rotate(0 -82.32154432922493 35.95519658630997)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是</text></g><g mask=\"url(#mask-CU9fllVOFQ9hv_BUEtdnP)\" stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(709.111111111111 149.11111111111086) rotate(0 -203.9724014016603 284.3480313714674)\"><path d=\"M1.47 1.85 C-4.03 88.31, 40.45 427.87, -29.35 519.32 C-99.15 610.77, -352.88 545.12, -417.34 550.53 M5.34 0.38 C-0.48 86.08, 39.39 423.61, -31.38 515.78 C-102.15 607.95, -355.35 546.88, -419.3 553.39\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(709.111111111111 149.11111111111086) rotate(0 -203.9724014016603 284.3480313714674)\"><path d=\"M-387.86 545.53 C-394.94 546.53, -407.83 550.69, -418.15 553.4 M-390.49 546.44 C-396.9 545.93, -404.31 547.57, -418.86 552.24\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(709.111111111111 149.11111111111086) rotate(0 -203.9724014016603 284.3480313714674)\"><path d=\"M-389.19 566.01 C-395.97 561.09, -408.47 559.31, -418.15 553.4 M-391.83 566.92 C-398.26 561.38, -405.35 557.96, -418.86 552.24\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-CU9fllVOFQ9hv_BUEtdnP\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"1230.1111111111109\" height=\"800.1111111111109\"/><rect x=\"670.3788246397446\" y=\"656.2208126174994\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(670.3788246397444 656.2208126174996) rotate(0 -165.24011493029383 -222.76167013492136)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">否</text></g><g stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(602.4444444444442 144.6666666666663) rotate(0 53.916350204956984 1.7562233025888645)\"><path d=\"M-1.22 -0.92 C16.39 -0.04, 86.37 6.44, 104.07 7.41 M3.31 -3.89 C21.9 -4.1, 91.13 0.98, 109.06 2.8\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(54.666666666666515 787.9999999999993) rotate(0 107 27.5)\"><path d=\"M13.75 0 M13.75 0 C87.52 5.11, 154.72 3.57, 200.25 0 M13.75 0 C69.94 -1.17, 120.39 -0.6, 200.25 0 M200.25 0 C207.03 2.66, 217.32 4.98, 214 13.75 M200.25 0 C206.48 -0.5, 217.78 5.61, 214 13.75 M214 13.75 C214.97 21.16, 215.94 34.85, 214 41.25 M214 13.75 C213.24 21.11, 214.99 24.12, 214 41.25 M214 41.25 C216.9 51.08, 208.54 54.2, 200.25 55 M214 41.25 C210.64 51.13, 211.66 58.98, 200.25 55 M200.25 55 C158.88 49.84, 117.18 48.88, 13.75 55 M200.25 55 C160.04 55.32, 124.45 55.88, 13.75 55 M13.75 55 C8.02 51.2, 2.47 48.84, 0 41.25 M13.75 55 C0.75 54.33, 1.13 47.7, 0 41.25 M0 41.25 C3.44 35.46, 4.34 28.78, 0 13.75 M0 41.25 C0.1 31.79, -0.96 26.01, 0 13.75 M0 13.75 C0.83 6.06, 2.07 -2.08, 13.75 0 M0 13.75 C1.75 7.83, 1.69 -3.8, 13.75 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(66.66666666666652 805.9999999999993) rotate(0 95 9.5)\"><text x=\"95\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">根据规则，将记录生成 MD</text></g><g stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(165.71746592082616 725.503082527672) rotate(0 -0.7108549617225322 28.413311323170547)\"><path d=\"M0.43 1.36 C0.75 10.84, 1.42 45.89, 1.35 54.82 M-2.78 -0.36 C-2.56 9.57, 0.17 47.65, 0.43 57.19\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(165.71746592082616 725.503082527672) rotate(0 -0.7108549617225322 28.413311323170547)\"><path d=\"M-8.78 34.34 C-11.31 39.76, -7.97 44.68, -1.84 55.08 M-10.46 29.37 C-8.94 38.42, -5.93 44.32, -1.48 58.42\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(165.71746592082616 725.503082527672) rotate(0 -0.7108549617225322 28.413311323170547)\"><path d=\"M10.74 33.32 C2.73 39.09, 0.6 44.29, -1.84 55.08 M9.06 28.35 C6.28 37.32, 5.01 43.44, -1.48 58.42\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g>\n  </g>\n  <mask/>\n</svg>\n\n编写完自定义 Actions 后，使用自定义 Actions。\n\n``` yaml\n    steps:\n      - name: Release\n        uses: MaLuns/add-release@指定版本\n        with:\n          files: Demo.zip\n          generate_by_commit: true\n```\n\n效果图：\n\n![效果图](https://github.com/MaLuns/add-release/blob/master/demo/demo.png?raw=true)\n\n到此，一个根据 Git tag 自动发布 Npm 和 Release 的工作流编写完成了。你还可以在结合 Github Pages、Vercel 等同时自动化部署你的 Npm 包的文档和示例站点等。","slug":"npm_publish_package","published":1,"updated":"2024-03-06T07:42:59.000Z","comments":1,"layout":"post","photos":[],"_id":"cltgz7vrv002998lg8eq2hyjq","content":"<p>还在手动 <strong>npm publish</strong> 发布 <strong>npm</strong> ？ 还在手动更新版本创建发布 <strong>Github Release</strong> ？还在手动添加 <strong>Changelog</strong>？是时候利用  <strong>CI&#x2F;CD</strong> 解放双手啦。常见的 <strong>CI&#x2F;CD</strong> 有很多，比如 Jenkins、GitLab CI、CircleCI 、Github Actions 等。本文主要是通过 <strong>Github Actions</strong> 来自动化处理 <strong>npm</strong> 包管理。</p>\n<h2 id=\"Github-Actions\"><a href=\"#Github-Actions\" class=\"headerlink\" title=\"Github Actions\"></a>Github Actions</h2><p><strong>GitHub Actions</strong> 距离推出已经好几年了，相信小伙伴们没用过，也听说过。<strong>GitHub Actions</strong> 不仅仅是能自动执行生成、测试和部署操作，还允许您在存储库中发生其他事件时运行工作流程。 例如，您可以运行工作流程，以便在有人在您的存储库中创建新问题时自动添加相应的标签。而且 GitHub 提供 Linux、Windows 和 macOS 多种虚拟机来运行工作流程，可以更具项目选择合适的虚拟机环境。</p>\n<p><strong>GitHub Actions</strong> 其实主要步骤只有两个，<strong>event</strong> (事件触发时机)、<strong>jobs</strong>（工作流程）。如果还不熟悉 <strong>GitHub Actions</strong>，可以<a href=\"https://docs.github.com/zh/actions\">参考文档</a>对其大致使用有个了解。</p>\n<h2 id=\"发布-Npm\"><a href=\"#发布-Npm\" class=\"headerlink\" title=\"发布 Npm\"></a>发布 Npm</h2><p>在本地发布 npm 包都是本地打包成组件后，登录 npm 账号运行 npm publish 发布。使用 <strong>GitHub Actions</strong> 来发布 <strong>npm</strong> 可以使用 <strong>Npm Access Tokens</strong>，可以更据需要分配 <strong>Tokens</strong> 权限，不需要使用账号密码登录。</p>\n<h3 id=\"Github-Actions-发布-Npm\"><a href=\"#Github-Actions-发布-Npm\" class=\"headerlink\" title=\"Github Actions 发布 Npm\"></a>Github Actions 发布 Npm</h3><p>首先需要确定你工作流触发时机，这个需要根据你个人习惯决定。</p>\n<p>举例：</p>\n<div class=\"trm-tabs\" id=\"test1\"><ul class=\"trm-nav-tabs\"><li class=\"trm-tab active\"><button type=\"button\" data-href=\"#test1-1\">tag</button></li><li class=\"trm-tab\"><button type=\"button\" data-href=\"#test1-2\">branches</button></li><li class=\"trm-tab\"><button type=\"button\" data-href=\"#test1-3\">paths</button></li></ul><div class=\"trm-tab-contents\"><div class=\"trm-tab-item-content active\" id=\"test1-1\"><p>推送 Tag 时触发</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;v*&quot;</span></span><br></pre></td></tr></table></figure></div><div class=\"trm-tab-item-content\" id=\"test1-2\"><p>仅在 master 推送时触发</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [<span class=\"string\">master</span>]</span><br></pre></td></tr></table></figure></div><div class=\"trm-tab-item-content\" id=\"test1-3\"><p>仅在 master 推送时，且 docs 下文件修改时触发，更多可以<a href=\"https://docs.github.com/zh/actions/using-workflows/events-that-trigger-workflows\">参考文档</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [<span class=\"string\">master</span>]</span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;docs/**&#x27;</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<p>本文就以为推送 Tag 触发为例：</p>\n<p>在你项目下添加 <strong>.github\\workflows\\publish.yml</strong> 文件，内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">Publish</span></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;v*&quot;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"代码拉取和Node配置\"><a href=\"#代码拉取和Node配置\" class=\"headerlink\" title=\"代码拉取和Node配置\"></a>代码拉取和Node配置</h4><p>在 <strong>jobs</strong> 添加一个名为 <strong>build</strong> 的 job，配置 <strong>build</strong> 的环境和拉取代码。<strong>runs-on: ubuntu-latest</strong> 配置虚拟机为 <strong>ubuntu</strong>，使用官方提取代码拉取和 配置 Node 的 Actions，更多 <a href=\"https://github.com/actions\">官方提供 Actions</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span>   <span class=\"comment\"># 拉取代码</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v3</span> <span class=\"comment\"># 设置 Node 版本</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"number\">16</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">&#x27;https://registry.npmjs.org&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">cache:</span> <span class=\"string\">yarn</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"配置环境密钥\"><a href=\"#配置环境密钥\" class=\"headerlink\" title=\"配置环境密钥\"></a>配置环境密钥</h4><p>添加环境变量，在你项目 &#x3D;&gt; Settings &#x3D;&gt; Secrets and variables &#x3D;&gt; Actions 中 添加你的密钥，名称随意取，密钥值为你上面生成的 <strong>Npm Access Tokens</strong>。</p>\n<p>例如：<br>Name &#x3D;&gt; NPM_TOKEN<br>Secret &#x3D;&gt; 你的 <strong>Npm Access Tokens</strong></p>\n<h4 id=\"发布-Npm-1\"><a href=\"#发布-Npm-1\" class=\"headerlink\" title=\"发布 Npm\"></a>发布 Npm</h4><p><strong>build</strong> 的 job 中，添加发布 Npm 操作，利用 NPM_TOKEN 发布 npm 包</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">steps:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Npm</span> <span class=\"string\">Publish</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">      <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.NPM_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>到此时，当你推送一个以 v开头 tag 到仓库时，就会执行这个 publish.yml，这个 Action 会将当前仓库发布到 Npm 了。</p>\n<p>当然你的包可能还需要执行一些构建操作等等，你可以在 <strong>run</strong> 里执行多条命令</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    npm run build</span></span><br><span class=\"line\"><span class=\"string\">    #...更多操作</span></span><br><span class=\"line\"><span class=\"string\">    npm publish</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"区分-Beta-和-latest\"><a href=\"#区分-Beta-和-latest\" class=\"headerlink\" title=\"区分 Beta 和 latest\"></a>区分 Beta 和 latest</h3><p>默认情况下 <strong>npm publish</strong> 发布时正式包，如果需要测试包需要执行 <strong>npm publish –tag beta</strong>。利用 git tag 我们可以将 v1.0.2 格式发为正式包，将 v1.0.2-beta.1 格式发布测试包。</p>\n<p>修改 publish 流程，<strong>Github Action</strong> 支持 <strong>if</strong> 操作，并不支持 <strong>else</strong>，只能通过如下模拟 <strong>if else</strong> 操作。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">steps:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Beta</span> <span class=\"string\">Publish</span></span><br><span class=\"line\">    <span class=\"attr\">if:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">contains(github.ref,&#x27;beta&#x27;)</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">publish</span> <span class=\"string\">--tag</span> <span class=\"string\">beta</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">      <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.NPM_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span></span><br><span class=\"line\">    <span class=\"attr\">if:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"type\">!contains(github.ref,&#x27;beta&#x27;)</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">      <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.NPM_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"根据-Tag-更新版本号\"><a href=\"#根据-Tag-更新版本号\" class=\"headerlink\" title=\"根据 Tag 更新版本号\"></a>根据 Tag 更新版本号</h3><p>为例避免每次修改 package.json 中版本，我们可以根据 tag 来修改 package.json 中版本，因为上面配置 node 环境，可以直接执行 node 代码，我们直接添加一个 publish.js 文件，去修改 package.json 中 version 。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">RELEASE_VERSION</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> version = process.<span class=\"property\">env</span>.<span class=\"property\">RELEASE_VERSION</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;/&#x27;</span>).<span class=\"title function_\">reverse</span>()[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;当前版本：&#x27;</span>, version);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pkg = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./package.json&#x27;</span>)</span><br><span class=\"line\">    pkg.<span class=\"property\">version</span> = version.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;v&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    fs.<span class=\"title function_\">writeFileSync</span>(path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./package.json&#x27;</span>), <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(pkg, <span class=\"literal\">null</span>, <span class=\"number\">4</span>), <span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改 publish 流程，在发布前修改版本，并将 github.ref 添加环境变量 RELEASE_VERSION</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">steps:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Build</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">node</span> <span class=\"string\">./publish</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">      <span class=\"attr\">RELEASE_VERSION:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.ref</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建发布-Github-Release\"><a href=\"#创建发布-Github-Release\" class=\"headerlink\" title=\"创建发布 Github Release\"></a>创建发布 Github Release</h3><p>官方 <strong>actions&#x2F;create-release</strong> 不在维护，推荐如下 Actions，可以结合需要选择，你也可以去前往 <a href=\"https://github.com/marketplace\">marketplace</a> 选择更多 Actions。</p>\n<ul>\n<li><a href=\"https://github.com/elgohr/Github-Release-Action\">elgohr&#x2F;Github-Release-Action</a></li>\n<li><a href=\"https://github.com/marvinpinto/action-automatic-releases\">marvinpinto&#x2F;action-automatic-releases</a></li>\n<li><a href=\"https://github.com/softprops/action-gh-release\">softprops&#x2F;action-gh-release</a></li>\n<li><a href=\"https://github.com/ncipollo/release-action\">ncipollo&#x2F;release-action</a></li>\n</ul>\n<p>很多创建 <strong>Release</strong> 的 <strong>Actions</strong>，并不会将你的提交自动生成发版说明，所以我编写了一个发布 <strong>Release</strong> 的 <strong>Actions</strong>，具体实现参考 <a href=\"https://github.com/MaLuns/add-release\">MaLuns&#x2F;add-release</a> 以满足我的需求。Github 为我们提供 <a href=\"https://github.com/actions/toolkit\"><strong>actions&#x2F;toolkit</strong></a> 帮助我们简化了很多操作。</p>\n<p>简单描述如何实现：</p>\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 730.4648101751317 852.9999999999993\" filter=\"invert(93%) hue-rotate(180deg)\">\n\n  <defs>\n    <style class=\"style-fonts\">\n      @font-face {\n        font-family: \"Virgil\";\n        src: url(\"https://excalidraw.com/Virgil.woff2\");\n      }\n      @font-face {\n        font-family: \"Cascadia\";\n        src: url(\"https://excalidraw.com/Cascadia.woff2\");\n      }\n    </style>\n  </defs>\n  <g stroke-linecap=\"round\" transform=\"translate(10 10) rotate(0 139.5 27.5)\"><path d=\"M13.75 0 M13.75 0 C109.38 -2.41, 205.68 1.99, 265.25 0 M13.75 0 C70.18 2.36, 124.81 0.97, 265.25 0 M265.25 0 C273.89 1.09, 281.74 7.28, 279 13.75 M265.25 0 C277.97 4.59, 274.44 8.78, 279 13.75 M279 13.75 C276.09 18.18, 279.75 24.18, 279 41.25 M279 13.75 C277.83 23.76, 280.05 32.76, 279 41.25 M279 41.25 C280.53 49.75, 271.57 52.1, 265.25 55 M279 41.25 C276.2 54.43, 269.9 58.1, 265.25 55 M265.25 55 C209.34 55.8, 147.98 55.99, 13.75 55 M265.25 55 C169.39 56.68, 70.38 55.24, 13.75 55 M13.75 55 C8.57 51.9, -0.4 48.89, 0 41.25 M13.75 55 C7.04 56.87, -3.65 50.34, 0 41.25 M0 41.25 C0.8 31.53, 3.38 23.71, 0 13.75 M0 41.25 C-1.05 30.71, 0.18 22.03, 0 13.75 M0 13.75 C-0.72 6.24, 2.74 3.88, 13.75 0 M0 13.75 C4.5 8.33, 4.37 -1.58, 13.75 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(28.5 27.5) rotate(0 121 10)\"><text x=\"121\" y=\"14\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">从当前位置开始分页获取提交记录</text></g><g stroke-linecap=\"round\" transform=\"translate(70.88888888888926 119.11111111111086) rotate(0 87 27.5)\"><path d=\"M13.75 0 M13.75 0 C70.27 -1.27, 132.16 -5.78, 160.25 0 M13.75 0 C49.11 3.38, 82.62 0.94, 160.25 0 M160.25 0 C172.31 1.56, 177.77 6.12, 174 13.75 M160.25 0 C168.65 -3.27, 170.67 1.79, 174 13.75 M174 13.75 C170.69 27.99, 173.48 37.63, 174 41.25 M174 13.75 C175.49 23.48, 174.56 32.65, 174 41.25 M174 41.25 C174.25 47.02, 166.12 58.98, 160.25 55 M174 41.25 C170.43 49.95, 167.66 57.46, 160.25 55 M160.25 55 C108.89 54.23, 59.37 55.65, 13.75 55 M160.25 55 C126.86 53.71, 92.28 51.97, 13.75 55 M13.75 55 C4.11 55.89, 2.76 49.69, 0 41.25 M13.75 55 C6.49 52.89, 4.47 54.92, 0 41.25 M0 41.25 C-2.82 31.53, 2.41 23.49, 0 13.75 M0 41.25 C-0.4 35.03, -0.56 28.24, 0 13.75 M0 13.75 C-2.36 7.79, 4.22 1.59, 13.75 0 M0 13.75 C3.15 8.94, 5.15 2.29, 13.75 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(101.38888888888926 137.11111111111086) rotate(0 56.5 9.5)\"><text x=\"56.5\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">获取所有 tags</text></g><g stroke-linecap=\"round\"><g transform=\"translate(150.88997153960383 67.18500722316435) rotate(0 -2.375925603429664 26.98165787361677)\"><path d=\"M-1.36 1.74 C-3.05 10.23, -6.88 42.36, -7.85 50.27 M3.1 0.21 C2.04 9.22, -2.05 45.19, -2.81 53.75\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(150.88997153960383 67.18500722316435) rotate(0 -2.375925603429664 26.98165787361677)\"><path d=\"M-6.52 25.54 C-7.15 35.91, -6.31 49.69, -6.21 57.11 M-9.03 28.39 C-6.66 37.72, -6.6 43.18, -3.49 52.44\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(150.88997153960383 67.18500722316435) rotate(0 -2.375925603429664 26.98165787361677)\"><path d=\"M10.78 27.32 C3.54 36.85, -2.23 49.95, -6.21 57.11 M8.26 30.18 C5.44 38.84, 0.29 43.76, -3.49 52.44\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g stroke-linecap=\"round\" transform=\"translate(76.88888888888852 359.55555555555543) rotate(0 81.00000000000003 26)\"><path d=\"M13 0 M13 0 C48.15 0.59, 83.48 -1.4, 149 0 M13 0 C65.81 -1.5, 120.05 -1.13, 149 0 M149 0 C156.96 3.43, 160.63 2.94, 162 13 M149 0 C155.72 3.81, 163.79 6.52, 162 13 M162 13 C164.97 21.93, 165.32 33.71, 162 39 M162 13 C164.16 18.66, 162.04 22.96, 162 39 M162 39 C165.01 45.04, 159.76 50.22, 149 52 M162 39 C158.91 43.92, 155.83 52.56, 149 52 M149 52 C114.38 51.99, 76.13 50.26, 13 52 M149 52 C111.19 51.86, 73.18 49.38, 13 52 M13 52 C7.36 54.09, 3.81 48.54, 0 39 M13 52 C8.37 50.93, 2.61 49.39, 0 39 M0 39 C-1.37 29.54, -3.76 16.5, 0 13 M0 39 C-1.16 33.31, -0.27 25.99, 0 13 M0 13 C1.34 5.4, 4.26 0.12, 13 0 M0 13 C2.13 1.13, 6.08 -3.88, 13 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(108.88888888888857 376.05555555555543) rotate(0 49 9.5)\"><text x=\"49\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">循环读取记录</text></g><g stroke-linecap=\"round\"><g transform=\"translate(153.3959809829115 291.96031746031736) rotate(0 -0.3315164564070301 34.81390687762939)\"><path d=\"M-1.1 1.87 C-1.35 13.84, -1.54 58.15, -1.67 69.21 M3.5 0.42 C2.86 11.92, -2.91 55.14, -4.16 65.69\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(153.3959809829115 291.96031746031736) rotate(0 -0.3315164564070301 34.81390687762939)\"><path d=\"M-8.15 35.78 C-5.5 44.13, -4.91 50.69, -0.7 68.1 M-12.33 36.4 C-8.54 41.49, -7.37 47.65, -4.34 66.81\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(153.3959809829115 291.96031746031736) rotate(0 -0.3315164564070301 34.81390687762939)\"><path d=\"M12.21 38.34 C8.95 45.78, 3.58 51.59, -0.7 68.1 M8.04 38.96 C7.36 43.64, 4.02 49.23, -4.34 66.81\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g stroke-linecap=\"round\" transform=\"translate(44.6666666666664 485.7777777777778) rotate(0 115.5 39)\"><path d=\"M145 10 M145 10 C162.03 19.72, 175.77 22.64, 202 30 M145 10 C159.69 16.01, 180.29 22.75, 202 30 M202 30 C229.68 38.79, 234.91 36.37, 202 50 M202 30 C234.35 42.28, 233.99 37.91, 202 50 M202 50 C192.22 56.54, 175.36 56.51, 145 68 M202 50 C188.07 54.67, 172.39 58.19, 145 68 M145 68 C115.61 78.88, 117.97 79.22, 87 68 M145 68 C113.83 80.47, 118.56 74.15, 87 68 M87 68 C71.29 61.04, 60.56 59.32, 29 50 M87 68 C74.64 64.74, 64.44 62.94, 29 50 M29 50 C-3.74 39.97, -2.56 38.48, 29 30 M29 50 C-0.37 39.37, 0.33 35.89, 29 30 M29 30 C50.44 21.61, 67.95 19.5, 87 10 M29 30 C39.74 28.07, 53.86 23.06, 87 10 M87 10 C117.55 -3.73, 116.15 -0.35, 145 10 M87 10 C117.11 0.05, 111.75 1.9, 145 10\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(103.6666666666664 515.2777777777778) rotate(0 56.5 9.5)\"><text x=\"56.5\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是否是 tag 处</text></g><g stroke-linecap=\"round\"><g transform=\"translate(149.86229137715839 412.9312169312168) rotate(0 4.208753635864298 44.00826718116923)\"><path d=\"M1.74 2.04 C2.05 16.64, 3.37 73.22, 4.27 87.33 M-0.76 0.69 C0.16 14.55, 8.15 69.98, 9.18 83.55\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(149.86229137715839 412.9312169312168) rotate(0 4.208753635864298 44.00826718116923)\"><path d=\"M-1.29 52.77 C4.13 67.04, 8.41 74.67, 7.63 79.71 M-2.42 55.64 C-2.41 61.14, 1.58 70.44, 9.2 82.95\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(149.86229137715839 412.9312169312168) rotate(0 4.208753635864298 44.00826718116923)\"><path d=\"M19.1 50.44 C16.66 65.86, 13.09 74.39, 7.63 79.71 M17.97 53.31 C13.25 59.65, 12.55 69.49, 9.2 82.95\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g mask=\"url(#mask-lviM0Dprq1R14gecoqO6G)\" stroke-linecap=\"round\"><g transform=\"translate(166.8423381162429 563.3610819644362) rotate(0 -0.029376666403038598 53.384134448982536)\"><path d=\"M0.06 2.21 C0.81 19.68, 2.3 86.2, 3.29 102.65 M-3.35 0.94 C-2.86 19.01, -0.44 88.88, 1.06 105.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(166.8423381162429 563.3610819644362) rotate(0 -0.029376666403038598 53.384134448982536)\"><path d=\"M-7.63 78.3 C-9.36 89.25, -8.79 91.6, -1.31 103.66 M-12.18 79.05 C-6.4 85.8, -5.97 92.15, -0.21 106.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(166.8423381162429 563.3610819644362) rotate(0 -0.029376666403038598 53.384134448982536)\"><path d=\"M12.86 77.13 C5.84 88.39, 1.15 91.04, -1.31 103.66 M8.31 77.88 C9.45 84.56, 5.22 91.18, -0.21 106.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-lviM0Dprq1R14gecoqO6G\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"270.10521586848984\" height=\"766.8482905982908\"/><rect x=\"159.47377699236642\" y=\"605.6046862813637\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(159.47377699236642 605.6046862813635) rotate(0 7.339184457473436 11.140530132055233)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是</text></g><g mask=\"url(#mask-dn1DNiDydmoukLwp9itsL)\" stroke-linecap=\"round\"><g transform=\"translate(272.9215136092465 524.3635848425745) rotate(0 93.08055415379027 2.589871462680776)\"><path d=\"M-2.42 0.27 C29.3 1.24, 156.92 6.29, 188.59 7.23 M1.45 -2.05 C33.19 -1.97, 156.82 2.91, 187.66 3.39\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(272.9215136092465 524.3635848425745) rotate(0 93.08055415379027 2.589871462680776)\"><path d=\"M159.57 16.3 C168.89 13.09, 173.73 7.2, 190.18 3.32 M157.45 12.33 C169.03 10.09, 179.3 6.48, 188.03 3.06\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(272.9215136092465 524.3635848425745) rotate(0 93.08055415379027 2.589871462680776)\"><path d=\"M160.16 -4.22 C169.55 -2.58, 174.25 -3.64, 190.18 3.32 M158.04 -8.18 C169.25 -2.93, 179.3 0.95, 188.03 3.06\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-dn1DNiDydmoukLwp9itsL\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"559.084892031994\" height=\"629.4457914278037\"/><rect x=\"357.0032028206201\" y=\"517.4046881351887\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(357.00320282062034 517.4046881351892) rotate(0 8.99886494241656 9.548768170066296)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">否</text></g><g stroke-linecap=\"round\" transform=\"translate(409.9999999999998 321.33333333333326) rotate(0 111.50000000000006 54.5)\"><path d=\"M140 13.75 M140 13.75 C157.74 27.59, 177.39 33.69, 195 41.25 M140 13.75 C155.68 22.1, 172.88 29.02, 195 41.25 M195 41.25 C223.92 57.76, 223.16 52.04, 195 68.75 M195 41.25 C221.74 55.91, 221.28 54.16, 195 68.75 M195 68.75 C174.48 77.98, 156.9 89.76, 140 95.25 M195 68.75 C176.24 79.02, 157.82 86.35, 140 95.25 M140 95.25 C115.54 111.32, 113.06 111.06, 84 95.25 M140 95.25 C110.54 112.93, 109.07 112.88, 84 95.25 M84 95.25 C72.36 88.5, 55.7 82.61, 28 68.75 M84 95.25 C71.99 87.21, 57.91 82.69, 28 68.75 M28 68.75 C-3.55 52.86, 2.53 52.47, 28 41.25 M28 68.75 C-1.04 54.5, -3.77 51.3, 28 41.25 M28 41.25 C47.04 32.45, 64.14 19.94, 84 13.75 M28 41.25 C41.45 36.17, 49.87 29.58, 84 13.75 M84 13.75 C115.99 -3.48, 108.31 3.81, 140 13.75 M84 13.75 C114.89 2.11, 113.09 -1.44, 140 13.75\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(440.4999999999998 366.33333333333326) rotate(0 81.00000000000006 9.5)\"><text x=\"81\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">此页记录是否循环完成</text></g><g mask=\"url(#mask-xcMQVAjcvj1r3ryoOnPyv)\" stroke-linecap=\"round\"><g stroke-opacity=\"0.8\" fill-opacity=\"0.8\" transform=\"translate(520.0171788653535 317.97819876515473) rotate(0 1.0365626996742208 -65.70638529036205)\"><path d=\"M-0.93 1.37 C-0.81 -8.92, 2.85 -38.98, 2.72 -60.51 C2.59 -82.04, -1.62 -116.07, -1.71 -127.79 M3.76 -0.35 C3.35 -10.26, 0.6 -34.72, 0.61 -56.79 C0.61 -78.86, 3.29 -120.7, 3.78 -132.79\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.8\" fill-opacity=\"0.8\" transform=\"translate(520.0171788653535 317.97819876515473) rotate(0 1.0365626996742208 -65.70638529036205)\"><path d=\"M14.55 -103.79 C9.29 -118.36, 7.19 -123.42, 0.85 -131.58 M12.36 -105.03 C12.28 -112.11, 9.44 -115.41, 5.29 -131.94\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.8\" fill-opacity=\"0.8\" transform=\"translate(520.0171788653535 317.97819876515473) rotate(0 1.0365626996742208 -65.70638529036205)\"><path d=\"M-5.95 -104.84 C-3.57 -118.88, 1.95 -123.56, 0.85 -131.58 M-8.13 -106.09 C-3.76 -112.82, -2.15 -115.89, 5.29 -131.94\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-xcMQVAjcvj1r3ryoOnPyv\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"622.5158286778401\" height=\"546.75576390573\"/><rect x=\"513.5158286778401\" y=\"247.80329352153376\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(513.51582867784 247.80329352153376) rotate(0 7.537912887187588 4.4685199532589195)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是</text></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(56.5555555555552 673.4444444444446) rotate(0 113.5 24.5)\"><path d=\"M12.25 0 M12.25 0 C80.56 1.92, 153.89 -1.93, 214.75 0 M12.25 0 C53.14 1.75, 95.9 2.73, 214.75 0 M214.75 0 C223.7 3.04, 227.3 7.2, 227 12.25 M214.75 0 C219.49 -0.15, 223.59 0.92, 227 12.25 M227 12.25 C223.82 18.43, 225.57 28.52, 227 36.75 M227 12.25 C226.67 21.57, 227.76 28.71, 227 36.75 M227 36.75 C226.75 46.38, 220.69 52.67, 214.75 49 M227 36.75 C227.84 48.84, 227.08 50.17, 214.75 49 M214.75 49 C163.88 47.29, 109.37 51.41, 12.25 49 M214.75 49 C166.16 52.94, 117.26 51.83, 12.25 49 M12.25 49 C7.93 47.41, -3.81 48.45, 0 36.75 M12.25 49 C1.79 52.1, -0.76 40.84, 0 36.75 M0 36.75 C-2.28 29.8, -1.8 17.06, 0 12.25 M0 36.75 C0.07 32.46, -0.16 24.17, 0 12.25 M0 12.25 C2.11 5.72, 6.43 3.54, 12.25 0 M0 12.25 C-3.71 2.03, 0.2 2.71, 12.25 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(73.5555555555552 688.4444444444439) rotate(0 96.5 9.500000000000114)\"><text x=\"96.5\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">处理两个 tag 间提交记录</text></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(461.33333333333326 496.8888888888887) rotate(0 77.00000000000006 27)\"><path d=\"M13.5 0 M13.5 0 C52.54 4.63, 87.08 -1.09, 140.5 0 M13.5 0 C54.78 -0.19, 94.59 -1.46, 140.5 0 M140.5 0 C151.16 2.05, 156.62 7.43, 154 13.5 M140.5 0 C148.78 -4.53, 156.9 4.74, 154 13.5 M154 13.5 C153.67 23.76, 154.01 32.17, 154 40.5 M154 13.5 C153.69 20.03, 155.09 29.48, 154 40.5 M154 40.5 C151.9 48.31, 152.42 55.48, 140.5 54 M154 40.5 C158.58 47.05, 149.9 53.28, 140.5 54 M140.5 54 C92.73 56.56, 44.57 55.85, 13.5 54 M140.5 54 C99.1 54.72, 59.62 55.8, 13.5 54 M13.5 54 C3.64 51.47, 3.88 52.76, 0 40.5 M13.5 54 C3.28 52.41, 2.77 48.88, 0 40.5 M0 40.5 C-3.41 27.56, 0.43 19.97, 0 13.5 M0 40.5 C-1.74 30.09, -0.98 21.58, 0 13.5 M0 13.5 C1.34 3.46, 1.46 -3.49, 13.5 0 M0 13.5 C3.03 0.45, 6.07 3.66, 13.5 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(489.33333333333326 514.3888888888887) rotate(0 49 9.5)\"><text x=\"49\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">存储这条记录</text></g><g stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(526.9611864061793 495.7777777777774) rotate(0 -1.730755265804703 -32.76731269019899)\"><path d=\"M-0.27 -1.78 C0.12 -13.72, 0 -58.07, 0.41 -68.95 M-3.87 3.42 C-3.72 -6.97, -2.95 -54.93, -2.15 -66.12\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(526.9611864061793 495.7777777777774) rotate(0 -1.730755265804703 -32.76731269019899)\"><path d=\"M4.46 -38.39 C2.26 -42.51, 2.85 -47.14, -2.9 -66.91 M5.96 -39.49 C3.91 -47.53, 2.07 -55.37, -2.97 -67.2\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(526.9611864061793 495.7777777777774) rotate(0 -1.730755265804703 -32.76731269019899)\"><path d=\"M-16.05 -39.19 C-13.51 -43.08, -8.2 -47.53, -2.9 -66.91 M-14.55 -40.29 C-9.93 -47.81, -5.1 -55.39, -2.97 -67.2\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g stroke-linecap=\"round\" transform=\"translate(54.3888888888884 232.99999999999932) rotate(0 98.49999999999997 28.5)\"><path d=\"M14.25 0 M14.25 0 C78.38 -3.38, 134.75 -2.41, 182.75 0 M14.25 0 C64.81 3.59, 113.9 1.23, 182.75 0 M182.75 0 C195.67 0.21, 196.9 6.13, 197 14.25 M182.75 0 C188.16 -3.7, 200.62 2.08, 197 14.25 M197 14.25 C196.7 21.46, 196.24 27.54, 197 42.75 M197 14.25 C197.4 24.64, 198.76 34.94, 197 42.75 M197 42.75 C195.52 51.97, 194.74 61, 182.75 57 M197 42.75 C198.44 53.95, 194.09 52.48, 182.75 57 M182.75 57 C141.09 58.76, 94.28 58.09, 14.25 57 M182.75 57 C116.66 53.79, 53.06 54.36, 14.25 57 M14.25 57 C2.51 55.22, 0.37 55.7, 0 42.75 M14.25 57 C7.7 60.72, -2.38 49.94, 0 42.75 M0 42.75 C1.61 35.14, 2.81 28.04, 0 14.25 M0 42.75 C2.18 33.07, -1.43 23.87, 0 14.25 M0 14.25 C3.61 2.93, 4.27 -2.51, 14.25 0 M0 14.25 C1.43 6.72, 3.94 -0.41, 14.25 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(87.88888888888835 251.99999999999932) rotate(0 65 9.5)\"><text x=\"65\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">循环当页提交记录</text></g><g stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(154.8206469186399 177.6770234674325) rotate(0 0.3185349686685299 26.076701043304183)\"><path d=\"M-0.13 -0.37 C0.98 8.05, 3.6 42.58, 4.29 51.5 M-3.65 -3.04 C-2.45 5.79, 2.27 46.6, 3.46 55.2\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(154.8206469186399 177.6770234674325) rotate(0 0.3185349686685299 26.076701043304183)\"><path d=\"M-8.78 36.03 C-5.42 40.54, -0.57 38.94, -0.26 51.91 M-8.41 33.47 C-5.2 39.99, -0.84 45.72, 4.37 56.78\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(154.8206469186399 177.6770234674325) rotate(0 0.3185349686685299 26.076701043304183)\"><path d=\"M8.66 33.86 C8.31 38.81, 9.42 37.68, -0.26 51.91 M9.04 31.3 C6.57 38.21, 5.28 44.64, 4.37 56.78\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g mask=\"url(#mask-B-XvH6s17K3nnXY-_28km)\" stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(412.44444444444423 375.7777777777774) rotate(0 -83.27295419193706 3.372453728701089)\"><path d=\"M-2.06 1.1 C-29.78 1.95, -138.77 6.19, -166.13 7.52 M2.02 -0.78 C-26.13 0.44, -140.18 2.16, -168.57 3.13\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(412.44444444444423 375.7777777777774) rotate(0 -83.27295419193706 3.372453728701089)\"><path d=\"M-139.06 -8.31 C-147.4 -5.49, -153.74 1.12, -171.09 3.37 M-140.15 -7.35 C-151.03 -3.83, -162.8 1.33, -169.1 2.37\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(412.44444444444423 375.7777777777774) rotate(0 -83.27295419193706 3.372453728701089)\"><path d=\"M-138.58 12.2 C-147.42 8.7, -153.9 9.01, -171.09 3.37 M-139.67 13.17 C-150.65 8.7, -162.6 5.87, -169.1 2.37\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-B-XvH6s17K3nnXY-_28km\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"678.2125603864733\" height=\"482.1529406001787\"/><rect x=\"320.56038647342984\" y=\"369.465359188978\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(320.56038647342973 369.465359188978) rotate(0 8.611103779077439 9.684872317500435)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">否</text></g><g stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(169.11111111111074 386.88888888888846) rotate(0 0.1255754212662623 0.5311599435285643)\"><path d=\"M-1.94 -2.01 C-1.84 -1.87, 1.06 2.74, 0.96 2.71 M2.2 3.07 C1.98 2.33, -0.87 -0.27, -0.76 -0.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(169.11111111111074 386.88888888888846) rotate(0 0.1255754212662623 0.5311599435285643)\"><path d=\"M-0.76 -0.83 C-0.76 -0.83, -0.76 -0.83, -0.76 -0.83 M-0.76 -0.83 C-0.76 -0.83, -0.76 -0.83, -0.76 -0.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(169.11111111111074 386.88888888888846) rotate(0 0.1255754212662623 0.5311599435285643)\"><path d=\"M-0.76 -0.83 C-0.76 -0.83, -0.76 -0.83, -0.76 -0.83 M-0.76 -0.83 C-0.76 -0.83, -0.76 -0.83, -0.76 -0.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(420.11111111111074 99.3333333333328) rotate(0 94.5 46)\"><path d=\"M118.75 11.75 M118.75 11.75 C135.03 21.3, 149.19 30.6, 165.25 35.25 M118.75 11.75 C134.18 19.84, 152.05 28.4, 165.25 35.25 M165.25 35.25 C187.48 45.81, 185.7 50.8, 165.25 58.75 M165.25 35.25 C190 47.22, 186.22 49.04, 165.25 58.75 M165.25 58.75 C151.54 67.12, 132.58 74.51, 118.75 80.25 M165.25 58.75 C154.75 64.96, 145.4 68.12, 118.75 80.25 M118.75 80.25 C94.28 92.54, 93.31 91.04, 71.25 80.25 M118.75 80.25 C92.74 93.24, 95.8 87.97, 71.25 80.25 M71.25 80.25 C57.4 74.18, 42.08 68.79, 23.75 58.75 M71.25 80.25 C59.29 75.01, 48.22 72.31, 23.75 58.75 M23.75 58.75 C0.68 45.28, 0.96 49.41, 23.75 35.25 M23.75 58.75 C-4.55 48.6, -0.31 50.72, 23.75 35.25 M23.75 35.25 C39.63 30.01, 56.54 22.76, 71.25 11.75 M23.75 35.25 C36.36 27.73, 51.16 22.03, 71.25 11.75 M71.25 11.75 C91.68 2.98, 95.92 -3.26, 118.75 11.75 M71.25 11.75 C95.13 -0.89, 98.93 3.17, 118.75 11.75\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(465.61111111111074 135.8333333333328) rotate(0 49 9.5)\"><text x=\"49\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是否还有下页</text></g><g mask=\"url(#mask-AIvfQd-vju-X_S_dSBPaU)\" stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(516.8888888888886 100.22222222222172) rotate(0 -110.21043321811385 -31.322581191467634)\"><path d=\"M1.95 1.23 C-0.98 -8.31, 20.56 -46.86, -17.4 -57.53 C-55.37 -68.2, -191.2 -61.99, -225.85 -62.8 M-0.44 -0.57 C-3.62 -9.58, 17.79 -43.72, -18.83 -53.77 C-55.45 -63.82, -185.69 -59.69, -220.13 -60.85\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(516.8888888888886 100.22222222222172) rotate(0 -110.21043321811385 -31.322581191467634)\"><path d=\"M-190.16 -68.91 C-200.21 -70.48, -212.25 -66.55, -222.62 -59.3 M-191.22 -72.17 C-201.37 -66.88, -209.77 -66.92, -220.04 -62.38\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(516.8888888888886 100.22222222222172) rotate(0 -110.21043321811385 -31.322581191467634)\"><path d=\"M-190.22 -48.39 C-200.21 -56.23, -212.23 -58.58, -222.62 -59.3 M-191.28 -51.65 C-201.7 -52.2, -210.09 -58.07, -220.04 -62.38\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-AIvfQd-vju-X_S_dSBPaU\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"840.670309653916\" height=\"260.8790323125929\"/><rect x=\"488.99999999999955\" y=\"32.944444444444116\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(488.9999999999998 32.944444444444116) rotate(0 -82.32154432922493 35.95519658630997)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是</text></g><g mask=\"url(#mask-CU9fllVOFQ9hv_BUEtdnP)\" stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(709.111111111111 149.11111111111086) rotate(0 -203.9724014016603 284.3480313714674)\"><path d=\"M1.47 1.85 C-4.03 88.31, 40.45 427.87, -29.35 519.32 C-99.15 610.77, -352.88 545.12, -417.34 550.53 M5.34 0.38 C-0.48 86.08, 39.39 423.61, -31.38 515.78 C-102.15 607.95, -355.35 546.88, -419.3 553.39\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(709.111111111111 149.11111111111086) rotate(0 -203.9724014016603 284.3480313714674)\"><path d=\"M-387.86 545.53 C-394.94 546.53, -407.83 550.69, -418.15 553.4 M-390.49 546.44 C-396.9 545.93, -404.31 547.57, -418.86 552.24\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(709.111111111111 149.11111111111086) rotate(0 -203.9724014016603 284.3480313714674)\"><path d=\"M-389.19 566.01 C-395.97 561.09, -408.47 559.31, -418.15 553.4 M-391.83 566.92 C-398.26 561.38, -405.35 557.96, -418.86 552.24\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-CU9fllVOFQ9hv_BUEtdnP\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"1230.1111111111109\" height=\"800.1111111111109\"/><rect x=\"670.3788246397446\" y=\"656.2208126174994\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(670.3788246397444 656.2208126174996) rotate(0 -165.24011493029383 -222.76167013492136)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">否</text></g><g stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(602.4444444444442 144.6666666666663) rotate(0 53.916350204956984 1.7562233025888645)\"><path d=\"M-1.22 -0.92 C16.39 -0.04, 86.37 6.44, 104.07 7.41 M3.31 -3.89 C21.9 -4.1, 91.13 0.98, 109.06 2.8\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(54.666666666666515 787.9999999999993) rotate(0 107 27.5)\"><path d=\"M13.75 0 M13.75 0 C87.52 5.11, 154.72 3.57, 200.25 0 M13.75 0 C69.94 -1.17, 120.39 -0.6, 200.25 0 M200.25 0 C207.03 2.66, 217.32 4.98, 214 13.75 M200.25 0 C206.48 -0.5, 217.78 5.61, 214 13.75 M214 13.75 C214.97 21.16, 215.94 34.85, 214 41.25 M214 13.75 C213.24 21.11, 214.99 24.12, 214 41.25 M214 41.25 C216.9 51.08, 208.54 54.2, 200.25 55 M214 41.25 C210.64 51.13, 211.66 58.98, 200.25 55 M200.25 55 C158.88 49.84, 117.18 48.88, 13.75 55 M200.25 55 C160.04 55.32, 124.45 55.88, 13.75 55 M13.75 55 C8.02 51.2, 2.47 48.84, 0 41.25 M13.75 55 C0.75 54.33, 1.13 47.7, 0 41.25 M0 41.25 C3.44 35.46, 4.34 28.78, 0 13.75 M0 41.25 C0.1 31.79, -0.96 26.01, 0 13.75 M0 13.75 C0.83 6.06, 2.07 -2.08, 13.75 0 M0 13.75 C1.75 7.83, 1.69 -3.8, 13.75 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(66.66666666666652 805.9999999999993) rotate(0 95 9.5)\"><text x=\"95\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">根据规则，将记录生成 MD</text></g><g stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(165.71746592082616 725.503082527672) rotate(0 -0.7108549617225322 28.413311323170547)\"><path d=\"M0.43 1.36 C0.75 10.84, 1.42 45.89, 1.35 54.82 M-2.78 -0.36 C-2.56 9.57, 0.17 47.65, 0.43 57.19\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(165.71746592082616 725.503082527672) rotate(0 -0.7108549617225322 28.413311323170547)\"><path d=\"M-8.78 34.34 C-11.31 39.76, -7.97 44.68, -1.84 55.08 M-10.46 29.37 C-8.94 38.42, -5.93 44.32, -1.48 58.42\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(165.71746592082616 725.503082527672) rotate(0 -0.7108549617225322 28.413311323170547)\"><path d=\"M10.74 33.32 C2.73 39.09, 0.6 44.29, -1.84 55.08 M9.06 28.35 C6.28 37.32, 5.01 43.44, -1.48 58.42\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g>\n  </g>\n  <mask/>\n</svg>\n\n<p>编写完自定义 Actions 后，使用自定义 Actions。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">steps:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Release</span></span><br><span class=\"line\">    <span class=\"attr\">uses:</span> <span class=\"string\">MaLuns/add-release@指定版本</span></span><br><span class=\"line\">    <span class=\"attr\">with:</span></span><br><span class=\"line\">      <span class=\"attr\">files:</span> <span class=\"string\">Demo.zip</span></span><br><span class=\"line\">      <span class=\"attr\">generate_by_commit:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>效果图：</p>\n<p><img src=\"https://github.com/MaLuns/add-release/blob/master/demo/demo.png?raw=true\" alt=\"效果图\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<p>到此，一个根据 Git tag 自动发布 Npm 和 Release 的工作流编写完成了。你还可以在结合 Github Pages、Vercel 等同时自动化部署你的 Npm 包的文档和示例站点等。</p>\n","excerpt":"","more":"<p>还在手动 <strong>npm publish</strong> 发布 <strong>npm</strong> ？ 还在手动更新版本创建发布 <strong>Github Release</strong> ？还在手动添加 <strong>Changelog</strong>？是时候利用  <strong>CI&#x2F;CD</strong> 解放双手啦。常见的 <strong>CI&#x2F;CD</strong> 有很多，比如 Jenkins、GitLab CI、CircleCI 、Github Actions 等。本文主要是通过 <strong>Github Actions</strong> 来自动化处理 <strong>npm</strong> 包管理。</p>\n<h2 id=\"Github-Actions\"><a href=\"#Github-Actions\" class=\"headerlink\" title=\"Github Actions\"></a>Github Actions</h2><p><strong>GitHub Actions</strong> 距离推出已经好几年了，相信小伙伴们没用过，也听说过。<strong>GitHub Actions</strong> 不仅仅是能自动执行生成、测试和部署操作，还允许您在存储库中发生其他事件时运行工作流程。 例如，您可以运行工作流程，以便在有人在您的存储库中创建新问题时自动添加相应的标签。而且 GitHub 提供 Linux、Windows 和 macOS 多种虚拟机来运行工作流程，可以更具项目选择合适的虚拟机环境。</p>\n<p><strong>GitHub Actions</strong> 其实主要步骤只有两个，<strong>event</strong> (事件触发时机)、<strong>jobs</strong>（工作流程）。如果还不熟悉 <strong>GitHub Actions</strong>，可以<a href=\"https://docs.github.com/zh/actions\">参考文档</a>对其大致使用有个了解。</p>\n<h2 id=\"发布-Npm\"><a href=\"#发布-Npm\" class=\"headerlink\" title=\"发布 Npm\"></a>发布 Npm</h2><p>在本地发布 npm 包都是本地打包成组件后，登录 npm 账号运行 npm publish 发布。使用 <strong>GitHub Actions</strong> 来发布 <strong>npm</strong> 可以使用 <strong>Npm Access Tokens</strong>，可以更据需要分配 <strong>Tokens</strong> 权限，不需要使用账号密码登录。</p>\n<h3 id=\"Github-Actions-发布-Npm\"><a href=\"#Github-Actions-发布-Npm\" class=\"headerlink\" title=\"Github Actions 发布 Npm\"></a>Github Actions 发布 Npm</h3><p>首先需要确定你工作流触发时机，这个需要根据你个人习惯决定。</p>\n<p>举例：</p>\n<div class=\"trm-tabs\" id=\"test1\"><ul class=\"trm-nav-tabs\"><li class=\"trm-tab active\"><button type=\"button\" data-href=\"#test1-1\">tag</button></li><li class=\"trm-tab\"><button type=\"button\" data-href=\"#test1-2\">branches</button></li><li class=\"trm-tab\"><button type=\"button\" data-href=\"#test1-3\">paths</button></li></ul><div class=\"trm-tab-contents\"><div class=\"trm-tab-item-content active\" id=\"test1-1\"><p>推送 Tag 时触发</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;v*&quot;</span></span><br></pre></td></tr></table></figure></div><div class=\"trm-tab-item-content\" id=\"test1-2\"><p>仅在 master 推送时触发</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [<span class=\"string\">master</span>]</span><br></pre></td></tr></table></figure></div><div class=\"trm-tab-item-content\" id=\"test1-3\"><p>仅在 master 推送时，且 docs 下文件修改时触发，更多可以<a href=\"https://docs.github.com/zh/actions/using-workflows/events-that-trigger-workflows\">参考文档</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [<span class=\"string\">master</span>]</span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;docs/**&#x27;</span></span><br></pre></td></tr></table></figure></div></div></div>\n\n<p>本文就以为推送 Tag 触发为例：</p>\n<p>在你项目下添加 <strong>.github\\workflows\\publish.yml</strong> 文件，内容如下</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">Publish</span></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;v*&quot;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"代码拉取和Node配置\"><a href=\"#代码拉取和Node配置\" class=\"headerlink\" title=\"代码拉取和Node配置\"></a>代码拉取和Node配置</h4><p>在 <strong>jobs</strong> 添加一个名为 <strong>build</strong> 的 job，配置 <strong>build</strong> 的环境和拉取代码。<strong>runs-on: ubuntu-latest</strong> 配置虚拟机为 <strong>ubuntu</strong>，使用官方提取代码拉取和 配置 Node 的 Actions，更多 <a href=\"https://github.com/actions\">官方提供 Actions</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span>   <span class=\"comment\"># 拉取代码</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v3</span> <span class=\"comment\"># 设置 Node 版本</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"number\">16</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">&#x27;https://registry.npmjs.org&#x27;</span></span><br><span class=\"line\">          <span class=\"attr\">cache:</span> <span class=\"string\">yarn</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"配置环境密钥\"><a href=\"#配置环境密钥\" class=\"headerlink\" title=\"配置环境密钥\"></a>配置环境密钥</h4><p>添加环境变量，在你项目 &#x3D;&gt; Settings &#x3D;&gt; Secrets and variables &#x3D;&gt; Actions 中 添加你的密钥，名称随意取，密钥值为你上面生成的 <strong>Npm Access Tokens</strong>。</p>\n<p>例如：<br>Name &#x3D;&gt; NPM_TOKEN<br>Secret &#x3D;&gt; 你的 <strong>Npm Access Tokens</strong></p>\n<h4 id=\"发布-Npm-1\"><a href=\"#发布-Npm-1\" class=\"headerlink\" title=\"发布 Npm\"></a>发布 Npm</h4><p><strong>build</strong> 的 job 中，添加发布 Npm 操作，利用 NPM_TOKEN 发布 npm 包</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">steps:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Npm</span> <span class=\"string\">Publish</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">      <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.NPM_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>到此时，当你推送一个以 v开头 tag 到仓库时，就会执行这个 publish.yml，这个 Action 会将当前仓库发布到 Npm 了。</p>\n<p>当然你的包可能还需要执行一些构建操作等等，你可以在 <strong>run</strong> 里执行多条命令</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    npm run build</span></span><br><span class=\"line\"><span class=\"string\">    #...更多操作</span></span><br><span class=\"line\"><span class=\"string\">    npm publish</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"区分-Beta-和-latest\"><a href=\"#区分-Beta-和-latest\" class=\"headerlink\" title=\"区分 Beta 和 latest\"></a>区分 Beta 和 latest</h3><p>默认情况下 <strong>npm publish</strong> 发布时正式包，如果需要测试包需要执行 <strong>npm publish –tag beta</strong>。利用 git tag 我们可以将 v1.0.2 格式发为正式包，将 v1.0.2-beta.1 格式发布测试包。</p>\n<p>修改 publish 流程，<strong>Github Action</strong> 支持 <strong>if</strong> 操作，并不支持 <strong>else</strong>，只能通过如下模拟 <strong>if else</strong> 操作。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">steps:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Beta</span> <span class=\"string\">Publish</span></span><br><span class=\"line\">    <span class=\"attr\">if:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">contains(github.ref,&#x27;beta&#x27;)</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">publish</span> <span class=\"string\">--tag</span> <span class=\"string\">beta</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">      <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.NPM_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span></span><br><span class=\"line\">    <span class=\"attr\">if:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"type\">!contains(github.ref,&#x27;beta&#x27;)</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">      <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.NPM_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"根据-Tag-更新版本号\"><a href=\"#根据-Tag-更新版本号\" class=\"headerlink\" title=\"根据 Tag 更新版本号\"></a>根据 Tag 更新版本号</h3><p>为例避免每次修改 package.json 中版本，我们可以根据 tag 来修改 package.json 中版本，因为上面配置 node 环境，可以直接执行 node 代码，我们直接添加一个 publish.js 文件，去修改 package.json 中 version 。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">RELEASE_VERSION</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> version = process.<span class=\"property\">env</span>.<span class=\"property\">RELEASE_VERSION</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;/&#x27;</span>).<span class=\"title function_\">reverse</span>()[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;当前版本：&#x27;</span>, version);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pkg = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./package.json&#x27;</span>)</span><br><span class=\"line\">    pkg.<span class=\"property\">version</span> = version.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;v&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    fs.<span class=\"title function_\">writeFileSync</span>(path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;./package.json&#x27;</span>), <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(pkg, <span class=\"literal\">null</span>, <span class=\"number\">4</span>), <span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改 publish 流程，在发布前修改版本，并将 github.ref 添加环境变量 RELEASE_VERSION</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">steps:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Build</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">node</span> <span class=\"string\">./publish</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">      <span class=\"attr\">RELEASE_VERSION:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.ref</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建发布-Github-Release\"><a href=\"#创建发布-Github-Release\" class=\"headerlink\" title=\"创建发布 Github Release\"></a>创建发布 Github Release</h3><p>官方 <strong>actions&#x2F;create-release</strong> 不在维护，推荐如下 Actions，可以结合需要选择，你也可以去前往 <a href=\"https://github.com/marketplace\">marketplace</a> 选择更多 Actions。</p>\n<ul>\n<li><a href=\"https://github.com/elgohr/Github-Release-Action\">elgohr&#x2F;Github-Release-Action</a></li>\n<li><a href=\"https://github.com/marvinpinto/action-automatic-releases\">marvinpinto&#x2F;action-automatic-releases</a></li>\n<li><a href=\"https://github.com/softprops/action-gh-release\">softprops&#x2F;action-gh-release</a></li>\n<li><a href=\"https://github.com/ncipollo/release-action\">ncipollo&#x2F;release-action</a></li>\n</ul>\n<p>很多创建 <strong>Release</strong> 的 <strong>Actions</strong>，并不会将你的提交自动生成发版说明，所以我编写了一个发布 <strong>Release</strong> 的 <strong>Actions</strong>，具体实现参考 <a href=\"https://github.com/MaLuns/add-release\">MaLuns&#x2F;add-release</a> 以满足我的需求。Github 为我们提供 <a href=\"https://github.com/actions/toolkit\"><strong>actions&#x2F;toolkit</strong></a> 帮助我们简化了很多操作。</p>\n<p>简单描述如何实现：</p>\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 730.4648101751317 852.9999999999993\" filter=\"invert(93%) hue-rotate(180deg)\">\n\n  <defs>\n    <style class=\"style-fonts\">\n      @font-face {\n        font-family: \"Virgil\";\n        src: url(\"https://excalidraw.com/Virgil.woff2\");\n      }\n      @font-face {\n        font-family: \"Cascadia\";\n        src: url(\"https://excalidraw.com/Cascadia.woff2\");\n      }\n    </style>\n  </defs>\n  <g stroke-linecap=\"round\" transform=\"translate(10 10) rotate(0 139.5 27.5)\"><path d=\"M13.75 0 M13.75 0 C109.38 -2.41, 205.68 1.99, 265.25 0 M13.75 0 C70.18 2.36, 124.81 0.97, 265.25 0 M265.25 0 C273.89 1.09, 281.74 7.28, 279 13.75 M265.25 0 C277.97 4.59, 274.44 8.78, 279 13.75 M279 13.75 C276.09 18.18, 279.75 24.18, 279 41.25 M279 13.75 C277.83 23.76, 280.05 32.76, 279 41.25 M279 41.25 C280.53 49.75, 271.57 52.1, 265.25 55 M279 41.25 C276.2 54.43, 269.9 58.1, 265.25 55 M265.25 55 C209.34 55.8, 147.98 55.99, 13.75 55 M265.25 55 C169.39 56.68, 70.38 55.24, 13.75 55 M13.75 55 C8.57 51.9, -0.4 48.89, 0 41.25 M13.75 55 C7.04 56.87, -3.65 50.34, 0 41.25 M0 41.25 C0.8 31.53, 3.38 23.71, 0 13.75 M0 41.25 C-1.05 30.71, 0.18 22.03, 0 13.75 M0 13.75 C-0.72 6.24, 2.74 3.88, 13.75 0 M0 13.75 C4.5 8.33, 4.37 -1.58, 13.75 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(28.5 27.5) rotate(0 121 10)\"><text x=\"121\" y=\"14\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">从当前位置开始分页获取提交记录</text></g><g stroke-linecap=\"round\" transform=\"translate(70.88888888888926 119.11111111111086) rotate(0 87 27.5)\"><path d=\"M13.75 0 M13.75 0 C70.27 -1.27, 132.16 -5.78, 160.25 0 M13.75 0 C49.11 3.38, 82.62 0.94, 160.25 0 M160.25 0 C172.31 1.56, 177.77 6.12, 174 13.75 M160.25 0 C168.65 -3.27, 170.67 1.79, 174 13.75 M174 13.75 C170.69 27.99, 173.48 37.63, 174 41.25 M174 13.75 C175.49 23.48, 174.56 32.65, 174 41.25 M174 41.25 C174.25 47.02, 166.12 58.98, 160.25 55 M174 41.25 C170.43 49.95, 167.66 57.46, 160.25 55 M160.25 55 C108.89 54.23, 59.37 55.65, 13.75 55 M160.25 55 C126.86 53.71, 92.28 51.97, 13.75 55 M13.75 55 C4.11 55.89, 2.76 49.69, 0 41.25 M13.75 55 C6.49 52.89, 4.47 54.92, 0 41.25 M0 41.25 C-2.82 31.53, 2.41 23.49, 0 13.75 M0 41.25 C-0.4 35.03, -0.56 28.24, 0 13.75 M0 13.75 C-2.36 7.79, 4.22 1.59, 13.75 0 M0 13.75 C3.15 8.94, 5.15 2.29, 13.75 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(101.38888888888926 137.11111111111086) rotate(0 56.5 9.5)\"><text x=\"56.5\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">获取所有 tags</text></g><g stroke-linecap=\"round\"><g transform=\"translate(150.88997153960383 67.18500722316435) rotate(0 -2.375925603429664 26.98165787361677)\"><path d=\"M-1.36 1.74 C-3.05 10.23, -6.88 42.36, -7.85 50.27 M3.1 0.21 C2.04 9.22, -2.05 45.19, -2.81 53.75\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(150.88997153960383 67.18500722316435) rotate(0 -2.375925603429664 26.98165787361677)\"><path d=\"M-6.52 25.54 C-7.15 35.91, -6.31 49.69, -6.21 57.11 M-9.03 28.39 C-6.66 37.72, -6.6 43.18, -3.49 52.44\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(150.88997153960383 67.18500722316435) rotate(0 -2.375925603429664 26.98165787361677)\"><path d=\"M10.78 27.32 C3.54 36.85, -2.23 49.95, -6.21 57.11 M8.26 30.18 C5.44 38.84, 0.29 43.76, -3.49 52.44\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g stroke-linecap=\"round\" transform=\"translate(76.88888888888852 359.55555555555543) rotate(0 81.00000000000003 26)\"><path d=\"M13 0 M13 0 C48.15 0.59, 83.48 -1.4, 149 0 M13 0 C65.81 -1.5, 120.05 -1.13, 149 0 M149 0 C156.96 3.43, 160.63 2.94, 162 13 M149 0 C155.72 3.81, 163.79 6.52, 162 13 M162 13 C164.97 21.93, 165.32 33.71, 162 39 M162 13 C164.16 18.66, 162.04 22.96, 162 39 M162 39 C165.01 45.04, 159.76 50.22, 149 52 M162 39 C158.91 43.92, 155.83 52.56, 149 52 M149 52 C114.38 51.99, 76.13 50.26, 13 52 M149 52 C111.19 51.86, 73.18 49.38, 13 52 M13 52 C7.36 54.09, 3.81 48.54, 0 39 M13 52 C8.37 50.93, 2.61 49.39, 0 39 M0 39 C-1.37 29.54, -3.76 16.5, 0 13 M0 39 C-1.16 33.31, -0.27 25.99, 0 13 M0 13 C1.34 5.4, 4.26 0.12, 13 0 M0 13 C2.13 1.13, 6.08 -3.88, 13 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(108.88888888888857 376.05555555555543) rotate(0 49 9.5)\"><text x=\"49\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">循环读取记录</text></g><g stroke-linecap=\"round\"><g transform=\"translate(153.3959809829115 291.96031746031736) rotate(0 -0.3315164564070301 34.81390687762939)\"><path d=\"M-1.1 1.87 C-1.35 13.84, -1.54 58.15, -1.67 69.21 M3.5 0.42 C2.86 11.92, -2.91 55.14, -4.16 65.69\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(153.3959809829115 291.96031746031736) rotate(0 -0.3315164564070301 34.81390687762939)\"><path d=\"M-8.15 35.78 C-5.5 44.13, -4.91 50.69, -0.7 68.1 M-12.33 36.4 C-8.54 41.49, -7.37 47.65, -4.34 66.81\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(153.3959809829115 291.96031746031736) rotate(0 -0.3315164564070301 34.81390687762939)\"><path d=\"M12.21 38.34 C8.95 45.78, 3.58 51.59, -0.7 68.1 M8.04 38.96 C7.36 43.64, 4.02 49.23, -4.34 66.81\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g stroke-linecap=\"round\" transform=\"translate(44.6666666666664 485.7777777777778) rotate(0 115.5 39)\"><path d=\"M145 10 M145 10 C162.03 19.72, 175.77 22.64, 202 30 M145 10 C159.69 16.01, 180.29 22.75, 202 30 M202 30 C229.68 38.79, 234.91 36.37, 202 50 M202 30 C234.35 42.28, 233.99 37.91, 202 50 M202 50 C192.22 56.54, 175.36 56.51, 145 68 M202 50 C188.07 54.67, 172.39 58.19, 145 68 M145 68 C115.61 78.88, 117.97 79.22, 87 68 M145 68 C113.83 80.47, 118.56 74.15, 87 68 M87 68 C71.29 61.04, 60.56 59.32, 29 50 M87 68 C74.64 64.74, 64.44 62.94, 29 50 M29 50 C-3.74 39.97, -2.56 38.48, 29 30 M29 50 C-0.37 39.37, 0.33 35.89, 29 30 M29 30 C50.44 21.61, 67.95 19.5, 87 10 M29 30 C39.74 28.07, 53.86 23.06, 87 10 M87 10 C117.55 -3.73, 116.15 -0.35, 145 10 M87 10 C117.11 0.05, 111.75 1.9, 145 10\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(103.6666666666664 515.2777777777778) rotate(0 56.5 9.5)\"><text x=\"56.5\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是否是 tag 处</text></g><g stroke-linecap=\"round\"><g transform=\"translate(149.86229137715839 412.9312169312168) rotate(0 4.208753635864298 44.00826718116923)\"><path d=\"M1.74 2.04 C2.05 16.64, 3.37 73.22, 4.27 87.33 M-0.76 0.69 C0.16 14.55, 8.15 69.98, 9.18 83.55\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(149.86229137715839 412.9312169312168) rotate(0 4.208753635864298 44.00826718116923)\"><path d=\"M-1.29 52.77 C4.13 67.04, 8.41 74.67, 7.63 79.71 M-2.42 55.64 C-2.41 61.14, 1.58 70.44, 9.2 82.95\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(149.86229137715839 412.9312169312168) rotate(0 4.208753635864298 44.00826718116923)\"><path d=\"M19.1 50.44 C16.66 65.86, 13.09 74.39, 7.63 79.71 M17.97 53.31 C13.25 59.65, 12.55 69.49, 9.2 82.95\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g mask=\"url(#mask-lviM0Dprq1R14gecoqO6G)\" stroke-linecap=\"round\"><g transform=\"translate(166.8423381162429 563.3610819644362) rotate(0 -0.029376666403038598 53.384134448982536)\"><path d=\"M0.06 2.21 C0.81 19.68, 2.3 86.2, 3.29 102.65 M-3.35 0.94 C-2.86 19.01, -0.44 88.88, 1.06 105.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(166.8423381162429 563.3610819644362) rotate(0 -0.029376666403038598 53.384134448982536)\"><path d=\"M-7.63 78.3 C-9.36 89.25, -8.79 91.6, -1.31 103.66 M-12.18 79.05 C-6.4 85.8, -5.97 92.15, -0.21 106.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(166.8423381162429 563.3610819644362) rotate(0 -0.029376666403038598 53.384134448982536)\"><path d=\"M12.86 77.13 C5.84 88.39, 1.15 91.04, -1.31 103.66 M8.31 77.88 C9.45 84.56, 5.22 91.18, -0.21 106.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-lviM0Dprq1R14gecoqO6G\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"270.10521586848984\" height=\"766.8482905982908\"/><rect x=\"159.47377699236642\" y=\"605.6046862813637\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(159.47377699236642 605.6046862813635) rotate(0 7.339184457473436 11.140530132055233)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是</text></g><g mask=\"url(#mask-dn1DNiDydmoukLwp9itsL)\" stroke-linecap=\"round\"><g transform=\"translate(272.9215136092465 524.3635848425745) rotate(0 93.08055415379027 2.589871462680776)\"><path d=\"M-2.42 0.27 C29.3 1.24, 156.92 6.29, 188.59 7.23 M1.45 -2.05 C33.19 -1.97, 156.82 2.91, 187.66 3.39\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(272.9215136092465 524.3635848425745) rotate(0 93.08055415379027 2.589871462680776)\"><path d=\"M159.57 16.3 C168.89 13.09, 173.73 7.2, 190.18 3.32 M157.45 12.33 C169.03 10.09, 179.3 6.48, 188.03 3.06\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(272.9215136092465 524.3635848425745) rotate(0 93.08055415379027 2.589871462680776)\"><path d=\"M160.16 -4.22 C169.55 -2.58, 174.25 -3.64, 190.18 3.32 M158.04 -8.18 C169.25 -2.93, 179.3 0.95, 188.03 3.06\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-dn1DNiDydmoukLwp9itsL\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"559.084892031994\" height=\"629.4457914278037\"/><rect x=\"357.0032028206201\" y=\"517.4046881351887\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(357.00320282062034 517.4046881351892) rotate(0 8.99886494241656 9.548768170066296)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">否</text></g><g stroke-linecap=\"round\" transform=\"translate(409.9999999999998 321.33333333333326) rotate(0 111.50000000000006 54.5)\"><path d=\"M140 13.75 M140 13.75 C157.74 27.59, 177.39 33.69, 195 41.25 M140 13.75 C155.68 22.1, 172.88 29.02, 195 41.25 M195 41.25 C223.92 57.76, 223.16 52.04, 195 68.75 M195 41.25 C221.74 55.91, 221.28 54.16, 195 68.75 M195 68.75 C174.48 77.98, 156.9 89.76, 140 95.25 M195 68.75 C176.24 79.02, 157.82 86.35, 140 95.25 M140 95.25 C115.54 111.32, 113.06 111.06, 84 95.25 M140 95.25 C110.54 112.93, 109.07 112.88, 84 95.25 M84 95.25 C72.36 88.5, 55.7 82.61, 28 68.75 M84 95.25 C71.99 87.21, 57.91 82.69, 28 68.75 M28 68.75 C-3.55 52.86, 2.53 52.47, 28 41.25 M28 68.75 C-1.04 54.5, -3.77 51.3, 28 41.25 M28 41.25 C47.04 32.45, 64.14 19.94, 84 13.75 M28 41.25 C41.45 36.17, 49.87 29.58, 84 13.75 M84 13.75 C115.99 -3.48, 108.31 3.81, 140 13.75 M84 13.75 C114.89 2.11, 113.09 -1.44, 140 13.75\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(440.4999999999998 366.33333333333326) rotate(0 81.00000000000006 9.5)\"><text x=\"81\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">此页记录是否循环完成</text></g><g mask=\"url(#mask-xcMQVAjcvj1r3ryoOnPyv)\" stroke-linecap=\"round\"><g stroke-opacity=\"0.8\" fill-opacity=\"0.8\" transform=\"translate(520.0171788653535 317.97819876515473) rotate(0 1.0365626996742208 -65.70638529036205)\"><path d=\"M-0.93 1.37 C-0.81 -8.92, 2.85 -38.98, 2.72 -60.51 C2.59 -82.04, -1.62 -116.07, -1.71 -127.79 M3.76 -0.35 C3.35 -10.26, 0.6 -34.72, 0.61 -56.79 C0.61 -78.86, 3.29 -120.7, 3.78 -132.79\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.8\" fill-opacity=\"0.8\" transform=\"translate(520.0171788653535 317.97819876515473) rotate(0 1.0365626996742208 -65.70638529036205)\"><path d=\"M14.55 -103.79 C9.29 -118.36, 7.19 -123.42, 0.85 -131.58 M12.36 -105.03 C12.28 -112.11, 9.44 -115.41, 5.29 -131.94\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.8\" fill-opacity=\"0.8\" transform=\"translate(520.0171788653535 317.97819876515473) rotate(0 1.0365626996742208 -65.70638529036205)\"><path d=\"M-5.95 -104.84 C-3.57 -118.88, 1.95 -123.56, 0.85 -131.58 M-8.13 -106.09 C-3.76 -112.82, -2.15 -115.89, 5.29 -131.94\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-xcMQVAjcvj1r3ryoOnPyv\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"622.5158286778401\" height=\"546.75576390573\"/><rect x=\"513.5158286778401\" y=\"247.80329352153376\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(513.51582867784 247.80329352153376) rotate(0 7.537912887187588 4.4685199532589195)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是</text></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(56.5555555555552 673.4444444444446) rotate(0 113.5 24.5)\"><path d=\"M12.25 0 M12.25 0 C80.56 1.92, 153.89 -1.93, 214.75 0 M12.25 0 C53.14 1.75, 95.9 2.73, 214.75 0 M214.75 0 C223.7 3.04, 227.3 7.2, 227 12.25 M214.75 0 C219.49 -0.15, 223.59 0.92, 227 12.25 M227 12.25 C223.82 18.43, 225.57 28.52, 227 36.75 M227 12.25 C226.67 21.57, 227.76 28.71, 227 36.75 M227 36.75 C226.75 46.38, 220.69 52.67, 214.75 49 M227 36.75 C227.84 48.84, 227.08 50.17, 214.75 49 M214.75 49 C163.88 47.29, 109.37 51.41, 12.25 49 M214.75 49 C166.16 52.94, 117.26 51.83, 12.25 49 M12.25 49 C7.93 47.41, -3.81 48.45, 0 36.75 M12.25 49 C1.79 52.1, -0.76 40.84, 0 36.75 M0 36.75 C-2.28 29.8, -1.8 17.06, 0 12.25 M0 36.75 C0.07 32.46, -0.16 24.17, 0 12.25 M0 12.25 C2.11 5.72, 6.43 3.54, 12.25 0 M0 12.25 C-3.71 2.03, 0.2 2.71, 12.25 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(73.5555555555552 688.4444444444439) rotate(0 96.5 9.500000000000114)\"><text x=\"96.5\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">处理两个 tag 间提交记录</text></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(461.33333333333326 496.8888888888887) rotate(0 77.00000000000006 27)\"><path d=\"M13.5 0 M13.5 0 C52.54 4.63, 87.08 -1.09, 140.5 0 M13.5 0 C54.78 -0.19, 94.59 -1.46, 140.5 0 M140.5 0 C151.16 2.05, 156.62 7.43, 154 13.5 M140.5 0 C148.78 -4.53, 156.9 4.74, 154 13.5 M154 13.5 C153.67 23.76, 154.01 32.17, 154 40.5 M154 13.5 C153.69 20.03, 155.09 29.48, 154 40.5 M154 40.5 C151.9 48.31, 152.42 55.48, 140.5 54 M154 40.5 C158.58 47.05, 149.9 53.28, 140.5 54 M140.5 54 C92.73 56.56, 44.57 55.85, 13.5 54 M140.5 54 C99.1 54.72, 59.62 55.8, 13.5 54 M13.5 54 C3.64 51.47, 3.88 52.76, 0 40.5 M13.5 54 C3.28 52.41, 2.77 48.88, 0 40.5 M0 40.5 C-3.41 27.56, 0.43 19.97, 0 13.5 M0 40.5 C-1.74 30.09, -0.98 21.58, 0 13.5 M0 13.5 C1.34 3.46, 1.46 -3.49, 13.5 0 M0 13.5 C3.03 0.45, 6.07 3.66, 13.5 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(489.33333333333326 514.3888888888887) rotate(0 49 9.5)\"><text x=\"49\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">存储这条记录</text></g><g stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(526.9611864061793 495.7777777777774) rotate(0 -1.730755265804703 -32.76731269019899)\"><path d=\"M-0.27 -1.78 C0.12 -13.72, 0 -58.07, 0.41 -68.95 M-3.87 3.42 C-3.72 -6.97, -2.95 -54.93, -2.15 -66.12\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(526.9611864061793 495.7777777777774) rotate(0 -1.730755265804703 -32.76731269019899)\"><path d=\"M4.46 -38.39 C2.26 -42.51, 2.85 -47.14, -2.9 -66.91 M5.96 -39.49 C3.91 -47.53, 2.07 -55.37, -2.97 -67.2\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(526.9611864061793 495.7777777777774) rotate(0 -1.730755265804703 -32.76731269019899)\"><path d=\"M-16.05 -39.19 C-13.51 -43.08, -8.2 -47.53, -2.9 -66.91 M-14.55 -40.29 C-9.93 -47.81, -5.1 -55.39, -2.97 -67.2\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g stroke-linecap=\"round\" transform=\"translate(54.3888888888884 232.99999999999932) rotate(0 98.49999999999997 28.5)\"><path d=\"M14.25 0 M14.25 0 C78.38 -3.38, 134.75 -2.41, 182.75 0 M14.25 0 C64.81 3.59, 113.9 1.23, 182.75 0 M182.75 0 C195.67 0.21, 196.9 6.13, 197 14.25 M182.75 0 C188.16 -3.7, 200.62 2.08, 197 14.25 M197 14.25 C196.7 21.46, 196.24 27.54, 197 42.75 M197 14.25 C197.4 24.64, 198.76 34.94, 197 42.75 M197 42.75 C195.52 51.97, 194.74 61, 182.75 57 M197 42.75 C198.44 53.95, 194.09 52.48, 182.75 57 M182.75 57 C141.09 58.76, 94.28 58.09, 14.25 57 M182.75 57 C116.66 53.79, 53.06 54.36, 14.25 57 M14.25 57 C2.51 55.22, 0.37 55.7, 0 42.75 M14.25 57 C7.7 60.72, -2.38 49.94, 0 42.75 M0 42.75 C1.61 35.14, 2.81 28.04, 0 14.25 M0 42.75 C2.18 33.07, -1.43 23.87, 0 14.25 M0 14.25 C3.61 2.93, 4.27 -2.51, 14.25 0 M0 14.25 C1.43 6.72, 3.94 -0.41, 14.25 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g transform=\"translate(87.88888888888835 251.99999999999932) rotate(0 65 9.5)\"><text x=\"65\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">循环当页提交记录</text></g><g stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(154.8206469186399 177.6770234674325) rotate(0 0.3185349686685299 26.076701043304183)\"><path d=\"M-0.13 -0.37 C0.98 8.05, 3.6 42.58, 4.29 51.5 M-3.65 -3.04 C-2.45 5.79, 2.27 46.6, 3.46 55.2\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(154.8206469186399 177.6770234674325) rotate(0 0.3185349686685299 26.076701043304183)\"><path d=\"M-8.78 36.03 C-5.42 40.54, -0.57 38.94, -0.26 51.91 M-8.41 33.47 C-5.2 39.99, -0.84 45.72, 4.37 56.78\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(154.8206469186399 177.6770234674325) rotate(0 0.3185349686685299 26.076701043304183)\"><path d=\"M8.66 33.86 C8.31 38.81, 9.42 37.68, -0.26 51.91 M9.04 31.3 C6.57 38.21, 5.28 44.64, 4.37 56.78\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g mask=\"url(#mask-B-XvH6s17K3nnXY-_28km)\" stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(412.44444444444423 375.7777777777774) rotate(0 -83.27295419193706 3.372453728701089)\"><path d=\"M-2.06 1.1 C-29.78 1.95, -138.77 6.19, -166.13 7.52 M2.02 -0.78 C-26.13 0.44, -140.18 2.16, -168.57 3.13\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(412.44444444444423 375.7777777777774) rotate(0 -83.27295419193706 3.372453728701089)\"><path d=\"M-139.06 -8.31 C-147.4 -5.49, -153.74 1.12, -171.09 3.37 M-140.15 -7.35 C-151.03 -3.83, -162.8 1.33, -169.1 2.37\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(412.44444444444423 375.7777777777774) rotate(0 -83.27295419193706 3.372453728701089)\"><path d=\"M-138.58 12.2 C-147.42 8.7, -153.9 9.01, -171.09 3.37 M-139.67 13.17 C-150.65 8.7, -162.6 5.87, -169.1 2.37\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-B-XvH6s17K3nnXY-_28km\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"678.2125603864733\" height=\"482.1529406001787\"/><rect x=\"320.56038647342984\" y=\"369.465359188978\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(320.56038647342973 369.465359188978) rotate(0 8.611103779077439 9.684872317500435)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">否</text></g><g stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(169.11111111111074 386.88888888888846) rotate(0 0.1255754212662623 0.5311599435285643)\"><path d=\"M-1.94 -2.01 C-1.84 -1.87, 1.06 2.74, 0.96 2.71 M2.2 3.07 C1.98 2.33, -0.87 -0.27, -0.76 -0.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(169.11111111111074 386.88888888888846) rotate(0 0.1255754212662623 0.5311599435285643)\"><path d=\"M-0.76 -0.83 C-0.76 -0.83, -0.76 -0.83, -0.76 -0.83 M-0.76 -0.83 C-0.76 -0.83, -0.76 -0.83, -0.76 -0.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(169.11111111111074 386.88888888888846) rotate(0 0.1255754212662623 0.5311599435285643)\"><path d=\"M-0.76 -0.83 C-0.76 -0.83, -0.76 -0.83, -0.76 -0.83 M-0.76 -0.83 C-0.76 -0.83, -0.76 -0.83, -0.76 -0.83\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(420.11111111111074 99.3333333333328) rotate(0 94.5 46)\"><path d=\"M118.75 11.75 M118.75 11.75 C135.03 21.3, 149.19 30.6, 165.25 35.25 M118.75 11.75 C134.18 19.84, 152.05 28.4, 165.25 35.25 M165.25 35.25 C187.48 45.81, 185.7 50.8, 165.25 58.75 M165.25 35.25 C190 47.22, 186.22 49.04, 165.25 58.75 M165.25 58.75 C151.54 67.12, 132.58 74.51, 118.75 80.25 M165.25 58.75 C154.75 64.96, 145.4 68.12, 118.75 80.25 M118.75 80.25 C94.28 92.54, 93.31 91.04, 71.25 80.25 M118.75 80.25 C92.74 93.24, 95.8 87.97, 71.25 80.25 M71.25 80.25 C57.4 74.18, 42.08 68.79, 23.75 58.75 M71.25 80.25 C59.29 75.01, 48.22 72.31, 23.75 58.75 M23.75 58.75 C0.68 45.28, 0.96 49.41, 23.75 35.25 M23.75 58.75 C-4.55 48.6, -0.31 50.72, 23.75 35.25 M23.75 35.25 C39.63 30.01, 56.54 22.76, 71.25 11.75 M23.75 35.25 C36.36 27.73, 51.16 22.03, 71.25 11.75 M71.25 11.75 C91.68 2.98, 95.92 -3.26, 118.75 11.75 M71.25 11.75 C95.13 -0.89, 98.93 3.17, 118.75 11.75\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(465.61111111111074 135.8333333333328) rotate(0 49 9.5)\"><text x=\"49\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是否还有下页</text></g><g mask=\"url(#mask-AIvfQd-vju-X_S_dSBPaU)\" stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(516.8888888888886 100.22222222222172) rotate(0 -110.21043321811385 -31.322581191467634)\"><path d=\"M1.95 1.23 C-0.98 -8.31, 20.56 -46.86, -17.4 -57.53 C-55.37 -68.2, -191.2 -61.99, -225.85 -62.8 M-0.44 -0.57 C-3.62 -9.58, 17.79 -43.72, -18.83 -53.77 C-55.45 -63.82, -185.69 -59.69, -220.13 -60.85\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(516.8888888888886 100.22222222222172) rotate(0 -110.21043321811385 -31.322581191467634)\"><path d=\"M-190.16 -68.91 C-200.21 -70.48, -212.25 -66.55, -222.62 -59.3 M-191.22 -72.17 C-201.37 -66.88, -209.77 -66.92, -220.04 -62.38\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(516.8888888888886 100.22222222222172) rotate(0 -110.21043321811385 -31.322581191467634)\"><path d=\"M-190.22 -48.39 C-200.21 -56.23, -212.23 -58.58, -222.62 -59.3 M-191.28 -51.65 C-201.7 -52.2, -210.09 -58.07, -220.04 -62.38\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-AIvfQd-vju-X_S_dSBPaU\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"840.670309653916\" height=\"260.8790323125929\"/><rect x=\"488.99999999999955\" y=\"32.944444444444116\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(488.9999999999998 32.944444444444116) rotate(0 -82.32154432922493 35.95519658630997)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">是</text></g><g mask=\"url(#mask-CU9fllVOFQ9hv_BUEtdnP)\" stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(709.111111111111 149.11111111111086) rotate(0 -203.9724014016603 284.3480313714674)\"><path d=\"M1.47 1.85 C-4.03 88.31, 40.45 427.87, -29.35 519.32 C-99.15 610.77, -352.88 545.12, -417.34 550.53 M5.34 0.38 C-0.48 86.08, 39.39 423.61, -31.38 515.78 C-102.15 607.95, -355.35 546.88, -419.3 553.39\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(709.111111111111 149.11111111111086) rotate(0 -203.9724014016603 284.3480313714674)\"><path d=\"M-387.86 545.53 C-394.94 546.53, -407.83 550.69, -418.15 553.4 M-390.49 546.44 C-396.9 545.93, -404.31 547.57, -418.86 552.24\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(709.111111111111 149.11111111111086) rotate(0 -203.9724014016603 284.3480313714674)\"><path d=\"M-389.19 566.01 C-395.97 561.09, -408.47 559.31, -418.15 553.4 M-391.83 566.92 C-398.26 561.38, -405.35 557.96, -418.86 552.24\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask id=\"mask-CU9fllVOFQ9hv_BUEtdnP\"><rect x=\"0\" y=\"0\" fill=\"#fff\" width=\"1230.1111111111109\" height=\"800.1111111111109\"/><rect x=\"670.3788246397446\" y=\"656.2208126174994\" fill=\"#000\" width=\"18\" height=\"19\" opacity=\"1\"/></mask><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(670.3788246397444 656.2208126174996) rotate(0 -165.24011493029383 -222.76167013492136)\"><text x=\"9\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">否</text></g><g stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(602.4444444444442 144.6666666666663) rotate(0 53.916350204956984 1.7562233025888645)\"><path d=\"M-1.22 -0.92 C16.39 -0.04, 86.37 6.44, 104.07 7.41 M3.31 -3.89 C21.9 -4.1, 91.13 0.98, 109.06 2.8\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g></g><mask/><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" stroke-linecap=\"round\" transform=\"translate(54.666666666666515 787.9999999999993) rotate(0 107 27.5)\"><path d=\"M13.75 0 M13.75 0 C87.52 5.11, 154.72 3.57, 200.25 0 M13.75 0 C69.94 -1.17, 120.39 -0.6, 200.25 0 M200.25 0 C207.03 2.66, 217.32 4.98, 214 13.75 M200.25 0 C206.48 -0.5, 217.78 5.61, 214 13.75 M214 13.75 C214.97 21.16, 215.94 34.85, 214 41.25 M214 13.75 C213.24 21.11, 214.99 24.12, 214 41.25 M214 41.25 C216.9 51.08, 208.54 54.2, 200.25 55 M214 41.25 C210.64 51.13, 211.66 58.98, 200.25 55 M200.25 55 C158.88 49.84, 117.18 48.88, 13.75 55 M200.25 55 C160.04 55.32, 124.45 55.88, 13.75 55 M13.75 55 C8.02 51.2, 2.47 48.84, 0 41.25 M13.75 55 C0.75 54.33, 1.13 47.7, 0 41.25 M0 41.25 C3.44 35.46, 4.34 28.78, 0 13.75 M0 41.25 C0.1 31.79, -0.96 26.01, 0 13.75 M0 13.75 C0.83 6.06, 2.07 -2.08, 13.75 0 M0 13.75 C1.75 7.83, 1.69 -3.8, 13.75 0\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(66.66666666666652 805.9999999999993) rotate(0 95 9.5)\"><text x=\"95\" y=\"15\" font-family=\"Cascadia, Segoe UI Emoji\" font-size=\"16px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">根据规则，将记录生成 MD</text></g><g stroke-linecap=\"round\"><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(165.71746592082616 725.503082527672) rotate(0 -0.7108549617225322 28.413311323170547)\"><path d=\"M0.43 1.36 C0.75 10.84, 1.42 45.89, 1.35 54.82 M-2.78 -0.36 C-2.56 9.57, 0.17 47.65, 0.43 57.19\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(165.71746592082616 725.503082527672) rotate(0 -0.7108549617225322 28.413311323170547)\"><path d=\"M-8.78 34.34 C-11.31 39.76, -7.97 44.68, -1.84 55.08 M-10.46 29.37 C-8.94 38.42, -5.93 44.32, -1.48 58.42\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g><g stroke-opacity=\"0.9\" fill-opacity=\"0.9\" transform=\"translate(165.71746592082616 725.503082527672) rotate(0 -0.7108549617225322 28.413311323170547)\"><path d=\"M10.74 33.32 C2.73 39.09, 0.6 44.29, -1.84 55.08 M9.06 28.35 C6.28 37.32, 5.01 43.44, -1.48 58.42\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\"/></g>\n  </g>\n  <mask/>\n</svg>\n\n<p>编写完自定义 Actions 后，使用自定义 Actions。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">steps:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Release</span></span><br><span class=\"line\">    <span class=\"attr\">uses:</span> <span class=\"string\">MaLuns/add-release@指定版本</span></span><br><span class=\"line\">    <span class=\"attr\">with:</span></span><br><span class=\"line\">      <span class=\"attr\">files:</span> <span class=\"string\">Demo.zip</span></span><br><span class=\"line\">      <span class=\"attr\">generate_by_commit:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>效果图：</p>\n<p><img src=\"https://github.com/MaLuns/add-release/blob/master/demo/demo.png?raw=true\" alt=\"效果图\"></p>\n<p>到此，一个根据 Git tag 自动发布 Npm 和 Release 的工作流编写完成了。你还可以在结合 Github Pages、Vercel 等同时自动化部署你的 Npm 包的文档和示例站点等。</p>\n"},{"title":"one-wallhaven 壁纸程序","comments":1,"date":"2020-11-06T10:37:08.000Z","description":null,"keywords":"壁纸程序,electron","_content":"\n基于 Electron + vue  的一个壁纸程序\n\n<!-- more -->\n\n- gitee：https://gitee.com/ml13/wallhaven-electron\n- github：https://github.com/MaLuns/wallhaven-electron\n\n## 运行\n```\n# 安装依赖\nyarn\n\n# 运行开发模式\nnpm run serve:web\nnpm run serve:exe\n\n# 打包安装文件 \nnpm run build:web\nnpm run build:exe\n\n```\n\n## 项目结构\n```\n- build 打包图标\n- layout 前端文件\n  - public\n  - src\n- src\n  - main 主线程目录\n  - renderer 渲染线程（前端打包输出目录）\n```\n## 截图\n<img src=\"https://pan.bilnn.com/api/v3/file/sourcejump/Xm9Gtd/MwMX00DchbCDz3Wb_hv3ew**\" alt=\"首页\" />\n<img src=\"https://pan.bilnn.com/api/v3/file/sourcejump/K59mHQ/xWd46Fcu7xNtcDpTQjNmcA**\" alt=\"分类\" />\n<img src=\"https://pan.bilnn.com/api/v3/file/sourcejump/YdZXiv/kkjnhlZeH2P0XOPHaMgUYA**\" alt=\"收藏\" />\n<img src=\"https://pan.bilnn.com/api/v3/file/sourcejump/B3P4U2/o8_yKHJCTDywb0bQ-VJinQ**\" alt=\"查看\" />\n<img src=\"https://pan.bilnn.com/api/v3/file/sourcejump/Q29QFb/t-QYGpR2JC92tlyrSCAZRQ**\" alt=\"下载\" />","source":"_posts/one_wallhaven.md","raw":"---\ntitle: one-wallhaven 壁纸程序\ncomments: true\ndate: 2020-11-06 18:37:08\ntags: [electron]\ndescription:\ncategories: 创作类\nkeywords: 壁纸程序,electron\n---\n\n基于 Electron + vue  的一个壁纸程序\n\n<!-- more -->\n\n- gitee：https://gitee.com/ml13/wallhaven-electron\n- github：https://github.com/MaLuns/wallhaven-electron\n\n## 运行\n```\n# 安装依赖\nyarn\n\n# 运行开发模式\nnpm run serve:web\nnpm run serve:exe\n\n# 打包安装文件 \nnpm run build:web\nnpm run build:exe\n\n```\n\n## 项目结构\n```\n- build 打包图标\n- layout 前端文件\n  - public\n  - src\n- src\n  - main 主线程目录\n  - renderer 渲染线程（前端打包输出目录）\n```\n## 截图\n<img src=\"https://pan.bilnn.com/api/v3/file/sourcejump/Xm9Gtd/MwMX00DchbCDz3Wb_hv3ew**\" alt=\"首页\" />\n<img src=\"https://pan.bilnn.com/api/v3/file/sourcejump/K59mHQ/xWd46Fcu7xNtcDpTQjNmcA**\" alt=\"分类\" />\n<img src=\"https://pan.bilnn.com/api/v3/file/sourcejump/YdZXiv/kkjnhlZeH2P0XOPHaMgUYA**\" alt=\"收藏\" />\n<img src=\"https://pan.bilnn.com/api/v3/file/sourcejump/B3P4U2/o8_yKHJCTDywb0bQ-VJinQ**\" alt=\"查看\" />\n<img src=\"https://pan.bilnn.com/api/v3/file/sourcejump/Q29QFb/t-QYGpR2JC92tlyrSCAZRQ**\" alt=\"下载\" />","slug":"one_wallhaven","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vrx002c98lgg3rg2yzr","content":"<p>基于 Electron + vue  的一个壁纸程序</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>gitee：<a href=\"https://gitee.com/ml13/wallhaven-electron\">https://gitee.com/ml13/wallhaven-electron</a></li>\n<li>github：<a href=\"https://github.com/MaLuns/wallhaven-electron\">https://github.com/MaLuns/wallhaven-electron</a></li>\n</ul>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装依赖</span><br><span class=\"line\">yarn</span><br><span class=\"line\"></span><br><span class=\"line\"># 运行开发模式</span><br><span class=\"line\">npm run serve:web</span><br><span class=\"line\">npm run serve:exe</span><br><span class=\"line\"></span><br><span class=\"line\"># 打包安装文件 </span><br><span class=\"line\">npm run build:web</span><br><span class=\"line\">npm run build:exe</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- build 打包图标</span><br><span class=\"line\">- layout 前端文件</span><br><span class=\"line\">  - public</span><br><span class=\"line\">  - src</span><br><span class=\"line\">- src</span><br><span class=\"line\">  - main 主线程目录</span><br><span class=\"line\">  - renderer 渲染线程（前端打包输出目录）</span><br></pre></td></tr></table></figure>\n<h2 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h2><img src=\"https://pan.bilnn.com/api/v3/file/sourcejump/Xm9Gtd/MwMX00DchbCDz3Wb_hv3ew**\" alt=\"首页\"  loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n<img src=\"https://pan.bilnn.com/api/v3/file/sourcejump/K59mHQ/xWd46Fcu7xNtcDpTQjNmcA**\" alt=\"分类\"  loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n<img src=\"https://pan.bilnn.com/api/v3/file/sourcejump/YdZXiv/kkjnhlZeH2P0XOPHaMgUYA**\" alt=\"收藏\"  loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n<img src=\"https://pan.bilnn.com/api/v3/file/sourcejump/B3P4U2/o8_yKHJCTDywb0bQ-VJinQ**\" alt=\"查看\"  loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>\n<img src=\"https://pan.bilnn.com/api/v3/file/sourcejump/Q29QFb/t-QYGpR2JC92tlyrSCAZRQ**\" alt=\"下载\"  loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'/>","excerpt":"<p>基于 Electron + vue  的一个壁纸程序</p>","more":"<ul>\n<li>gitee：<a href=\"https://gitee.com/ml13/wallhaven-electron\">https://gitee.com/ml13/wallhaven-electron</a></li>\n<li>github：<a href=\"https://github.com/MaLuns/wallhaven-electron\">https://github.com/MaLuns/wallhaven-electron</a></li>\n</ul>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装依赖</span><br><span class=\"line\">yarn</span><br><span class=\"line\"></span><br><span class=\"line\"># 运行开发模式</span><br><span class=\"line\">npm run serve:web</span><br><span class=\"line\">npm run serve:exe</span><br><span class=\"line\"></span><br><span class=\"line\"># 打包安装文件 </span><br><span class=\"line\">npm run build:web</span><br><span class=\"line\">npm run build:exe</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- build 打包图标</span><br><span class=\"line\">- layout 前端文件</span><br><span class=\"line\">  - public</span><br><span class=\"line\">  - src</span><br><span class=\"line\">- src</span><br><span class=\"line\">  - main 主线程目录</span><br><span class=\"line\">  - renderer 渲染线程（前端打包输出目录）</span><br></pre></td></tr></table></figure>\n<h2 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h2><img src=\"https://pan.bilnn.com/api/v3/file/sourcejump/Xm9Gtd/MwMX00DchbCDz3Wb_hv3ew**\" alt=\"首页\" />\n<img src=\"https://pan.bilnn.com/api/v3/file/sourcejump/K59mHQ/xWd46Fcu7xNtcDpTQjNmcA**\" alt=\"分类\" />\n<img src=\"https://pan.bilnn.com/api/v3/file/sourcejump/YdZXiv/kkjnhlZeH2P0XOPHaMgUYA**\" alt=\"收藏\" />\n<img src=\"https://pan.bilnn.com/api/v3/file/sourcejump/B3P4U2/o8_yKHJCTDywb0bQ-VJinQ**\" alt=\"查看\" />\n<img src=\"https://pan.bilnn.com/api/v3/file/sourcejump/Q29QFb/t-QYGpR2JC92tlyrSCAZRQ**\" alt=\"下载\" />"},{"title":"Pjax 下动态加载插件方案","date":"2022-09-28T08:35:09.000Z","keywords":"Pjax,Swup","_content":"\n在纯静态网站里，有时候会动态更新某个区域往会选择 Pjax（swup、barba.js）去处理，他们都是使用 ajax 和 pushState 通过真正的永久链接，页面标题和后退按钮提供快速浏览体验。\n<!-- more -->\n但是实际使用中可能会遇到不同页面可能会需要加载不同插件处理，有些人可能会全量选择加载，这样会导致加载很多无用的脚本，有可能在用户关闭页面时都不一定会访问到，会很浪费资源。\n\n## 解决思路\n首先想到的肯定是在请求到新的页面后，我们手动去比较当前 DOM 和 新 DOM 之间 **script** 标签的差异，手动给他插入到 body 里。\n\n### 处理 Script\n一般来说 JavaScript 脚本都是放在 **body** 后，避免阻塞页面渲染，假设我们页面脚本也都是在 **body** 后，并在 script 添加 **[data-reload-script]** 表明哪些是需要动态加载的。\n\n首先我们直接获取到带有 **[data-reload-script]** 属性的 script 标签:\n\n``` js\n// NewHTML 为 新页面 HTML\nconst pageContent = NewHTML.replace('<body', '<div id=\"DynamicPluginBody\"').replace('</body>', '</div>');\nlet element = document.createElement('div');\nelement.innerHTML = pageContent;\nconst children = element.querySelector('#DynamicPluginBody').querySelectorAll('script[data-reload-script]');\n```\n\n然后通过创建 script 标签插入到 **body**：\n\n``` js\nchildren.forEach(item => {\n    const element = document.createElement('script');\n    for (const { name, value } of arrayify(item.attributes)) {\n        element.setAttribute(name, value);\n    }\n    element.textContent = item.textContent;\n    element.setAttribute('async', 'false');\n    document.body.insertBefore(element)\n})\n```\n如果你的插件都是通过 script 引入，且不需要执行额外的 JavaScript 代码，只需要在 Pjax 钩子函数这样处理就可以了。\n\n#### 执行代码块\n\n实际很多插件不仅仅需要你引入，还需要你手动去初始化做一些操作的。我们可以通过 **src** 去判断是引入的脚本，还是代码块。\n\n``` js\nlet scripts = Array.from(document.scripts)\nlet scriptCDN = []\nlet scriptBlock = []\n\nchildren.forEach(item => {\n    if (item.src)\n        scripts.findIndex(s => s.src === item.src) < 0 && scriptCDN.push(item);\n    else\n        scriptBlock.push(item.innerText)\n})\n```\nscriptCDN 继续通过上面方式插入到 body 里，然后通过 eval 或者 new Function 去执行 scriptBlock 。因为 scriptBlock 里的代码可能是会依赖 scriptCDN 里的插件的，所以需要在 scriptCDN 加载完成后在执行 scriptBlock 。\n\n``` js\nconst loadScript = (item) => {\n    return new Promise((resolve, reject) => {\n        const element = document.createElement('script');\n        for (const { name, value } of arrayify(item.attributes)) {\n            element.setAttribute(name, value);\n        }\n        element.textContent = item.textContent;\n        element.setAttribute('async', 'false');\n        element.onload = resolve\n        element.onerror = reject\n        document.body.insertBefore(element)\n    })\n}\n\nconst runScriptBlock = (code) => {\n    try {\n        const func = new Function(code);\n        func()\n    } catch (error) {\n        try {\n            window.eval(code)\n        } catch (error) {\n        }\n    }\n}\n\nPromise.all(scriptCDN.map(item => loadScript(item))).then(_ => {\n    scriptBlock.forEach(code => {\n        runScriptBlock(code)\n    })\n})\n```\n\n#### 卸载插件\n\n按照上面思去处理之后，会存在一个问题。 比如：我们添加了一个 全局的 'resize' 事件的监听，在跳转其他页面时候我们需要移除这个监听事件。\n\n这个时候我们需要对代码块的格式进行一个约束，比如像下面这样，在初次加载时执行 mount 里代码，页面卸载时执行 unmount 里代码。\n\n``` js\n<script data-reload-script>\n    DynamicPlugin.add({\n        // 页面加载时执行\n        mount() {\n            this.timer = setInterval(() => {\n                document.getElementById('time').innerText = new Date().toString()\n            }, 1000)\n        },\n        // 页面卸载时执行\n        unmount() {\n            window.clearInterval(this.timer)\n            this.timer = null\n        }\n    })\n</script>\n```\n\nDynamicPlugin 大致结构：\n\n\n``` js\nlet cacheMount = []\nlet cacheUnMount = []\nlet context = {}\n\nclass DynamicPlugin {\n    add(options) {\n        if (isFunction(options))\n            cacheMount.push(options)\n\n        if (isPlainObject(options)) {\n            let { mount, unmount } = options\n            if (isFunction(mount))\n                cacheMount.push(mount)\n            if (isFunction(unmount))\n                cacheUnMount.push(unmount)\n        }\n\n        // 执行当前页面加载钩子\n        this.runMount()\n    }\n\n    runMount() {\n        while (cacheMount.length) {\n            let item = cacheMount.shift();\n            item.call(context);\n        }\n    }\n\n    runUnMount() {\n        while (cacheUnMount.length) {\n            let item = cacheUnMount.shift();\n            item.call(context);\n        }\n    }\n}\n\n```\n\n页面卸载时调用 DynamicPlugin.runUnMount()。\n\n\n### 处理 Head\n\nHead 部分处理来说相对比较简单，可以通过拿到新旧两个 Head，然后循环对比每个标签的 **outerHTML**，用来判断哪些比是需要新增的哪些是需要删除的。\n\n## 结尾\n\n本文示例代码完整版本可以 [参考这里](https://github.com/MaLuns/dynamic-plugin)","source":"_posts/pjax_dynamic_plugins.md","raw":"---\ntitle:  Pjax 下动态加载插件方案\ndate: 2022-09-28 16:35:09\ntags: [Pjax]\ncategories: 记录类\nkeywords: Pjax,Swup\n---\n\n在纯静态网站里，有时候会动态更新某个区域往会选择 Pjax（swup、barba.js）去处理，他们都是使用 ajax 和 pushState 通过真正的永久链接，页面标题和后退按钮提供快速浏览体验。\n<!-- more -->\n但是实际使用中可能会遇到不同页面可能会需要加载不同插件处理，有些人可能会全量选择加载，这样会导致加载很多无用的脚本，有可能在用户关闭页面时都不一定会访问到，会很浪费资源。\n\n## 解决思路\n首先想到的肯定是在请求到新的页面后，我们手动去比较当前 DOM 和 新 DOM 之间 **script** 标签的差异，手动给他插入到 body 里。\n\n### 处理 Script\n一般来说 JavaScript 脚本都是放在 **body** 后，避免阻塞页面渲染，假设我们页面脚本也都是在 **body** 后，并在 script 添加 **[data-reload-script]** 表明哪些是需要动态加载的。\n\n首先我们直接获取到带有 **[data-reload-script]** 属性的 script 标签:\n\n``` js\n// NewHTML 为 新页面 HTML\nconst pageContent = NewHTML.replace('<body', '<div id=\"DynamicPluginBody\"').replace('</body>', '</div>');\nlet element = document.createElement('div');\nelement.innerHTML = pageContent;\nconst children = element.querySelector('#DynamicPluginBody').querySelectorAll('script[data-reload-script]');\n```\n\n然后通过创建 script 标签插入到 **body**：\n\n``` js\nchildren.forEach(item => {\n    const element = document.createElement('script');\n    for (const { name, value } of arrayify(item.attributes)) {\n        element.setAttribute(name, value);\n    }\n    element.textContent = item.textContent;\n    element.setAttribute('async', 'false');\n    document.body.insertBefore(element)\n})\n```\n如果你的插件都是通过 script 引入，且不需要执行额外的 JavaScript 代码，只需要在 Pjax 钩子函数这样处理就可以了。\n\n#### 执行代码块\n\n实际很多插件不仅仅需要你引入，还需要你手动去初始化做一些操作的。我们可以通过 **src** 去判断是引入的脚本，还是代码块。\n\n``` js\nlet scripts = Array.from(document.scripts)\nlet scriptCDN = []\nlet scriptBlock = []\n\nchildren.forEach(item => {\n    if (item.src)\n        scripts.findIndex(s => s.src === item.src) < 0 && scriptCDN.push(item);\n    else\n        scriptBlock.push(item.innerText)\n})\n```\nscriptCDN 继续通过上面方式插入到 body 里，然后通过 eval 或者 new Function 去执行 scriptBlock 。因为 scriptBlock 里的代码可能是会依赖 scriptCDN 里的插件的，所以需要在 scriptCDN 加载完成后在执行 scriptBlock 。\n\n``` js\nconst loadScript = (item) => {\n    return new Promise((resolve, reject) => {\n        const element = document.createElement('script');\n        for (const { name, value } of arrayify(item.attributes)) {\n            element.setAttribute(name, value);\n        }\n        element.textContent = item.textContent;\n        element.setAttribute('async', 'false');\n        element.onload = resolve\n        element.onerror = reject\n        document.body.insertBefore(element)\n    })\n}\n\nconst runScriptBlock = (code) => {\n    try {\n        const func = new Function(code);\n        func()\n    } catch (error) {\n        try {\n            window.eval(code)\n        } catch (error) {\n        }\n    }\n}\n\nPromise.all(scriptCDN.map(item => loadScript(item))).then(_ => {\n    scriptBlock.forEach(code => {\n        runScriptBlock(code)\n    })\n})\n```\n\n#### 卸载插件\n\n按照上面思去处理之后，会存在一个问题。 比如：我们添加了一个 全局的 'resize' 事件的监听，在跳转其他页面时候我们需要移除这个监听事件。\n\n这个时候我们需要对代码块的格式进行一个约束，比如像下面这样，在初次加载时执行 mount 里代码，页面卸载时执行 unmount 里代码。\n\n``` js\n<script data-reload-script>\n    DynamicPlugin.add({\n        // 页面加载时执行\n        mount() {\n            this.timer = setInterval(() => {\n                document.getElementById('time').innerText = new Date().toString()\n            }, 1000)\n        },\n        // 页面卸载时执行\n        unmount() {\n            window.clearInterval(this.timer)\n            this.timer = null\n        }\n    })\n</script>\n```\n\nDynamicPlugin 大致结构：\n\n\n``` js\nlet cacheMount = []\nlet cacheUnMount = []\nlet context = {}\n\nclass DynamicPlugin {\n    add(options) {\n        if (isFunction(options))\n            cacheMount.push(options)\n\n        if (isPlainObject(options)) {\n            let { mount, unmount } = options\n            if (isFunction(mount))\n                cacheMount.push(mount)\n            if (isFunction(unmount))\n                cacheUnMount.push(unmount)\n        }\n\n        // 执行当前页面加载钩子\n        this.runMount()\n    }\n\n    runMount() {\n        while (cacheMount.length) {\n            let item = cacheMount.shift();\n            item.call(context);\n        }\n    }\n\n    runUnMount() {\n        while (cacheUnMount.length) {\n            let item = cacheUnMount.shift();\n            item.call(context);\n        }\n    }\n}\n\n```\n\n页面卸载时调用 DynamicPlugin.runUnMount()。\n\n\n### 处理 Head\n\nHead 部分处理来说相对比较简单，可以通过拿到新旧两个 Head，然后循环对比每个标签的 **outerHTML**，用来判断哪些比是需要新增的哪些是需要删除的。\n\n## 结尾\n\n本文示例代码完整版本可以 [参考这里](https://github.com/MaLuns/dynamic-plugin)","slug":"pjax_dynamic_plugins","published":1,"updated":"2024-03-06T07:42:59.000Z","comments":1,"layout":"post","photos":[],"_id":"cltgz7vry002g98lga3rigk19","content":"<p>在纯静态网站里，有时候会动态更新某个区域往会选择 Pjax（swup、barba.js）去处理，他们都是使用 ajax 和 pushState 通过真正的永久链接，页面标题和后退按钮提供快速浏览体验。</p>\n<span id=\"more\"></span>\n<p>但是实际使用中可能会遇到不同页面可能会需要加载不同插件处理，有些人可能会全量选择加载，这样会导致加载很多无用的脚本，有可能在用户关闭页面时都不一定会访问到，会很浪费资源。</p>\n<h2 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h2><p>首先想到的肯定是在请求到新的页面后，我们手动去比较当前 DOM 和 新 DOM 之间 <strong>script</strong> 标签的差异，手动给他插入到 body 里。</p>\n<h3 id=\"处理-Script\"><a href=\"#处理-Script\" class=\"headerlink\" title=\"处理 Script\"></a>处理 Script</h3><p>一般来说 JavaScript 脚本都是放在 <strong>body</strong> 后，避免阻塞页面渲染，假设我们页面脚本也都是在 <strong>body</strong> 后，并在 script 添加 <strong>[data-reload-script]</strong> 表明哪些是需要动态加载的。</p>\n<p>首先我们直接获取到带有 <strong>[data-reload-script]</strong> 属性的 script 标签:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// NewHTML 为 新页面 HTML</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pageContent = <span class=\"title class_\">NewHTML</span>.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;&lt;body&#x27;</span>, <span class=\"string\">&#x27;&lt;div id=&quot;DynamicPluginBody&quot;&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;&lt;/body&gt;&#x27;</span>, <span class=\"string\">&#x27;&lt;/div&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> element = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">element.<span class=\"property\">innerHTML</span> = pageContent;</span><br><span class=\"line\"><span class=\"keyword\">const</span> children = element.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#DynamicPluginBody&#x27;</span>).<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;script[data-reload-script]&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>然后通过创建 script 标签插入到 <strong>body</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">children.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> element = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> &#123; name, value &#125; <span class=\"keyword\">of</span> <span class=\"title function_\">arrayify</span>(item.<span class=\"property\">attributes</span>)) &#123;</span><br><span class=\"line\">        element.<span class=\"title function_\">setAttribute</span>(name, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    element.<span class=\"property\">textContent</span> = item.<span class=\"property\">textContent</span>;</span><br><span class=\"line\">    element.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;async&#x27;</span>, <span class=\"string\">&#x27;false&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">insertBefore</span>(element)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>如果你的插件都是通过 script 引入，且不需要执行额外的 JavaScript 代码，只需要在 Pjax 钩子函数这样处理就可以了。</p>\n<h4 id=\"执行代码块\"><a href=\"#执行代码块\" class=\"headerlink\" title=\"执行代码块\"></a>执行代码块</h4><p>实际很多插件不仅仅需要你引入，还需要你手动去初始化做一些操作的。我们可以通过 <strong>src</strong> 去判断是引入的脚本，还是代码块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> scripts = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">scripts</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> scriptCDN = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> scriptBlock = []</span><br><span class=\"line\"></span><br><span class=\"line\">children.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.<span class=\"property\">src</span>)</span><br><span class=\"line\">        scripts.<span class=\"title function_\">findIndex</span>(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s.<span class=\"property\">src</span> === item.<span class=\"property\">src</span>) &lt; <span class=\"number\">0</span> &amp;&amp; scriptCDN.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        scriptBlock.<span class=\"title function_\">push</span>(item.<span class=\"property\">innerText</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>scriptCDN 继续通过上面方式插入到 body 里，然后通过 eval 或者 new Function 去执行 scriptBlock 。因为 scriptBlock 里的代码可能是会依赖 scriptCDN 里的插件的，所以需要在 scriptCDN 加载完成后在执行 scriptBlock 。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">loadScript</span> = (<span class=\"params\">item</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> element = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> &#123; name, value &#125; <span class=\"keyword\">of</span> <span class=\"title function_\">arrayify</span>(item.<span class=\"property\">attributes</span>)) &#123;</span><br><span class=\"line\">            element.<span class=\"title function_\">setAttribute</span>(name, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        element.<span class=\"property\">textContent</span> = item.<span class=\"property\">textContent</span>;</span><br><span class=\"line\">        element.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;async&#x27;</span>, <span class=\"string\">&#x27;false&#x27;</span>);</span><br><span class=\"line\">        element.<span class=\"property\">onload</span> = resolve</span><br><span class=\"line\">        element.<span class=\"property\">onerror</span> = reject</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">insertBefore</span>(element)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">runScriptBlock</span> = (<span class=\"params\">code</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> func = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(code);</span><br><span class=\"line\">        <span class=\"title function_\">func</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"built_in\">eval</span>(code)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(scriptCDN.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"title function_\">loadScript</span>(item))).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">    scriptBlock.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">code</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">runScriptBlock</span>(code)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"卸载插件\"><a href=\"#卸载插件\" class=\"headerlink\" title=\"卸载插件\"></a>卸载插件</h4><p>按照上面思去处理之后，会存在一个问题。 比如：我们添加了一个 全局的 ‘resize’ 事件的监听，在跳转其他页面时候我们需要移除这个监听事件。</p>\n<p>这个时候我们需要对代码块的格式进行一个约束，比如像下面这样，在初次加载时执行 mount 里代码，页面卸载时执行 unmount 里代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script data-reload-script&gt;</span><br><span class=\"line\">    <span class=\"title class_\">DynamicPlugin</span>.<span class=\"title function_\">add</span>(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 页面加载时执行</span></span><br><span class=\"line\">        <span class=\"title function_\">mount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">timer</span> = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;time&#x27;</span>).<span class=\"property\">innerText</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 页面卸载时执行</span></span><br><span class=\"line\">        <span class=\"title function_\">unmount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timer</span>)</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">timer</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>DynamicPlugin 大致结构：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cacheMount = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> cacheUnMount = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> context = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DynamicPlugin</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">add</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isFunction</span>(options))</span><br><span class=\"line\">            cacheMount.<span class=\"title function_\">push</span>(options)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isPlainObject</span>(options)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> &#123; mount, unmount &#125; = options</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isFunction</span>(mount))</span><br><span class=\"line\">                cacheMount.<span class=\"title function_\">push</span>(mount)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isFunction</span>(unmount))</span><br><span class=\"line\">                cacheUnMount.<span class=\"title function_\">push</span>(unmount)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 执行当前页面加载钩子</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">runMount</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">runMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cacheMount.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> item = cacheMount.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">            item.<span class=\"title function_\">call</span>(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">runUnMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cacheUnMount.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> item = cacheUnMount.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">            item.<span class=\"title function_\">call</span>(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>页面卸载时调用 DynamicPlugin.runUnMount()。</p>\n<h3 id=\"处理-Head\"><a href=\"#处理-Head\" class=\"headerlink\" title=\"处理 Head\"></a>处理 Head</h3><p>Head 部分处理来说相对比较简单，可以通过拿到新旧两个 Head，然后循环对比每个标签的 <strong>outerHTML</strong>，用来判断哪些比是需要新增的哪些是需要删除的。</p>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>本文示例代码完整版本可以 <a href=\"https://github.com/MaLuns/dynamic-plugin\">参考这里</a></p>\n","excerpt":"<p>在纯静态网站里，有时候会动态更新某个区域往会选择 Pjax（swup、barba.js）去处理，他们都是使用 ajax 和 pushState 通过真正的永久链接，页面标题和后退按钮提供快速浏览体验。</p>","more":"<p>但是实际使用中可能会遇到不同页面可能会需要加载不同插件处理，有些人可能会全量选择加载，这样会导致加载很多无用的脚本，有可能在用户关闭页面时都不一定会访问到，会很浪费资源。</p>\n<h2 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h2><p>首先想到的肯定是在请求到新的页面后，我们手动去比较当前 DOM 和 新 DOM 之间 <strong>script</strong> 标签的差异，手动给他插入到 body 里。</p>\n<h3 id=\"处理-Script\"><a href=\"#处理-Script\" class=\"headerlink\" title=\"处理 Script\"></a>处理 Script</h3><p>一般来说 JavaScript 脚本都是放在 <strong>body</strong> 后，避免阻塞页面渲染，假设我们页面脚本也都是在 <strong>body</strong> 后，并在 script 添加 <strong>[data-reload-script]</strong> 表明哪些是需要动态加载的。</p>\n<p>首先我们直接获取到带有 <strong>[data-reload-script]</strong> 属性的 script 标签:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// NewHTML 为 新页面 HTML</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pageContent = <span class=\"title class_\">NewHTML</span>.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;&lt;body&#x27;</span>, <span class=\"string\">&#x27;&lt;div id=&quot;DynamicPluginBody&quot;&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;&lt;/body&gt;&#x27;</span>, <span class=\"string\">&#x27;&lt;/div&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> element = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">element.<span class=\"property\">innerHTML</span> = pageContent;</span><br><span class=\"line\"><span class=\"keyword\">const</span> children = element.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#DynamicPluginBody&#x27;</span>).<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;script[data-reload-script]&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>然后通过创建 script 标签插入到 <strong>body</strong>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">children.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> element = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> &#123; name, value &#125; <span class=\"keyword\">of</span> <span class=\"title function_\">arrayify</span>(item.<span class=\"property\">attributes</span>)) &#123;</span><br><span class=\"line\">        element.<span class=\"title function_\">setAttribute</span>(name, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    element.<span class=\"property\">textContent</span> = item.<span class=\"property\">textContent</span>;</span><br><span class=\"line\">    element.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;async&#x27;</span>, <span class=\"string\">&#x27;false&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">insertBefore</span>(element)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>如果你的插件都是通过 script 引入，且不需要执行额外的 JavaScript 代码，只需要在 Pjax 钩子函数这样处理就可以了。</p>\n<h4 id=\"执行代码块\"><a href=\"#执行代码块\" class=\"headerlink\" title=\"执行代码块\"></a>执行代码块</h4><p>实际很多插件不仅仅需要你引入，还需要你手动去初始化做一些操作的。我们可以通过 <strong>src</strong> 去判断是引入的脚本，还是代码块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> scripts = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">scripts</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> scriptCDN = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> scriptBlock = []</span><br><span class=\"line\"></span><br><span class=\"line\">children.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.<span class=\"property\">src</span>)</span><br><span class=\"line\">        scripts.<span class=\"title function_\">findIndex</span>(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s.<span class=\"property\">src</span> === item.<span class=\"property\">src</span>) &lt; <span class=\"number\">0</span> &amp;&amp; scriptCDN.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        scriptBlock.<span class=\"title function_\">push</span>(item.<span class=\"property\">innerText</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>scriptCDN 继续通过上面方式插入到 body 里，然后通过 eval 或者 new Function 去执行 scriptBlock 。因为 scriptBlock 里的代码可能是会依赖 scriptCDN 里的插件的，所以需要在 scriptCDN 加载完成后在执行 scriptBlock 。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">loadScript</span> = (<span class=\"params\">item</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> element = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> &#123; name, value &#125; <span class=\"keyword\">of</span> <span class=\"title function_\">arrayify</span>(item.<span class=\"property\">attributes</span>)) &#123;</span><br><span class=\"line\">            element.<span class=\"title function_\">setAttribute</span>(name, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        element.<span class=\"property\">textContent</span> = item.<span class=\"property\">textContent</span>;</span><br><span class=\"line\">        element.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;async&#x27;</span>, <span class=\"string\">&#x27;false&#x27;</span>);</span><br><span class=\"line\">        element.<span class=\"property\">onload</span> = resolve</span><br><span class=\"line\">        element.<span class=\"property\">onerror</span> = reject</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">insertBefore</span>(element)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">runScriptBlock</span> = (<span class=\"params\">code</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> func = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(code);</span><br><span class=\"line\">        <span class=\"title function_\">func</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"built_in\">eval</span>(code)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(scriptCDN.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"title function_\">loadScript</span>(item))).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> &#123;</span><br><span class=\"line\">    scriptBlock.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">code</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">runScriptBlock</span>(code)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"卸载插件\"><a href=\"#卸载插件\" class=\"headerlink\" title=\"卸载插件\"></a>卸载插件</h4><p>按照上面思去处理之后，会存在一个问题。 比如：我们添加了一个 全局的 ‘resize’ 事件的监听，在跳转其他页面时候我们需要移除这个监听事件。</p>\n<p>这个时候我们需要对代码块的格式进行一个约束，比如像下面这样，在初次加载时执行 mount 里代码，页面卸载时执行 unmount 里代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script data-reload-script&gt;</span><br><span class=\"line\">    <span class=\"title class_\">DynamicPlugin</span>.<span class=\"title function_\">add</span>(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 页面加载时执行</span></span><br><span class=\"line\">        <span class=\"title function_\">mount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">timer</span> = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;time&#x27;</span>).<span class=\"property\">innerText</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">            &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// 页面卸载时执行</span></span><br><span class=\"line\">        <span class=\"title function_\">unmount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timer</span>)</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">timer</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>DynamicPlugin 大致结构：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> cacheMount = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> cacheUnMount = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> context = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DynamicPlugin</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">add</span>(<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isFunction</span>(options))</span><br><span class=\"line\">            cacheMount.<span class=\"title function_\">push</span>(options)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isPlainObject</span>(options)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> &#123; mount, unmount &#125; = options</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isFunction</span>(mount))</span><br><span class=\"line\">                cacheMount.<span class=\"title function_\">push</span>(mount)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isFunction</span>(unmount))</span><br><span class=\"line\">                cacheUnMount.<span class=\"title function_\">push</span>(unmount)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 执行当前页面加载钩子</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">runMount</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">runMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cacheMount.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> item = cacheMount.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">            item.<span class=\"title function_\">call</span>(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">runUnMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cacheUnMount.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> item = cacheUnMount.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">            item.<span class=\"title function_\">call</span>(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>页面卸载时调用 DynamicPlugin.runUnMount()。</p>\n<h3 id=\"处理-Head\"><a href=\"#处理-Head\" class=\"headerlink\" title=\"处理 Head\"></a>处理 Head</h3><p>Head 部分处理来说相对比较简单，可以通过拿到新旧两个 Head，然后循环对比每个标签的 <strong>outerHTML</strong>，用来判断哪些比是需要新增的哪些是需要删除的。</p>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>本文示例代码完整版本可以 <a href=\"https://github.com/MaLuns/dynamic-plugin\">参考这里</a></p>"},{"title":"续费域名了","comment":true,"date":"2021-11-09T11:29:24.000Z","description":null,"keywords":"域名续费","_content":"\n八月份的时候就看到域名要涨价了，想着续费来自，忙了一阵忘记这茬了。再想起了就现在了，血亏了一波。\n<!-- more -->\n![域名续费](/images/posts/renew_domains/pic_1636458264700.png)\n直接续到了 2030 年，刚续费完，忘记还有代金券没用，😭又血亏了一波。","source":"_posts/renew_domains.md","raw":"---\ntitle: 续费域名了\ncomment: true\ndate: 2021-11-09 19:29:24\ntags:\ndescription:\ncategories: 记录类\nkeywords: 域名续费\n---\n\n八月份的时候就看到域名要涨价了，想着续费来自，忙了一阵忘记这茬了。再想起了就现在了，血亏了一波。\n<!-- more -->\n![域名续费](/images/posts/renew_domains/pic_1636458264700.png)\n直接续到了 2030 年，刚续费完，忘记还有代金券没用，😭又血亏了一波。","slug":"renew_domains","published":1,"updated":"2024-03-06T07:42:59.000Z","comments":1,"layout":"post","photos":[],"_id":"cltgz7vrz002j98lg737kaosg","content":"<p>八月份的时候就看到域名要涨价了，想着续费来自，忙了一阵忘记这茬了。再想起了就现在了，血亏了一波。</p>\n<span id=\"more\"></span>\n<p><img src=\"/images/posts/renew_domains/pic_1636458264700.png\" alt=\"域名续费\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><br>直接续到了 2030 年，刚续费完，忘记还有代金券没用，😭又血亏了一波。</p>\n","excerpt":"<p>八月份的时候就看到域名要涨价了，想着续费来自，忙了一阵忘记这茬了。再想起了就现在了，血亏了一波。</p>","more":"<p><img src=\"/images/posts/renew_domains/pic_1636458264700.png\" alt=\"域名续费\"><br>直接续到了 2030 年，刚续费完，忘记还有代金券没用，😭又血亏了一波。</p>"},{"title":"uni-app 使用体验","comment":true,"date":"2023-07-21T13:46:13.000Z","description":null,"keywords":"uniapp","toc":false,"_content":"\n一句话总结就是，坑是真的多，填完一个坑等着你的就是下个坑。\n\n<!-- more -->\n\n## 缘起\n\n因为所在项目组属于生活服务类相关的，需要做电影、蛋糕、打车、加油、车票、酒店等一系列的板块，需要嵌入在其他项目的 app 、小程序、h5 中。我们需要提供 H5 和 小程序双端服务，由于每个项目周期又短，为了节省开发周期时间，所以选了 uni-app 来开发。\n\n## 初识\n\nuni-app 使用上，基本上和普通 vue 开发差不多，只要避免直接使用 web api 就可以，捋一遍文档基本可以上手了。踩得的第一个坑来了，由于我入职时第一个板块已经开始做了，项目使用 HBuilderX 创建的。HBuilderX 创建的项目只能使用 HBuilderX 启动，HBuilderX 这东西也不好用，只能再开个 vscode 开发了，开发阶段也没觉得啥，无非多开发编辑器多占点内存。\n\n等测试阶段傻眼了，HBuilderX 创建项目只能再 HBuilderX 构建发布，没法集成到现有 CI/CD 上去，再 HBuilderX 打包就打包吧，这玩意还强制登陆，一个编辑器不登陆还不让打包。搜索了一下，还是有方法将 HBuilderX 创建项目转换成 cli 形式的，不过由于项目模块导入方式混用，无法无痛切换过去，项目也快上线，于是就没有去折腾了，在下一个项目去切换到 cli 方式。\n\n## 生态\n\nuni-app 有自己插件市场，有很多现成的插件可以用。但是呢当你去下载插件是骚操作来了，首先是强制需要你登陆，然后登陆后还需要你强制看广告才能下载，这波骚操作真的是骚。有些作者希望整点插件赚点外快，可以收费下载可以理解，但是别人免费开源的插件，uni-app 还强制你扫码看广告是真的恶心了。\n\nuni-app 一直都在加新功能，对于 bug 处理速度真的是慢，官方论坛一大堆没人回复的问题，一个劲的堆新功能，bug 没见修复多少，bug 全留着当传家宝了。HBuilderX 也是有点离谱，第一次在开发者工具里边看到招聘广告的，只能说 newb 了。\n\n## 踩坑\n\n### 定位\n\n#### 在 H5 中 uni.getLocation，内部抛出异常，没做处理，导致无法捕获到，也不会进入 fail 回调，导致无法得知定位失败。比如 地图 key ip 定位超上限， navigator.geolocation 定位失败等。\n\n解决方式：\n\nh5 端自己对 navigator.geolocation 封装，其他端使用 uni.getLocation。或者对 uni.getLocation 进行封装增加超时设置，超过几秒未返回，返回默认定位点。自己封装 navigator.geolocation 需要做好坐标转换，应该浏览器默认返回是 wgs84 ，需要自己转换为 gcj02 或其他的坐标系。\n\n#### 定时失败时候，只要你配置了地图 key，就会使用对应地图服务商 ip 定位。因为正常情况下前端的地图的 key 只需有地图绘制相关功能使用，不需要包含地图服务商 WebService API 功能的， 为了避免盗刷也不会将 WebService API 的 key 存放在前端，这就导致你使用 uni-app 的 map 组件，就会使用 ip 定位，但你的 key 并不支持。\n\n解决方式：\n\n和上面处理方式一样，最直接就是自己封装 h5 定位，将 ip 定位地址，替换成自己服务器地址作为代理。\n\n#### uni.openLocation 在 vue3 + ts 中，H5 端是以组件形式存在的，不想其他 vue2 是以路由形式存在，看内部实现并没有监听路由变化卸载组件，会导致通过浏览时返回上一页时，组件还是覆盖在页面上。\n\n解决方式：\n\n自定义查看位置组件，在 H5 端替换掉 uni-app 的。\n\n### map 渲染问题\n\n#### uni-app 的 map 封装了一些覆盖物绘制属性。比如绘制多边形区域绘制，如果在地图绘制前就已经给 map 的 polygons 属性设置了数据，第一次打开页面不会生效。避免这种情况出现，需要在地图渲染后在设置这些数据，但是在 updated 事件触发后立即设置也会出现问题，这种情况在第一打开页面时生效，第二次进入时候会出现不生效情况，未找到出现这种问题原因。\n\n解决方式：\nupdated 事件后，再加入定时器延迟执行绘制操作。\n\n### 嵌套渲染\n\n#### 有多个 v-for 嵌套渲染时候， 内层的 v-for 上的点击事件在小程序中无法触发。\n\n解决方式：\n将部分 v-for 拆分成组件形式，避免页面上 v-for 嵌套过多。\n\n### 其他\n\n### 组件差异性\n\n有些组件会在不同平台出现不同差异效果，需要你慢慢去踩坑填坑，一个个的趟过去。比如 popup 组件，小程序会出现滚动透传问题，而在 h5 上做了兼容处理，但是如果你打开后，未关闭直接跳转到新的页面，会导致新的页面无法滚动，需要在路由变化时关闭当前页面里的 popup 组件，这种问题真的是只能自己遇到一个填一个了。\n\n### 文档混乱\n\nuni-app 做了很多平台封装保证 api 的一致性，但是还是会经常写着发现平台不支持，只能自己另辟蹊径。\n\n## 结语\n\n由于没有 app 需求，不知道在 app 上坑多不多，据以前同事使用体验来看据说坑更多🤣。不过对于一些简单应用可以尝试使用，毕竟能一套代码构建多端还是能提升不少效率的。但是你的应用复杂起来，什么多端开发，提高效率，这玩意效率真的不一定能高到哪里去，还不如分开效率高.\n\n","source":"_posts/uniapp.md","raw":"---\ntitle: uni-app 使用体验\ncomment: true\ndate: 2023-07-21 21:46:13\ntags:\ndescription:\ncategories: 记录类\nkeywords: uniapp\ntoc: false\n---\n\n一句话总结就是，坑是真的多，填完一个坑等着你的就是下个坑。\n\n<!-- more -->\n\n## 缘起\n\n因为所在项目组属于生活服务类相关的，需要做电影、蛋糕、打车、加油、车票、酒店等一系列的板块，需要嵌入在其他项目的 app 、小程序、h5 中。我们需要提供 H5 和 小程序双端服务，由于每个项目周期又短，为了节省开发周期时间，所以选了 uni-app 来开发。\n\n## 初识\n\nuni-app 使用上，基本上和普通 vue 开发差不多，只要避免直接使用 web api 就可以，捋一遍文档基本可以上手了。踩得的第一个坑来了，由于我入职时第一个板块已经开始做了，项目使用 HBuilderX 创建的。HBuilderX 创建的项目只能使用 HBuilderX 启动，HBuilderX 这东西也不好用，只能再开个 vscode 开发了，开发阶段也没觉得啥，无非多开发编辑器多占点内存。\n\n等测试阶段傻眼了，HBuilderX 创建项目只能再 HBuilderX 构建发布，没法集成到现有 CI/CD 上去，再 HBuilderX 打包就打包吧，这玩意还强制登陆，一个编辑器不登陆还不让打包。搜索了一下，还是有方法将 HBuilderX 创建项目转换成 cli 形式的，不过由于项目模块导入方式混用，无法无痛切换过去，项目也快上线，于是就没有去折腾了，在下一个项目去切换到 cli 方式。\n\n## 生态\n\nuni-app 有自己插件市场，有很多现成的插件可以用。但是呢当你去下载插件是骚操作来了，首先是强制需要你登陆，然后登陆后还需要你强制看广告才能下载，这波骚操作真的是骚。有些作者希望整点插件赚点外快，可以收费下载可以理解，但是别人免费开源的插件，uni-app 还强制你扫码看广告是真的恶心了。\n\nuni-app 一直都在加新功能，对于 bug 处理速度真的是慢，官方论坛一大堆没人回复的问题，一个劲的堆新功能，bug 没见修复多少，bug 全留着当传家宝了。HBuilderX 也是有点离谱，第一次在开发者工具里边看到招聘广告的，只能说 newb 了。\n\n## 踩坑\n\n### 定位\n\n#### 在 H5 中 uni.getLocation，内部抛出异常，没做处理，导致无法捕获到，也不会进入 fail 回调，导致无法得知定位失败。比如 地图 key ip 定位超上限， navigator.geolocation 定位失败等。\n\n解决方式：\n\nh5 端自己对 navigator.geolocation 封装，其他端使用 uni.getLocation。或者对 uni.getLocation 进行封装增加超时设置，超过几秒未返回，返回默认定位点。自己封装 navigator.geolocation 需要做好坐标转换，应该浏览器默认返回是 wgs84 ，需要自己转换为 gcj02 或其他的坐标系。\n\n#### 定时失败时候，只要你配置了地图 key，就会使用对应地图服务商 ip 定位。因为正常情况下前端的地图的 key 只需有地图绘制相关功能使用，不需要包含地图服务商 WebService API 功能的， 为了避免盗刷也不会将 WebService API 的 key 存放在前端，这就导致你使用 uni-app 的 map 组件，就会使用 ip 定位，但你的 key 并不支持。\n\n解决方式：\n\n和上面处理方式一样，最直接就是自己封装 h5 定位，将 ip 定位地址，替换成自己服务器地址作为代理。\n\n#### uni.openLocation 在 vue3 + ts 中，H5 端是以组件形式存在的，不想其他 vue2 是以路由形式存在，看内部实现并没有监听路由变化卸载组件，会导致通过浏览时返回上一页时，组件还是覆盖在页面上。\n\n解决方式：\n\n自定义查看位置组件，在 H5 端替换掉 uni-app 的。\n\n### map 渲染问题\n\n#### uni-app 的 map 封装了一些覆盖物绘制属性。比如绘制多边形区域绘制，如果在地图绘制前就已经给 map 的 polygons 属性设置了数据，第一次打开页面不会生效。避免这种情况出现，需要在地图渲染后在设置这些数据，但是在 updated 事件触发后立即设置也会出现问题，这种情况在第一打开页面时生效，第二次进入时候会出现不生效情况，未找到出现这种问题原因。\n\n解决方式：\nupdated 事件后，再加入定时器延迟执行绘制操作。\n\n### 嵌套渲染\n\n#### 有多个 v-for 嵌套渲染时候， 内层的 v-for 上的点击事件在小程序中无法触发。\n\n解决方式：\n将部分 v-for 拆分成组件形式，避免页面上 v-for 嵌套过多。\n\n### 其他\n\n### 组件差异性\n\n有些组件会在不同平台出现不同差异效果，需要你慢慢去踩坑填坑，一个个的趟过去。比如 popup 组件，小程序会出现滚动透传问题，而在 h5 上做了兼容处理，但是如果你打开后，未关闭直接跳转到新的页面，会导致新的页面无法滚动，需要在路由变化时关闭当前页面里的 popup 组件，这种问题真的是只能自己遇到一个填一个了。\n\n### 文档混乱\n\nuni-app 做了很多平台封装保证 api 的一致性，但是还是会经常写着发现平台不支持，只能自己另辟蹊径。\n\n## 结语\n\n由于没有 app 需求，不知道在 app 上坑多不多，据以前同事使用体验来看据说坑更多🤣。不过对于一些简单应用可以尝试使用，毕竟能一套代码构建多端还是能提升不少效率的。但是你的应用复杂起来，什么多端开发，提高效率，这玩意效率真的不一定能高到哪里去，还不如分开效率高.\n\n","slug":"uniapp","published":1,"updated":"2024-03-06T07:42:59.000Z","comments":1,"layout":"post","photos":[],"_id":"cltgz7vs1002n98lgaupg3bz2","content":"<p>一句话总结就是，坑是真的多，填完一个坑等着你的就是下个坑。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h2><p>因为所在项目组属于生活服务类相关的，需要做电影、蛋糕、打车、加油、车票、酒店等一系列的板块，需要嵌入在其他项目的 app 、小程序、h5 中。我们需要提供 H5 和 小程序双端服务，由于每个项目周期又短，为了节省开发周期时间，所以选了 uni-app 来开发。</p>\n<h2 id=\"初识\"><a href=\"#初识\" class=\"headerlink\" title=\"初识\"></a>初识</h2><p>uni-app 使用上，基本上和普通 vue 开发差不多，只要避免直接使用 web api 就可以，捋一遍文档基本可以上手了。踩得的第一个坑来了，由于我入职时第一个板块已经开始做了，项目使用 HBuilderX 创建的。HBuilderX 创建的项目只能使用 HBuilderX 启动，HBuilderX 这东西也不好用，只能再开个 vscode 开发了，开发阶段也没觉得啥，无非多开发编辑器多占点内存。</p>\n<p>等测试阶段傻眼了，HBuilderX 创建项目只能再 HBuilderX 构建发布，没法集成到现有 CI&#x2F;CD 上去，再 HBuilderX 打包就打包吧，这玩意还强制登陆，一个编辑器不登陆还不让打包。搜索了一下，还是有方法将 HBuilderX 创建项目转换成 cli 形式的，不过由于项目模块导入方式混用，无法无痛切换过去，项目也快上线，于是就没有去折腾了，在下一个项目去切换到 cli 方式。</p>\n<h2 id=\"生态\"><a href=\"#生态\" class=\"headerlink\" title=\"生态\"></a>生态</h2><p>uni-app 有自己插件市场，有很多现成的插件可以用。但是呢当你去下载插件是骚操作来了，首先是强制需要你登陆，然后登陆后还需要你强制看广告才能下载，这波骚操作真的是骚。有些作者希望整点插件赚点外快，可以收费下载可以理解，但是别人免费开源的插件，uni-app 还强制你扫码看广告是真的恶心了。</p>\n<p>uni-app 一直都在加新功能，对于 bug 处理速度真的是慢，官方论坛一大堆没人回复的问题，一个劲的堆新功能，bug 没见修复多少，bug 全留着当传家宝了。HBuilderX 也是有点离谱，第一次在开发者工具里边看到招聘广告的，只能说 newb 了。</p>\n<h2 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h2><h3 id=\"定位\"><a href=\"#定位\" class=\"headerlink\" title=\"定位\"></a>定位</h3><h4 id=\"在-H5-中-uni-getLocation，内部抛出异常，没做处理，导致无法捕获到，也不会进入-fail-回调，导致无法得知定位失败。比如-地图-key-ip-定位超上限，-navigator-geolocation-定位失败等。\"><a href=\"#在-H5-中-uni-getLocation，内部抛出异常，没做处理，导致无法捕获到，也不会进入-fail-回调，导致无法得知定位失败。比如-地图-key-ip-定位超上限，-navigator-geolocation-定位失败等。\" class=\"headerlink\" title=\"在 H5 中 uni.getLocation，内部抛出异常，没做处理，导致无法捕获到，也不会进入 fail 回调，导致无法得知定位失败。比如 地图 key ip 定位超上限， navigator.geolocation 定位失败等。\"></a>在 H5 中 uni.getLocation，内部抛出异常，没做处理，导致无法捕获到，也不会进入 fail 回调，导致无法得知定位失败。比如 地图 key ip 定位超上限， navigator.geolocation 定位失败等。</h4><p>解决方式：</p>\n<p>h5 端自己对 navigator.geolocation 封装，其他端使用 uni.getLocation。或者对 uni.getLocation 进行封装增加超时设置，超过几秒未返回，返回默认定位点。自己封装 navigator.geolocation 需要做好坐标转换，应该浏览器默认返回是 wgs84 ，需要自己转换为 gcj02 或其他的坐标系。</p>\n<h4 id=\"定时失败时候，只要你配置了地图-key，就会使用对应地图服务商-ip-定位。因为正常情况下前端的地图的-key-只需有地图绘制相关功能使用，不需要包含地图服务商-WebService-API-功能的，-为了避免盗刷也不会将-WebService-API-的-key-存放在前端，这就导致你使用-uni-app-的-map-组件，就会使用-ip-定位，但你的-key-并不支持。\"><a href=\"#定时失败时候，只要你配置了地图-key，就会使用对应地图服务商-ip-定位。因为正常情况下前端的地图的-key-只需有地图绘制相关功能使用，不需要包含地图服务商-WebService-API-功能的，-为了避免盗刷也不会将-WebService-API-的-key-存放在前端，这就导致你使用-uni-app-的-map-组件，就会使用-ip-定位，但你的-key-并不支持。\" class=\"headerlink\" title=\"定时失败时候，只要你配置了地图 key，就会使用对应地图服务商 ip 定位。因为正常情况下前端的地图的 key 只需有地图绘制相关功能使用，不需要包含地图服务商 WebService API 功能的， 为了避免盗刷也不会将 WebService API 的 key 存放在前端，这就导致你使用 uni-app 的 map 组件，就会使用 ip 定位，但你的 key 并不支持。\"></a>定时失败时候，只要你配置了地图 key，就会使用对应地图服务商 ip 定位。因为正常情况下前端的地图的 key 只需有地图绘制相关功能使用，不需要包含地图服务商 WebService API 功能的， 为了避免盗刷也不会将 WebService API 的 key 存放在前端，这就导致你使用 uni-app 的 map 组件，就会使用 ip 定位，但你的 key 并不支持。</h4><p>解决方式：</p>\n<p>和上面处理方式一样，最直接就是自己封装 h5 定位，将 ip 定位地址，替换成自己服务器地址作为代理。</p>\n<h4 id=\"uni-openLocation-在-vue3-ts-中，H5-端是以组件形式存在的，不想其他-vue2-是以路由形式存在，看内部实现并没有监听路由变化卸载组件，会导致通过浏览时返回上一页时，组件还是覆盖在页面上。\"><a href=\"#uni-openLocation-在-vue3-ts-中，H5-端是以组件形式存在的，不想其他-vue2-是以路由形式存在，看内部实现并没有监听路由变化卸载组件，会导致通过浏览时返回上一页时，组件还是覆盖在页面上。\" class=\"headerlink\" title=\"uni.openLocation 在 vue3 + ts 中，H5 端是以组件形式存在的，不想其他 vue2 是以路由形式存在，看内部实现并没有监听路由变化卸载组件，会导致通过浏览时返回上一页时，组件还是覆盖在页面上。\"></a>uni.openLocation 在 vue3 + ts 中，H5 端是以组件形式存在的，不想其他 vue2 是以路由形式存在，看内部实现并没有监听路由变化卸载组件，会导致通过浏览时返回上一页时，组件还是覆盖在页面上。</h4><p>解决方式：</p>\n<p>自定义查看位置组件，在 H5 端替换掉 uni-app 的。</p>\n<h3 id=\"map-渲染问题\"><a href=\"#map-渲染问题\" class=\"headerlink\" title=\"map 渲染问题\"></a>map 渲染问题</h3><h4 id=\"uni-app-的-map-封装了一些覆盖物绘制属性。比如绘制多边形区域绘制，如果在地图绘制前就已经给-map-的-polygons-属性设置了数据，第一次打开页面不会生效。避免这种情况出现，需要在地图渲染后在设置这些数据，但是在-updated-事件触发后立即设置也会出现问题，这种情况在第一打开页面时生效，第二次进入时候会出现不生效情况，未找到出现这种问题原因。\"><a href=\"#uni-app-的-map-封装了一些覆盖物绘制属性。比如绘制多边形区域绘制，如果在地图绘制前就已经给-map-的-polygons-属性设置了数据，第一次打开页面不会生效。避免这种情况出现，需要在地图渲染后在设置这些数据，但是在-updated-事件触发后立即设置也会出现问题，这种情况在第一打开页面时生效，第二次进入时候会出现不生效情况，未找到出现这种问题原因。\" class=\"headerlink\" title=\"uni-app 的 map 封装了一些覆盖物绘制属性。比如绘制多边形区域绘制，如果在地图绘制前就已经给 map 的 polygons 属性设置了数据，第一次打开页面不会生效。避免这种情况出现，需要在地图渲染后在设置这些数据，但是在 updated 事件触发后立即设置也会出现问题，这种情况在第一打开页面时生效，第二次进入时候会出现不生效情况，未找到出现这种问题原因。\"></a>uni-app 的 map 封装了一些覆盖物绘制属性。比如绘制多边形区域绘制，如果在地图绘制前就已经给 map 的 polygons 属性设置了数据，第一次打开页面不会生效。避免这种情况出现，需要在地图渲染后在设置这些数据，但是在 updated 事件触发后立即设置也会出现问题，这种情况在第一打开页面时生效，第二次进入时候会出现不生效情况，未找到出现这种问题原因。</h4><p>解决方式：<br>updated 事件后，再加入定时器延迟执行绘制操作。</p>\n<h3 id=\"嵌套渲染\"><a href=\"#嵌套渲染\" class=\"headerlink\" title=\"嵌套渲染\"></a>嵌套渲染</h3><h4 id=\"有多个-v-for-嵌套渲染时候，-内层的-v-for-上的点击事件在小程序中无法触发。\"><a href=\"#有多个-v-for-嵌套渲染时候，-内层的-v-for-上的点击事件在小程序中无法触发。\" class=\"headerlink\" title=\"有多个 v-for 嵌套渲染时候， 内层的 v-for 上的点击事件在小程序中无法触发。\"></a>有多个 v-for 嵌套渲染时候， 内层的 v-for 上的点击事件在小程序中无法触发。</h4><p>解决方式：<br>将部分 v-for 拆分成组件形式，避免页面上 v-for 嵌套过多。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h3 id=\"组件差异性\"><a href=\"#组件差异性\" class=\"headerlink\" title=\"组件差异性\"></a>组件差异性</h3><p>有些组件会在不同平台出现不同差异效果，需要你慢慢去踩坑填坑，一个个的趟过去。比如 popup 组件，小程序会出现滚动透传问题，而在 h5 上做了兼容处理，但是如果你打开后，未关闭直接跳转到新的页面，会导致新的页面无法滚动，需要在路由变化时关闭当前页面里的 popup 组件，这种问题真的是只能自己遇到一个填一个了。</p>\n<h3 id=\"文档混乱\"><a href=\"#文档混乱\" class=\"headerlink\" title=\"文档混乱\"></a>文档混乱</h3><p>uni-app 做了很多平台封装保证 api 的一致性，但是还是会经常写着发现平台不支持，只能自己另辟蹊径。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>由于没有 app 需求，不知道在 app 上坑多不多，据以前同事使用体验来看据说坑更多🤣。不过对于一些简单应用可以尝试使用，毕竟能一套代码构建多端还是能提升不少效率的。但是你的应用复杂起来，什么多端开发，提高效率，这玩意效率真的不一定能高到哪里去，还不如分开效率高.</p>\n","excerpt":"<p>一句话总结就是，坑是真的多，填完一个坑等着你的就是下个坑。</p>","more":"<h2 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h2><p>因为所在项目组属于生活服务类相关的，需要做电影、蛋糕、打车、加油、车票、酒店等一系列的板块，需要嵌入在其他项目的 app 、小程序、h5 中。我们需要提供 H5 和 小程序双端服务，由于每个项目周期又短，为了节省开发周期时间，所以选了 uni-app 来开发。</p>\n<h2 id=\"初识\"><a href=\"#初识\" class=\"headerlink\" title=\"初识\"></a>初识</h2><p>uni-app 使用上，基本上和普通 vue 开发差不多，只要避免直接使用 web api 就可以，捋一遍文档基本可以上手了。踩得的第一个坑来了，由于我入职时第一个板块已经开始做了，项目使用 HBuilderX 创建的。HBuilderX 创建的项目只能使用 HBuilderX 启动，HBuilderX 这东西也不好用，只能再开个 vscode 开发了，开发阶段也没觉得啥，无非多开发编辑器多占点内存。</p>\n<p>等测试阶段傻眼了，HBuilderX 创建项目只能再 HBuilderX 构建发布，没法集成到现有 CI&#x2F;CD 上去，再 HBuilderX 打包就打包吧，这玩意还强制登陆，一个编辑器不登陆还不让打包。搜索了一下，还是有方法将 HBuilderX 创建项目转换成 cli 形式的，不过由于项目模块导入方式混用，无法无痛切换过去，项目也快上线，于是就没有去折腾了，在下一个项目去切换到 cli 方式。</p>\n<h2 id=\"生态\"><a href=\"#生态\" class=\"headerlink\" title=\"生态\"></a>生态</h2><p>uni-app 有自己插件市场，有很多现成的插件可以用。但是呢当你去下载插件是骚操作来了，首先是强制需要你登陆，然后登陆后还需要你强制看广告才能下载，这波骚操作真的是骚。有些作者希望整点插件赚点外快，可以收费下载可以理解，但是别人免费开源的插件，uni-app 还强制你扫码看广告是真的恶心了。</p>\n<p>uni-app 一直都在加新功能，对于 bug 处理速度真的是慢，官方论坛一大堆没人回复的问题，一个劲的堆新功能，bug 没见修复多少，bug 全留着当传家宝了。HBuilderX 也是有点离谱，第一次在开发者工具里边看到招聘广告的，只能说 newb 了。</p>\n<h2 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h2><h3 id=\"定位\"><a href=\"#定位\" class=\"headerlink\" title=\"定位\"></a>定位</h3><h4 id=\"在-H5-中-uni-getLocation，内部抛出异常，没做处理，导致无法捕获到，也不会进入-fail-回调，导致无法得知定位失败。比如-地图-key-ip-定位超上限，-navigator-geolocation-定位失败等。\"><a href=\"#在-H5-中-uni-getLocation，内部抛出异常，没做处理，导致无法捕获到，也不会进入-fail-回调，导致无法得知定位失败。比如-地图-key-ip-定位超上限，-navigator-geolocation-定位失败等。\" class=\"headerlink\" title=\"在 H5 中 uni.getLocation，内部抛出异常，没做处理，导致无法捕获到，也不会进入 fail 回调，导致无法得知定位失败。比如 地图 key ip 定位超上限， navigator.geolocation 定位失败等。\"></a>在 H5 中 uni.getLocation，内部抛出异常，没做处理，导致无法捕获到，也不会进入 fail 回调，导致无法得知定位失败。比如 地图 key ip 定位超上限， navigator.geolocation 定位失败等。</h4><p>解决方式：</p>\n<p>h5 端自己对 navigator.geolocation 封装，其他端使用 uni.getLocation。或者对 uni.getLocation 进行封装增加超时设置，超过几秒未返回，返回默认定位点。自己封装 navigator.geolocation 需要做好坐标转换，应该浏览器默认返回是 wgs84 ，需要自己转换为 gcj02 或其他的坐标系。</p>\n<h4 id=\"定时失败时候，只要你配置了地图-key，就会使用对应地图服务商-ip-定位。因为正常情况下前端的地图的-key-只需有地图绘制相关功能使用，不需要包含地图服务商-WebService-API-功能的，-为了避免盗刷也不会将-WebService-API-的-key-存放在前端，这就导致你使用-uni-app-的-map-组件，就会使用-ip-定位，但你的-key-并不支持。\"><a href=\"#定时失败时候，只要你配置了地图-key，就会使用对应地图服务商-ip-定位。因为正常情况下前端的地图的-key-只需有地图绘制相关功能使用，不需要包含地图服务商-WebService-API-功能的，-为了避免盗刷也不会将-WebService-API-的-key-存放在前端，这就导致你使用-uni-app-的-map-组件，就会使用-ip-定位，但你的-key-并不支持。\" class=\"headerlink\" title=\"定时失败时候，只要你配置了地图 key，就会使用对应地图服务商 ip 定位。因为正常情况下前端的地图的 key 只需有地图绘制相关功能使用，不需要包含地图服务商 WebService API 功能的， 为了避免盗刷也不会将 WebService API 的 key 存放在前端，这就导致你使用 uni-app 的 map 组件，就会使用 ip 定位，但你的 key 并不支持。\"></a>定时失败时候，只要你配置了地图 key，就会使用对应地图服务商 ip 定位。因为正常情况下前端的地图的 key 只需有地图绘制相关功能使用，不需要包含地图服务商 WebService API 功能的， 为了避免盗刷也不会将 WebService API 的 key 存放在前端，这就导致你使用 uni-app 的 map 组件，就会使用 ip 定位，但你的 key 并不支持。</h4><p>解决方式：</p>\n<p>和上面处理方式一样，最直接就是自己封装 h5 定位，将 ip 定位地址，替换成自己服务器地址作为代理。</p>\n<h4 id=\"uni-openLocation-在-vue3-ts-中，H5-端是以组件形式存在的，不想其他-vue2-是以路由形式存在，看内部实现并没有监听路由变化卸载组件，会导致通过浏览时返回上一页时，组件还是覆盖在页面上。\"><a href=\"#uni-openLocation-在-vue3-ts-中，H5-端是以组件形式存在的，不想其他-vue2-是以路由形式存在，看内部实现并没有监听路由变化卸载组件，会导致通过浏览时返回上一页时，组件还是覆盖在页面上。\" class=\"headerlink\" title=\"uni.openLocation 在 vue3 + ts 中，H5 端是以组件形式存在的，不想其他 vue2 是以路由形式存在，看内部实现并没有监听路由变化卸载组件，会导致通过浏览时返回上一页时，组件还是覆盖在页面上。\"></a>uni.openLocation 在 vue3 + ts 中，H5 端是以组件形式存在的，不想其他 vue2 是以路由形式存在，看内部实现并没有监听路由变化卸载组件，会导致通过浏览时返回上一页时，组件还是覆盖在页面上。</h4><p>解决方式：</p>\n<p>自定义查看位置组件，在 H5 端替换掉 uni-app 的。</p>\n<h3 id=\"map-渲染问题\"><a href=\"#map-渲染问题\" class=\"headerlink\" title=\"map 渲染问题\"></a>map 渲染问题</h3><h4 id=\"uni-app-的-map-封装了一些覆盖物绘制属性。比如绘制多边形区域绘制，如果在地图绘制前就已经给-map-的-polygons-属性设置了数据，第一次打开页面不会生效。避免这种情况出现，需要在地图渲染后在设置这些数据，但是在-updated-事件触发后立即设置也会出现问题，这种情况在第一打开页面时生效，第二次进入时候会出现不生效情况，未找到出现这种问题原因。\"><a href=\"#uni-app-的-map-封装了一些覆盖物绘制属性。比如绘制多边形区域绘制，如果在地图绘制前就已经给-map-的-polygons-属性设置了数据，第一次打开页面不会生效。避免这种情况出现，需要在地图渲染后在设置这些数据，但是在-updated-事件触发后立即设置也会出现问题，这种情况在第一打开页面时生效，第二次进入时候会出现不生效情况，未找到出现这种问题原因。\" class=\"headerlink\" title=\"uni-app 的 map 封装了一些覆盖物绘制属性。比如绘制多边形区域绘制，如果在地图绘制前就已经给 map 的 polygons 属性设置了数据，第一次打开页面不会生效。避免这种情况出现，需要在地图渲染后在设置这些数据，但是在 updated 事件触发后立即设置也会出现问题，这种情况在第一打开页面时生效，第二次进入时候会出现不生效情况，未找到出现这种问题原因。\"></a>uni-app 的 map 封装了一些覆盖物绘制属性。比如绘制多边形区域绘制，如果在地图绘制前就已经给 map 的 polygons 属性设置了数据，第一次打开页面不会生效。避免这种情况出现，需要在地图渲染后在设置这些数据，但是在 updated 事件触发后立即设置也会出现问题，这种情况在第一打开页面时生效，第二次进入时候会出现不生效情况，未找到出现这种问题原因。</h4><p>解决方式：<br>updated 事件后，再加入定时器延迟执行绘制操作。</p>\n<h3 id=\"嵌套渲染\"><a href=\"#嵌套渲染\" class=\"headerlink\" title=\"嵌套渲染\"></a>嵌套渲染</h3><h4 id=\"有多个-v-for-嵌套渲染时候，-内层的-v-for-上的点击事件在小程序中无法触发。\"><a href=\"#有多个-v-for-嵌套渲染时候，-内层的-v-for-上的点击事件在小程序中无法触发。\" class=\"headerlink\" title=\"有多个 v-for 嵌套渲染时候， 内层的 v-for 上的点击事件在小程序中无法触发。\"></a>有多个 v-for 嵌套渲染时候， 内层的 v-for 上的点击事件在小程序中无法触发。</h4><p>解决方式：<br>将部分 v-for 拆分成组件形式，避免页面上 v-for 嵌套过多。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h3 id=\"组件差异性\"><a href=\"#组件差异性\" class=\"headerlink\" title=\"组件差异性\"></a>组件差异性</h3><p>有些组件会在不同平台出现不同差异效果，需要你慢慢去踩坑填坑，一个个的趟过去。比如 popup 组件，小程序会出现滚动透传问题，而在 h5 上做了兼容处理，但是如果你打开后，未关闭直接跳转到新的页面，会导致新的页面无法滚动，需要在路由变化时关闭当前页面里的 popup 组件，这种问题真的是只能自己遇到一个填一个了。</p>\n<h3 id=\"文档混乱\"><a href=\"#文档混乱\" class=\"headerlink\" title=\"文档混乱\"></a>文档混乱</h3><p>uni-app 做了很多平台封装保证 api 的一致性，但是还是会经常写着发现平台不支持，只能自己另辟蹊径。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>由于没有 app 需求，不知道在 app 上坑多不多，据以前同事使用体验来看据说坑更多🤣。不过对于一些简单应用可以尝试使用，毕竟能一套代码构建多端还是能提升不少效率的。但是你的应用复杂起来，什么多端开发，提高效率，这玩意效率真的不一定能高到哪里去，还不如分开效率高.</p>"},{"title":"云开发又又又涨价了","comment":true,"date":"2022-07-13T08:44:24.000Z","description":null,"keywords":"云开发","_content":"\n之前一波搞没了免费额度，这次直接要回收以前开通免费版的资源了。搞成基础套餐+按量计费模式，直接最低39.9块一个月。用不起了，腾讯是真TM的狗。\n<!-- more -->\n![公告](/images/posts/cloudbase_comment_two/pic_1657700995751.png)\n超出基础后，价格比原来也翻了好多倍。\n![价格](/images/posts/cloudbase_comment_two/pic_1657701583297.png)\n准备关了评论插件，换图床了，之前图床用的云存储，还不让整个文件下载，简直无语子了。","source":"_posts/txgdx.md","raw":"---\ntitle: 云开发又又又涨价了\ncomment: true\ndate: 2022-07-13 16:44:24\ntags:\ndescription:\ncategories: 记录类\nkeywords: 云开发\n---\n\n之前一波搞没了免费额度，这次直接要回收以前开通免费版的资源了。搞成基础套餐+按量计费模式，直接最低39.9块一个月。用不起了，腾讯是真TM的狗。\n<!-- more -->\n![公告](/images/posts/cloudbase_comment_two/pic_1657700995751.png)\n超出基础后，价格比原来也翻了好多倍。\n![价格](/images/posts/cloudbase_comment_two/pic_1657701583297.png)\n准备关了评论插件，换图床了，之前图床用的云存储，还不让整个文件下载，简直无语子了。","slug":"txgdx","published":1,"updated":"2024-03-06T07:42:59.000Z","comments":1,"layout":"post","photos":[],"_id":"cltgz7vs3002q98lg67ojhl7j","content":"<p>之前一波搞没了免费额度，这次直接要回收以前开通免费版的资源了。搞成基础套餐+按量计费模式，直接最低39.9块一个月。用不起了，腾讯是真TM的狗。</p>\n<span id=\"more\"></span>\n<p><img src=\"/images/posts/cloudbase_comment_two/pic_1657700995751.png\" alt=\"公告\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><br>超出基础后，价格比原来也翻了好多倍。<br><img src=\"/images/posts/cloudbase_comment_two/pic_1657701583297.png\" alt=\"价格\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><br>准备关了评论插件，换图床了，之前图床用的云存储，还不让整个文件下载，简直无语子了。</p>\n","excerpt":"<p>之前一波搞没了免费额度，这次直接要回收以前开通免费版的资源了。搞成基础套餐+按量计费模式，直接最低39.9块一个月。用不起了，腾讯是真TM的狗。</p>","more":"<p><img src=\"/images/posts/cloudbase_comment_two/pic_1657700995751.png\" alt=\"公告\"><br>超出基础后，价格比原来也翻了好多倍。<br><img src=\"/images/posts/cloudbase_comment_two/pic_1657701583297.png\" alt=\"价格\"><br>准备关了评论插件，换图床了，之前图床用的云存储，还不让整个文件下载，简直无语子了。</p>"},{"title":"VS Code 插件开发指北 (一)","comments":1,"date":"2021-06-12T15:20:59.000Z","description":null,"keywords":"vscode插件,vscode教程","_content":"最近闲来无事，给公司框架做了开发代码片段提示和一些常用工具整合的插，在这里记录一下踩过的坑和一些常用的基本功能示例。\n<!-- more -->\n## 插件能做什么\n因为 VS Code 是基于 Electron 的，所以一般 node 能做的一般基本上都是可以是现实。如果你想对 VS Code 做些个性化的配置，你可以开发自定义主题、图标主题、欢迎页面、自定义左侧的面板（例如资源管理器栏那种）等。你还可以自己定义命令、快捷键、自动补全、菜单等来提升你的开发效率。甚至你可以对现有语言做扩展或者定义新的语言的支持。\n\n## 创建插件项目\n首先安装官方的脚手架\n\n```js\n// 安装脚手架\nnpm install -g yo generator-code\n\n// 创建项目\nyo code \n// 会一路提示你 输入插件名 插件id 等等。根据需要填写\n```\n微软提供了两种方式去开发，一种是 JavaScript 和 TypeScript 去开发，可以根据自己的习惯选择。创建好后按 F5 会打开调试用的 VS Code 窗口来调试插件\n\n使用 JavaScript 生成的项目结构，\n├── .vscode\n│   ├── launch.json     // 插件加载和调试的配置\n│   └── tasks.json      // 配置TypeScript编译任务\n├── .gitignore          // 忽略构建输出和node_modules文件\n├── README.md           // 插件文档\n├── CHANGELOG.md        // 插件更新日志\n├── extension.ts        // 插件源代码\n├── package.json        // 插件配置清单\n├── jsconfig.json       // \n\n先看下入口文件，入口文件需要导出两个函数 activate 和 deactivate\n``` js\n//extension.js 文件\n\n// 插件激活调用，也是插件的入口\nfunction activate(context) {\n    console.log('Congratulations, your extension \"vscode-demo\" is now active!');\n\n    // 注册一个命令\n    let disposable = vscode.commands.registerCommand('vscode-demo.helloWorld', function () {\n        //命令触发是调用\n        vscode.window.showInformationMessage('Hello World from vscode-demo!');\n    });\n\n    context.subscriptions.push(disposable);\n}\n\n// 插件销毁调用\nfunction deactivate() {}\n\nmodule.exports = {\n    activate,\n    deactivate\n}\n```\n\n这个初始化插件项目，默认就是注册了个 hello world 命令，然后运行命令显示 hello world 的通知，按F5运行项目，在命令面板输入 hello world，可以看到右下角弹出通知\n![项目结构](/images/posts/vscode_extension/20210615205632.png)\n![项目结构](/images/posts/vscode_extension/20210615205655.png)\n\n## 配置说明\nvscode 插件的 package.json 是 npm 的一个超集，插件的图标、命令注册、菜单配置、语言注册、主题注册、代码片段等一系列的都需要在这个文件里配置。\n\n``` json\n// package.json\n\n{\n    \"name\": \"vscode-demo\",\n    \"displayName\": \"vscode-demo\",\n    \"description\": \"\",\n    \"version\": \"0.0.1\",\n    \"publisher\": \"\", //发布者id，后面会讲怎么发布到插件市场\n    \"engines\": { //vscode 最低版本\n        \"vscode\": \"^1.57.0\"\n    },\n    \"categories\": [ //插件市场的分类 可以设置成语言主题等其他类型\n        \"Other\"\n    ],\n    \"activationEvents\": [ //扩展的激活事件\n        \"onCommand:vscode-demo.helloWorld\", //调用命令时激活\n        \"onLanguage:python\", //py时激活插件\n        \"workspaceContains:**/.editorconfig\",// 文件夹打开时激活\n        \"onDebug\",//调试前激活\n        ...\n        \"*\" //启动时候激活，使用这个不需要设置其他的\n    ],\n    \"main\": \"./extension.js\", //指定插件入口文件\n    \"icon\": \"\", //插件图标\n    \"contributes\": { //大部分的配置都要在这里配置\n        \"commands\":[], //配置命令,如果需要暴露给用户使用的需要在这里配置\n        \"menus\":[], //配置菜单\n        \"submenus\":[], //配置子菜单会用到\n        \"languages\": [], //配置语言\n        \"grammars\":[], //为语言配置TextMate语法\n        \"keybindings\":[], //配置快捷键\n        \"snippets\":[], //配置代码片段\n        \"themes\":[], //配置主题\n        \"views\":[], //配置活动栏视图\n        \"viewsWelcome\":[], //配置左侧视图欢迎页\n        \"viewsContainers\":[], //配置视图容器\n        \"configuration\":{},  //配置插件配置\n        \"configurationDefaults\":{}, //配置插件默认配置\n        \"colors\":{},\n        \"problemMatchers\":{},\n        \"taskDefinitions\":{},\n        \"typescriptServerPlugins\":{}\n    },\n}\n```\n\n## 命令示例\n一般提供给被人使用的功能都是通过命令注册，在命令的回调函数里处理相关功能逻辑，然后就可以在 VS Code 的命令面板调用相关命令。你也可以注册快捷键、菜单等和命令绑定在一起来触发命令。VS Code 内部含有大量和编辑器交互、控制UI、后台操作的内置命令给我们使用。\n\n### 注册命令\nvscode 在 commands 下提供了 **registerCommand** 和 **registerTextEditorCommand**用来注册命令，registerTextEditorCommand 注册的命令只会在编辑器激活的时候才调用。\n\n``` javascript\n// 在activate函数注册命令\n\ncontext.subscriptions.push(\n    // 第一个参数为命令ID,第二次参数命令回调函数\n    vscode.commands.registerCommand('vscode-demo.currentText', function () {\n        // 获取当前激活的编辑器\n        let currentEditor = vscode.window.activeTextEditor; \n        // 获取编辑器选择的内容\n        console.log(currentEditor.document.getText(currentEditor.selection));\n    })\n);\n```\n\n命令注册后默认是不会对外提供的，如果需要提供给用户使用还需要在 **package.json** 的 **contributes.commands** 添加相应配置\n\n``` json\n// package.json\n{\n    \"contributes\": {\n        \"commands\": [\n            {\n                \"command\": \"vscode-demo.currentText\",\n                \"title\": \"获取选择文本\"\n            }\n        ]\n    }\n}\n```\n\n按住 F5 运行插件，在命令面板输入 *获取选择文本* ，会发现报错了。是因为 **activationEvents** 配置里只配置了 \"onCommand:vscode-demo.helloWorld\" 才会激活插件，我们需要把新加的命令也加入进去，或者改为 *\n\n``` json\n// package.json\n{\n    activationEvents: [ \"*\" ]\n}\n```\n\n### 执行命令\n在 commands 提供了 **executeCommand** API用来调用命令，可以使用它调用我们插件里的命令，也可以调用 VS Code 内置的命令。\n使用示例\n``` js\n// 调用\nvscode.commands.executeCommand('vscode-demo.helloWorld')\n```\n\n## 菜单示例\npackage.json 中的 **contributes.menus** 用来的配置菜单项，下面这些编辑器可以配置菜单的地方。\n\n- 全局命令面板 - commandPalette\n- 资源管理器上下文菜单 - explorer/context\n- 编辑器上下文菜单 - editor/context\n- 编辑器标题栏 - editor/title\n- 编辑器标题上下文菜单 - editor/title/context\n- 调试栈视图的上下文菜单 - debug/callstack/context\n- 视图的标题菜单 - view/title\n- 视图项的菜单 - view/item/context\n- SCM 标题菜单 - scm/title\n- SCM 资源组 - scm/resourceGroup/context\n- SCM 资源 - scm/resource/context\n- SCM 改变标题 - scm/change/title\n\n配置菜单需要提供，选中菜单时执行的命令和菜单出现的条件。\n``` json\n{\n    \"command\": \"命令\",\n    \"when\": \"条件\",\n    \"alt\": \"可选命令\",\n    \"group\": \"菜单分组\",\n    \"submenu\": \"配置二级菜单\",\n    \"icon\": \"图标\"\n}\n```\n\n###  控制命令面板的命令\n默认情况下注册的命令都会显示在命令面板中，有时候需要更具条件显示，就可以在 **commandPalette** 配置指定命令然后通过 **when** 控制。\n``` json\n// package.json\n{\n    \"contributes\": {\n        \"commands\": [\n            {\n                \"command\": \"vscode-demo.currentText\",\n                \"title\": \"获取选择文本\"\n            }\n        ],\n        \"menus\": {\n            \"commandPalette\": [\n                {\n                    \"command\": \"vscode-demo.currentText\",\n                    \"title\": \"获取选择文本\",\n                    \"when\": \"editorHasSelection\" // 只有选择文本才显示\n                }\n            ]\n        }\n    },\n}\n```\n\n### when 条件\nwhen 提供的逻辑操作符有 ==、!=、||、&&、!、=\\~(正则)、>、>=、<、<=、in 等操作符，和js的类似，多了一个 **=~** 符匹配正则。VS Code 还提供了很多上下文可以和这些操作符组合使用。[查看上下文详情](https://code.visualstudio.com/api/references/when-clause-contexts)\n示例\n```\n\"when\":\"resourceExtname != .js\" //不是js文件时\n\"when\":\"editorHasSelection\" //选择文本才显示\n\"when\":\"!editorHasSelection\" //不选择文本才显示\n```\n\n\n### 配置多级菜单\n使用 **submenu** 指定父级菜单的ID，**submenus** 配置父级菜单名称等信息。\n``` json\n{\n    \"contributes\": {\n        \"menus\": {\n            \"editor/context\": [\n                {\n                    \"command\": \"vscode-demo.currentText\"\n                },\n                {\n                    \"submenu\": \"first.menu\"\n                }\n            ],\n            \"first.menu\": [\n                {\n                    \"command\": \"vscode-demo.currentText\"\n                },\n                {\n                    \"submenu\": \"two.menu\"\n                }\n            ],\n            \"two.menu\": [\n                {\n                    \"command\": \"vscode-demo.currentText\"\n                }\n            ],\n        },\n        \"submenus\": [\n            {\n                \"id\": \"first.menu\",\n                \"label\": \"一级菜单\"\n            },\n            {\n                \"id\": \"two.menu\",\n                \"label\": \"二级菜单\"\n            }\n        ]\n    },\n}\n```\n![示例](/images/posts/vscode_extension/20210616211914.png)\n\n### 分组排序\n菜单项可以通过组来分类。根据下列默认规则，然后按照字母排序，\n\n- 编辑器上下文菜单(editor/context)默认有这些分组：\n    - navigation - navigation组始终在最上方。\n    - 1_modification - 紧接上一个组，这个组包含可以修改你代码的命令。\n    - 9_cutcopypaste - 然后是基础编辑命令。\n    - z_commands - 最后一个分组则是命令面板入口。\n- 资源管理器上下文菜单(explorer/context)默认有下列分组：\n    - navigation - 在VS Code 中导航的相关命令。navigation 组始终在最上方。\n    - 2_workspace - 和工作区操作相关的命令。\n    - 3_compare - 比较文件和diff相关的命令。\n    - 4_search - 在搜索视图中和搜索相关的命令。\n    - 5_cutcopypaste - 和剪切、复制、粘贴文件相关的命令。\n    - 7_modification - 修改文件的相关命令。\n- 编辑器标签菜单默认有下列分组\n    - 1_close - 和关闭编辑器相关的命令。\n    - 3_preview - 和固定编辑器相关的命令。\n- 编辑器标题栏(editor/title)的默认分组\n    - 1_diff - 与使用差异编辑器相关的命令。\n    - 3_open - 与打开编辑器相关的命令。\n    - 5_close - 与关闭编辑器相关的命令。\n\n组内的菜单顺序取决于标题或者序号属性。菜单的组内顺序由@<number>加到 group 值的后面得以确定：\n``` json\n\"editor/title\": [{\n    \"when\": \"editorHasSelection\",\n    \"command\": \"extension.Command\",\n    \"group\": \"myGroup@1\"\n}]\n```\n\n## 注册快捷键\n快捷键还是比较简单的，Windows 和Linux 是 key 指定，macOS 使用 mac 指定的快捷键。\n``` json\n\"contributes\": {\n    \"keybindings\": [{\n        \"command\": \"vscode-demo.currentText\", //快捷键绑定命令\n        \"key\": \"ctrl+f1\", \n        \"mac\": \"cmd+f1\",\n        \"when\": \"editorHasSelection\" // 出现时机\n    }]\n}\n```\n设置好后，使用了对应命令的菜单项也会显示对应快捷键，如图所示\n![示例](/images/posts/vscode_extension/20210616230737.png)","source":"_posts/vscode_extension.md","raw":"---\ntitle: VS Code 插件开发指北 (一)\ncomments: true\ndate: 2021-06-12 23:20:59\ntags: [vscode]\ndescription:\ncategories: 记录类\nkeywords: vscode插件,vscode教程\n---\n最近闲来无事，给公司框架做了开发代码片段提示和一些常用工具整合的插，在这里记录一下踩过的坑和一些常用的基本功能示例。\n<!-- more -->\n## 插件能做什么\n因为 VS Code 是基于 Electron 的，所以一般 node 能做的一般基本上都是可以是现实。如果你想对 VS Code 做些个性化的配置，你可以开发自定义主题、图标主题、欢迎页面、自定义左侧的面板（例如资源管理器栏那种）等。你还可以自己定义命令、快捷键、自动补全、菜单等来提升你的开发效率。甚至你可以对现有语言做扩展或者定义新的语言的支持。\n\n## 创建插件项目\n首先安装官方的脚手架\n\n```js\n// 安装脚手架\nnpm install -g yo generator-code\n\n// 创建项目\nyo code \n// 会一路提示你 输入插件名 插件id 等等。根据需要填写\n```\n微软提供了两种方式去开发，一种是 JavaScript 和 TypeScript 去开发，可以根据自己的习惯选择。创建好后按 F5 会打开调试用的 VS Code 窗口来调试插件\n\n使用 JavaScript 生成的项目结构，\n├── .vscode\n│   ├── launch.json     // 插件加载和调试的配置\n│   └── tasks.json      // 配置TypeScript编译任务\n├── .gitignore          // 忽略构建输出和node_modules文件\n├── README.md           // 插件文档\n├── CHANGELOG.md        // 插件更新日志\n├── extension.ts        // 插件源代码\n├── package.json        // 插件配置清单\n├── jsconfig.json       // \n\n先看下入口文件，入口文件需要导出两个函数 activate 和 deactivate\n``` js\n//extension.js 文件\n\n// 插件激活调用，也是插件的入口\nfunction activate(context) {\n    console.log('Congratulations, your extension \"vscode-demo\" is now active!');\n\n    // 注册一个命令\n    let disposable = vscode.commands.registerCommand('vscode-demo.helloWorld', function () {\n        //命令触发是调用\n        vscode.window.showInformationMessage('Hello World from vscode-demo!');\n    });\n\n    context.subscriptions.push(disposable);\n}\n\n// 插件销毁调用\nfunction deactivate() {}\n\nmodule.exports = {\n    activate,\n    deactivate\n}\n```\n\n这个初始化插件项目，默认就是注册了个 hello world 命令，然后运行命令显示 hello world 的通知，按F5运行项目，在命令面板输入 hello world，可以看到右下角弹出通知\n![项目结构](/images/posts/vscode_extension/20210615205632.png)\n![项目结构](/images/posts/vscode_extension/20210615205655.png)\n\n## 配置说明\nvscode 插件的 package.json 是 npm 的一个超集，插件的图标、命令注册、菜单配置、语言注册、主题注册、代码片段等一系列的都需要在这个文件里配置。\n\n``` json\n// package.json\n\n{\n    \"name\": \"vscode-demo\",\n    \"displayName\": \"vscode-demo\",\n    \"description\": \"\",\n    \"version\": \"0.0.1\",\n    \"publisher\": \"\", //发布者id，后面会讲怎么发布到插件市场\n    \"engines\": { //vscode 最低版本\n        \"vscode\": \"^1.57.0\"\n    },\n    \"categories\": [ //插件市场的分类 可以设置成语言主题等其他类型\n        \"Other\"\n    ],\n    \"activationEvents\": [ //扩展的激活事件\n        \"onCommand:vscode-demo.helloWorld\", //调用命令时激活\n        \"onLanguage:python\", //py时激活插件\n        \"workspaceContains:**/.editorconfig\",// 文件夹打开时激活\n        \"onDebug\",//调试前激活\n        ...\n        \"*\" //启动时候激活，使用这个不需要设置其他的\n    ],\n    \"main\": \"./extension.js\", //指定插件入口文件\n    \"icon\": \"\", //插件图标\n    \"contributes\": { //大部分的配置都要在这里配置\n        \"commands\":[], //配置命令,如果需要暴露给用户使用的需要在这里配置\n        \"menus\":[], //配置菜单\n        \"submenus\":[], //配置子菜单会用到\n        \"languages\": [], //配置语言\n        \"grammars\":[], //为语言配置TextMate语法\n        \"keybindings\":[], //配置快捷键\n        \"snippets\":[], //配置代码片段\n        \"themes\":[], //配置主题\n        \"views\":[], //配置活动栏视图\n        \"viewsWelcome\":[], //配置左侧视图欢迎页\n        \"viewsContainers\":[], //配置视图容器\n        \"configuration\":{},  //配置插件配置\n        \"configurationDefaults\":{}, //配置插件默认配置\n        \"colors\":{},\n        \"problemMatchers\":{},\n        \"taskDefinitions\":{},\n        \"typescriptServerPlugins\":{}\n    },\n}\n```\n\n## 命令示例\n一般提供给被人使用的功能都是通过命令注册，在命令的回调函数里处理相关功能逻辑，然后就可以在 VS Code 的命令面板调用相关命令。你也可以注册快捷键、菜单等和命令绑定在一起来触发命令。VS Code 内部含有大量和编辑器交互、控制UI、后台操作的内置命令给我们使用。\n\n### 注册命令\nvscode 在 commands 下提供了 **registerCommand** 和 **registerTextEditorCommand**用来注册命令，registerTextEditorCommand 注册的命令只会在编辑器激活的时候才调用。\n\n``` javascript\n// 在activate函数注册命令\n\ncontext.subscriptions.push(\n    // 第一个参数为命令ID,第二次参数命令回调函数\n    vscode.commands.registerCommand('vscode-demo.currentText', function () {\n        // 获取当前激活的编辑器\n        let currentEditor = vscode.window.activeTextEditor; \n        // 获取编辑器选择的内容\n        console.log(currentEditor.document.getText(currentEditor.selection));\n    })\n);\n```\n\n命令注册后默认是不会对外提供的，如果需要提供给用户使用还需要在 **package.json** 的 **contributes.commands** 添加相应配置\n\n``` json\n// package.json\n{\n    \"contributes\": {\n        \"commands\": [\n            {\n                \"command\": \"vscode-demo.currentText\",\n                \"title\": \"获取选择文本\"\n            }\n        ]\n    }\n}\n```\n\n按住 F5 运行插件，在命令面板输入 *获取选择文本* ，会发现报错了。是因为 **activationEvents** 配置里只配置了 \"onCommand:vscode-demo.helloWorld\" 才会激活插件，我们需要把新加的命令也加入进去，或者改为 *\n\n``` json\n// package.json\n{\n    activationEvents: [ \"*\" ]\n}\n```\n\n### 执行命令\n在 commands 提供了 **executeCommand** API用来调用命令，可以使用它调用我们插件里的命令，也可以调用 VS Code 内置的命令。\n使用示例\n``` js\n// 调用\nvscode.commands.executeCommand('vscode-demo.helloWorld')\n```\n\n## 菜单示例\npackage.json 中的 **contributes.menus** 用来的配置菜单项，下面这些编辑器可以配置菜单的地方。\n\n- 全局命令面板 - commandPalette\n- 资源管理器上下文菜单 - explorer/context\n- 编辑器上下文菜单 - editor/context\n- 编辑器标题栏 - editor/title\n- 编辑器标题上下文菜单 - editor/title/context\n- 调试栈视图的上下文菜单 - debug/callstack/context\n- 视图的标题菜单 - view/title\n- 视图项的菜单 - view/item/context\n- SCM 标题菜单 - scm/title\n- SCM 资源组 - scm/resourceGroup/context\n- SCM 资源 - scm/resource/context\n- SCM 改变标题 - scm/change/title\n\n配置菜单需要提供，选中菜单时执行的命令和菜单出现的条件。\n``` json\n{\n    \"command\": \"命令\",\n    \"when\": \"条件\",\n    \"alt\": \"可选命令\",\n    \"group\": \"菜单分组\",\n    \"submenu\": \"配置二级菜单\",\n    \"icon\": \"图标\"\n}\n```\n\n###  控制命令面板的命令\n默认情况下注册的命令都会显示在命令面板中，有时候需要更具条件显示，就可以在 **commandPalette** 配置指定命令然后通过 **when** 控制。\n``` json\n// package.json\n{\n    \"contributes\": {\n        \"commands\": [\n            {\n                \"command\": \"vscode-demo.currentText\",\n                \"title\": \"获取选择文本\"\n            }\n        ],\n        \"menus\": {\n            \"commandPalette\": [\n                {\n                    \"command\": \"vscode-demo.currentText\",\n                    \"title\": \"获取选择文本\",\n                    \"when\": \"editorHasSelection\" // 只有选择文本才显示\n                }\n            ]\n        }\n    },\n}\n```\n\n### when 条件\nwhen 提供的逻辑操作符有 ==、!=、||、&&、!、=\\~(正则)、>、>=、<、<=、in 等操作符，和js的类似，多了一个 **=~** 符匹配正则。VS Code 还提供了很多上下文可以和这些操作符组合使用。[查看上下文详情](https://code.visualstudio.com/api/references/when-clause-contexts)\n示例\n```\n\"when\":\"resourceExtname != .js\" //不是js文件时\n\"when\":\"editorHasSelection\" //选择文本才显示\n\"when\":\"!editorHasSelection\" //不选择文本才显示\n```\n\n\n### 配置多级菜单\n使用 **submenu** 指定父级菜单的ID，**submenus** 配置父级菜单名称等信息。\n``` json\n{\n    \"contributes\": {\n        \"menus\": {\n            \"editor/context\": [\n                {\n                    \"command\": \"vscode-demo.currentText\"\n                },\n                {\n                    \"submenu\": \"first.menu\"\n                }\n            ],\n            \"first.menu\": [\n                {\n                    \"command\": \"vscode-demo.currentText\"\n                },\n                {\n                    \"submenu\": \"two.menu\"\n                }\n            ],\n            \"two.menu\": [\n                {\n                    \"command\": \"vscode-demo.currentText\"\n                }\n            ],\n        },\n        \"submenus\": [\n            {\n                \"id\": \"first.menu\",\n                \"label\": \"一级菜单\"\n            },\n            {\n                \"id\": \"two.menu\",\n                \"label\": \"二级菜单\"\n            }\n        ]\n    },\n}\n```\n![示例](/images/posts/vscode_extension/20210616211914.png)\n\n### 分组排序\n菜单项可以通过组来分类。根据下列默认规则，然后按照字母排序，\n\n- 编辑器上下文菜单(editor/context)默认有这些分组：\n    - navigation - navigation组始终在最上方。\n    - 1_modification - 紧接上一个组，这个组包含可以修改你代码的命令。\n    - 9_cutcopypaste - 然后是基础编辑命令。\n    - z_commands - 最后一个分组则是命令面板入口。\n- 资源管理器上下文菜单(explorer/context)默认有下列分组：\n    - navigation - 在VS Code 中导航的相关命令。navigation 组始终在最上方。\n    - 2_workspace - 和工作区操作相关的命令。\n    - 3_compare - 比较文件和diff相关的命令。\n    - 4_search - 在搜索视图中和搜索相关的命令。\n    - 5_cutcopypaste - 和剪切、复制、粘贴文件相关的命令。\n    - 7_modification - 修改文件的相关命令。\n- 编辑器标签菜单默认有下列分组\n    - 1_close - 和关闭编辑器相关的命令。\n    - 3_preview - 和固定编辑器相关的命令。\n- 编辑器标题栏(editor/title)的默认分组\n    - 1_diff - 与使用差异编辑器相关的命令。\n    - 3_open - 与打开编辑器相关的命令。\n    - 5_close - 与关闭编辑器相关的命令。\n\n组内的菜单顺序取决于标题或者序号属性。菜单的组内顺序由@<number>加到 group 值的后面得以确定：\n``` json\n\"editor/title\": [{\n    \"when\": \"editorHasSelection\",\n    \"command\": \"extension.Command\",\n    \"group\": \"myGroup@1\"\n}]\n```\n\n## 注册快捷键\n快捷键还是比较简单的，Windows 和Linux 是 key 指定，macOS 使用 mac 指定的快捷键。\n``` json\n\"contributes\": {\n    \"keybindings\": [{\n        \"command\": \"vscode-demo.currentText\", //快捷键绑定命令\n        \"key\": \"ctrl+f1\", \n        \"mac\": \"cmd+f1\",\n        \"when\": \"editorHasSelection\" // 出现时机\n    }]\n}\n```\n设置好后，使用了对应命令的菜单项也会显示对应快捷键，如图所示\n![示例](/images/posts/vscode_extension/20210616230737.png)","slug":"vscode_extension","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vs7002t98lgdmzy381l","content":"<p>最近闲来无事，给公司框架做了开发代码片段提示和一些常用工具整合的插，在这里记录一下踩过的坑和一些常用的基本功能示例。</p>\n<span id=\"more\"></span>\n<h2 id=\"插件能做什么\"><a href=\"#插件能做什么\" class=\"headerlink\" title=\"插件能做什么\"></a>插件能做什么</h2><p>因为 VS Code 是基于 Electron 的，所以一般 node 能做的一般基本上都是可以是现实。如果你想对 VS Code 做些个性化的配置，你可以开发自定义主题、图标主题、欢迎页面、自定义左侧的面板（例如资源管理器栏那种）等。你还可以自己定义命令、快捷键、自动补全、菜单等来提升你的开发效率。甚至你可以对现有语言做扩展或者定义新的语言的支持。</p>\n<h2 id=\"创建插件项目\"><a href=\"#创建插件项目\" class=\"headerlink\" title=\"创建插件项目\"></a>创建插件项目</h2><p>首先安装官方的脚手架</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 安装脚手架</span></span><br><span class=\"line\">npm install -g yo generator-code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建项目</span></span><br><span class=\"line\">yo code </span><br><span class=\"line\"><span class=\"comment\">// 会一路提示你 输入插件名 插件id 等等。根据需要填写</span></span><br></pre></td></tr></table></figure>\n<p>微软提供了两种方式去开发，一种是 JavaScript 和 TypeScript 去开发，可以根据自己的习惯选择。创建好后按 F5 会打开调试用的 VS Code 窗口来调试插件</p>\n<p>使用 JavaScript 生成的项目结构，<br>├── .vscode<br>│   ├── launch.json     &#x2F;&#x2F; 插件加载和调试的配置<br>│   └── tasks.json      &#x2F;&#x2F; 配置TypeScript编译任务<br>├── .gitignore          &#x2F;&#x2F; 忽略构建输出和node_modules文件<br>├── README.md           &#x2F;&#x2F; 插件文档<br>├── CHANGELOG.md        &#x2F;&#x2F; 插件更新日志<br>├── extension.ts        &#x2F;&#x2F; 插件源代码<br>├── package.json        &#x2F;&#x2F; 插件配置清单<br>├── jsconfig.json       &#x2F;&#x2F; </p>\n<p>先看下入口文件，入口文件需要导出两个函数 activate 和 deactivate</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//extension.js 文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插件激活调用，也是插件的入口</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">activate</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Congratulations, your extension &quot;vscode-demo&quot; is now active!&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注册一个命令</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> disposable = vscode.<span class=\"property\">commands</span>.<span class=\"title function_\">registerCommand</span>(<span class=\"string\">&#x27;vscode-demo.helloWorld&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//命令触发是调用</span></span><br><span class=\"line\">        vscode.<span class=\"property\">window</span>.<span class=\"title function_\">showInformationMessage</span>(<span class=\"string\">&#x27;Hello World from vscode-demo!&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    context.<span class=\"property\">subscriptions</span>.<span class=\"title function_\">push</span>(disposable);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插件销毁调用</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deactivate</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    activate,</span><br><span class=\"line\">    deactivate</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个初始化插件项目，默认就是注册了个 hello world 命令，然后运行命令显示 hello world 的通知，按F5运行项目，在命令面板输入 hello world，可以看到右下角弹出通知<br><img src=\"/images/posts/vscode_extension/20210615205632.png\" alt=\"项目结构\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><br><img src=\"/images/posts/vscode_extension/20210615205655.png\" alt=\"项目结构\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<h2 id=\"配置说明\"><a href=\"#配置说明\" class=\"headerlink\" title=\"配置说明\"></a>配置说明</h2><p>vscode 插件的 package.json 是 npm 的一个超集，插件的图标、命令注册、菜单配置、语言注册、主题注册、代码片段等一系列的都需要在这个文件里配置。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode-demo&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;displayName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode-demo&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.0.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;publisher&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//发布者id，后面会讲怎么发布到插件市场</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;engines&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"comment\">//vscode 最低版本</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;vscode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^1.57.0&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;categories&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span> <span class=\"comment\">//插件市场的分类 可以设置成语言主题等其他类型</span></span><br><span class=\"line\">        <span class=\"string\">&quot;Other&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;activationEvents&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span> <span class=\"comment\">//扩展的激活事件</span></span><br><span class=\"line\">        <span class=\"string\">&quot;onCommand:vscode-demo.helloWorld&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//调用命令时激活</span></span><br><span class=\"line\">        <span class=\"string\">&quot;onLanguage:python&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//py时激活插件</span></span><br><span class=\"line\">        <span class=\"string\">&quot;workspaceContains:**/.editorconfig&quot;</span><span class=\"punctuation\">,</span><span class=\"comment\">// 文件夹打开时激活</span></span><br><span class=\"line\">        <span class=\"string\">&quot;onDebug&quot;</span><span class=\"punctuation\">,</span><span class=\"comment\">//调试前激活</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"string\">&quot;*&quot;</span> <span class=\"comment\">//启动时候激活，使用这个不需要设置其他的</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./extension.js&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//指定插件入口文件</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;icon&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//插件图标</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;contributes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"comment\">//大部分的配置都要在这里配置</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;commands&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置命令,如果需要暴露给用户使用的需要在这里配置</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;menus&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置菜单</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;submenus&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置子菜单会用到</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;languages&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置语言</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;grammars&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//为语言配置TextMate语法</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;keybindings&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置快捷键</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;snippets&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置代码片段</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;themes&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置主题</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;views&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置活动栏视图</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;viewsWelcome&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置左侧视图欢迎页</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;viewsContainers&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置视图容器</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;configuration&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span>  <span class=\"comment\">//配置插件配置</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;configurationDefaults&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置插件默认配置</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;colors&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;problemMatchers&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;taskDefinitions&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;typescriptServerPlugins&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命令示例\"><a href=\"#命令示例\" class=\"headerlink\" title=\"命令示例\"></a>命令示例</h2><p>一般提供给被人使用的功能都是通过命令注册，在命令的回调函数里处理相关功能逻辑，然后就可以在 VS Code 的命令面板调用相关命令。你也可以注册快捷键、菜单等和命令绑定在一起来触发命令。VS Code 内部含有大量和编辑器交互、控制UI、后台操作的内置命令给我们使用。</p>\n<h3 id=\"注册命令\"><a href=\"#注册命令\" class=\"headerlink\" title=\"注册命令\"></a>注册命令</h3><p>vscode 在 commands 下提供了 <strong>registerCommand</strong> 和 <strong>registerTextEditorCommand</strong>用来注册命令，registerTextEditorCommand 注册的命令只会在编辑器激活的时候才调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在activate函数注册命令</span></span><br><span class=\"line\"></span><br><span class=\"line\">context.<span class=\"property\">subscriptions</span>.<span class=\"title function_\">push</span>(</span><br><span class=\"line\">    <span class=\"comment\">// 第一个参数为命令ID,第二次参数命令回调函数</span></span><br><span class=\"line\">    vscode.<span class=\"property\">commands</span>.<span class=\"title function_\">registerCommand</span>(<span class=\"string\">&#x27;vscode-demo.currentText&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取当前激活的编辑器</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> currentEditor = vscode.<span class=\"property\">window</span>.<span class=\"property\">activeTextEditor</span>; </span><br><span class=\"line\">        <span class=\"comment\">// 获取编辑器选择的内容</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(currentEditor.<span class=\"property\">document</span>.<span class=\"title function_\">getText</span>(currentEditor.<span class=\"property\">selection</span>));</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>命令注册后默认是不会对外提供的，如果需要提供给用户使用还需要在 <strong>package.json</strong> 的 <strong>contributes.commands</strong> 添加相应配置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;contributes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;commands&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode-demo.currentText&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;获取选择文本&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>按住 F5 运行插件，在命令面板输入 <em>获取选择文本</em> ，会发现报错了。是因为 <strong>activationEvents</strong> 配置里只配置了 “onCommand:vscode-demo.helloWorld” 才会激活插件，我们需要把新加的命令也加入进去，或者改为 *</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    activationEvents<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span> <span class=\"string\">&quot;*&quot;</span> <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h3><p>在 commands 提供了 <strong>executeCommand</strong> API用来调用命令，可以使用它调用我们插件里的命令，也可以调用 VS Code 内置的命令。<br>使用示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用</span></span><br><span class=\"line\">vscode.<span class=\"property\">commands</span>.<span class=\"title function_\">executeCommand</span>(<span class=\"string\">&#x27;vscode-demo.helloWorld&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"菜单示例\"><a href=\"#菜单示例\" class=\"headerlink\" title=\"菜单示例\"></a>菜单示例</h2><p>package.json 中的 <strong>contributes.menus</strong> 用来的配置菜单项，下面这些编辑器可以配置菜单的地方。</p>\n<ul>\n<li>全局命令面板 - commandPalette</li>\n<li>资源管理器上下文菜单 - explorer&#x2F;context</li>\n<li>编辑器上下文菜单 - editor&#x2F;context</li>\n<li>编辑器标题栏 - editor&#x2F;title</li>\n<li>编辑器标题上下文菜单 - editor&#x2F;title&#x2F;context</li>\n<li>调试栈视图的上下文菜单 - debug&#x2F;callstack&#x2F;context</li>\n<li>视图的标题菜单 - view&#x2F;title</li>\n<li>视图项的菜单 - view&#x2F;item&#x2F;context</li>\n<li>SCM 标题菜单 - scm&#x2F;title</li>\n<li>SCM 资源组 - scm&#x2F;resourceGroup&#x2F;context</li>\n<li>SCM 资源 - scm&#x2F;resource&#x2F;context</li>\n<li>SCM 改变标题 - scm&#x2F;change&#x2F;title</li>\n</ul>\n<p>配置菜单需要提供，选中菜单时执行的命令和菜单出现的条件。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;命令&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;when&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;条件&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;alt&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;可选命令&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;group&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;菜单分组&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;submenu&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;配置二级菜单&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;icon&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;图标&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制命令面板的命令\"><a href=\"#控制命令面板的命令\" class=\"headerlink\" title=\"控制命令面板的命令\"></a>控制命令面板的命令</h3><p>默认情况下注册的命令都会显示在命令面板中，有时候需要更具条件显示，就可以在 <strong>commandPalette</strong> 配置指定命令然后通过 <strong>when</strong> 控制。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;contributes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;commands&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode-demo.currentText&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;获取选择文本&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;menus&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;commandPalette&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode-demo.currentText&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;获取选择文本&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;when&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;editorHasSelection&quot;</span> <span class=\"comment\">// 只有选择文本才显示</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"when-条件\"><a href=\"#when-条件\" class=\"headerlink\" title=\"when 条件\"></a>when 条件</h3><p>when 提供的逻辑操作符有 &#x3D;&#x3D;、!&#x3D;、||、&amp;&amp;、!、&#x3D;~(正则)、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;、in 等操作符，和js的类似，多了一个 <strong>&#x3D;~</strong> 符匹配正则。VS Code 还提供了很多上下文可以和这些操作符组合使用。<a href=\"https://code.visualstudio.com/api/references/when-clause-contexts\">查看上下文详情</a><br>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;when&quot;:&quot;resourceExtname != .js&quot; //不是js文件时</span><br><span class=\"line\">&quot;when&quot;:&quot;editorHasSelection&quot; //选择文本才显示</span><br><span class=\"line\">&quot;when&quot;:&quot;!editorHasSelection&quot; //不选择文本才显示</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"配置多级菜单\"><a href=\"#配置多级菜单\" class=\"headerlink\" title=\"配置多级菜单\"></a>配置多级菜单</h3><p>使用 <strong>submenu</strong> 指定父级菜单的ID，<strong>submenus</strong> 配置父级菜单名称等信息。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;contributes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;menus&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;editor/context&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode-demo.currentText&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;submenu&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;first.menu&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;first.menu&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode-demo.currentText&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;submenu&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;two.menu&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;two.menu&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode-demo.currentText&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;submenus&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;first.menu&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;label&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;一级菜单&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;two.menu&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;label&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;二级菜单&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/posts/vscode_extension/20210616211914.png\" alt=\"示例\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<h3 id=\"分组排序\"><a href=\"#分组排序\" class=\"headerlink\" title=\"分组排序\"></a>分组排序</h3><p>菜单项可以通过组来分类。根据下列默认规则，然后按照字母排序，</p>\n<ul>\n<li>编辑器上下文菜单(editor&#x2F;context)默认有这些分组：<ul>\n<li>navigation - navigation组始终在最上方。</li>\n<li>1_modification - 紧接上一个组，这个组包含可以修改你代码的命令。</li>\n<li>9_cutcopypaste - 然后是基础编辑命令。</li>\n<li>z_commands - 最后一个分组则是命令面板入口。</li>\n</ul>\n</li>\n<li>资源管理器上下文菜单(explorer&#x2F;context)默认有下列分组：<ul>\n<li>navigation - 在VS Code 中导航的相关命令。navigation 组始终在最上方。</li>\n<li>2_workspace - 和工作区操作相关的命令。</li>\n<li>3_compare - 比较文件和diff相关的命令。</li>\n<li>4_search - 在搜索视图中和搜索相关的命令。</li>\n<li>5_cutcopypaste - 和剪切、复制、粘贴文件相关的命令。</li>\n<li>7_modification - 修改文件的相关命令。</li>\n</ul>\n</li>\n<li>编辑器标签菜单默认有下列分组<ul>\n<li>1_close - 和关闭编辑器相关的命令。</li>\n<li>3_preview - 和固定编辑器相关的命令。</li>\n</ul>\n</li>\n<li>编辑器标题栏(editor&#x2F;title)的默认分组<ul>\n<li>1_diff - 与使用差异编辑器相关的命令。</li>\n<li>3_open - 与打开编辑器相关的命令。</li>\n<li>5_close - 与关闭编辑器相关的命令。</li>\n</ul>\n</li>\n</ul>\n<p>组内的菜单顺序取决于标题或者序号属性。菜单的组内顺序由@<number>加到 group 值的后面得以确定：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;editor/title&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;when&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;editorHasSelection&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;extension.Command&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;group&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;myGroup@1&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注册快捷键\"><a href=\"#注册快捷键\" class=\"headerlink\" title=\"注册快捷键\"></a>注册快捷键</h2><p>快捷键还是比较简单的，Windows 和Linux 是 key 指定，macOS 使用 mac 指定的快捷键。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;contributes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;keybindings&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode-demo.currentText&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//快捷键绑定命令</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ctrl+f1&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">        <span class=\"attr\">&quot;mac&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cmd+f1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;when&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;editorHasSelection&quot;</span> <span class=\"comment\">// 出现时机</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>设置好后，使用了对应命令的菜单项也会显示对应快捷键，如图所示<br><img src=\"/images/posts/vscode_extension/20210616230737.png\" alt=\"示例\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n","excerpt":"<p>最近闲来无事，给公司框架做了开发代码片段提示和一些常用工具整合的插，在这里记录一下踩过的坑和一些常用的基本功能示例。</p>","more":"<h2 id=\"插件能做什么\"><a href=\"#插件能做什么\" class=\"headerlink\" title=\"插件能做什么\"></a>插件能做什么</h2><p>因为 VS Code 是基于 Electron 的，所以一般 node 能做的一般基本上都是可以是现实。如果你想对 VS Code 做些个性化的配置，你可以开发自定义主题、图标主题、欢迎页面、自定义左侧的面板（例如资源管理器栏那种）等。你还可以自己定义命令、快捷键、自动补全、菜单等来提升你的开发效率。甚至你可以对现有语言做扩展或者定义新的语言的支持。</p>\n<h2 id=\"创建插件项目\"><a href=\"#创建插件项目\" class=\"headerlink\" title=\"创建插件项目\"></a>创建插件项目</h2><p>首先安装官方的脚手架</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 安装脚手架</span></span><br><span class=\"line\">npm install -g yo generator-code</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建项目</span></span><br><span class=\"line\">yo code </span><br><span class=\"line\"><span class=\"comment\">// 会一路提示你 输入插件名 插件id 等等。根据需要填写</span></span><br></pre></td></tr></table></figure>\n<p>微软提供了两种方式去开发，一种是 JavaScript 和 TypeScript 去开发，可以根据自己的习惯选择。创建好后按 F5 会打开调试用的 VS Code 窗口来调试插件</p>\n<p>使用 JavaScript 生成的项目结构，<br>├── .vscode<br>│   ├── launch.json     &#x2F;&#x2F; 插件加载和调试的配置<br>│   └── tasks.json      &#x2F;&#x2F; 配置TypeScript编译任务<br>├── .gitignore          &#x2F;&#x2F; 忽略构建输出和node_modules文件<br>├── README.md           &#x2F;&#x2F; 插件文档<br>├── CHANGELOG.md        &#x2F;&#x2F; 插件更新日志<br>├── extension.ts        &#x2F;&#x2F; 插件源代码<br>├── package.json        &#x2F;&#x2F; 插件配置清单<br>├── jsconfig.json       &#x2F;&#x2F; </p>\n<p>先看下入口文件，入口文件需要导出两个函数 activate 和 deactivate</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//extension.js 文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插件激活调用，也是插件的入口</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">activate</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Congratulations, your extension &quot;vscode-demo&quot; is now active!&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注册一个命令</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> disposable = vscode.<span class=\"property\">commands</span>.<span class=\"title function_\">registerCommand</span>(<span class=\"string\">&#x27;vscode-demo.helloWorld&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//命令触发是调用</span></span><br><span class=\"line\">        vscode.<span class=\"property\">window</span>.<span class=\"title function_\">showInformationMessage</span>(<span class=\"string\">&#x27;Hello World from vscode-demo!&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    context.<span class=\"property\">subscriptions</span>.<span class=\"title function_\">push</span>(disposable);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 插件销毁调用</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deactivate</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    activate,</span><br><span class=\"line\">    deactivate</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个初始化插件项目，默认就是注册了个 hello world 命令，然后运行命令显示 hello world 的通知，按F5运行项目，在命令面板输入 hello world，可以看到右下角弹出通知<br><img src=\"/images/posts/vscode_extension/20210615205632.png\" alt=\"项目结构\"><br><img src=\"/images/posts/vscode_extension/20210615205655.png\" alt=\"项目结构\"></p>\n<h2 id=\"配置说明\"><a href=\"#配置说明\" class=\"headerlink\" title=\"配置说明\"></a>配置说明</h2><p>vscode 插件的 package.json 是 npm 的一个超集，插件的图标、命令注册、菜单配置、语言注册、主题注册、代码片段等一系列的都需要在这个文件里配置。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode-demo&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;displayName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode-demo&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.0.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;publisher&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//发布者id，后面会讲怎么发布到插件市场</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;engines&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"comment\">//vscode 最低版本</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;vscode&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^1.57.0&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;categories&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span> <span class=\"comment\">//插件市场的分类 可以设置成语言主题等其他类型</span></span><br><span class=\"line\">        <span class=\"string\">&quot;Other&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;activationEvents&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span> <span class=\"comment\">//扩展的激活事件</span></span><br><span class=\"line\">        <span class=\"string\">&quot;onCommand:vscode-demo.helloWorld&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//调用命令时激活</span></span><br><span class=\"line\">        <span class=\"string\">&quot;onLanguage:python&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//py时激活插件</span></span><br><span class=\"line\">        <span class=\"string\">&quot;workspaceContains:**/.editorconfig&quot;</span><span class=\"punctuation\">,</span><span class=\"comment\">// 文件夹打开时激活</span></span><br><span class=\"line\">        <span class=\"string\">&quot;onDebug&quot;</span><span class=\"punctuation\">,</span><span class=\"comment\">//调试前激活</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"string\">&quot;*&quot;</span> <span class=\"comment\">//启动时候激活，使用这个不需要设置其他的</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./extension.js&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//指定插件入口文件</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;icon&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//插件图标</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;contributes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"comment\">//大部分的配置都要在这里配置</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;commands&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置命令,如果需要暴露给用户使用的需要在这里配置</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;menus&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置菜单</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;submenus&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置子菜单会用到</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;languages&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置语言</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;grammars&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//为语言配置TextMate语法</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;keybindings&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置快捷键</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;snippets&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置代码片段</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;themes&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置主题</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;views&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置活动栏视图</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;viewsWelcome&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置左侧视图欢迎页</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;viewsContainers&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置视图容器</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;configuration&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span>  <span class=\"comment\">//配置插件配置</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;configurationDefaults&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//配置插件默认配置</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;colors&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;problemMatchers&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;taskDefinitions&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;typescriptServerPlugins&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命令示例\"><a href=\"#命令示例\" class=\"headerlink\" title=\"命令示例\"></a>命令示例</h2><p>一般提供给被人使用的功能都是通过命令注册，在命令的回调函数里处理相关功能逻辑，然后就可以在 VS Code 的命令面板调用相关命令。你也可以注册快捷键、菜单等和命令绑定在一起来触发命令。VS Code 内部含有大量和编辑器交互、控制UI、后台操作的内置命令给我们使用。</p>\n<h3 id=\"注册命令\"><a href=\"#注册命令\" class=\"headerlink\" title=\"注册命令\"></a>注册命令</h3><p>vscode 在 commands 下提供了 <strong>registerCommand</strong> 和 <strong>registerTextEditorCommand</strong>用来注册命令，registerTextEditorCommand 注册的命令只会在编辑器激活的时候才调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在activate函数注册命令</span></span><br><span class=\"line\"></span><br><span class=\"line\">context.<span class=\"property\">subscriptions</span>.<span class=\"title function_\">push</span>(</span><br><span class=\"line\">    <span class=\"comment\">// 第一个参数为命令ID,第二次参数命令回调函数</span></span><br><span class=\"line\">    vscode.<span class=\"property\">commands</span>.<span class=\"title function_\">registerCommand</span>(<span class=\"string\">&#x27;vscode-demo.currentText&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取当前激活的编辑器</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> currentEditor = vscode.<span class=\"property\">window</span>.<span class=\"property\">activeTextEditor</span>; </span><br><span class=\"line\">        <span class=\"comment\">// 获取编辑器选择的内容</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(currentEditor.<span class=\"property\">document</span>.<span class=\"title function_\">getText</span>(currentEditor.<span class=\"property\">selection</span>));</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>命令注册后默认是不会对外提供的，如果需要提供给用户使用还需要在 <strong>package.json</strong> 的 <strong>contributes.commands</strong> 添加相应配置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;contributes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;commands&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode-demo.currentText&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;获取选择文本&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>按住 F5 运行插件，在命令面板输入 <em>获取选择文本</em> ，会发现报错了。是因为 <strong>activationEvents</strong> 配置里只配置了 “onCommand:vscode-demo.helloWorld” 才会激活插件，我们需要把新加的命令也加入进去，或者改为 *</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    activationEvents<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span> <span class=\"string\">&quot;*&quot;</span> <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h3><p>在 commands 提供了 <strong>executeCommand</strong> API用来调用命令，可以使用它调用我们插件里的命令，也可以调用 VS Code 内置的命令。<br>使用示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用</span></span><br><span class=\"line\">vscode.<span class=\"property\">commands</span>.<span class=\"title function_\">executeCommand</span>(<span class=\"string\">&#x27;vscode-demo.helloWorld&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"菜单示例\"><a href=\"#菜单示例\" class=\"headerlink\" title=\"菜单示例\"></a>菜单示例</h2><p>package.json 中的 <strong>contributes.menus</strong> 用来的配置菜单项，下面这些编辑器可以配置菜单的地方。</p>\n<ul>\n<li>全局命令面板 - commandPalette</li>\n<li>资源管理器上下文菜单 - explorer&#x2F;context</li>\n<li>编辑器上下文菜单 - editor&#x2F;context</li>\n<li>编辑器标题栏 - editor&#x2F;title</li>\n<li>编辑器标题上下文菜单 - editor&#x2F;title&#x2F;context</li>\n<li>调试栈视图的上下文菜单 - debug&#x2F;callstack&#x2F;context</li>\n<li>视图的标题菜单 - view&#x2F;title</li>\n<li>视图项的菜单 - view&#x2F;item&#x2F;context</li>\n<li>SCM 标题菜单 - scm&#x2F;title</li>\n<li>SCM 资源组 - scm&#x2F;resourceGroup&#x2F;context</li>\n<li>SCM 资源 - scm&#x2F;resource&#x2F;context</li>\n<li>SCM 改变标题 - scm&#x2F;change&#x2F;title</li>\n</ul>\n<p>配置菜单需要提供，选中菜单时执行的命令和菜单出现的条件。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;命令&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;when&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;条件&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;alt&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;可选命令&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;group&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;菜单分组&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;submenu&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;配置二级菜单&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;icon&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;图标&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制命令面板的命令\"><a href=\"#控制命令面板的命令\" class=\"headerlink\" title=\"控制命令面板的命令\"></a>控制命令面板的命令</h3><p>默认情况下注册的命令都会显示在命令面板中，有时候需要更具条件显示，就可以在 <strong>commandPalette</strong> 配置指定命令然后通过 <strong>when</strong> 控制。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;contributes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;commands&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode-demo.currentText&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;获取选择文本&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;menus&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;commandPalette&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode-demo.currentText&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;获取选择文本&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;when&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;editorHasSelection&quot;</span> <span class=\"comment\">// 只有选择文本才显示</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"when-条件\"><a href=\"#when-条件\" class=\"headerlink\" title=\"when 条件\"></a>when 条件</h3><p>when 提供的逻辑操作符有 &#x3D;&#x3D;、!&#x3D;、||、&amp;&amp;、!、&#x3D;~(正则)、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;、in 等操作符，和js的类似，多了一个 <strong>&#x3D;~</strong> 符匹配正则。VS Code 还提供了很多上下文可以和这些操作符组合使用。<a href=\"https://code.visualstudio.com/api/references/when-clause-contexts\">查看上下文详情</a><br>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;when&quot;:&quot;resourceExtname != .js&quot; //不是js文件时</span><br><span class=\"line\">&quot;when&quot;:&quot;editorHasSelection&quot; //选择文本才显示</span><br><span class=\"line\">&quot;when&quot;:&quot;!editorHasSelection&quot; //不选择文本才显示</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"配置多级菜单\"><a href=\"#配置多级菜单\" class=\"headerlink\" title=\"配置多级菜单\"></a>配置多级菜单</h3><p>使用 <strong>submenu</strong> 指定父级菜单的ID，<strong>submenus</strong> 配置父级菜单名称等信息。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;contributes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;menus&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;editor/context&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode-demo.currentText&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;submenu&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;first.menu&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;first.menu&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode-demo.currentText&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;submenu&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;two.menu&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;two.menu&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode-demo.currentText&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;submenus&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;first.menu&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;label&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;一级菜单&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;two.menu&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;label&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;二级菜单&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/posts/vscode_extension/20210616211914.png\" alt=\"示例\"></p>\n<h3 id=\"分组排序\"><a href=\"#分组排序\" class=\"headerlink\" title=\"分组排序\"></a>分组排序</h3><p>菜单项可以通过组来分类。根据下列默认规则，然后按照字母排序，</p>\n<ul>\n<li>编辑器上下文菜单(editor&#x2F;context)默认有这些分组：<ul>\n<li>navigation - navigation组始终在最上方。</li>\n<li>1_modification - 紧接上一个组，这个组包含可以修改你代码的命令。</li>\n<li>9_cutcopypaste - 然后是基础编辑命令。</li>\n<li>z_commands - 最后一个分组则是命令面板入口。</li>\n</ul>\n</li>\n<li>资源管理器上下文菜单(explorer&#x2F;context)默认有下列分组：<ul>\n<li>navigation - 在VS Code 中导航的相关命令。navigation 组始终在最上方。</li>\n<li>2_workspace - 和工作区操作相关的命令。</li>\n<li>3_compare - 比较文件和diff相关的命令。</li>\n<li>4_search - 在搜索视图中和搜索相关的命令。</li>\n<li>5_cutcopypaste - 和剪切、复制、粘贴文件相关的命令。</li>\n<li>7_modification - 修改文件的相关命令。</li>\n</ul>\n</li>\n<li>编辑器标签菜单默认有下列分组<ul>\n<li>1_close - 和关闭编辑器相关的命令。</li>\n<li>3_preview - 和固定编辑器相关的命令。</li>\n</ul>\n</li>\n<li>编辑器标题栏(editor&#x2F;title)的默认分组<ul>\n<li>1_diff - 与使用差异编辑器相关的命令。</li>\n<li>3_open - 与打开编辑器相关的命令。</li>\n<li>5_close - 与关闭编辑器相关的命令。</li>\n</ul>\n</li>\n</ul>\n<p>组内的菜单顺序取决于标题或者序号属性。菜单的组内顺序由@<number>加到 group 值的后面得以确定：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;editor/title&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;when&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;editorHasSelection&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;extension.Command&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;group&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;myGroup@1&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注册快捷键\"><a href=\"#注册快捷键\" class=\"headerlink\" title=\"注册快捷键\"></a>注册快捷键</h2><p>快捷键还是比较简单的，Windows 和Linux 是 key 指定，macOS 使用 mac 指定的快捷键。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;contributes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;keybindings&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;command&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vscode-demo.currentText&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//快捷键绑定命令</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ctrl+f1&quot;</span><span class=\"punctuation\">,</span> </span><br><span class=\"line\">        <span class=\"attr\">&quot;mac&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cmd+f1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;when&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;editorHasSelection&quot;</span> <span class=\"comment\">// 出现时机</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>设置好后，使用了对应命令的菜单项也会显示对应快捷键，如图所示<br><img src=\"/images/posts/vscode_extension/20210616230737.png\" alt=\"示例\"></p>"},{"title":"朱雀云丹 · 风采铃","comments":1,"date":"2021-11-01T10:37:08.000Z","description":null,"keywords":null,"_content":"一壶生死曾入喉，醉梦黄泉九千宵。转眼形骸具付灭，悲欢两散天涯老。\n<!-- more -->\n<!-- <iframe src=\"//player.bilibili.com/player.html?aid=54488812&bvid=BV1Z4411n7my&cid=95263211&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"500px\"> </iframe>\n -->\n<iframe src=\"//player.bilibili.com/player.html?aid=54488812&bvid=BV1Z4411n7my&cid=95263211&page=1&high_quality=1&danmaku=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>","source":"_posts/video_yztx.md","raw":"---\ntitle: 朱雀云丹 · 风采铃\ncomments: true\ndate: 2021-11-01 18:37:08\ntags: [video]\ndescription:\ncategories: 分享类\nkeywords:\n---\n一壶生死曾入喉，醉梦黄泉九千宵。转眼形骸具付灭，悲欢两散天涯老。\n<!-- more -->\n<!-- <iframe src=\"//player.bilibili.com/player.html?aid=54488812&bvid=BV1Z4411n7my&cid=95263211&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"500px\"> </iframe>\n -->\n<iframe src=\"//player.bilibili.com/player.html?aid=54488812&bvid=BV1Z4411n7my&cid=95263211&page=1&high_quality=1&danmaku=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>","slug":"video_yztx","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vs9002w98lg9al58phw","content":"<p>一壶生死曾入喉，醉梦黄泉九千宵。转眼形骸具付灭，悲欢两散天涯老。</p>\n<span id=\"more\"></span>\n<!-- <iframe src=\"//player.bilibili.com/player.html?aid=54488812&bvid=BV1Z4411n7my&cid=95263211&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"500px\"> </iframe>\n -->\n<iframe src=\"//player.bilibili.com/player.html?aid=54488812&bvid=BV1Z4411n7my&cid=95263211&page=1&high_quality=1&danmaku=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>","excerpt":"<p>一壶生死曾入喉，醉梦黄泉九千宵。转眼形骸具付灭，悲欢两散天涯老。</p>","more":"<!-- <iframe src=\"//player.bilibili.com/player.html?aid=54488812&bvid=BV1Z4411n7my&cid=95263211&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"100%\" height=\"500px\"> </iframe>\n -->\n<iframe src=\"//player.bilibili.com/player.html?aid=54488812&bvid=BV1Z4411n7my&cid=95263211&page=1&high_quality=1&danmaku=0\" allowfullscreen=\"allowfullscreen\" width=\"100%\" height=\"500\" scrolling=\"no\" frameborder=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\"></iframe>"},{"title":"VS Code 插件开发指北 (二)","comments":1,"date":"2021-06-17T12:19:04.000Z","description":null,"keywords":"vscode插件开发,vscode","_content":"\n接着上面的继续介绍一些常用的 VS Code 插件的配置和 API。\n\n<!-- more -->\n## 代码片段\n在 package.json 增加 snippets 配置。\n``` json\n\"snippets\": [\n    {\n        \"language\": \"vue\", // 指定支持的语言\n        \"path\": \"./snippets/demo.json\" // 文件路径\n    },\n]\n```\n在 snippets 文件夹下创建 demo.json 文件，代码格式如下\n``` json\n{\n    \"片段名称\": {\n        \"prefix\": \"代码片段触发前缀\",\n        \"body\": [ \"片段内容\" ],\n        \"description\": \"代码片段描述\"\n    },\n}\n\n// 示例\n{\n    \"selectCheckBox\": {\n        \"prefix\": \"select-check-box\",\n        \"body\": [\n            \"<select-check-box v-model='${1:search.statusList}'  :sourceOpt='${2:statusOpt}' @change='${3:getList(1)}' title='${4:状态}'></select-check-box>\"\n        ],\n        \"description\": \"多选下拉框\"\n    }\n}\n```\n片段中的 ${1:xxx} 是占位符，数字表示光标聚焦的顺序，1表示默认光标落在这里，按下回车或者tab跳到2的位置，以此类推，xxx 表示此位置的默认值，可省略，比如直接写$3。一个片段里可以设置多个相同的占位符，来同时修改多出占位处。片段中也是支持使用 VS Code 内置的很多变量的，比如可以根据获取当前选择的值(${TM_SELECTED_TEXT}) 填充到代码片段中。\n\n占位符几种使用\n- $1 只显示光标\n- ${1:xxxx} 默认使用 xxx 填充\n- ${1|a,b,c|} 当光标在此处时 提供 a,b,c 三个选择给选择\n- ${1:${TM_SELECTED_TEXT}} 使用内置的变量占位\n\n\n常用用的变量，[查看更多变量](https://code.visualstudio.com/docs/editor/variables-reference#_environment-variables)\n- TM_SELECTED_TEXT当前选定的文本或空字符串\n- TM_CURRENT_LINE当前行的内容\n- TM_CURRENT_WORD光标下的单词或空字符串的内容\n- TM_LINE_INDEX基于零索引的行号\n- TM_LINE_NUMBER基于单索引的行号\n- TM_FILENAME当前文档的文件名\n- TM_FILENAME_BASE没有扩展名的当前文档的文件名\n- TM_DIRECTORY当前文档的目录\n- TM_FILEPATH当前文档的完整文件路径\n- CLIPBOARD剪贴板的内容\n- CURRENT_YEAR当前年份\n- CURRENT_YEAR_SHORT当前年份的最后两位数字\n- CURRENT_MONTH两个数字的月份（例如'02'）\n- CURRENT_MONTH_NAME月份的全名（例如“七月”）\n- CURRENT_MONTH_NAME_SHORT月份的简称（例如'Jul'）\n- CURRENT_DATE每月的某一天\n- CURRENT_DAY_NAME天的名称（例如'星期一'）\n- CURRENT_DAY_NAME_SHORT当天的简称（例如'Mon'）\n- CURRENT_HOUR 24小时制格式的当前小时\n- CURRENT_MINUTE当前分钟\n- CURRENT_SECOND当前秒\n\n## 插件配置\n在 configuration 中配置的内容会暴露给用户，用户可以从“用户设置”和“工作区设置”中修改你暴露的选项。configuration 是 JSON 格式的键值对，用户会在修改设置时获得对应的提示和更好的体验。\n``` json\n// package.json\n{\n    \"contributes\":{\n        \"configuration\":{\n            \"type\": \"object\",\n            \"title\": \"显示在配置页左侧标题\",\n            \"properties\": {\n                \"demo.showtick\": {\n                    \"type\": \"boolean\",\n                    \"default\": false,\n                    \"description\": \"配置demo\"\n                }\n            }\n        }\n    }\n}\n```\n在插件内获取和修改当前插件配置\n``` js\n// 如果当前配置没有值 默认返回 undefined\nconst result = vscode.workspace.getConfiguration().get('demo.showtick');\n\n// 修改配置 第三个参数如果传true 则修改全局配置，false只修改当前工作区配置\nvscode.workspace.getConfiguration().update('demo.showtick', false, true);\n```\n\n## 打包发布\n如果只是自己使用可以直接打包本地安装，发布到插件市场感觉创建发布前期还是有点繁琐的。\n### 本地打包\n**vsce** 是一个用于将插件发布到市场上的命令行工具。不论是本地打包还是要发布到插件市场都需要使用这个工具\n\n首先安装vsce\n``` \nnpm install -g vsce\n```\n打包成vsix包\n```\nvsce package\n```\n### 发出插件市场\n发布到插件市场有两种方式，一种是在 VS Code 插件市场直接发布 vsix 包，另一种是直接使用 vsce 发布\n#### 在插件市场发布\n\n首先在 [插件市场](https://marketplace.visualstudio.com/VSCode) 登录你的账号，可以使用 github 账户或者 Microsoft账户登录\n![](/images/posts/vscode_extension_two/20210623231124.png)\n创建发布者（这里需要翻墙），这里发布者 ID 需要和插件 package.json 的 publisher 保持一致。\n![](/images/posts/vscode_extension_two/20210623230340.png)\n![](/images/posts/vscode_extension_two/20210623230642.png)\n上传vsix包文件\n![](/images/posts/vscode_extension_two/20210623231651.png)\n#### 使用vsce发布 \n使用 vsce 发布首先需要 一个微软 **Azure** 账户，然后创建一个 **Azure DevOps**，然后在组织里创建发布 Token，然后就能使用 vsce 发布插件。\n\n首先打开  [azure](https://dev.azure.com) ，直接使用微软账户登录创建一个组织。按照步骤默认会创建一个以邮箱前缀为名的组织。\n创建完后\n![](/images/posts/vscode_extension_two/20210623232915.png)\n创建 tonken,然后将生成tonken保存下来\n![](/images/posts/vscode_extension_two/20210623233248.png)\n然后需要创建一个 publisher， 以前可以 vsce 直接创建 ，新的不在支持了，只能通过在上一种方式在网页创建了。\n创建好后就可以在使用 vsce publish 命令发布插件，这个时候会提示需要 tonken，将刚刚生成复制上去。可以看到插件已经发布上去了。\n![](/images/posts/vscode_extension_two/20210623234418.png)\n### 发布注意事项\n- README.md 文件默认会显示在插件主页，且里面连接需要是 https 的\n- CHANGELOG.md 会显示在变更选项卡\n","source":"_posts/vscode_extension_two.md","raw":"---\ntitle: VS Code 插件开发指北 (二)\ncomments: true\ndate: 2021-06-17 20:19:04\ntags: [vscode]\ndescription:\ncategories: 记录类\nkeywords: vscode插件开发,vscode\n---\n\n接着上面的继续介绍一些常用的 VS Code 插件的配置和 API。\n\n<!-- more -->\n## 代码片段\n在 package.json 增加 snippets 配置。\n``` json\n\"snippets\": [\n    {\n        \"language\": \"vue\", // 指定支持的语言\n        \"path\": \"./snippets/demo.json\" // 文件路径\n    },\n]\n```\n在 snippets 文件夹下创建 demo.json 文件，代码格式如下\n``` json\n{\n    \"片段名称\": {\n        \"prefix\": \"代码片段触发前缀\",\n        \"body\": [ \"片段内容\" ],\n        \"description\": \"代码片段描述\"\n    },\n}\n\n// 示例\n{\n    \"selectCheckBox\": {\n        \"prefix\": \"select-check-box\",\n        \"body\": [\n            \"<select-check-box v-model='${1:search.statusList}'  :sourceOpt='${2:statusOpt}' @change='${3:getList(1)}' title='${4:状态}'></select-check-box>\"\n        ],\n        \"description\": \"多选下拉框\"\n    }\n}\n```\n片段中的 ${1:xxx} 是占位符，数字表示光标聚焦的顺序，1表示默认光标落在这里，按下回车或者tab跳到2的位置，以此类推，xxx 表示此位置的默认值，可省略，比如直接写$3。一个片段里可以设置多个相同的占位符，来同时修改多出占位处。片段中也是支持使用 VS Code 内置的很多变量的，比如可以根据获取当前选择的值(${TM_SELECTED_TEXT}) 填充到代码片段中。\n\n占位符几种使用\n- $1 只显示光标\n- ${1:xxxx} 默认使用 xxx 填充\n- ${1|a,b,c|} 当光标在此处时 提供 a,b,c 三个选择给选择\n- ${1:${TM_SELECTED_TEXT}} 使用内置的变量占位\n\n\n常用用的变量，[查看更多变量](https://code.visualstudio.com/docs/editor/variables-reference#_environment-variables)\n- TM_SELECTED_TEXT当前选定的文本或空字符串\n- TM_CURRENT_LINE当前行的内容\n- TM_CURRENT_WORD光标下的单词或空字符串的内容\n- TM_LINE_INDEX基于零索引的行号\n- TM_LINE_NUMBER基于单索引的行号\n- TM_FILENAME当前文档的文件名\n- TM_FILENAME_BASE没有扩展名的当前文档的文件名\n- TM_DIRECTORY当前文档的目录\n- TM_FILEPATH当前文档的完整文件路径\n- CLIPBOARD剪贴板的内容\n- CURRENT_YEAR当前年份\n- CURRENT_YEAR_SHORT当前年份的最后两位数字\n- CURRENT_MONTH两个数字的月份（例如'02'）\n- CURRENT_MONTH_NAME月份的全名（例如“七月”）\n- CURRENT_MONTH_NAME_SHORT月份的简称（例如'Jul'）\n- CURRENT_DATE每月的某一天\n- CURRENT_DAY_NAME天的名称（例如'星期一'）\n- CURRENT_DAY_NAME_SHORT当天的简称（例如'Mon'）\n- CURRENT_HOUR 24小时制格式的当前小时\n- CURRENT_MINUTE当前分钟\n- CURRENT_SECOND当前秒\n\n## 插件配置\n在 configuration 中配置的内容会暴露给用户，用户可以从“用户设置”和“工作区设置”中修改你暴露的选项。configuration 是 JSON 格式的键值对，用户会在修改设置时获得对应的提示和更好的体验。\n``` json\n// package.json\n{\n    \"contributes\":{\n        \"configuration\":{\n            \"type\": \"object\",\n            \"title\": \"显示在配置页左侧标题\",\n            \"properties\": {\n                \"demo.showtick\": {\n                    \"type\": \"boolean\",\n                    \"default\": false,\n                    \"description\": \"配置demo\"\n                }\n            }\n        }\n    }\n}\n```\n在插件内获取和修改当前插件配置\n``` js\n// 如果当前配置没有值 默认返回 undefined\nconst result = vscode.workspace.getConfiguration().get('demo.showtick');\n\n// 修改配置 第三个参数如果传true 则修改全局配置，false只修改当前工作区配置\nvscode.workspace.getConfiguration().update('demo.showtick', false, true);\n```\n\n## 打包发布\n如果只是自己使用可以直接打包本地安装，发布到插件市场感觉创建发布前期还是有点繁琐的。\n### 本地打包\n**vsce** 是一个用于将插件发布到市场上的命令行工具。不论是本地打包还是要发布到插件市场都需要使用这个工具\n\n首先安装vsce\n``` \nnpm install -g vsce\n```\n打包成vsix包\n```\nvsce package\n```\n### 发出插件市场\n发布到插件市场有两种方式，一种是在 VS Code 插件市场直接发布 vsix 包，另一种是直接使用 vsce 发布\n#### 在插件市场发布\n\n首先在 [插件市场](https://marketplace.visualstudio.com/VSCode) 登录你的账号，可以使用 github 账户或者 Microsoft账户登录\n![](/images/posts/vscode_extension_two/20210623231124.png)\n创建发布者（这里需要翻墙），这里发布者 ID 需要和插件 package.json 的 publisher 保持一致。\n![](/images/posts/vscode_extension_two/20210623230340.png)\n![](/images/posts/vscode_extension_two/20210623230642.png)\n上传vsix包文件\n![](/images/posts/vscode_extension_two/20210623231651.png)\n#### 使用vsce发布 \n使用 vsce 发布首先需要 一个微软 **Azure** 账户，然后创建一个 **Azure DevOps**，然后在组织里创建发布 Token，然后就能使用 vsce 发布插件。\n\n首先打开  [azure](https://dev.azure.com) ，直接使用微软账户登录创建一个组织。按照步骤默认会创建一个以邮箱前缀为名的组织。\n创建完后\n![](/images/posts/vscode_extension_two/20210623232915.png)\n创建 tonken,然后将生成tonken保存下来\n![](/images/posts/vscode_extension_two/20210623233248.png)\n然后需要创建一个 publisher， 以前可以 vsce 直接创建 ，新的不在支持了，只能通过在上一种方式在网页创建了。\n创建好后就可以在使用 vsce publish 命令发布插件，这个时候会提示需要 tonken，将刚刚生成复制上去。可以看到插件已经发布上去了。\n![](/images/posts/vscode_extension_two/20210623234418.png)\n### 发布注意事项\n- README.md 文件默认会显示在插件主页，且里面连接需要是 https 的\n- CHANGELOG.md 会显示在变更选项卡\n","slug":"vscode_extension_two","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vsa002z98lg2t8a16xs","content":"<p>接着上面的继续介绍一些常用的 VS Code 插件的配置和 API。</p>\n<span id=\"more\"></span>\n<h2 id=\"代码片段\"><a href=\"#代码片段\" class=\"headerlink\" title=\"代码片段\"></a>代码片段</h2><p>在 package.json 增加 snippets 配置。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;snippets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;language&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vue&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 指定支持的语言</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./snippets/demo.json&quot;</span> <span class=\"comment\">// 文件路径</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n<p>在 snippets 文件夹下创建 demo.json 文件，代码格式如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;片段名称&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;prefix&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;代码片段触发前缀&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;body&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span> <span class=\"string\">&quot;片段内容&quot;</span> <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;代码片段描述&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;selectCheckBox&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;prefix&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;select-check-box&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;body&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"string\">&quot;&lt;select-check-box v-model=&#x27;$&#123;1:search.statusList&#125;&#x27;  :sourceOpt=&#x27;$&#123;2:statusOpt&#125;&#x27; @change=&#x27;$&#123;3:getList(1)&#125;&#x27; title=&#x27;$&#123;4:状态&#125;&#x27;&gt;&lt;/select-check-box&gt;&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;多选下拉框&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>片段中的 ${1:xxx} 是占位符，数字表示光标聚焦的顺序，1表示默认光标落在这里，按下回车或者tab跳到2的位置，以此类推，xxx 表示此位置的默认值，可省略，比如直接写$3。一个片段里可以设置多个相同的占位符，来同时修改多出占位处。片段中也是支持使用 VS Code 内置的很多变量的，比如可以根据获取当前选择的值(${TM_SELECTED_TEXT}) 填充到代码片段中。</p>\n<p>占位符几种使用</p>\n<ul>\n<li>$1 只显示光标</li>\n<li>${1:xxxx} 默认使用 xxx 填充</li>\n<li>${1|a,b,c|} 当光标在此处时 提供 a,b,c 三个选择给选择</li>\n<li>${1:${TM_SELECTED_TEXT}} 使用内置的变量占位</li>\n</ul>\n<p>常用用的变量，<a href=\"https://code.visualstudio.com/docs/editor/variables-reference#_environment-variables\">查看更多变量</a></p>\n<ul>\n<li>TM_SELECTED_TEXT当前选定的文本或空字符串</li>\n<li>TM_CURRENT_LINE当前行的内容</li>\n<li>TM_CURRENT_WORD光标下的单词或空字符串的内容</li>\n<li>TM_LINE_INDEX基于零索引的行号</li>\n<li>TM_LINE_NUMBER基于单索引的行号</li>\n<li>TM_FILENAME当前文档的文件名</li>\n<li>TM_FILENAME_BASE没有扩展名的当前文档的文件名</li>\n<li>TM_DIRECTORY当前文档的目录</li>\n<li>TM_FILEPATH当前文档的完整文件路径</li>\n<li>CLIPBOARD剪贴板的内容</li>\n<li>CURRENT_YEAR当前年份</li>\n<li>CURRENT_YEAR_SHORT当前年份的最后两位数字</li>\n<li>CURRENT_MONTH两个数字的月份（例如’02’）</li>\n<li>CURRENT_MONTH_NAME月份的全名（例如“七月”）</li>\n<li>CURRENT_MONTH_NAME_SHORT月份的简称（例如’Jul’）</li>\n<li>CURRENT_DATE每月的某一天</li>\n<li>CURRENT_DAY_NAME天的名称（例如’星期一’）</li>\n<li>CURRENT_DAY_NAME_SHORT当天的简称（例如’Mon’）</li>\n<li>CURRENT_HOUR 24小时制格式的当前小时</li>\n<li>CURRENT_MINUTE当前分钟</li>\n<li>CURRENT_SECOND当前秒</li>\n</ul>\n<h2 id=\"插件配置\"><a href=\"#插件配置\" class=\"headerlink\" title=\"插件配置\"></a>插件配置</h2><p>在 configuration 中配置的内容会暴露给用户，用户可以从“用户设置”和“工作区设置”中修改你暴露的选项。configuration 是 JSON 格式的键值对，用户会在修改设置时获得对应的提示和更好的体验。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;contributes&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;configuration&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;显示在配置页左侧标题&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;demo.showtick&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;boolean&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;default&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;配置demo&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>在插件内获取和修改当前插件配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果当前配置没有值 默认返回 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = vscode.<span class=\"property\">workspace</span>.<span class=\"title function_\">getConfiguration</span>().<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;demo.showtick&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改配置 第三个参数如果传true 则修改全局配置，false只修改当前工作区配置</span></span><br><span class=\"line\">vscode.<span class=\"property\">workspace</span>.<span class=\"title function_\">getConfiguration</span>().<span class=\"title function_\">update</span>(<span class=\"string\">&#x27;demo.showtick&#x27;</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打包发布\"><a href=\"#打包发布\" class=\"headerlink\" title=\"打包发布\"></a>打包发布</h2><p>如果只是自己使用可以直接打包本地安装，发布到插件市场感觉创建发布前期还是有点繁琐的。</p>\n<h3 id=\"本地打包\"><a href=\"#本地打包\" class=\"headerlink\" title=\"本地打包\"></a>本地打包</h3><p><strong>vsce</strong> 是一个用于将插件发布到市场上的命令行工具。不论是本地打包还是要发布到插件市场都需要使用这个工具</p>\n<p>首先安装vsce</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g vsce</span><br></pre></td></tr></table></figure>\n<p>打包成vsix包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vsce package</span><br></pre></td></tr></table></figure>\n<h3 id=\"发出插件市场\"><a href=\"#发出插件市场\" class=\"headerlink\" title=\"发出插件市场\"></a>发出插件市场</h3><p>发布到插件市场有两种方式，一种是在 VS Code 插件市场直接发布 vsix 包，另一种是直接使用 vsce 发布</p>\n<h4 id=\"在插件市场发布\"><a href=\"#在插件市场发布\" class=\"headerlink\" title=\"在插件市场发布\"></a>在插件市场发布</h4><p>首先在 <a href=\"https://marketplace.visualstudio.com/VSCode\">插件市场</a> 登录你的账号，可以使用 github 账户或者 Microsoft账户登录<br><img src=\"/images/posts/vscode_extension_two/20210623231124.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><br>创建发布者（这里需要翻墙），这里发布者 ID 需要和插件 package.json 的 publisher 保持一致。<br><img src=\"/images/posts/vscode_extension_two/20210623230340.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><br><img src=\"/images/posts/vscode_extension_two/20210623230642.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><br>上传vsix包文件<br><img src=\"/images/posts/vscode_extension_two/20210623231651.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<h4 id=\"使用vsce发布\"><a href=\"#使用vsce发布\" class=\"headerlink\" title=\"使用vsce发布\"></a>使用vsce发布</h4><p>使用 vsce 发布首先需要 一个微软 <strong>Azure</strong> 账户，然后创建一个 <strong>Azure DevOps</strong>，然后在组织里创建发布 Token，然后就能使用 vsce 发布插件。</p>\n<p>首先打开  <a href=\"https://dev.azure.com/\">azure</a> ，直接使用微软账户登录创建一个组织。按照步骤默认会创建一个以邮箱前缀为名的组织。<br>创建完后<br><img src=\"/images/posts/vscode_extension_two/20210623232915.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><br>创建 tonken,然后将生成tonken保存下来<br><img src=\"/images/posts/vscode_extension_two/20210623233248.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><br>然后需要创建一个 publisher， 以前可以 vsce 直接创建 ，新的不在支持了，只能通过在上一种方式在网页创建了。<br>创建好后就可以在使用 vsce publish 命令发布插件，这个时候会提示需要 tonken，将刚刚生成复制上去。可以看到插件已经发布上去了。<br><img src=\"/images/posts/vscode_extension_two/20210623234418.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<h3 id=\"发布注意事项\"><a href=\"#发布注意事项\" class=\"headerlink\" title=\"发布注意事项\"></a>发布注意事项</h3><ul>\n<li>README.md 文件默认会显示在插件主页，且里面连接需要是 https 的</li>\n<li>CHANGELOG.md 会显示在变更选项卡</li>\n</ul>\n","excerpt":"<p>接着上面的继续介绍一些常用的 VS Code 插件的配置和 API。</p>","more":"<h2 id=\"代码片段\"><a href=\"#代码片段\" class=\"headerlink\" title=\"代码片段\"></a>代码片段</h2><p>在 package.json 增加 snippets 配置。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;snippets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;language&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vue&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 指定支持的语言</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./snippets/demo.json&quot;</span> <span class=\"comment\">// 文件路径</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n<p>在 snippets 文件夹下创建 demo.json 文件，代码格式如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;片段名称&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;prefix&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;代码片段触发前缀&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;body&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span> <span class=\"string\">&quot;片段内容&quot;</span> <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;代码片段描述&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 示例</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;selectCheckBox&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;prefix&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;select-check-box&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;body&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"string\">&quot;&lt;select-check-box v-model=&#x27;$&#123;1:search.statusList&#125;&#x27;  :sourceOpt=&#x27;$&#123;2:statusOpt&#125;&#x27; @change=&#x27;$&#123;3:getList(1)&#125;&#x27; title=&#x27;$&#123;4:状态&#125;&#x27;&gt;&lt;/select-check-box&gt;&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;多选下拉框&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>片段中的 ${1:xxx} 是占位符，数字表示光标聚焦的顺序，1表示默认光标落在这里，按下回车或者tab跳到2的位置，以此类推，xxx 表示此位置的默认值，可省略，比如直接写$3。一个片段里可以设置多个相同的占位符，来同时修改多出占位处。片段中也是支持使用 VS Code 内置的很多变量的，比如可以根据获取当前选择的值(${TM_SELECTED_TEXT}) 填充到代码片段中。</p>\n<p>占位符几种使用</p>\n<ul>\n<li>$1 只显示光标</li>\n<li>${1:xxxx} 默认使用 xxx 填充</li>\n<li>${1|a,b,c|} 当光标在此处时 提供 a,b,c 三个选择给选择</li>\n<li>${1:${TM_SELECTED_TEXT}} 使用内置的变量占位</li>\n</ul>\n<p>常用用的变量，<a href=\"https://code.visualstudio.com/docs/editor/variables-reference#_environment-variables\">查看更多变量</a></p>\n<ul>\n<li>TM_SELECTED_TEXT当前选定的文本或空字符串</li>\n<li>TM_CURRENT_LINE当前行的内容</li>\n<li>TM_CURRENT_WORD光标下的单词或空字符串的内容</li>\n<li>TM_LINE_INDEX基于零索引的行号</li>\n<li>TM_LINE_NUMBER基于单索引的行号</li>\n<li>TM_FILENAME当前文档的文件名</li>\n<li>TM_FILENAME_BASE没有扩展名的当前文档的文件名</li>\n<li>TM_DIRECTORY当前文档的目录</li>\n<li>TM_FILEPATH当前文档的完整文件路径</li>\n<li>CLIPBOARD剪贴板的内容</li>\n<li>CURRENT_YEAR当前年份</li>\n<li>CURRENT_YEAR_SHORT当前年份的最后两位数字</li>\n<li>CURRENT_MONTH两个数字的月份（例如’02’）</li>\n<li>CURRENT_MONTH_NAME月份的全名（例如“七月”）</li>\n<li>CURRENT_MONTH_NAME_SHORT月份的简称（例如’Jul’）</li>\n<li>CURRENT_DATE每月的某一天</li>\n<li>CURRENT_DAY_NAME天的名称（例如’星期一’）</li>\n<li>CURRENT_DAY_NAME_SHORT当天的简称（例如’Mon’）</li>\n<li>CURRENT_HOUR 24小时制格式的当前小时</li>\n<li>CURRENT_MINUTE当前分钟</li>\n<li>CURRENT_SECOND当前秒</li>\n</ul>\n<h2 id=\"插件配置\"><a href=\"#插件配置\" class=\"headerlink\" title=\"插件配置\"></a>插件配置</h2><p>在 configuration 中配置的内容会暴露给用户，用户可以从“用户设置”和“工作区设置”中修改你暴露的选项。configuration 是 JSON 格式的键值对，用户会在修改设置时获得对应的提示和更好的体验。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;contributes&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;configuration&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;显示在配置页左侧标题&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;demo.showtick&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;boolean&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;default&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;配置demo&quot;</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>在插件内获取和修改当前插件配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果当前配置没有值 默认返回 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = vscode.<span class=\"property\">workspace</span>.<span class=\"title function_\">getConfiguration</span>().<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;demo.showtick&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改配置 第三个参数如果传true 则修改全局配置，false只修改当前工作区配置</span></span><br><span class=\"line\">vscode.<span class=\"property\">workspace</span>.<span class=\"title function_\">getConfiguration</span>().<span class=\"title function_\">update</span>(<span class=\"string\">&#x27;demo.showtick&#x27;</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打包发布\"><a href=\"#打包发布\" class=\"headerlink\" title=\"打包发布\"></a>打包发布</h2><p>如果只是自己使用可以直接打包本地安装，发布到插件市场感觉创建发布前期还是有点繁琐的。</p>\n<h3 id=\"本地打包\"><a href=\"#本地打包\" class=\"headerlink\" title=\"本地打包\"></a>本地打包</h3><p><strong>vsce</strong> 是一个用于将插件发布到市场上的命令行工具。不论是本地打包还是要发布到插件市场都需要使用这个工具</p>\n<p>首先安装vsce</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g vsce</span><br></pre></td></tr></table></figure>\n<p>打包成vsix包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vsce package</span><br></pre></td></tr></table></figure>\n<h3 id=\"发出插件市场\"><a href=\"#发出插件市场\" class=\"headerlink\" title=\"发出插件市场\"></a>发出插件市场</h3><p>发布到插件市场有两种方式，一种是在 VS Code 插件市场直接发布 vsix 包，另一种是直接使用 vsce 发布</p>\n<h4 id=\"在插件市场发布\"><a href=\"#在插件市场发布\" class=\"headerlink\" title=\"在插件市场发布\"></a>在插件市场发布</h4><p>首先在 <a href=\"https://marketplace.visualstudio.com/VSCode\">插件市场</a> 登录你的账号，可以使用 github 账户或者 Microsoft账户登录<br><img src=\"/images/posts/vscode_extension_two/20210623231124.png\"><br>创建发布者（这里需要翻墙），这里发布者 ID 需要和插件 package.json 的 publisher 保持一致。<br><img src=\"/images/posts/vscode_extension_two/20210623230340.png\"><br><img src=\"/images/posts/vscode_extension_two/20210623230642.png\"><br>上传vsix包文件<br><img src=\"/images/posts/vscode_extension_two/20210623231651.png\"></p>\n<h4 id=\"使用vsce发布\"><a href=\"#使用vsce发布\" class=\"headerlink\" title=\"使用vsce发布\"></a>使用vsce发布</h4><p>使用 vsce 发布首先需要 一个微软 <strong>Azure</strong> 账户，然后创建一个 <strong>Azure DevOps</strong>，然后在组织里创建发布 Token，然后就能使用 vsce 发布插件。</p>\n<p>首先打开  <a href=\"https://dev.azure.com/\">azure</a> ，直接使用微软账户登录创建一个组织。按照步骤默认会创建一个以邮箱前缀为名的组织。<br>创建完后<br><img src=\"/images/posts/vscode_extension_two/20210623232915.png\"><br>创建 tonken,然后将生成tonken保存下来<br><img src=\"/images/posts/vscode_extension_two/20210623233248.png\"><br>然后需要创建一个 publisher， 以前可以 vsce 直接创建 ，新的不在支持了，只能通过在上一种方式在网页创建了。<br>创建好后就可以在使用 vsce publish 命令发布插件，这个时候会提示需要 tonken，将刚刚生成复制上去。可以看到插件已经发布上去了。<br><img src=\"/images/posts/vscode_extension_two/20210623234418.png\"></p>\n<h3 id=\"发布注意事项\"><a href=\"#发布注意事项\" class=\"headerlink\" title=\"发布注意事项\"></a>发布注意事项</h3><ul>\n<li>README.md 文件默认会显示在插件主页，且里面连接需要是 https 的</li>\n<li>CHANGELOG.md 会显示在变更选项卡</li>\n</ul>"},{"title":"keep-alive 与 router-view","comments":1,"date":"2020-12-07T12:07:05.000Z","description":null,"keywords":null,"_content":"\nkeep-alive 用于缓存不活动的组件实例，router-view 一个 functional 组件，渲染路径匹配到的视图组件。这里对两者结合使用时遇到几种情况做个简单记录\n<!-- more -->\n\n## keep-alive\n属性：\n- include - 字符串或正则表达式。只有名称匹配的组件会被缓存。\n- exclude - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。\n- max - 数字。最多可以缓存多少组件实例。\n\n缓存组件名为 a，b 的组件，排除组成名为 c 的\n``` html\n<keep-alive :include=\"['a','b']\" :exclude=\"['c']\" :max=\"5\">\n  <component :is=\"view\"></component>\n</keep-alive>\n```\n## 结合router-view使用\n\n如果直接被包在 keep-alive 里面，所有路径匹配到的视图组件都会被缓存\n``` html\n<keep-alive>\n   <router-view></router-view>\n</keep-alive>\n```\n然后实现总是会有其他不同的需求的\n- 比如只缓存某些组件\n- 或者相同路由不同参数需要分开缓存\n<!-- - 又或者不同路由使用相同组件一个缓存另一个不需要缓存 -->\n- ...\n\n### 缓存部分组件 \n\n指定只缓存部分组件，相对来说比较简单。 可以在 router.meta 中增加需要缓存标识，然后使用\ninclude 指定需要缓存组件\n\n``` html\n<template>\n    <keep-alive :include=\"include\">\n        <router-view />\n    </keep-alive>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                include: []\n            }\n        },\n        watch: {\n            $route(route) {\n                let { meta } = route\n                if (meta.cache && !this.include.includes(meta.name)) {\n                    this.include.push(meta.name)\n                }\n            }\n        }\n    }\n</script>\n\n// route 路由数组\n[{\n    path: 'home',\n    name: \"home\",\n    meta:{\n        name:'组件名称',\n        cache:true  //设置需要缓存\n    },\n    component: () => import('@/views/home')\n},{\n    path: '/login',\n    name: 'login',\n    meta:{\n        name:'组件名称',\n        cache:true\n    },\n    component: () => import('@/views/login'),\n}]\n```\n这种方式需要知道组件的 name，当项目较大时候，给路由匹配上对应组件 name 也是件挺繁琐的事。改进一下使用两个 router-view 组件，一个用 keep-alive 包裹进行缓存，一个不缓存。这样就不需要例举出需要被缓存组件名称\n\n``` html\n<template>\n    <keep-alive>\n        <router-view  v-if=\"$route.meta.cache\" />\n    </keep-alive>\n</template>\n\n<router-view v-if=\"!$route.meta.cache\" />\n```\n\n### 相同路由不同参数\n当有一个路由为 /params/:id ，打开 /params/1、/params/2 、/params/xxx 正常情况下 vue 会对其进行复用，但是有些时候我们需要对其分开缓存。 这个时候可以给 router-view 指定 key\n``` html\n<keep-alive>\n   <router-view :key=\"$route.fullPath\"></router-view>\n</keep-alive>\n```\n$route.fullPath : 完成解析后的 URL，包含查询参数和 hash 的完整路径。所以每个路径都是唯一的，当然也可以指定其他的值，只需要保持唯一就可以了\n\n<!-- ### 不同路由使用相同组件\n当都需要缓存的时候，和正常情况一样处理就可以了。但是当一个需要缓存一个不需要缓存时候（没有的这么奇葩要求，但是被面试问答过） -->\n","source":"_posts/vue_keep_alive.md","raw":"---\ntitle: keep-alive 与 router-view\ncomments: true\ndate: 2020-12-07 20:07:05\ntags: [vue]\ncategories: 记录类\ndescription:\nkeywords:\n---\n\nkeep-alive 用于缓存不活动的组件实例，router-view 一个 functional 组件，渲染路径匹配到的视图组件。这里对两者结合使用时遇到几种情况做个简单记录\n<!-- more -->\n\n## keep-alive\n属性：\n- include - 字符串或正则表达式。只有名称匹配的组件会被缓存。\n- exclude - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。\n- max - 数字。最多可以缓存多少组件实例。\n\n缓存组件名为 a，b 的组件，排除组成名为 c 的\n``` html\n<keep-alive :include=\"['a','b']\" :exclude=\"['c']\" :max=\"5\">\n  <component :is=\"view\"></component>\n</keep-alive>\n```\n## 结合router-view使用\n\n如果直接被包在 keep-alive 里面，所有路径匹配到的视图组件都会被缓存\n``` html\n<keep-alive>\n   <router-view></router-view>\n</keep-alive>\n```\n然后实现总是会有其他不同的需求的\n- 比如只缓存某些组件\n- 或者相同路由不同参数需要分开缓存\n<!-- - 又或者不同路由使用相同组件一个缓存另一个不需要缓存 -->\n- ...\n\n### 缓存部分组件 \n\n指定只缓存部分组件，相对来说比较简单。 可以在 router.meta 中增加需要缓存标识，然后使用\ninclude 指定需要缓存组件\n\n``` html\n<template>\n    <keep-alive :include=\"include\">\n        <router-view />\n    </keep-alive>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                include: []\n            }\n        },\n        watch: {\n            $route(route) {\n                let { meta } = route\n                if (meta.cache && !this.include.includes(meta.name)) {\n                    this.include.push(meta.name)\n                }\n            }\n        }\n    }\n</script>\n\n// route 路由数组\n[{\n    path: 'home',\n    name: \"home\",\n    meta:{\n        name:'组件名称',\n        cache:true  //设置需要缓存\n    },\n    component: () => import('@/views/home')\n},{\n    path: '/login',\n    name: 'login',\n    meta:{\n        name:'组件名称',\n        cache:true\n    },\n    component: () => import('@/views/login'),\n}]\n```\n这种方式需要知道组件的 name，当项目较大时候，给路由匹配上对应组件 name 也是件挺繁琐的事。改进一下使用两个 router-view 组件，一个用 keep-alive 包裹进行缓存，一个不缓存。这样就不需要例举出需要被缓存组件名称\n\n``` html\n<template>\n    <keep-alive>\n        <router-view  v-if=\"$route.meta.cache\" />\n    </keep-alive>\n</template>\n\n<router-view v-if=\"!$route.meta.cache\" />\n```\n\n### 相同路由不同参数\n当有一个路由为 /params/:id ，打开 /params/1、/params/2 、/params/xxx 正常情况下 vue 会对其进行复用，但是有些时候我们需要对其分开缓存。 这个时候可以给 router-view 指定 key\n``` html\n<keep-alive>\n   <router-view :key=\"$route.fullPath\"></router-view>\n</keep-alive>\n```\n$route.fullPath : 完成解析后的 URL，包含查询参数和 hash 的完整路径。所以每个路径都是唯一的，当然也可以指定其他的值，只需要保持唯一就可以了\n\n<!-- ### 不同路由使用相同组件\n当都需要缓存的时候，和正常情况一样处理就可以了。但是当一个需要缓存一个不需要缓存时候（没有的这么奇葩要求，但是被面试问答过） -->\n","slug":"vue_keep_alive","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vsd003398lg10jh4rei","content":"<p>keep-alive 用于缓存不活动的组件实例，router-view 一个 functional 组件，渲染路径匹配到的视图组件。这里对两者结合使用时遇到几种情况做个简单记录</p>\n<span id=\"more\"></span>\n\n<h2 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a>keep-alive</h2><p>属性：</p>\n<ul>\n<li>include - 字符串或正则表达式。只有名称匹配的组件会被缓存。</li>\n<li>exclude - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。</li>\n<li>max - 数字。最多可以缓存多少组件实例。</li>\n</ul>\n<p>缓存组件名为 a，b 的组件，排除组成名为 c 的</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">&quot;[&#x27;a&#x27;,&#x27;b&#x27;]&quot;</span> <span class=\"attr\">:exclude</span>=<span class=\"string\">&quot;[&#x27;c&#x27;]&quot;</span> <span class=\"attr\">:max</span>=<span class=\"string\">&quot;5&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;view&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"结合router-view使用\"><a href=\"#结合router-view使用\" class=\"headerlink\" title=\"结合router-view使用\"></a>结合router-view使用</h2><p>如果直接被包在 keep-alive 里面，所有路径匹配到的视图组件都会被缓存</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后实现总是会有其他不同的需求的</p>\n<ul>\n<li>比如只缓存某些组件</li>\n<li>或者相同路由不同参数需要分开缓存<!-- - 又或者不同路由使用相同组件一个缓存另一个不需要缓存 --></li>\n<li>…</li>\n</ul>\n<h3 id=\"缓存部分组件\"><a href=\"#缓存部分组件\" class=\"headerlink\" title=\"缓存部分组件\"></a>缓存部分组件</h3><p>指定只缓存部分组件，相对来说比较简单。 可以在 router.meta 中增加需要缓存标识，然后使用<br>include 指定需要缓存组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">&quot;include&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-view</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">include</span>: []</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">watch</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            $route(route) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> &#123; meta &#125; = route</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (meta.<span class=\"property\">cache</span> &amp;&amp; !<span class=\"variable language_\">this</span>.<span class=\"property\">include</span>.<span class=\"title function_\">includes</span>(meta.<span class=\"property\">name</span>)) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">include</span>.<span class=\"title function_\">push</span>(meta.<span class=\"property\">name</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// route 路由数组</span><br><span class=\"line\">[&#123;</span><br><span class=\"line\">    path: &#x27;home&#x27;,</span><br><span class=\"line\">    name: &quot;home&quot;,</span><br><span class=\"line\">    meta:&#123;</span><br><span class=\"line\">        name:&#x27;组件名称&#x27;,</span><br><span class=\"line\">        cache:true  //设置需要缓存</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    component: () =&gt; import(&#x27;@/views/home&#x27;)</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    path: &#x27;/login&#x27;,</span><br><span class=\"line\">    name: &#x27;login&#x27;,</span><br><span class=\"line\">    meta:&#123;</span><br><span class=\"line\">        name:&#x27;组件名称&#x27;,</span><br><span class=\"line\">        cache:true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    component: () =&gt; import(&#x27;@/views/login&#x27;),</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<p>这种方式需要知道组件的 name，当项目较大时候，给路由匹配上对应组件 name 也是件挺繁琐的事。改进一下使用两个 router-view 组件，一个用 keep-alive 包裹进行缓存，一个不缓存。这样就不需要例举出需要被缓存组件名称</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-view</span>  <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;$route.meta.cache&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;!$route.meta.cache&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相同路由不同参数\"><a href=\"#相同路由不同参数\" class=\"headerlink\" title=\"相同路由不同参数\"></a>相同路由不同参数</h3><p>当有一个路由为 &#x2F;params&#x2F;:id ，打开 &#x2F;params&#x2F;1、&#x2F;params&#x2F;2 、&#x2F;params&#x2F;xxx 正常情况下 vue 会对其进行复用，但是有些时候我们需要对其分开缓存。 这个时候可以给 router-view 指定 key</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;$route.fullPath&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>$route.fullPath : 完成解析后的 URL，包含查询参数和 hash 的完整路径。所以每个路径都是唯一的，当然也可以指定其他的值，只需要保持唯一就可以了</p>\n<!-- ### 不同路由使用相同组件\n当都需要缓存的时候，和正常情况一样处理就可以了。但是当一个需要缓存一个不需要缓存时候（没有的这么奇葩要求，但是被面试问答过） -->\n","excerpt":"<p>keep-alive 用于缓存不活动的组件实例，router-view 一个 functional 组件，渲染路径匹配到的视图组件。这里对两者结合使用时遇到几种情况做个简单记录</p>","more":"<h2 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a>keep-alive</h2><p>属性：</p>\n<ul>\n<li>include - 字符串或正则表达式。只有名称匹配的组件会被缓存。</li>\n<li>exclude - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。</li>\n<li>max - 数字。最多可以缓存多少组件实例。</li>\n</ul>\n<p>缓存组件名为 a，b 的组件，排除组成名为 c 的</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">&quot;[&#x27;a&#x27;,&#x27;b&#x27;]&quot;</span> <span class=\"attr\">:exclude</span>=<span class=\"string\">&quot;[&#x27;c&#x27;]&quot;</span> <span class=\"attr\">:max</span>=<span class=\"string\">&quot;5&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;view&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"结合router-view使用\"><a href=\"#结合router-view使用\" class=\"headerlink\" title=\"结合router-view使用\"></a>结合router-view使用</h2><p>如果直接被包在 keep-alive 里面，所有路径匹配到的视图组件都会被缓存</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后实现总是会有其他不同的需求的</p>\n<ul>\n<li>比如只缓存某些组件</li>\n<li>或者相同路由不同参数需要分开缓存<!-- - 又或者不同路由使用相同组件一个缓存另一个不需要缓存 --></li>\n<li>…</li>\n</ul>\n<h3 id=\"缓存部分组件\"><a href=\"#缓存部分组件\" class=\"headerlink\" title=\"缓存部分组件\"></a>缓存部分组件</h3><p>指定只缓存部分组件，相对来说比较简单。 可以在 router.meta 中增加需要缓存标识，然后使用<br>include 指定需要缓存组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">&quot;include&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-view</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">include</span>: []</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">watch</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            $route(route) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> &#123; meta &#125; = route</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (meta.<span class=\"property\">cache</span> &amp;&amp; !<span class=\"variable language_\">this</span>.<span class=\"property\">include</span>.<span class=\"title function_\">includes</span>(meta.<span class=\"property\">name</span>)) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">include</span>.<span class=\"title function_\">push</span>(meta.<span class=\"property\">name</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// route 路由数组</span><br><span class=\"line\">[&#123;</span><br><span class=\"line\">    path: &#x27;home&#x27;,</span><br><span class=\"line\">    name: &quot;home&quot;,</span><br><span class=\"line\">    meta:&#123;</span><br><span class=\"line\">        name:&#x27;组件名称&#x27;,</span><br><span class=\"line\">        cache:true  //设置需要缓存</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    component: () =&gt; import(&#x27;@/views/home&#x27;)</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">    path: &#x27;/login&#x27;,</span><br><span class=\"line\">    name: &#x27;login&#x27;,</span><br><span class=\"line\">    meta:&#123;</span><br><span class=\"line\">        name:&#x27;组件名称&#x27;,</span><br><span class=\"line\">        cache:true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    component: () =&gt; import(&#x27;@/views/login&#x27;),</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<p>这种方式需要知道组件的 name，当项目较大时候，给路由匹配上对应组件 name 也是件挺繁琐的事。改进一下使用两个 router-view 组件，一个用 keep-alive 包裹进行缓存，一个不缓存。这样就不需要例举出需要被缓存组件名称</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-view</span>  <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;$route.meta.cache&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;!$route.meta.cache&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相同路由不同参数\"><a href=\"#相同路由不同参数\" class=\"headerlink\" title=\"相同路由不同参数\"></a>相同路由不同参数</h3><p>当有一个路由为 &#x2F;params&#x2F;:id ，打开 &#x2F;params&#x2F;1、&#x2F;params&#x2F;2 、&#x2F;params&#x2F;xxx 正常情况下 vue 会对其进行复用，但是有些时候我们需要对其分开缓存。 这个时候可以给 router-view 指定 key</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;$route.fullPath&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>$route.fullPath : 完成解析后的 URL，包含查询参数和 hash 的完整路径。所以每个路径都是唯一的，当然也可以指定其他的值，只需要保持唯一就可以了</p>\n<!-- ### 不同路由使用相同组件\n当都需要缓存的时候，和正常情况一样处理就可以了。但是当一个需要缓存一个不需要缓存时候（没有的这么奇葩要求，但是被面试问答过） -->"},{"title":"vue 使用中的小技巧 （一）","comments":1,"date":"2020-08-03T12:07:05.000Z","description":null,"keywords":"vue,vue优化","_content":"在 vue 的使用过程中会遇到各种场景，当普通使用时觉得没什么，但是或许优化一下可以更高效更优美的进行开发。下面有一些我在日常开发的时候用到的小技巧\n\n<!-- more -->\n\n## data 和 Object.freeze\n每个 Vue 实例都会代理其 data 对象里所有的属性，这些被代理的数据是响应式的，在其数据改变时视图也会随之更新。\n在每个 vue 组件中都有一个 data 对象，不要把所有数据都放在 data 中。只把需要做响应式的数据放在 data 对象中；原因是：如果一个数据存在于 data 中，数据会被劫持，vue 会给数据添加一个 getter（获取数据），一个 setter（设置数据），性能不会高。\n可以把一些不需要响应的数据直接放到实例上，而不是在 data 里\n\n``` js\ndata(){\n    // 不需要做响应的数据\n    this.list=[...]\n\n    return {\n        list2:[...]\n    }\n}\n```\n\n> Object.freeze() 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。freeze() 返回和传入的参数相同的对象\n\n对于一些不需要响应列表数据，也可以用 Object.freeze() 处理\n``` js\ndata(){\n   return { \n        list: []\n   }\n},\ncreated () {\n    let listData = Object.freeze([\n            { value: 1 },\n            { value: 2 }\n        ])\n    // 冻结 listData \n    this.list = listData;\n\n    // 界面不会有响应\n    this.list[0].value = 100;\n\n    // 下面两种做法，界面都会响应，只是冻结 listData 没有冻结 this.list\n    this.list = [\n        { value: 100 },\n        { value: 200 }\n    ];\n    this.list = Object.freeze([\n        { value: 100 },\n        { value: 200 }\n    ]);\n}\n```\n\n## 优雅处理事件监听和移除\n\n有时候我们会遇到这样的场景,需要自己去监听一些事件什么的，可能会像下面这个写，但是有时候可能因为 mounted 和 destroyed 不再一个位置啥的，导致忘记清除对事件监听。可以利用 hook 去监听钩子事件将它们写在一起\n\n``` js\nmounted() {\n    window.addEventListener('resize', this.func)\n},\ndestroyed() {\n    window.removeEventListener('resize', this.func)\n},\nmethods:{\n    func(){\n\n    }\n}\n```\n\n更改后\n\n``` js\nmounted() {\n    window.addEventListener('resize', this.func)\n    this.$once(\"hook:beforeDestroy\", ()=> {\n        window.removeEventListener('resize', this.func)\n    });\n},\nmethods:{\n    func(){\n\n    }\n}\n```\n## .sync 修饰符\n\n在有些情况下，我们可能需要对一个 **prop** 进行“双向绑定”。 不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以修改父组件，且在父组件和子组件都没有明显的改动来源。这也是为什么我们推荐以 **update:myPropName** 的模式触发事件取而代之。举个例子，在一个包含 **show** prop 的假设的组件中，我们可以用以下方法表达对其赋新值的意图：\n\n``` js\nthis.$emit('update:show', newShow)\n```\n父组件可以监听那个事件并根据需要更新一个本地的数据\n``` js\n<dialog  v-bind:title=\"show\"  v-on:update:show=\"show = $event\"></dialog>\n```\n使用 .sync 简写 \n``` js\n<dialog :title.sync=\"doc.title\"></dialog>\n```\n\n## 属性事件传递\n\n有时候需要对一些组件进行更高层次封装，例如有一个普通表格组件，需要实现能有行内编辑等一些功能时候，就需要对表格进行二次封装。像表格组件属性较多时，需要一个个去传递，非常不友好并且费时\n\n``` js\n<template>\n  <BaseTable v-bind=\"$props\" v-on=\"$listeners\"> <!-- ... --> </BaseTable>\n</template>\n\n<script>\n  import BaseTable from \"./BaseTable\";\n\n  export default {\n    components: {\n      BaseTable\n    }\n  };\n</script>\n```\n可以看到传递属性和事件的方便性，而不用一个个去传递,还有$attrs（props、class、style 除外的其他 attribute ）可以使用\n\n## Watch的初始立即执行\n当 watch 一个变量的时候，初始化时并不会执行，如下面的例子，你需要在 created 的时候手动调用一次。\n``` js\ncreated() {\n  this.search();\n},\nwatch: {\n  searchText(){\n    this.search()\n  },\n}\n```\n上面这样的做法可以使用，但很麻烦，我们可以添加 immediate 属性，这样初始化的时候就会自动触发(不用再写 created 去调用了)，然后上面的代码就能简化为\n``` js\nwatch: {\n  searchText: {\n    handler(){\n        this.search()\n    },\n    immediate: true\n  }\n}\n```\n","source":"_posts/vue_use1.md","raw":"---\ntitle: vue 使用中的小技巧 （一）\ncomments: true\ndate: 2020-08-03 20:07:05\ntags: [vue]\ncategories: 记录类\ndescription:\nkeywords: vue,vue优化\n---\n在 vue 的使用过程中会遇到各种场景，当普通使用时觉得没什么，但是或许优化一下可以更高效更优美的进行开发。下面有一些我在日常开发的时候用到的小技巧\n\n<!-- more -->\n\n## data 和 Object.freeze\n每个 Vue 实例都会代理其 data 对象里所有的属性，这些被代理的数据是响应式的，在其数据改变时视图也会随之更新。\n在每个 vue 组件中都有一个 data 对象，不要把所有数据都放在 data 中。只把需要做响应式的数据放在 data 对象中；原因是：如果一个数据存在于 data 中，数据会被劫持，vue 会给数据添加一个 getter（获取数据），一个 setter（设置数据），性能不会高。\n可以把一些不需要响应的数据直接放到实例上，而不是在 data 里\n\n``` js\ndata(){\n    // 不需要做响应的数据\n    this.list=[...]\n\n    return {\n        list2:[...]\n    }\n}\n```\n\n> Object.freeze() 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。freeze() 返回和传入的参数相同的对象\n\n对于一些不需要响应列表数据，也可以用 Object.freeze() 处理\n``` js\ndata(){\n   return { \n        list: []\n   }\n},\ncreated () {\n    let listData = Object.freeze([\n            { value: 1 },\n            { value: 2 }\n        ])\n    // 冻结 listData \n    this.list = listData;\n\n    // 界面不会有响应\n    this.list[0].value = 100;\n\n    // 下面两种做法，界面都会响应，只是冻结 listData 没有冻结 this.list\n    this.list = [\n        { value: 100 },\n        { value: 200 }\n    ];\n    this.list = Object.freeze([\n        { value: 100 },\n        { value: 200 }\n    ]);\n}\n```\n\n## 优雅处理事件监听和移除\n\n有时候我们会遇到这样的场景,需要自己去监听一些事件什么的，可能会像下面这个写，但是有时候可能因为 mounted 和 destroyed 不再一个位置啥的，导致忘记清除对事件监听。可以利用 hook 去监听钩子事件将它们写在一起\n\n``` js\nmounted() {\n    window.addEventListener('resize', this.func)\n},\ndestroyed() {\n    window.removeEventListener('resize', this.func)\n},\nmethods:{\n    func(){\n\n    }\n}\n```\n\n更改后\n\n``` js\nmounted() {\n    window.addEventListener('resize', this.func)\n    this.$once(\"hook:beforeDestroy\", ()=> {\n        window.removeEventListener('resize', this.func)\n    });\n},\nmethods:{\n    func(){\n\n    }\n}\n```\n## .sync 修饰符\n\n在有些情况下，我们可能需要对一个 **prop** 进行“双向绑定”。 不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以修改父组件，且在父组件和子组件都没有明显的改动来源。这也是为什么我们推荐以 **update:myPropName** 的模式触发事件取而代之。举个例子，在一个包含 **show** prop 的假设的组件中，我们可以用以下方法表达对其赋新值的意图：\n\n``` js\nthis.$emit('update:show', newShow)\n```\n父组件可以监听那个事件并根据需要更新一个本地的数据\n``` js\n<dialog  v-bind:title=\"show\"  v-on:update:show=\"show = $event\"></dialog>\n```\n使用 .sync 简写 \n``` js\n<dialog :title.sync=\"doc.title\"></dialog>\n```\n\n## 属性事件传递\n\n有时候需要对一些组件进行更高层次封装，例如有一个普通表格组件，需要实现能有行内编辑等一些功能时候，就需要对表格进行二次封装。像表格组件属性较多时，需要一个个去传递，非常不友好并且费时\n\n``` js\n<template>\n  <BaseTable v-bind=\"$props\" v-on=\"$listeners\"> <!-- ... --> </BaseTable>\n</template>\n\n<script>\n  import BaseTable from \"./BaseTable\";\n\n  export default {\n    components: {\n      BaseTable\n    }\n  };\n</script>\n```\n可以看到传递属性和事件的方便性，而不用一个个去传递,还有$attrs（props、class、style 除外的其他 attribute ）可以使用\n\n## Watch的初始立即执行\n当 watch 一个变量的时候，初始化时并不会执行，如下面的例子，你需要在 created 的时候手动调用一次。\n``` js\ncreated() {\n  this.search();\n},\nwatch: {\n  searchText(){\n    this.search()\n  },\n}\n```\n上面这样的做法可以使用，但很麻烦，我们可以添加 immediate 属性，这样初始化的时候就会自动触发(不用再写 created 去调用了)，然后上面的代码就能简化为\n``` js\nwatch: {\n  searchText: {\n    handler(){\n        this.search()\n    },\n    immediate: true\n  }\n}\n```\n","slug":"vue_use1","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vsk003698lggceq232l","content":"<p>在 vue 的使用过程中会遇到各种场景，当普通使用时觉得没什么，但是或许优化一下可以更高效更优美的进行开发。下面有一些我在日常开发的时候用到的小技巧</p>\n<span id=\"more\"></span>\n\n<h2 id=\"data-和-Object-freeze\"><a href=\"#data-和-Object-freeze\" class=\"headerlink\" title=\"data 和 Object.freeze\"></a>data 和 Object.freeze</h2><p>每个 Vue 实例都会代理其 data 对象里所有的属性，这些被代理的数据是响应式的，在其数据改变时视图也会随之更新。<br>在每个 vue 组件中都有一个 data 对象，不要把所有数据都放在 data 中。只把需要做响应式的数据放在 data 对象中；原因是：如果一个数据存在于 data 中，数据会被劫持，vue 会给数据添加一个 getter（获取数据），一个 setter（设置数据），性能不会高。<br>可以把一些不需要响应的数据直接放到实例上，而不是在 data 里</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不需要做响应的数据</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>=[...]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">list2</span>:[...]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Object.freeze() 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。freeze() 返回和传入的参数相同的对象</p>\n</blockquote>\n<p>对于一些不需要响应列表数据，也可以用 Object.freeze() 处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123; </span><br><span class=\"line\">        <span class=\"attr\">list</span>: []</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">created () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> listData = <span class=\"title class_\">Object</span>.<span class=\"title function_\">freeze</span>([</span><br><span class=\"line\">            &#123; <span class=\"attr\">value</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">            &#123; <span class=\"attr\">value</span>: <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">        ])</span><br><span class=\"line\">    <span class=\"comment\">// 冻结 listData </span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">list</span> = listData;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 界面不会有响应</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>[<span class=\"number\">0</span>].<span class=\"property\">value</span> = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 下面两种做法，界面都会响应，只是冻结 listData 没有冻结 this.list</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">list</span> = [</span><br><span class=\"line\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">200</span> &#125;</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">list</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">freeze</span>([</span><br><span class=\"line\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">200</span> &#125;</span><br><span class=\"line\">    ]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优雅处理事件监听和移除\"><a href=\"#优雅处理事件监听和移除\" class=\"headerlink\" title=\"优雅处理事件监听和移除\"></a>优雅处理事件监听和移除</h2><p>有时候我们会遇到这样的场景,需要自己去监听一些事件什么的，可能会像下面这个写，但是有时候可能因为 mounted 和 destroyed 不再一个位置啥的，导致忘记清除对事件监听。可以利用 hook 去监听钩子事件将它们写在一起</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">func</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"title function_\">destroyed</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">func</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">methods</span>:&#123;</span><br><span class=\"line\">    <span class=\"title function_\">func</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更改后</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">func</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.$once(<span class=\"string\">&quot;hook:beforeDestroy&quot;</span>, <span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">func</span>)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">methods</span>:&#123;</span><br><span class=\"line\">    <span class=\"title function_\">func</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"sync-修饰符\"><a href=\"#sync-修饰符\" class=\"headerlink\" title=\".sync 修饰符\"></a>.sync 修饰符</h2><p>在有些情况下，我们可能需要对一个 <strong>prop</strong> 进行“双向绑定”。 不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以修改父组件，且在父组件和子组件都没有明显的改动来源。这也是为什么我们推荐以 <strong>update:myPropName</strong> 的模式触发事件取而代之。举个例子，在一个包含 <strong>show</strong> prop 的假设的组件中，我们可以用以下方法表达对其赋新值的意图：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&#x27;update:show&#x27;</span>, newShow)</span><br></pre></td></tr></table></figure>\n<p>父组件可以监听那个事件并根据需要更新一个本地的数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dialog  v-<span class=\"attr\">bind</span>:title=<span class=\"string\">&quot;show&quot;</span>  v-<span class=\"attr\">on</span>:<span class=\"attr\">update</span>:show=<span class=\"string\">&quot;show = $event&quot;</span>&gt;&lt;/dialog&gt;</span><br></pre></td></tr></table></figure>\n<p>使用 .sync 简写 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dialog :title.<span class=\"property\">sync</span>=<span class=\"string\">&quot;doc.title&quot;</span>&gt;&lt;/dialog&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"属性事件传递\"><a href=\"#属性事件传递\" class=\"headerlink\" title=\"属性事件传递\"></a>属性事件传递</h2><p>有时候需要对一些组件进行更高层次封装，例如有一个普通表格组件，需要实现能有行内编辑等一些功能时候，就需要对表格进行二次封装。像表格组件属性较多时，需要一个个去传递，非常不友好并且费时</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BaseTable</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">&quot;$props&quot;</span> <span class=\"attr\">v-on</span>=<span class=\"string\">&quot;$listeners&quot;</span>&gt;</span> <span class=\"comment\">&lt;!-- ... --&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">BaseTable</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">import</span> <span class=\"title class_\">BaseTable</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./BaseTable&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">components</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"title class_\">BaseTable</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>可以看到传递属性和事件的方便性，而不用一个个去传递,还有$attrs（props、class、style 除外的其他 attribute ）可以使用</p>\n<h2 id=\"Watch的初始立即执行\"><a href=\"#Watch的初始立即执行\" class=\"headerlink\" title=\"Watch的初始立即执行\"></a>Watch的初始立即执行</h2><p>当 watch 一个变量的时候，初始化时并不会执行，如下面的例子，你需要在 created 的时候手动调用一次。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">created</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">search</span>();</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">searchText</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">search</span>()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这样的做法可以使用，但很麻烦，我们可以添加 immediate 属性，这样初始化的时候就会自动触发(不用再写 created 去调用了)，然后上面的代码就能简化为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">searchText</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">handler</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">search</span>()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>在 vue 的使用过程中会遇到各种场景，当普通使用时觉得没什么，但是或许优化一下可以更高效更优美的进行开发。下面有一些我在日常开发的时候用到的小技巧</p>","more":"<h2 id=\"data-和-Object-freeze\"><a href=\"#data-和-Object-freeze\" class=\"headerlink\" title=\"data 和 Object.freeze\"></a>data 和 Object.freeze</h2><p>每个 Vue 实例都会代理其 data 对象里所有的属性，这些被代理的数据是响应式的，在其数据改变时视图也会随之更新。<br>在每个 vue 组件中都有一个 data 对象，不要把所有数据都放在 data 中。只把需要做响应式的数据放在 data 对象中；原因是：如果一个数据存在于 data 中，数据会被劫持，vue 会给数据添加一个 getter（获取数据），一个 setter（设置数据），性能不会高。<br>可以把一些不需要响应的数据直接放到实例上，而不是在 data 里</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不需要做响应的数据</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>=[...]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">list2</span>:[...]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Object.freeze() 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。freeze() 返回和传入的参数相同的对象</p>\n</blockquote>\n<p>对于一些不需要响应列表数据，也可以用 Object.freeze() 处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123; </span><br><span class=\"line\">        <span class=\"attr\">list</span>: []</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">created () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> listData = <span class=\"title class_\">Object</span>.<span class=\"title function_\">freeze</span>([</span><br><span class=\"line\">            &#123; <span class=\"attr\">value</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">            &#123; <span class=\"attr\">value</span>: <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">        ])</span><br><span class=\"line\">    <span class=\"comment\">// 冻结 listData </span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">list</span> = listData;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 界面不会有响应</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>[<span class=\"number\">0</span>].<span class=\"property\">value</span> = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 下面两种做法，界面都会响应，只是冻结 listData 没有冻结 this.list</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">list</span> = [</span><br><span class=\"line\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">200</span> &#125;</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">list</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">freeze</span>([</span><br><span class=\"line\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">100</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">value</span>: <span class=\"number\">200</span> &#125;</span><br><span class=\"line\">    ]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优雅处理事件监听和移除\"><a href=\"#优雅处理事件监听和移除\" class=\"headerlink\" title=\"优雅处理事件监听和移除\"></a>优雅处理事件监听和移除</h2><p>有时候我们会遇到这样的场景,需要自己去监听一些事件什么的，可能会像下面这个写，但是有时候可能因为 mounted 和 destroyed 不再一个位置啥的，导致忘记清除对事件监听。可以利用 hook 去监听钩子事件将它们写在一起</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">func</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"title function_\">destroyed</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">func</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">methods</span>:&#123;</span><br><span class=\"line\">    <span class=\"title function_\">func</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更改后</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">func</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.$once(<span class=\"string\">&quot;hook:beforeDestroy&quot;</span>, <span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&#x27;resize&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">func</span>)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">methods</span>:&#123;</span><br><span class=\"line\">    <span class=\"title function_\">func</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"sync-修饰符\"><a href=\"#sync-修饰符\" class=\"headerlink\" title=\".sync 修饰符\"></a>.sync 修饰符</h2><p>在有些情况下，我们可能需要对一个 <strong>prop</strong> 进行“双向绑定”。 不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以修改父组件，且在父组件和子组件都没有明显的改动来源。这也是为什么我们推荐以 <strong>update:myPropName</strong> 的模式触发事件取而代之。举个例子，在一个包含 <strong>show</strong> prop 的假设的组件中，我们可以用以下方法表达对其赋新值的意图：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&#x27;update:show&#x27;</span>, newShow)</span><br></pre></td></tr></table></figure>\n<p>父组件可以监听那个事件并根据需要更新一个本地的数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dialog  v-<span class=\"attr\">bind</span>:title=<span class=\"string\">&quot;show&quot;</span>  v-<span class=\"attr\">on</span>:<span class=\"attr\">update</span>:show=<span class=\"string\">&quot;show = $event&quot;</span>&gt;&lt;/dialog&gt;</span><br></pre></td></tr></table></figure>\n<p>使用 .sync 简写 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dialog :title.<span class=\"property\">sync</span>=<span class=\"string\">&quot;doc.title&quot;</span>&gt;&lt;/dialog&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"属性事件传递\"><a href=\"#属性事件传递\" class=\"headerlink\" title=\"属性事件传递\"></a>属性事件传递</h2><p>有时候需要对一些组件进行更高层次封装，例如有一个普通表格组件，需要实现能有行内编辑等一些功能时候，就需要对表格进行二次封装。像表格组件属性较多时，需要一个个去传递，非常不友好并且费时</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">BaseTable</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">&quot;$props&quot;</span> <span class=\"attr\">v-on</span>=<span class=\"string\">&quot;$listeners&quot;</span>&gt;</span> <span class=\"comment\">&lt;!-- ... --&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">BaseTable</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">import</span> <span class=\"title class_\">BaseTable</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./BaseTable&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">components</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"title class_\">BaseTable</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>可以看到传递属性和事件的方便性，而不用一个个去传递,还有$attrs（props、class、style 除外的其他 attribute ）可以使用</p>\n<h2 id=\"Watch的初始立即执行\"><a href=\"#Watch的初始立即执行\" class=\"headerlink\" title=\"Watch的初始立即执行\"></a>Watch的初始立即执行</h2><p>当 watch 一个变量的时候，初始化时并不会执行，如下面的例子，你需要在 created 的时候手动调用一次。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">created</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">search</span>();</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">searchText</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">search</span>()</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这样的做法可以使用，但很麻烦，我们可以添加 immediate 属性，这样初始化的时候就会自动触发(不用再写 created 去调用了)，然后上面的代码就能简化为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">searchText</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">handler</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">search</span>()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Vue 中的 mixin,component,render,hoc","comments":1,"date":"2021-03-02T12:26:25.000Z","description":null,"keywords":"高阶组件,hoc,mixin","_content":"在项目中，一般我们经常会基于一套现有组件库进行快速开发，但是现实中往往需要对组件库进行定制化改造二次封装\n\n<!--more-->\n\n## 混入(mixin)\nvue 官方介绍\n>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。\n\n简单来说就是将组件的对象的属性，方法，钩子函数等等进行提取封装，以便达到可以多出复用。来看一个简单例子\n\n``` html\n<template>\n    <div>\n        <el-table :v-loading='isLoading' :data=\"tableData\" style=\"width: 100%\"  ref=\"table\">\n            <el-table-column type=\"selection\" width=\"55\"></el-table-column>\n            <el-table-column prop=\"name\" label=\"规则名称\"></el-table-column>\n            <el-table-column prop=\"description\" label=\"描述\"></el-table-column>\n            <el-table-column prop=\"count\" label=\"服务调用次数(万)\"></el-table-column>\n            <el-table-column prop=\"state\" label=\"状态\">\n                <template slot-scope=\"{row}\">\n                    <span :class=\"['run-state',row.state]\"></span>\n                    {{ row.state=='close'?'关闭':'运行中' }}\n                </template>\n            </el-table-column>\n            <el-table-column prop=\"time\" label=\"上次调度时间\"></el-table-column>\n            <el-table-column label=\"操作\">\n                <template>\n                    <el-button type=\"text\">编辑</el-button>\n                    <el-divider direction=\"vertical\"></el-divider>\n                    <el-button type=\"text\">订阅警报</el-button>\n                </template>\n            </el-table-column>\n        </el-table>\n         <el-pagination :current-page.sync=\"page.pageIndex\" :page-sizes=\"[20, 30, 40, 50]\" @size-change=\"(e)=>page.pageSize=e\" :total=\"total\" layout=\"total, sizes, prev, pager, next, jumper\"> </el-pagination>\n    </div>\n</template>\n<script>\nexport default {\n    data () {\n        return {\n            tableData:[],\n            isLoading: false,\n            total: 0,\n            page: {\n                pageSize: 20,\n                pageIndex: 1\n            }\n        };\n    },\n    watch: {\n        'page':{\n            deep: true,\n            immediate: true,\n            handler(){\n                this.getList()\n            }\n        }\n    },\n    methods: {\n        getList(pageIndex = this.page.pageIndex,pageSize = this.page.pageSize){\n            //获取列表数据\n            this.isLoading = true;\n            setTimeout(() => {\n                this.tableData = MockData();\n                this.total=300;\n                this.isLoading = false;\n            }, 2000);\n        }\n    }\n};\n</script>\n```\n上面是个常见报表分页使用场景，假如有很多个表报，那就需要写很多次分页的逻辑，正常开发中当然不可能这么处理的，这种情况就可以使用 mixins 来提取分页的逻辑。\n\n``` js\n// mixins.js\n<script>\nexport default {\n    data () {\n        return {\n            isLoading: false,\n            total: 0,\n            page: {\n                pageSize: 20,\n                pageIndex: 1\n            }\n        };\n    },\n    watch: {\n        'page':{\n            deep: true,\n            immediate: true,\n            handler(){\n                this.getList()\n            }\n        }\n    }\n};\n</script>\n```\n``` html\n<template>\n    <div>\n        <el-table :v-loading='isLoading' :data=\"tableData\" style=\"width: 100%\"  ref=\"table\">\n            <el-table-column type=\"selection\" width=\"55\"></el-table-column>\n            <el-table-column prop=\"name\" label=\"规则名称\"></el-table-column>\n            <el-table-column prop=\"description\" label=\"描述\"></el-table-column>\n            <el-table-column prop=\"count\" label=\"服务调用次数(万)\"></el-table-column>\n            <el-table-column prop=\"state\" label=\"状态\">\n                <template slot-scope=\"{row}\">\n                    <span :class=\"['run-state',row.state]\"></span>\n                    {{ row.state=='close'?'关闭':'运行中' }}\n                </template>\n            </el-table-column>\n            <el-table-column prop=\"time\" label=\"上次调度时间\"></el-table-column>\n            <el-table-column label=\"操作\">\n                <template>\n                    <el-button type=\"text\">编辑</el-button>\n                    <el-divider direction=\"vertical\"></el-divider>\n                    <el-button type=\"text\">订阅警报</el-button>\n                </template>\n            </el-table-column>\n        </el-table>\n         <el-pagination :current-page.sync=\"page.pageIndex\" :page-sizes=\"[20, 30, 40, 50]\" @size-change=\"(e)=>page.pageSize=e\" :total=\"page.total\" layout=\"total, sizes, prev, pager, next, jumper\"> </el-pagination>\n    </div>\n</template>\n<script>\nimport PageMixins from \"./mixins.js\";\nexport default {\n    mixins:[PageMixins],\n    data () {\n        return {\n            tableData:[]\n        };\n    },\n    methods: {\n        getList(pageIndex = this.page.pageIndex,pageSize = this.page.pageSize){\n            //获取列表数据\n            this.isLoading = true;\n            setTimeout(() => {\n                this.tableData = MockData();\n                this.total=300;\n                this.isLoading = false;\n            }, 2000);\n        }\n    }\n};\n</script>\n```\n这样就将分页的逻辑分离出来了，也可以被其他组件混入使用，大大的减少了代码量，当然 mixin 过度滥用也是存在缺点的。\n\n- 命名冲突\n    使用 mixins 是将两个组件对象合并的，当两个组件属性名重复时候，vue 默认会将本地组件的属性覆盖 mixin 的，虽然 vue 提供了合并策略配置，但是同时存在多个 mixin 存在命名冲突时候就会变得处理起来非常麻烦了。\n- 隐含的依赖关系\n    很明显上面的组件是依赖于 mixin 的，这种情况会存在潜在问题。如果我们以后想重构一个组件，改变了 mixin 需要的变量的名称，就会影响现有的组件的使用了，而且当项目中使用了很多这个 mixin 的时候，就只能去手动搜索修改了，因为不知道哪些组件使用了这些 mixin。\n\n## 组件封装\n上面表格还有中处理方法，就是将 el-table 和 el-pagination 封装成一个组件去是使用，也能提高复用性。\n\n### template封装\n使用 template 创建组件，来对 el-table 进行二次封装满足上面需求，增加一个 total 参数\n提供是一个分页改变事件，再把 m-table 的 $attrs 和 $listeners 绑定到 el-table 上，然后把 el-table 方法暴露出去，这样就可像使用 el-table 一样使用 m-table。\n``` html\n<template>\n    <div>\n        <el-table ref=\"table\" v-bind=\"$attrs\" v-on=\"$listeners\">\n            <slot></slot>\n        </el-table>\n        <el-pagination :current-page.sync=\"page.pageIndex\" :page-sizes=\"[20, 30, 40, 50]\" @size-change=\"(e)=>page.pageSize=e\" :total=\"total\" layout=\"total, sizes, prev, pager, next, jumper\"> </el-pagination>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'm-table',\n    data() {\n        return {\n            page: {\n                pageSize: 20,\n                pageIndex: 2\n            }\n        }\n    },\n    props: {\n        total: {\n            type: Number,\n            default: 0\n        }\n    },\n    watch: {\n        page: {\n            deep: true,\n            handler: function () {\n                this.$emit(\"page-chagne\")\n            }\n        }\n    },\n    methods: {\n        // 将el-table 方法暴露出去\n        ...(() => {\n            let methodsJson = {};\n            ['reloadData', 'clearSelection', 'toggleRowSelection', 'toggleAllSelection', 'setCurrentRow', 'clearSort', 'clearFilter', 'doLayout', 'sort']\n                .forEach(key => {\n                    methodsJson = {\n                        ...methodsJson, [key](...res) {\n                            this.$refs['table'][key].apply(this, res);\n                        }\n                    };\n                });\n            return methodsJson;\n        })()\n    }\n}\n</script>\n```\n使用 m-table\n``` html\n <m-table @page-chagne=\"GetTableDataList()\" :total=\"page.total\" :data=\"tableData\">\n    <el-table-column type=\"selection\" width=\"55\"></el-table-column>\n    <el-table-column prop=\"name\" label=\"规则名称\"></el-table-column>\n    <el-table-column prop=\"description\" label=\"描述\"></el-table-column>\n    <el-table-column prop=\"count\" label=\"服务调用次数(万)\"></el-table-column>\n    <el-table-column prop=\"state\" label=\"状态\">\n        <template slot-scope=\"{row}\">\n            <span :class=\"['run-state',row.state]\"></span>\n            {{ row.state=='close'?'关闭':'运行中' }}\n        </template>\n    </el-table-column>\n    <el-table-column prop=\"time\" label=\"上次调度时间\"></el-table-column>\n    <el-table-column label=\"操作\">\n        <template>\n            <el-button type=\"text\">编辑</el-button>\n            <el-divider direction=\"vertical\"></el-divider>\n            <el-button type=\"text\">订阅警报</el-button>\n        </template>\n    </el-table-column>\n</m-table>\n```\n一般情况下这样使用 template 封装就满足了需求，但是总有些时候这样封装是满足不了需求的。比如现在 m-table 现在需要动态支持修改配置显示列，并且不希望修改 m-table 的基本使用方式， 这个时候就需要使用 render 了。\n\n### render 函数\nVue 的模板实际上都会被编译成了渲染函数，render 函数有一个 createElement 参数，用来创建一个 VNode。\n\n要满足上面的需求，首先是的获得 el-table 的插槽(slot)中的内容，根据插槽的内容生成每列信息，根据配置的信息动态创建插槽的内容就可以实现了。简单示例代码入下\n``` html\n<script>\nimport mSetting from './setting'\nexport default {\n    components: { mSetting },\n    name: 'm-table',\n    data() {\n        return {\n            showTable: true,\n            setShow: false,\n            config: [],\n            copySlots: [], // 展示solt数据\n            page: {\n                pageSize: 20,\n                pageIndex: 1\n            }\n        }\n    },\n    props: {\n        total: {\n            type: Number,\n            default: 0\n        }\n    },\n    watch: {\n        page: {\n            deep: true,\n            handler: function () {\n                this.$emit(\"page-chagne\")\n            }\n        }\n    },\n    created() {\n        this.initConfig()\n    },\n    render() {\n        return (\n            <div>\n                <el-table ref=\"table\" {...{ attrs: this.$attrs }} {...{ on: this.$listeners }}>\n                    {\n                        this.copySlots\n                    }\n                </el-table>\n                {this.showTable ? (<el-pagination layout=\"total, sizes, prev, pager, next, jumper\"\n                    {...{\n                        on: {\n                            'size-change': (e) => this.page.pageSize = e,\n                            'current-change': (e) => this.page.pageIndex = e\n                        }\n                    }}\n                    {...{\n                        attrs: {\n                            'current-page': this.page.pageIndex,\n                            'page-sizes': [20, 30, 40, 50],\n                            'total': this.total\n                        }\n                    }}\n                > </el-pagination>) : null}\n                <m-setting  {...{\n                    on: {\n                        'update:show': e => this.setShow = e,\n                        'change': this.initConfig\n                    }\n                }} show={this.setShow} config={this.config}></m-setting>\n            </div >\n        )\n    },\n    methods: {\n        initConfig(config = []) {\n            if (config.length === 0) {\n                config = this.$slots.default\n                    .filter(item => item.componentOptions && item.componentOptions.tag === \"el-table-column\")\n                    .map(item => {\n                        if (item.componentOptions.propsData.prop === 'index') {\n                            if (!item.data.scopedSlots) {\n                                item.data.scopedSlots = {};\n                            }\n                            item.data.scopedSlots.header = () => (\n                                <i class=\"el-icon-s-tools\" onClick={() => this.setShow = true} />\n                            );\n                        }\n                        return { ...item.componentOptions.propsData };\n                    })\n                this.sourceConfig = JSON.parse(JSON.stringify(config))\n                this.copySlots = this.$slots.default;\n                this.sourceSlots = this.$slots.default;\n            } else {\n                let arr = []\n                this.sourceSlots.forEach(item => {\n                    let temp = config.find(subItem =>\n                        (subItem.prop && subItem.prop === item.componentOptions.propsData.prop) ||\n                        (subItem.type && subItem.type === item.componentOptions.propsData.type)\n                    );\n                    if (temp && temp.isShow) {\n                        Object.assign(item.componentOptions.propsData, temp);\n                        arr.push(item)\n                    }\n                })\n                this.copySlots = arr;\n                this.showTable = false\n                this.$nextTick(() => {\n                    this.showTable = true\n                })\n            }\n            this.config = config;\n        },\n        ...(() => {\n            let methodsJson = {};\n            ['reloadData', 'clearSelection', 'toggleRowSelection', 'toggleAllSelection', 'setCurrentRow', 'clearSort', 'clearFilter', 'doLayout', 'sort']\n                .forEach(key => {\n                    methodsJson = {\n                        ...methodsJson, [key](...res) {\n                            this.$refs['table'][key].apply(this, res);\n                        }\n                    };\n                });\n            return methodsJson;\n        })()\n    }\n}\n</script>\n```\n\n``` html\n<template>\n    <el-dialog title=\"表格设置\" :visible.sync=\"shows\" width=\"600px\" size=\"small\" :before-close=\"handleClose\">\n        <el-table :data=\"list\" size='mini'>\n            <el-table-column prop=\"showLabel\" label=\"名称\"></el-table-column>\n            <el-table-column prop=\"label\" label=\"显示名称\">\n                <template slot-scope=\"{row}\">\n                    <el-input size=\"mini\" v-model=\"row.label\"></el-input>\n                </template>\n            </el-table-column>\n            <el-table-column prop=\"isShow\" label=\"是否显示\" width=\"100\" align=\"center\">\n                <template slot-scope=\"{row}\">\n                    <el-switch v-model=\"row.isShow\"></el-switch>\n                </template>\n            </el-table-column>\n        </el-table>\n        <span slot=\"footer\" class=\"dialog-footer\">\n            <el-button @click=\"shows = false\" size=\"small\">取 消</el-button>\n            <el-button type=\"primary\" @click=\"handleClose()\" size=\"small\">确 定</el-button>\n        </span>\n    </el-dialog>\n</template>\n\n<script>\nexport default {\n    name: 'm-setting',\n    data() {\n        return {\n            list: []\n        };\n    },\n    computed: {\n        shows: {\n            get() {\n                return this.show;\n            },\n            set() {\n                this.$emit(\"update:show\")\n            }\n        }\n    },\n    props: {\n        show: {\n            type: Boolean,\n            required: true,\n            default: false\n        },\n        config: {\n            type: Array,\n            default() {\n                return []\n            }\n        }\n    },\n    created() {\n        this.init()\n    },\n    methods: {\n        init() {\n            this.list = this.config.map(item => {\n                return {\n                    ...item,\n                    showLabel: item.showLabel || item.label, // 名称\n                    isShow: item.isShow || true // 是否显示\n                }\n            })\n        },\n        handleClose() {\n            this.$emit('change', this.list);\n            this.shows = false\n        }\n    }\n};\n</script>\n```\n这样就简单实现了可以动态显示列，而且不需要去修改原组件的使用方式了。\n## hoc 高阶组件\n\n[vue高阶组件可以参考这篇](http://hcysun.me/2018/01/05/%E6%8E%A2%E7%B4%A2Vue%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/)","source":"_posts/vue_hoc.md","raw":"---\ntitle: Vue 中的 mixin,component,render,hoc\ncomments: true\ndate: 2021-03-02 20:26:25\ntags: [vue]\ndescription: \ncategories: 记录类\nkeywords: 高阶组件,hoc,mixin\n---\n在项目中，一般我们经常会基于一套现有组件库进行快速开发，但是现实中往往需要对组件库进行定制化改造二次封装\n\n<!--more-->\n\n## 混入(mixin)\nvue 官方介绍\n>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。\n\n简单来说就是将组件的对象的属性，方法，钩子函数等等进行提取封装，以便达到可以多出复用。来看一个简单例子\n\n``` html\n<template>\n    <div>\n        <el-table :v-loading='isLoading' :data=\"tableData\" style=\"width: 100%\"  ref=\"table\">\n            <el-table-column type=\"selection\" width=\"55\"></el-table-column>\n            <el-table-column prop=\"name\" label=\"规则名称\"></el-table-column>\n            <el-table-column prop=\"description\" label=\"描述\"></el-table-column>\n            <el-table-column prop=\"count\" label=\"服务调用次数(万)\"></el-table-column>\n            <el-table-column prop=\"state\" label=\"状态\">\n                <template slot-scope=\"{row}\">\n                    <span :class=\"['run-state',row.state]\"></span>\n                    {{ row.state=='close'?'关闭':'运行中' }}\n                </template>\n            </el-table-column>\n            <el-table-column prop=\"time\" label=\"上次调度时间\"></el-table-column>\n            <el-table-column label=\"操作\">\n                <template>\n                    <el-button type=\"text\">编辑</el-button>\n                    <el-divider direction=\"vertical\"></el-divider>\n                    <el-button type=\"text\">订阅警报</el-button>\n                </template>\n            </el-table-column>\n        </el-table>\n         <el-pagination :current-page.sync=\"page.pageIndex\" :page-sizes=\"[20, 30, 40, 50]\" @size-change=\"(e)=>page.pageSize=e\" :total=\"total\" layout=\"total, sizes, prev, pager, next, jumper\"> </el-pagination>\n    </div>\n</template>\n<script>\nexport default {\n    data () {\n        return {\n            tableData:[],\n            isLoading: false,\n            total: 0,\n            page: {\n                pageSize: 20,\n                pageIndex: 1\n            }\n        };\n    },\n    watch: {\n        'page':{\n            deep: true,\n            immediate: true,\n            handler(){\n                this.getList()\n            }\n        }\n    },\n    methods: {\n        getList(pageIndex = this.page.pageIndex,pageSize = this.page.pageSize){\n            //获取列表数据\n            this.isLoading = true;\n            setTimeout(() => {\n                this.tableData = MockData();\n                this.total=300;\n                this.isLoading = false;\n            }, 2000);\n        }\n    }\n};\n</script>\n```\n上面是个常见报表分页使用场景，假如有很多个表报，那就需要写很多次分页的逻辑，正常开发中当然不可能这么处理的，这种情况就可以使用 mixins 来提取分页的逻辑。\n\n``` js\n// mixins.js\n<script>\nexport default {\n    data () {\n        return {\n            isLoading: false,\n            total: 0,\n            page: {\n                pageSize: 20,\n                pageIndex: 1\n            }\n        };\n    },\n    watch: {\n        'page':{\n            deep: true,\n            immediate: true,\n            handler(){\n                this.getList()\n            }\n        }\n    }\n};\n</script>\n```\n``` html\n<template>\n    <div>\n        <el-table :v-loading='isLoading' :data=\"tableData\" style=\"width: 100%\"  ref=\"table\">\n            <el-table-column type=\"selection\" width=\"55\"></el-table-column>\n            <el-table-column prop=\"name\" label=\"规则名称\"></el-table-column>\n            <el-table-column prop=\"description\" label=\"描述\"></el-table-column>\n            <el-table-column prop=\"count\" label=\"服务调用次数(万)\"></el-table-column>\n            <el-table-column prop=\"state\" label=\"状态\">\n                <template slot-scope=\"{row}\">\n                    <span :class=\"['run-state',row.state]\"></span>\n                    {{ row.state=='close'?'关闭':'运行中' }}\n                </template>\n            </el-table-column>\n            <el-table-column prop=\"time\" label=\"上次调度时间\"></el-table-column>\n            <el-table-column label=\"操作\">\n                <template>\n                    <el-button type=\"text\">编辑</el-button>\n                    <el-divider direction=\"vertical\"></el-divider>\n                    <el-button type=\"text\">订阅警报</el-button>\n                </template>\n            </el-table-column>\n        </el-table>\n         <el-pagination :current-page.sync=\"page.pageIndex\" :page-sizes=\"[20, 30, 40, 50]\" @size-change=\"(e)=>page.pageSize=e\" :total=\"page.total\" layout=\"total, sizes, prev, pager, next, jumper\"> </el-pagination>\n    </div>\n</template>\n<script>\nimport PageMixins from \"./mixins.js\";\nexport default {\n    mixins:[PageMixins],\n    data () {\n        return {\n            tableData:[]\n        };\n    },\n    methods: {\n        getList(pageIndex = this.page.pageIndex,pageSize = this.page.pageSize){\n            //获取列表数据\n            this.isLoading = true;\n            setTimeout(() => {\n                this.tableData = MockData();\n                this.total=300;\n                this.isLoading = false;\n            }, 2000);\n        }\n    }\n};\n</script>\n```\n这样就将分页的逻辑分离出来了，也可以被其他组件混入使用，大大的减少了代码量，当然 mixin 过度滥用也是存在缺点的。\n\n- 命名冲突\n    使用 mixins 是将两个组件对象合并的，当两个组件属性名重复时候，vue 默认会将本地组件的属性覆盖 mixin 的，虽然 vue 提供了合并策略配置，但是同时存在多个 mixin 存在命名冲突时候就会变得处理起来非常麻烦了。\n- 隐含的依赖关系\n    很明显上面的组件是依赖于 mixin 的，这种情况会存在潜在问题。如果我们以后想重构一个组件，改变了 mixin 需要的变量的名称，就会影响现有的组件的使用了，而且当项目中使用了很多这个 mixin 的时候，就只能去手动搜索修改了，因为不知道哪些组件使用了这些 mixin。\n\n## 组件封装\n上面表格还有中处理方法，就是将 el-table 和 el-pagination 封装成一个组件去是使用，也能提高复用性。\n\n### template封装\n使用 template 创建组件，来对 el-table 进行二次封装满足上面需求，增加一个 total 参数\n提供是一个分页改变事件，再把 m-table 的 $attrs 和 $listeners 绑定到 el-table 上，然后把 el-table 方法暴露出去，这样就可像使用 el-table 一样使用 m-table。\n``` html\n<template>\n    <div>\n        <el-table ref=\"table\" v-bind=\"$attrs\" v-on=\"$listeners\">\n            <slot></slot>\n        </el-table>\n        <el-pagination :current-page.sync=\"page.pageIndex\" :page-sizes=\"[20, 30, 40, 50]\" @size-change=\"(e)=>page.pageSize=e\" :total=\"total\" layout=\"total, sizes, prev, pager, next, jumper\"> </el-pagination>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'm-table',\n    data() {\n        return {\n            page: {\n                pageSize: 20,\n                pageIndex: 2\n            }\n        }\n    },\n    props: {\n        total: {\n            type: Number,\n            default: 0\n        }\n    },\n    watch: {\n        page: {\n            deep: true,\n            handler: function () {\n                this.$emit(\"page-chagne\")\n            }\n        }\n    },\n    methods: {\n        // 将el-table 方法暴露出去\n        ...(() => {\n            let methodsJson = {};\n            ['reloadData', 'clearSelection', 'toggleRowSelection', 'toggleAllSelection', 'setCurrentRow', 'clearSort', 'clearFilter', 'doLayout', 'sort']\n                .forEach(key => {\n                    methodsJson = {\n                        ...methodsJson, [key](...res) {\n                            this.$refs['table'][key].apply(this, res);\n                        }\n                    };\n                });\n            return methodsJson;\n        })()\n    }\n}\n</script>\n```\n使用 m-table\n``` html\n <m-table @page-chagne=\"GetTableDataList()\" :total=\"page.total\" :data=\"tableData\">\n    <el-table-column type=\"selection\" width=\"55\"></el-table-column>\n    <el-table-column prop=\"name\" label=\"规则名称\"></el-table-column>\n    <el-table-column prop=\"description\" label=\"描述\"></el-table-column>\n    <el-table-column prop=\"count\" label=\"服务调用次数(万)\"></el-table-column>\n    <el-table-column prop=\"state\" label=\"状态\">\n        <template slot-scope=\"{row}\">\n            <span :class=\"['run-state',row.state]\"></span>\n            {{ row.state=='close'?'关闭':'运行中' }}\n        </template>\n    </el-table-column>\n    <el-table-column prop=\"time\" label=\"上次调度时间\"></el-table-column>\n    <el-table-column label=\"操作\">\n        <template>\n            <el-button type=\"text\">编辑</el-button>\n            <el-divider direction=\"vertical\"></el-divider>\n            <el-button type=\"text\">订阅警报</el-button>\n        </template>\n    </el-table-column>\n</m-table>\n```\n一般情况下这样使用 template 封装就满足了需求，但是总有些时候这样封装是满足不了需求的。比如现在 m-table 现在需要动态支持修改配置显示列，并且不希望修改 m-table 的基本使用方式， 这个时候就需要使用 render 了。\n\n### render 函数\nVue 的模板实际上都会被编译成了渲染函数，render 函数有一个 createElement 参数，用来创建一个 VNode。\n\n要满足上面的需求，首先是的获得 el-table 的插槽(slot)中的内容，根据插槽的内容生成每列信息，根据配置的信息动态创建插槽的内容就可以实现了。简单示例代码入下\n``` html\n<script>\nimport mSetting from './setting'\nexport default {\n    components: { mSetting },\n    name: 'm-table',\n    data() {\n        return {\n            showTable: true,\n            setShow: false,\n            config: [],\n            copySlots: [], // 展示solt数据\n            page: {\n                pageSize: 20,\n                pageIndex: 1\n            }\n        }\n    },\n    props: {\n        total: {\n            type: Number,\n            default: 0\n        }\n    },\n    watch: {\n        page: {\n            deep: true,\n            handler: function () {\n                this.$emit(\"page-chagne\")\n            }\n        }\n    },\n    created() {\n        this.initConfig()\n    },\n    render() {\n        return (\n            <div>\n                <el-table ref=\"table\" {...{ attrs: this.$attrs }} {...{ on: this.$listeners }}>\n                    {\n                        this.copySlots\n                    }\n                </el-table>\n                {this.showTable ? (<el-pagination layout=\"total, sizes, prev, pager, next, jumper\"\n                    {...{\n                        on: {\n                            'size-change': (e) => this.page.pageSize = e,\n                            'current-change': (e) => this.page.pageIndex = e\n                        }\n                    }}\n                    {...{\n                        attrs: {\n                            'current-page': this.page.pageIndex,\n                            'page-sizes': [20, 30, 40, 50],\n                            'total': this.total\n                        }\n                    }}\n                > </el-pagination>) : null}\n                <m-setting  {...{\n                    on: {\n                        'update:show': e => this.setShow = e,\n                        'change': this.initConfig\n                    }\n                }} show={this.setShow} config={this.config}></m-setting>\n            </div >\n        )\n    },\n    methods: {\n        initConfig(config = []) {\n            if (config.length === 0) {\n                config = this.$slots.default\n                    .filter(item => item.componentOptions && item.componentOptions.tag === \"el-table-column\")\n                    .map(item => {\n                        if (item.componentOptions.propsData.prop === 'index') {\n                            if (!item.data.scopedSlots) {\n                                item.data.scopedSlots = {};\n                            }\n                            item.data.scopedSlots.header = () => (\n                                <i class=\"el-icon-s-tools\" onClick={() => this.setShow = true} />\n                            );\n                        }\n                        return { ...item.componentOptions.propsData };\n                    })\n                this.sourceConfig = JSON.parse(JSON.stringify(config))\n                this.copySlots = this.$slots.default;\n                this.sourceSlots = this.$slots.default;\n            } else {\n                let arr = []\n                this.sourceSlots.forEach(item => {\n                    let temp = config.find(subItem =>\n                        (subItem.prop && subItem.prop === item.componentOptions.propsData.prop) ||\n                        (subItem.type && subItem.type === item.componentOptions.propsData.type)\n                    );\n                    if (temp && temp.isShow) {\n                        Object.assign(item.componentOptions.propsData, temp);\n                        arr.push(item)\n                    }\n                })\n                this.copySlots = arr;\n                this.showTable = false\n                this.$nextTick(() => {\n                    this.showTable = true\n                })\n            }\n            this.config = config;\n        },\n        ...(() => {\n            let methodsJson = {};\n            ['reloadData', 'clearSelection', 'toggleRowSelection', 'toggleAllSelection', 'setCurrentRow', 'clearSort', 'clearFilter', 'doLayout', 'sort']\n                .forEach(key => {\n                    methodsJson = {\n                        ...methodsJson, [key](...res) {\n                            this.$refs['table'][key].apply(this, res);\n                        }\n                    };\n                });\n            return methodsJson;\n        })()\n    }\n}\n</script>\n```\n\n``` html\n<template>\n    <el-dialog title=\"表格设置\" :visible.sync=\"shows\" width=\"600px\" size=\"small\" :before-close=\"handleClose\">\n        <el-table :data=\"list\" size='mini'>\n            <el-table-column prop=\"showLabel\" label=\"名称\"></el-table-column>\n            <el-table-column prop=\"label\" label=\"显示名称\">\n                <template slot-scope=\"{row}\">\n                    <el-input size=\"mini\" v-model=\"row.label\"></el-input>\n                </template>\n            </el-table-column>\n            <el-table-column prop=\"isShow\" label=\"是否显示\" width=\"100\" align=\"center\">\n                <template slot-scope=\"{row}\">\n                    <el-switch v-model=\"row.isShow\"></el-switch>\n                </template>\n            </el-table-column>\n        </el-table>\n        <span slot=\"footer\" class=\"dialog-footer\">\n            <el-button @click=\"shows = false\" size=\"small\">取 消</el-button>\n            <el-button type=\"primary\" @click=\"handleClose()\" size=\"small\">确 定</el-button>\n        </span>\n    </el-dialog>\n</template>\n\n<script>\nexport default {\n    name: 'm-setting',\n    data() {\n        return {\n            list: []\n        };\n    },\n    computed: {\n        shows: {\n            get() {\n                return this.show;\n            },\n            set() {\n                this.$emit(\"update:show\")\n            }\n        }\n    },\n    props: {\n        show: {\n            type: Boolean,\n            required: true,\n            default: false\n        },\n        config: {\n            type: Array,\n            default() {\n                return []\n            }\n        }\n    },\n    created() {\n        this.init()\n    },\n    methods: {\n        init() {\n            this.list = this.config.map(item => {\n                return {\n                    ...item,\n                    showLabel: item.showLabel || item.label, // 名称\n                    isShow: item.isShow || true // 是否显示\n                }\n            })\n        },\n        handleClose() {\n            this.$emit('change', this.list);\n            this.shows = false\n        }\n    }\n};\n</script>\n```\n这样就简单实现了可以动态显示列，而且不需要去修改原组件的使用方式了。\n## hoc 高阶组件\n\n[vue高阶组件可以参考这篇](http://hcysun.me/2018/01/05/%E6%8E%A2%E7%B4%A2Vue%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/)","slug":"vue_hoc","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vsr003a98lghy6i9ra0","content":"<p>在项目中，一般我们经常会基于一套现有组件库进行快速开发，但是现实中往往需要对组件库进行定制化改造二次封装</p>\n<span id=\"more\"></span>\n\n<h2 id=\"混入-mixin\"><a href=\"#混入-mixin\" class=\"headerlink\" title=\"混入(mixin)\"></a>混入(mixin)</h2><p>vue 官方介绍</p>\n<blockquote>\n<p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p>\n</blockquote>\n<p>简单来说就是将组件的对象的属性，方法，钩子函数等等进行提取封装，以便达到可以多出复用。来看一个简单例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table</span> <span class=\"attr\">:v-loading</span>=<span class=\"string\">&#x27;isLoading&#x27;</span> <span class=\"attr\">:data</span>=<span class=\"string\">&quot;tableData&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 100%&quot;</span>  <span class=\"attr\">ref</span>=<span class=\"string\">&quot;table&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;selection&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;55&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;规则名称&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;描述&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;count&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;服务调用次数(万)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;state&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;状态&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot-scope</span>=<span class=\"string\">&quot;&#123;row&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;[&#x27;run-state&#x27;,row.state]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                    &#123;&#123; row.state==&#x27;close&#x27;?&#x27;关闭&#x27;:&#x27;运行中&#x27; &#125;&#125;</span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;time&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;上次调度时间&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;操作&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">el-divider</span> <span class=\"attr\">direction</span>=<span class=\"string\">&quot;vertical&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-divider</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span>订阅警报<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">el-table</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">el-pagination</span> <span class=\"attr\">:current-page.sync</span>=<span class=\"string\">&quot;page.pageIndex&quot;</span> <span class=\"attr\">:page-sizes</span>=<span class=\"string\">&quot;[20, 30, 40, 50]&quot;</span> @<span class=\"attr\">size-change</span>=<span class=\"string\">&quot;(e)=&gt;page.pageSize=e&quot;</span> <span class=\"attr\">:total</span>=<span class=\"string\">&quot;total&quot;</span> <span class=\"attr\">layout</span>=<span class=\"string\">&quot;total, sizes, prev, pager, next, jumper&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">el-pagination</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    data () &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">tableData</span>:[],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">isLoading</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">total</span>: <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">page</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">pageSize</span>: <span class=\"number\">20</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">pageIndex</span>: <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">watch</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"string\">&#x27;page&#x27;</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">deep</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">handler</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">getList</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">getList</span>(<span class=\"params\">pageIndex = <span class=\"variable language_\">this</span>.page.pageIndex,pageSize = <span class=\"variable language_\">this</span>.page.pageSize</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//获取列表数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"property\">isLoading</span> = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">tableData</span> = <span class=\"title class_\">MockData</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">total</span>=<span class=\"number\">300</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">isLoading</span> = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;, <span class=\"number\">2000</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面是个常见报表分页使用场景，假如有很多个表报，那就需要写很多次分页的逻辑，正常开发中当然不可能这么处理的，这种情况就可以使用 mixins 来提取分页的逻辑。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mixins.js</span></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">isLoading</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">total</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">page</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">pageSize</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">                <span class=\"attr\">pageIndex</span>: <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;page&#x27;</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">deep</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"title function_\">handler</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">getList</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table</span> <span class=\"attr\">:v-loading</span>=<span class=\"string\">&#x27;isLoading&#x27;</span> <span class=\"attr\">:data</span>=<span class=\"string\">&quot;tableData&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 100%&quot;</span>  <span class=\"attr\">ref</span>=<span class=\"string\">&quot;table&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;selection&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;55&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;规则名称&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;描述&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;count&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;服务调用次数(万)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;state&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;状态&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot-scope</span>=<span class=\"string\">&quot;&#123;row&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;[&#x27;run-state&#x27;,row.state]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                    &#123;&#123; row.state==&#x27;close&#x27;?&#x27;关闭&#x27;:&#x27;运行中&#x27; &#125;&#125;</span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;time&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;上次调度时间&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;操作&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">el-divider</span> <span class=\"attr\">direction</span>=<span class=\"string\">&quot;vertical&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-divider</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span>订阅警报<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">el-table</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">el-pagination</span> <span class=\"attr\">:current-page.sync</span>=<span class=\"string\">&quot;page.pageIndex&quot;</span> <span class=\"attr\">:page-sizes</span>=<span class=\"string\">&quot;[20, 30, 40, 50]&quot;</span> @<span class=\"attr\">size-change</span>=<span class=\"string\">&quot;(e)=&gt;page.pageSize=e&quot;</span> <span class=\"attr\">:total</span>=<span class=\"string\">&quot;page.total&quot;</span> <span class=\"attr\">layout</span>=<span class=\"string\">&quot;total, sizes, prev, pager, next, jumper&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">el-pagination</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">PageMixins</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./mixins.js&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">mixins</span>:[<span class=\"title class_\">PageMixins</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">    data () &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">tableData</span>:[]</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">getList</span>(<span class=\"params\">pageIndex = <span class=\"variable language_\">this</span>.page.pageIndex,pageSize = <span class=\"variable language_\">this</span>.page.pageSize</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//获取列表数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"property\">isLoading</span> = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">tableData</span> = <span class=\"title class_\">MockData</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">total</span>=<span class=\"number\">300</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">isLoading</span> = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;, <span class=\"number\">2000</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样就将分页的逻辑分离出来了，也可以被其他组件混入使用，大大的减少了代码量，当然 mixin 过度滥用也是存在缺点的。</p>\n<ul>\n<li>命名冲突<br>  使用 mixins 是将两个组件对象合并的，当两个组件属性名重复时候，vue 默认会将本地组件的属性覆盖 mixin 的，虽然 vue 提供了合并策略配置，但是同时存在多个 mixin 存在命名冲突时候就会变得处理起来非常麻烦了。</li>\n<li>隐含的依赖关系<br>  很明显上面的组件是依赖于 mixin 的，这种情况会存在潜在问题。如果我们以后想重构一个组件，改变了 mixin 需要的变量的名称，就会影响现有的组件的使用了，而且当项目中使用了很多这个 mixin 的时候，就只能去手动搜索修改了，因为不知道哪些组件使用了这些 mixin。</li>\n</ul>\n<h2 id=\"组件封装\"><a href=\"#组件封装\" class=\"headerlink\" title=\"组件封装\"></a>组件封装</h2><p>上面表格还有中处理方法，就是将 el-table 和 el-pagination 封装成一个组件去是使用，也能提高复用性。</p>\n<h3 id=\"template封装\"><a href=\"#template封装\" class=\"headerlink\" title=\"template封装\"></a>template封装</h3><p>使用 template 创建组件，来对 el-table 进行二次封装满足上面需求，增加一个 total 参数<br>提供是一个分页改变事件，再把 m-table 的 $attrs 和 $listeners 绑定到 el-table 上，然后把 el-table 方法暴露出去，这样就可像使用 el-table 一样使用 m-table。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;table&quot;</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">&quot;$attrs&quot;</span> <span class=\"attr\">v-on</span>=<span class=\"string\">&quot;$listeners&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">el-table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-pagination</span> <span class=\"attr\">:current-page.sync</span>=<span class=\"string\">&quot;page.pageIndex&quot;</span> <span class=\"attr\">:page-sizes</span>=<span class=\"string\">&quot;[20, 30, 40, 50]&quot;</span> @<span class=\"attr\">size-change</span>=<span class=\"string\">&quot;(e)=&gt;page.pageSize=e&quot;</span> <span class=\"attr\">:total</span>=<span class=\"string\">&quot;total&quot;</span> <span class=\"attr\">layout</span>=<span class=\"string\">&quot;total, sizes, prev, pager, next, jumper&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">el-pagination</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;m-table&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">page</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">pageSize</span>: <span class=\"number\">20</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">pageIndex</span>: <span class=\"number\">2</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">props</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">total</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">type</span>: <span class=\"title class_\">Number</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">default</span>: <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">watch</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">page</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">deep</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">handler</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&quot;page-chagne&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 将el-table 方法暴露出去</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        ...(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">let</span> methodsJson = &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"string\">&#x27;reloadData&#x27;</span>, <span class=\"string\">&#x27;clearSelection&#x27;</span>, <span class=\"string\">&#x27;toggleRowSelection&#x27;</span>, <span class=\"string\">&#x27;toggleAllSelection&#x27;</span>, <span class=\"string\">&#x27;setCurrentRow&#x27;</span>, <span class=\"string\">&#x27;clearSort&#x27;</span>, <span class=\"string\">&#x27;clearFilter&#x27;</span>, <span class=\"string\">&#x27;doLayout&#x27;</span>, <span class=\"string\">&#x27;sort&#x27;</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">                .<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    methodsJson = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        ...methodsJson, [key](...res) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                            <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>[<span class=\"string\">&#x27;table&#x27;</span>][key].<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, res);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> methodsJson;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用 m-table</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">m-table</span> @<span class=\"attr\">page-chagne</span>=<span class=\"string\">&quot;GetTableDataList()&quot;</span> <span class=\"attr\">:total</span>=<span class=\"string\">&quot;page.total&quot;</span> <span class=\"attr\">:data</span>=<span class=\"string\">&quot;tableData&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;selection&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;55&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;规则名称&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;描述&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;count&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;服务调用次数(万)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;state&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;状态&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot-scope</span>=<span class=\"string\">&quot;&#123;row&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;[&#x27;run-state&#x27;,row.state]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            &#123;&#123; row.state==&#x27;close&#x27;?&#x27;关闭&#x27;:&#x27;运行中&#x27; &#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;time&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;上次调度时间&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;操作&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-divider</span> <span class=\"attr\">direction</span>=<span class=\"string\">&quot;vertical&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-divider</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span>订阅警报<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">m-table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>一般情况下这样使用 template 封装就满足了需求，但是总有些时候这样封装是满足不了需求的。比如现在 m-table 现在需要动态支持修改配置显示列，并且不希望修改 m-table 的基本使用方式， 这个时候就需要使用 render 了。</p>\n<h3 id=\"render-函数\"><a href=\"#render-函数\" class=\"headerlink\" title=\"render 函数\"></a>render 函数</h3><p>Vue 的模板实际上都会被编译成了渲染函数，render 函数有一个 createElement 参数，用来创建一个 VNode。</p>\n<p>要满足上面的需求，首先是的获得 el-table 的插槽(slot)中的内容，根据插槽的内容生成每列信息，根据配置的信息动态创建插槽的内容就可以实现了。简单示例代码入下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> mSetting <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./setting&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">components</span>: &#123; mSetting &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;m-table&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">showTable</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">setShow</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">config</span>: [],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">copySlots</span>: [], <span class=\"comment\">// 展示solt数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">page</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">pageSize</span>: <span class=\"number\">20</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">pageIndex</span>: <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">props</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">total</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">type</span>: <span class=\"title class_\">Number</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">default</span>: <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">watch</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">page</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">deep</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">handler</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&quot;page-chagne&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">created</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">initConfig</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> (</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                <span class=\"tag\">&lt;<span class=\"name\">el-table</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;table&quot;</span> &#123;<span class=\"attr\">...</span>&#123; <span class=\"attr\">attrs:</span> <span class=\"attr\">this.</span>$<span class=\"attr\">attrs</span> &#125;&#125; &#123;<span class=\"attr\">...</span>&#123; <span class=\"attr\">on:</span> <span class=\"attr\">this.</span>$<span class=\"attr\">listeners</span> &#125;&#125;&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        this.copySlots</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                <span class=\"tag\">&lt;/<span class=\"name\">el-table</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                &#123;this.showTable ? (<span class=\"tag\">&lt;<span class=\"name\">el-pagination</span> <span class=\"attr\">layout</span>=<span class=\"string\">&quot;total, sizes, prev, pager, next, jumper&quot;</span></span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\"><span class=\"language-javascript\">                    &#123;<span class=\"attr\">...</span>&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\"><span class=\"language-javascript\">                        <span class=\"attr\">on:</span> &#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\"><span class=\"language-javascript\">                            &#x27;<span class=\"attr\">size-change</span>&#x27;<span class=\"attr\">:</span> (<span class=\"attr\">e</span>) =&gt;</span> this.page.pageSize = e,</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                            &#x27;current-change&#x27;: (e) =&gt; this.page.pageIndex = e</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    &#123;...&#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        attrs: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                            &#x27;current-page&#x27;: this.page.pageIndex,</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                            &#x27;page-sizes&#x27;: [20, 30, 40, 50],</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                            &#x27;total&#x27;: this.total</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                &gt; <span class=\"tag\">&lt;/<span class=\"name\">el-pagination</span>&gt;</span>) : null&#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                <span class=\"tag\">&lt;<span class=\"name\">m-setting</span>  &#123;<span class=\"attr\">...</span>&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\"><span class=\"language-javascript\">                    <span class=\"attr\">on:</span> &#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\"><span class=\"language-javascript\">                        &#x27;<span class=\"attr\">update:show</span>&#x27;<span class=\"attr\">:</span> <span class=\"attr\">e</span> =&gt;</span> this.setShow = e,</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        &#x27;change&#x27;: this.initConfig</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                &#125;&#125; show=&#123;this.setShow&#125; config=&#123;this.config&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">m-setting</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">            &lt;/div &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">        )</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">    methods: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">        initConfig(config = []) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">            if (config.length === 0) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                config = this.$slots.default</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    .filter(item =&gt; item.componentOptions &amp;&amp; item.componentOptions.tag === &quot;el-table-column&quot;)</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    .map(item =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        if (item.componentOptions.propsData.prop === &#x27;index&#x27;) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                            if (!item.data.scopedSlots) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                                item.data.scopedSlots = &#123;&#125;;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                            item.data.scopedSlots.header = () =&gt; (</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                                <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;el-icon-s-tools&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.setShow = true&#125; /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                            );</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        return &#123; ...item.componentOptions.propsData &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                this.sourceConfig = JSON.parse(JSON.stringify(config))</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                this.copySlots = this.$slots.default;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                this.sourceSlots = this.$slots.default;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">            &#125; else &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                let arr = []</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                this.sourceSlots.forEach(item =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    let temp = config.find(subItem =&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        (subItem.prop &amp;&amp; subItem.prop === item.componentOptions.propsData.prop) ||</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        (subItem.type &amp;&amp; subItem.type === item.componentOptions.propsData.type)</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    );</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    if (temp &amp;&amp; temp.isShow) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        Object.assign(item.componentOptions.propsData, temp);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        arr.push(item)</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                this.copySlots = arr;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                this.showTable = false</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                this.$nextTick(() =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    this.showTable = true</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">            this.config = config;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">        ...(() =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">            let methodsJson = &#123;&#125;;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">            [&#x27;reloadData&#x27;, &#x27;clearSelection&#x27;, &#x27;toggleRowSelection&#x27;, &#x27;toggleAllSelection&#x27;, &#x27;setCurrentRow&#x27;, &#x27;clearSort&#x27;, &#x27;clearFilter&#x27;, &#x27;doLayout&#x27;, &#x27;sort&#x27;]</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                .forEach(key =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    methodsJson = &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        ...methodsJson, [key](...res) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                            this.$refs[&#x27;table&#x27;][key].apply(this, res);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">            return methodsJson;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">        &#125;)()</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\"></span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-dialog</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;表格设置&quot;</span> <span class=\"attr\">:visible.sync</span>=<span class=\"string\">&quot;shows&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;600px&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;small&quot;</span> <span class=\"attr\">:before-close</span>=<span class=\"string\">&quot;handleClose&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table</span> <span class=\"attr\">:data</span>=<span class=\"string\">&quot;list&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&#x27;mini&#x27;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;showLabel&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;名称&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;label&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;显示名称&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot-scope</span>=<span class=\"string\">&quot;&#123;row&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;mini&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;row.label&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;isShow&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;是否显示&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot-scope</span>=<span class=\"string\">&quot;&#123;row&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">el-switch</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;row.isShow&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-switch</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">el-table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;footer&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;shows = false&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;small&quot;</span>&gt;</span>取 消<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;handleClose()&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;small&quot;</span>&gt;</span>确 定<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">el-dialog</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;m-setting&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">list</span>: []</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">shows</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">show</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">set</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&quot;update:show&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">props</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">show</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">type</span>: <span class=\"title class_\">Boolean</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">required</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">default</span>: <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">config</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">type</span>: <span class=\"title class_\">Array</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">default</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> []</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">created</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">init</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"property\">list</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    ...item,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">showLabel</span>: item.<span class=\"property\">showLabel</span> || item.<span class=\"property\">label</span>, <span class=\"comment\">// 名称</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">isShow</span>: item.<span class=\"property\">isShow</span> || <span class=\"literal\">true</span> <span class=\"comment\">// 是否显示</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">handleClose</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&#x27;change&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"property\">shows</span> = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样就简单实现了可以动态显示列，而且不需要去修改原组件的使用方式了。</p>\n<h2 id=\"hoc-高阶组件\"><a href=\"#hoc-高阶组件\" class=\"headerlink\" title=\"hoc 高阶组件\"></a>hoc 高阶组件</h2><p><a href=\"http://hcysun.me/2018/01/05/%E6%8E%A2%E7%B4%A2Vue%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/\">vue高阶组件可以参考这篇</a></p>\n","excerpt":"<p>在项目中，一般我们经常会基于一套现有组件库进行快速开发，但是现实中往往需要对组件库进行定制化改造二次封装</p>","more":"<h2 id=\"混入-mixin\"><a href=\"#混入-mixin\" class=\"headerlink\" title=\"混入(mixin)\"></a>混入(mixin)</h2><p>vue 官方介绍</p>\n<blockquote>\n<p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p>\n</blockquote>\n<p>简单来说就是将组件的对象的属性，方法，钩子函数等等进行提取封装，以便达到可以多出复用。来看一个简单例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table</span> <span class=\"attr\">:v-loading</span>=<span class=\"string\">&#x27;isLoading&#x27;</span> <span class=\"attr\">:data</span>=<span class=\"string\">&quot;tableData&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 100%&quot;</span>  <span class=\"attr\">ref</span>=<span class=\"string\">&quot;table&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;selection&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;55&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;规则名称&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;描述&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;count&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;服务调用次数(万)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;state&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;状态&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot-scope</span>=<span class=\"string\">&quot;&#123;row&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;[&#x27;run-state&#x27;,row.state]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                    &#123;&#123; row.state==&#x27;close&#x27;?&#x27;关闭&#x27;:&#x27;运行中&#x27; &#125;&#125;</span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;time&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;上次调度时间&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;操作&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">el-divider</span> <span class=\"attr\">direction</span>=<span class=\"string\">&quot;vertical&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-divider</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span>订阅警报<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">el-table</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">el-pagination</span> <span class=\"attr\">:current-page.sync</span>=<span class=\"string\">&quot;page.pageIndex&quot;</span> <span class=\"attr\">:page-sizes</span>=<span class=\"string\">&quot;[20, 30, 40, 50]&quot;</span> @<span class=\"attr\">size-change</span>=<span class=\"string\">&quot;(e)=&gt;page.pageSize=e&quot;</span> <span class=\"attr\">:total</span>=<span class=\"string\">&quot;total&quot;</span> <span class=\"attr\">layout</span>=<span class=\"string\">&quot;total, sizes, prev, pager, next, jumper&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">el-pagination</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    data () &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">tableData</span>:[],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">isLoading</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">total</span>: <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">page</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">pageSize</span>: <span class=\"number\">20</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">pageIndex</span>: <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">watch</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"string\">&#x27;page&#x27;</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">deep</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">handler</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">getList</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">getList</span>(<span class=\"params\">pageIndex = <span class=\"variable language_\">this</span>.page.pageIndex,pageSize = <span class=\"variable language_\">this</span>.page.pageSize</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//获取列表数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"property\">isLoading</span> = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">tableData</span> = <span class=\"title class_\">MockData</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">total</span>=<span class=\"number\">300</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">isLoading</span> = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;, <span class=\"number\">2000</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面是个常见报表分页使用场景，假如有很多个表报，那就需要写很多次分页的逻辑，正常开发中当然不可能这么处理的，这种情况就可以使用 mixins 来提取分页的逻辑。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mixins.js</span></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">isLoading</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">total</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">page</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">pageSize</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">                <span class=\"attr\">pageIndex</span>: <span class=\"number\">1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;page&#x27;</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">deep</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"title function_\">handler</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">getList</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table</span> <span class=\"attr\">:v-loading</span>=<span class=\"string\">&#x27;isLoading&#x27;</span> <span class=\"attr\">:data</span>=<span class=\"string\">&quot;tableData&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 100%&quot;</span>  <span class=\"attr\">ref</span>=<span class=\"string\">&quot;table&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;selection&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;55&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;规则名称&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;描述&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;count&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;服务调用次数(万)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;state&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;状态&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot-scope</span>=<span class=\"string\">&quot;&#123;row&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;[&#x27;run-state&#x27;,row.state]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                    &#123;&#123; row.state==&#x27;close&#x27;?&#x27;关闭&#x27;:&#x27;运行中&#x27; &#125;&#125;</span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;time&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;上次调度时间&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;操作&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">el-divider</span> <span class=\"attr\">direction</span>=<span class=\"string\">&quot;vertical&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-divider</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span>订阅警报<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">el-table</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">el-pagination</span> <span class=\"attr\">:current-page.sync</span>=<span class=\"string\">&quot;page.pageIndex&quot;</span> <span class=\"attr\">:page-sizes</span>=<span class=\"string\">&quot;[20, 30, 40, 50]&quot;</span> @<span class=\"attr\">size-change</span>=<span class=\"string\">&quot;(e)=&gt;page.pageSize=e&quot;</span> <span class=\"attr\">:total</span>=<span class=\"string\">&quot;page.total&quot;</span> <span class=\"attr\">layout</span>=<span class=\"string\">&quot;total, sizes, prev, pager, next, jumper&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">el-pagination</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">PageMixins</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./mixins.js&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">mixins</span>:[<span class=\"title class_\">PageMixins</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">    data () &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">tableData</span>:[]</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">getList</span>(<span class=\"params\">pageIndex = <span class=\"variable language_\">this</span>.page.pageIndex,pageSize = <span class=\"variable language_\">this</span>.page.pageSize</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"comment\">//获取列表数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"property\">isLoading</span> = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">tableData</span> = <span class=\"title class_\">MockData</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">total</span>=<span class=\"number\">300</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">isLoading</span> = <span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;, <span class=\"number\">2000</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样就将分页的逻辑分离出来了，也可以被其他组件混入使用，大大的减少了代码量，当然 mixin 过度滥用也是存在缺点的。</p>\n<ul>\n<li>命名冲突<br>  使用 mixins 是将两个组件对象合并的，当两个组件属性名重复时候，vue 默认会将本地组件的属性覆盖 mixin 的，虽然 vue 提供了合并策略配置，但是同时存在多个 mixin 存在命名冲突时候就会变得处理起来非常麻烦了。</li>\n<li>隐含的依赖关系<br>  很明显上面的组件是依赖于 mixin 的，这种情况会存在潜在问题。如果我们以后想重构一个组件，改变了 mixin 需要的变量的名称，就会影响现有的组件的使用了，而且当项目中使用了很多这个 mixin 的时候，就只能去手动搜索修改了，因为不知道哪些组件使用了这些 mixin。</li>\n</ul>\n<h2 id=\"组件封装\"><a href=\"#组件封装\" class=\"headerlink\" title=\"组件封装\"></a>组件封装</h2><p>上面表格还有中处理方法，就是将 el-table 和 el-pagination 封装成一个组件去是使用，也能提高复用性。</p>\n<h3 id=\"template封装\"><a href=\"#template封装\" class=\"headerlink\" title=\"template封装\"></a>template封装</h3><p>使用 template 创建组件，来对 el-table 进行二次封装满足上面需求，增加一个 total 参数<br>提供是一个分页改变事件，再把 m-table 的 $attrs 和 $listeners 绑定到 el-table 上，然后把 el-table 方法暴露出去，这样就可像使用 el-table 一样使用 m-table。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;table&quot;</span> <span class=\"attr\">v-bind</span>=<span class=\"string\">&quot;$attrs&quot;</span> <span class=\"attr\">v-on</span>=<span class=\"string\">&quot;$listeners&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">el-table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-pagination</span> <span class=\"attr\">:current-page.sync</span>=<span class=\"string\">&quot;page.pageIndex&quot;</span> <span class=\"attr\">:page-sizes</span>=<span class=\"string\">&quot;[20, 30, 40, 50]&quot;</span> @<span class=\"attr\">size-change</span>=<span class=\"string\">&quot;(e)=&gt;page.pageSize=e&quot;</span> <span class=\"attr\">:total</span>=<span class=\"string\">&quot;total&quot;</span> <span class=\"attr\">layout</span>=<span class=\"string\">&quot;total, sizes, prev, pager, next, jumper&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">el-pagination</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;m-table&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">page</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">pageSize</span>: <span class=\"number\">20</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">pageIndex</span>: <span class=\"number\">2</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">props</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">total</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">type</span>: <span class=\"title class_\">Number</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">default</span>: <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">watch</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">page</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">deep</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">handler</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&quot;page-chagne&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 将el-table 方法暴露出去</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        ...(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">let</span> methodsJson = &#123;&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            [<span class=\"string\">&#x27;reloadData&#x27;</span>, <span class=\"string\">&#x27;clearSelection&#x27;</span>, <span class=\"string\">&#x27;toggleRowSelection&#x27;</span>, <span class=\"string\">&#x27;toggleAllSelection&#x27;</span>, <span class=\"string\">&#x27;setCurrentRow&#x27;</span>, <span class=\"string\">&#x27;clearSort&#x27;</span>, <span class=\"string\">&#x27;clearFilter&#x27;</span>, <span class=\"string\">&#x27;doLayout&#x27;</span>, <span class=\"string\">&#x27;sort&#x27;</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">                .<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    methodsJson = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        ...methodsJson, [key](...res) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                            <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>[<span class=\"string\">&#x27;table&#x27;</span>][key].<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, res);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> methodsJson;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用 m-table</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">m-table</span> @<span class=\"attr\">page-chagne</span>=<span class=\"string\">&quot;GetTableDataList()&quot;</span> <span class=\"attr\">:total</span>=<span class=\"string\">&quot;page.total&quot;</span> <span class=\"attr\">:data</span>=<span class=\"string\">&quot;tableData&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;selection&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;55&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;规则名称&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;描述&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;count&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;服务调用次数(万)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;state&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;状态&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot-scope</span>=<span class=\"string\">&quot;&#123;row&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;[&#x27;run-state&#x27;,row.state]&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">            &#123;&#123; row.state==&#x27;close&#x27;?&#x27;关闭&#x27;:&#x27;运行中&#x27; &#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;time&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;上次调度时间&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;操作&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-divider</span> <span class=\"attr\">direction</span>=<span class=\"string\">&quot;vertical&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-divider</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span>订阅警报<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">m-table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>一般情况下这样使用 template 封装就满足了需求，但是总有些时候这样封装是满足不了需求的。比如现在 m-table 现在需要动态支持修改配置显示列，并且不希望修改 m-table 的基本使用方式， 这个时候就需要使用 render 了。</p>\n<h3 id=\"render-函数\"><a href=\"#render-函数\" class=\"headerlink\" title=\"render 函数\"></a>render 函数</h3><p>Vue 的模板实际上都会被编译成了渲染函数，render 函数有一个 createElement 参数，用来创建一个 VNode。</p>\n<p>要满足上面的需求，首先是的获得 el-table 的插槽(slot)中的内容，根据插槽的内容生成每列信息，根据配置的信息动态创建插槽的内容就可以实现了。简单示例代码入下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> mSetting <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./setting&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">components</span>: &#123; mSetting &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;m-table&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">showTable</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">setShow</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">config</span>: [],</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">copySlots</span>: [], <span class=\"comment\">// 展示solt数据</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">page</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">pageSize</span>: <span class=\"number\">20</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"attr\">pageIndex</span>: <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">props</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">total</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">type</span>: <span class=\"title class_\">Number</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">default</span>: <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">watch</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">page</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">deep</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">handler</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&quot;page-chagne&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">created</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">initConfig</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> (</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                <span class=\"tag\">&lt;<span class=\"name\">el-table</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;table&quot;</span> &#123;<span class=\"attr\">...</span>&#123; <span class=\"attr\">attrs:</span> <span class=\"attr\">this.</span>$<span class=\"attr\">attrs</span> &#125;&#125; &#123;<span class=\"attr\">...</span>&#123; <span class=\"attr\">on:</span> <span class=\"attr\">this.</span>$<span class=\"attr\">listeners</span> &#125;&#125;&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        this.copySlots</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                <span class=\"tag\">&lt;/<span class=\"name\">el-table</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                &#123;this.showTable ? (<span class=\"tag\">&lt;<span class=\"name\">el-pagination</span> <span class=\"attr\">layout</span>=<span class=\"string\">&quot;total, sizes, prev, pager, next, jumper&quot;</span></span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\"><span class=\"language-javascript\">                    &#123;<span class=\"attr\">...</span>&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\"><span class=\"language-javascript\">                        <span class=\"attr\">on:</span> &#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\"><span class=\"language-javascript\">                            &#x27;<span class=\"attr\">size-change</span>&#x27;<span class=\"attr\">:</span> (<span class=\"attr\">e</span>) =&gt;</span> this.page.pageSize = e,</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                            &#x27;current-change&#x27;: (e) =&gt; this.page.pageIndex = e</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    &#123;...&#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        attrs: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                            &#x27;current-page&#x27;: this.page.pageIndex,</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                            &#x27;page-sizes&#x27;: [20, 30, 40, 50],</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                            &#x27;total&#x27;: this.total</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                &gt; <span class=\"tag\">&lt;/<span class=\"name\">el-pagination</span>&gt;</span>) : null&#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                <span class=\"tag\">&lt;<span class=\"name\">m-setting</span>  &#123;<span class=\"attr\">...</span>&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\"><span class=\"language-javascript\">                    <span class=\"attr\">on:</span> &#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\"><span class=\"language-javascript\">                        &#x27;<span class=\"attr\">update:show</span>&#x27;<span class=\"attr\">:</span> <span class=\"attr\">e</span> =&gt;</span> this.setShow = e,</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        &#x27;change&#x27;: this.initConfig</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                &#125;&#125; show=&#123;this.setShow&#125; config=&#123;this.config&#125;&gt;<span class=\"tag\">&lt;/<span class=\"name\">m-setting</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">            &lt;/div &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">        )</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">    methods: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">        initConfig(config = []) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">            if (config.length === 0) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                config = this.$slots.default</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    .filter(item =&gt; item.componentOptions &amp;&amp; item.componentOptions.tag === &quot;el-table-column&quot;)</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    .map(item =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        if (item.componentOptions.propsData.prop === &#x27;index&#x27;) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                            if (!item.data.scopedSlots) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                                item.data.scopedSlots = &#123;&#125;;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                            item.data.scopedSlots.header = () =&gt; (</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                                <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;el-icon-s-tools&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.setShow = true&#125; /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                            );</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        return &#123; ...item.componentOptions.propsData &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                this.sourceConfig = JSON.parse(JSON.stringify(config))</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                this.copySlots = this.$slots.default;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                this.sourceSlots = this.$slots.default;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">            &#125; else &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                let arr = []</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                this.sourceSlots.forEach(item =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    let temp = config.find(subItem =&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        (subItem.prop &amp;&amp; subItem.prop === item.componentOptions.propsData.prop) ||</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        (subItem.type &amp;&amp; subItem.type === item.componentOptions.propsData.type)</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    );</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    if (temp &amp;&amp; temp.isShow) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        Object.assign(item.componentOptions.propsData, temp);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        arr.push(item)</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                this.copySlots = arr;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                this.showTable = false</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                this.$nextTick(() =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    this.showTable = true</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">            this.config = config;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">        ...(() =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">            let methodsJson = &#123;&#125;;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">            [&#x27;reloadData&#x27;, &#x27;clearSelection&#x27;, &#x27;toggleRowSelection&#x27;, &#x27;toggleAllSelection&#x27;, &#x27;setCurrentRow&#x27;, &#x27;clearSort&#x27;, &#x27;clearFilter&#x27;, &#x27;doLayout&#x27;, &#x27;sort&#x27;]</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                .forEach(key =&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    methodsJson = &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        ...methodsJson, [key](...res) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                            this.$refs[&#x27;table&#x27;][key].apply(this, res);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                    &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">                &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">            return methodsJson;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">        &#125;)()</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\">&#125;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-javascript\"></span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-dialog</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;表格设置&quot;</span> <span class=\"attr\">:visible.sync</span>=<span class=\"string\">&quot;shows&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;600px&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;small&quot;</span> <span class=\"attr\">:before-close</span>=<span class=\"string\">&quot;handleClose&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">el-table</span> <span class=\"attr\">:data</span>=<span class=\"string\">&quot;list&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&#x27;mini&#x27;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;showLabel&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;名称&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;label&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;显示名称&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot-scope</span>=<span class=\"string\">&quot;&#123;row&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;mini&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;row.label&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-table-column</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;isShow&quot;</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;是否显示&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">slot-scope</span>=<span class=\"string\">&quot;&#123;row&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">el-switch</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;row.isShow&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-switch</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">el-table-column</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">el-table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;footer&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;shows = false&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;small&quot;</span>&gt;</span>取 消<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;handleClose()&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;small&quot;</span>&gt;</span>确 定<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">el-dialog</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;m-setting&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">list</span>: []</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">shows</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">show</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">set</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&quot;update:show&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">props</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">show</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">type</span>: <span class=\"title class_\">Boolean</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">required</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">default</span>: <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">config</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">type</span>: <span class=\"title class_\">Array</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">default</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> []</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">created</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">init</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"property\">list</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    ...item,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">showLabel</span>: item.<span class=\"property\">showLabel</span> || item.<span class=\"property\">label</span>, <span class=\"comment\">// 名称</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">isShow</span>: item.<span class=\"property\">isShow</span> || <span class=\"literal\">true</span> <span class=\"comment\">// 是否显示</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">handleClose</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.$emit(<span class=\"string\">&#x27;change&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">this</span>.<span class=\"property\">shows</span> = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样就简单实现了可以动态显示列，而且不需要去修改原组件的使用方式了。</p>\n<h2 id=\"hoc-高阶组件\"><a href=\"#hoc-高阶组件\" class=\"headerlink\" title=\"hoc 高阶组件\"></a>hoc 高阶组件</h2><p><a href=\"http://hcysun.me/2018/01/05/%E6%8E%A2%E7%B4%A2Vue%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/\">vue高阶组件可以参考这篇</a></p>"},{"title":"使用 Vue3 构建 Web Components","comment":true,"date":"2021-11-21T02:17:09.000Z","description":null,"keywords":"vue3,WebComponents,Custom elements","_content":"有时候想写一个无关框架组件，又不想用原生或者 Jquery 那套去写，而且还要避免样式冲突，用 Web Components 去做刚觉就挺合适的。但是现在 Web Components 使用起来还是不够灵活，很多地方还是不太方便的，如果能和 MVVM 搭配使用就好了。早在之前 Angular 就支持将组件构建成 Web Components，**Vue3 3.2+** 开始终于支持将组建构建成 Web Components 了。正好最近想重构下评论插件，于是上手试了试。\n<!--more-->\n## 构建 Web Components\nvue 提供了一个 **defineCustomElement** 方法，用来将 vue 组件转换成一个扩展至HTMLElement的自定义函数构造函数，使用方式和 **defineComponent** 参数api基本保持一致。\n``` js\nimport { defineCustomElement } from 'vue' \n\nconst MyVueElement = defineCustomElement({\n  // 在此提供正常的 Vue 组件选项\n  props: {},\n  emits: {},\n  template: `...`,\n\n  // defineCustomElement 独有特性: CSS 会被注入到隐式根 (shadow root) 中\n  styles: [`/* inlined css */`]\n})\n\n// 注册 Web Components\ncustomElements.define('my-vue-element', MyVueElement)\n```\n如果需要使用单文件，需要 **@vitejs/plugin-vue@^1.4.0** 或 **vue-loader@^16.5.0** 或更高版本工具。如果只是部分文件需要使用，可以将后缀改为 **.ce.vue** 。若果需要将所有文件都构建 **Web Components** 可以将 **@vitejs/plugin-vue@^1.4.0** 或 **vue-loader@^16.5.0** 的 **customElement** 配置项开启。这样不需要再使用 **.ce.vue** 后缀名了。\n\n### 属性\nvue 会把所有的的 props 自定义元素的对象的 property 上，也会将自定义元素标签上的 attribute 做一个映射。\n```html\n<com-demo type=\"a\"></com-demo>\n\nprops:{\n  type:String\n}\n```\n因为 HTML 的 **attribute** 的只能是字符串，除了基础类型(Boolean、Number) Vue 在映射时会帮忙做类型转换，其他复杂类型则需要设置到 DOM property 上。\n\n### 事件\n在自定义元素中，通过 **this.$emit** 或在 **setup** 中的 **emit** 发出的事件会被调度为原生 [CustomEvents](https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events#adding_custom_data_%E2%80%93_customevent)。附加的事件参数 (payload) 会作为数组暴露在 CustomEvent 对象的 details property 上。\n\n### 插槽\n编写组件时，可以想 vue 一样，但是使用时只能原生的插槽语法，所以也不在支持作用域插槽。\n\n### 子组件样式问题\n使用子组件嵌套的时，有个坑的地方就是默认不会将子组件里的样式抽离出来。\n\n父组件\n``` html\n<template>\n    <div class=\"title\">{{ title }}</div>\n    <Childer />\n</template>\n<script>\nimport Childer from \"./childer.vue\"\nexport default {\n    components: { Childer },\n    data() {\n        return {\n            title: \"父组件\"\n        }\n    },\n}\n</script>\n<style lang=\"less\" scoped>\n.title {\n    padding: 10px;\n    background-color: #eee;\n    font-weight: bold;\n}\n</style>\n```\n子组件\n``` html\n<template>\n    <div class=\"childer\">{{ title }}</div>\n</template>\n<script>\nexport default {\n    data() {\n        return {\n            title: \"子组件\"\n        }\n    },\n}\n</script>\n<style lang=\"less\" scoped>\n.childer {\n    padding: 10px;\n    background-color: #222;\n    color: #fff;\n    font-weight: bold;\n}\n</style>\n```\n可以看到子组件的样式没有插入进去，但是样式隔离的标识是有生成的 data-v-5e87e937。不知道vue官方后续会不会修复这个bug\n\n![插入图片](/images/posts/vue_web_components/pic_1637475879404.png)_生成HTML_\n\n查看组件是可以看到，子组件的样式是有被抽离出来的，这样就只需要自己注入进去了。\n\n![插入图片](/images/posts/vue_web_components/pic_1637476488307.png)_实例对象_\n\n将子组件样式抽离插入到父组件里，参考[这个的实现](https://github.com/vuejs/vue-loader/issues/1881)\n\n``` js\nimport ComDemo from '~/demo/index.vue'\n\nconst deepStylesOf = ({ styles = [], components = {} }) => {\n    const unique = array => [...new Set(array)];\n    return unique([...styles, ...Object.values(components).flatMap(deepStylesOf)]);\n}\n// 将子组件样式插入到父组件里\nComDemo.styles = deepStylesOf(ComDemo)\n\n!customElements.get('com-demo') && customElements.define('com-demo', defineCustomElement(ComDemo))\n```\n完美解决子组件样式问题\n\n![插入图片](/images/posts/vue_web_components/pic_1637477447787.png)_效果图_\n\n### 方法\n**defineCustomElement** 构建的组件默认是不会将方法挂到 **customElement** 上的，看 Vue 源码中，只有 _def（构造函数），_instance（组件实例)）。如果想调用组件内的方法，dom._instance.proxy.fun()，感觉实在不太优雅。\n![vuecode](/images/posts/vue_web_components/pic_1638631915396.png)\n我们当然希望我们组件暴露的方法能像普通dom那样直接 dom.fun() 去掉用，我们对 **defineCustomElement** 稍作扩展。\n``` js\nimport { VueElement, defineComponent } from 'vue'\n\nconst defineCustomElement = (options, hydate) => {\n    const Comp = defineComponent(options);\n    class VueCustomElement extends VueElement {\n        constructor(initialProps) {\n            super(Comp, initialProps, hydate);\n            if (Comp.methods) {\n                Object.keys(Comp.methods).forEach(key => {\n                    // 将所有非下划线开头方法 绑定到 元素上\n                    if(!/^_/.test(key)){\n                        this[key] = function (...res) {\n                            if (this._instance) {\n                                // 将方法thi改为 组件实例的proxy\n                                return Comp.methods[key].call(this._instance.proxy, ...res)\n                            } else {\n                                throw new Error('未找到组件实例')\n                            }\n                        }\n                    }\n                })\n            }\n        }\n    }\n    VueCustomElement.def = Comp;\n    return VueCustomElement;\n}\n```\n\n## 总结\n总体来说坑还是有不少的，如果仅仅需要构建一些比较简单跨框架插件，使用这种方式来构建 Web Components 也是一种不错的方案。","source":"_posts/vue_web_components.md","raw":"---\ntitle: 使用 Vue3 构建 Web Components\ncomment: true\ndate: 2021-11-21 10:17:09\ntags: [vue,WebComponents]\ndescription:\ncategories: 记录类\nkeywords: vue3,WebComponents,Custom elements\n---\n有时候想写一个无关框架组件，又不想用原生或者 Jquery 那套去写，而且还要避免样式冲突，用 Web Components 去做刚觉就挺合适的。但是现在 Web Components 使用起来还是不够灵活，很多地方还是不太方便的，如果能和 MVVM 搭配使用就好了。早在之前 Angular 就支持将组件构建成 Web Components，**Vue3 3.2+** 开始终于支持将组建构建成 Web Components 了。正好最近想重构下评论插件，于是上手试了试。\n<!--more-->\n## 构建 Web Components\nvue 提供了一个 **defineCustomElement** 方法，用来将 vue 组件转换成一个扩展至HTMLElement的自定义函数构造函数，使用方式和 **defineComponent** 参数api基本保持一致。\n``` js\nimport { defineCustomElement } from 'vue' \n\nconst MyVueElement = defineCustomElement({\n  // 在此提供正常的 Vue 组件选项\n  props: {},\n  emits: {},\n  template: `...`,\n\n  // defineCustomElement 独有特性: CSS 会被注入到隐式根 (shadow root) 中\n  styles: [`/* inlined css */`]\n})\n\n// 注册 Web Components\ncustomElements.define('my-vue-element', MyVueElement)\n```\n如果需要使用单文件，需要 **@vitejs/plugin-vue@^1.4.0** 或 **vue-loader@^16.5.0** 或更高版本工具。如果只是部分文件需要使用，可以将后缀改为 **.ce.vue** 。若果需要将所有文件都构建 **Web Components** 可以将 **@vitejs/plugin-vue@^1.4.0** 或 **vue-loader@^16.5.0** 的 **customElement** 配置项开启。这样不需要再使用 **.ce.vue** 后缀名了。\n\n### 属性\nvue 会把所有的的 props 自定义元素的对象的 property 上，也会将自定义元素标签上的 attribute 做一个映射。\n```html\n<com-demo type=\"a\"></com-demo>\n\nprops:{\n  type:String\n}\n```\n因为 HTML 的 **attribute** 的只能是字符串，除了基础类型(Boolean、Number) Vue 在映射时会帮忙做类型转换，其他复杂类型则需要设置到 DOM property 上。\n\n### 事件\n在自定义元素中，通过 **this.$emit** 或在 **setup** 中的 **emit** 发出的事件会被调度为原生 [CustomEvents](https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events#adding_custom_data_%E2%80%93_customevent)。附加的事件参数 (payload) 会作为数组暴露在 CustomEvent 对象的 details property 上。\n\n### 插槽\n编写组件时，可以想 vue 一样，但是使用时只能原生的插槽语法，所以也不在支持作用域插槽。\n\n### 子组件样式问题\n使用子组件嵌套的时，有个坑的地方就是默认不会将子组件里的样式抽离出来。\n\n父组件\n``` html\n<template>\n    <div class=\"title\">{{ title }}</div>\n    <Childer />\n</template>\n<script>\nimport Childer from \"./childer.vue\"\nexport default {\n    components: { Childer },\n    data() {\n        return {\n            title: \"父组件\"\n        }\n    },\n}\n</script>\n<style lang=\"less\" scoped>\n.title {\n    padding: 10px;\n    background-color: #eee;\n    font-weight: bold;\n}\n</style>\n```\n子组件\n``` html\n<template>\n    <div class=\"childer\">{{ title }}</div>\n</template>\n<script>\nexport default {\n    data() {\n        return {\n            title: \"子组件\"\n        }\n    },\n}\n</script>\n<style lang=\"less\" scoped>\n.childer {\n    padding: 10px;\n    background-color: #222;\n    color: #fff;\n    font-weight: bold;\n}\n</style>\n```\n可以看到子组件的样式没有插入进去，但是样式隔离的标识是有生成的 data-v-5e87e937。不知道vue官方后续会不会修复这个bug\n\n![插入图片](/images/posts/vue_web_components/pic_1637475879404.png)_生成HTML_\n\n查看组件是可以看到，子组件的样式是有被抽离出来的，这样就只需要自己注入进去了。\n\n![插入图片](/images/posts/vue_web_components/pic_1637476488307.png)_实例对象_\n\n将子组件样式抽离插入到父组件里，参考[这个的实现](https://github.com/vuejs/vue-loader/issues/1881)\n\n``` js\nimport ComDemo from '~/demo/index.vue'\n\nconst deepStylesOf = ({ styles = [], components = {} }) => {\n    const unique = array => [...new Set(array)];\n    return unique([...styles, ...Object.values(components).flatMap(deepStylesOf)]);\n}\n// 将子组件样式插入到父组件里\nComDemo.styles = deepStylesOf(ComDemo)\n\n!customElements.get('com-demo') && customElements.define('com-demo', defineCustomElement(ComDemo))\n```\n完美解决子组件样式问题\n\n![插入图片](/images/posts/vue_web_components/pic_1637477447787.png)_效果图_\n\n### 方法\n**defineCustomElement** 构建的组件默认是不会将方法挂到 **customElement** 上的，看 Vue 源码中，只有 _def（构造函数），_instance（组件实例)）。如果想调用组件内的方法，dom._instance.proxy.fun()，感觉实在不太优雅。\n![vuecode](/images/posts/vue_web_components/pic_1638631915396.png)\n我们当然希望我们组件暴露的方法能像普通dom那样直接 dom.fun() 去掉用，我们对 **defineCustomElement** 稍作扩展。\n``` js\nimport { VueElement, defineComponent } from 'vue'\n\nconst defineCustomElement = (options, hydate) => {\n    const Comp = defineComponent(options);\n    class VueCustomElement extends VueElement {\n        constructor(initialProps) {\n            super(Comp, initialProps, hydate);\n            if (Comp.methods) {\n                Object.keys(Comp.methods).forEach(key => {\n                    // 将所有非下划线开头方法 绑定到 元素上\n                    if(!/^_/.test(key)){\n                        this[key] = function (...res) {\n                            if (this._instance) {\n                                // 将方法thi改为 组件实例的proxy\n                                return Comp.methods[key].call(this._instance.proxy, ...res)\n                            } else {\n                                throw new Error('未找到组件实例')\n                            }\n                        }\n                    }\n                })\n            }\n        }\n    }\n    VueCustomElement.def = Comp;\n    return VueCustomElement;\n}\n```\n\n## 总结\n总体来说坑还是有不少的，如果仅仅需要构建一些比较简单跨框架插件，使用这种方式来构建 Web Components 也是一种不错的方案。","slug":"vue_web_components","published":1,"updated":"2024-03-06T07:42:59.000Z","comments":1,"layout":"post","photos":[],"_id":"cltgz7vss003d98lg7ofj8kev","content":"<p>有时候想写一个无关框架组件，又不想用原生或者 Jquery 那套去写，而且还要避免样式冲突，用 Web Components 去做刚觉就挺合适的。但是现在 Web Components 使用起来还是不够灵活，很多地方还是不太方便的，如果能和 MVVM 搭配使用就好了。早在之前 Angular 就支持将组件构建成 Web Components，<strong>Vue3 3.2+</strong> 开始终于支持将组建构建成 Web Components 了。正好最近想重构下评论插件，于是上手试了试。</p>\n<span id=\"more\"></span>\n<h2 id=\"构建-Web-Components\"><a href=\"#构建-Web-Components\" class=\"headerlink\" title=\"构建 Web Components\"></a>构建 Web Components</h2><p>vue 提供了一个 <strong>defineCustomElement</strong> 方法，用来将 vue 组件转换成一个扩展至HTMLElement的自定义函数构造函数，使用方式和 <strong>defineComponent</strong> 参数api基本保持一致。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineCustomElement &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyVueElement</span> = <span class=\"title function_\">defineCustomElement</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在此提供正常的 Vue 组件选项</span></span><br><span class=\"line\">  <span class=\"attr\">props</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">emits</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`...`</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// defineCustomElement 独有特性: CSS 会被注入到隐式根 (shadow root) 中</span></span><br><span class=\"line\">  <span class=\"attr\">styles</span>: [<span class=\"string\">`/* inlined css */`</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册 Web Components</span></span><br><span class=\"line\">customElements.<span class=\"title function_\">define</span>(<span class=\"string\">&#x27;my-vue-element&#x27;</span>, <span class=\"title class_\">MyVueElement</span>)</span><br></pre></td></tr></table></figure>\n<p>如果需要使用单文件，需要 <strong>@vitejs&#x2F;plugin-vue@^1.4.0</strong> 或 <strong>vue-loader@^16.5.0</strong> 或更高版本工具。如果只是部分文件需要使用，可以将后缀改为 <strong>.ce.vue</strong> 。若果需要将所有文件都构建 <strong>Web Components</strong> 可以将 <strong>@vitejs&#x2F;plugin-vue@^1.4.0</strong> 或 <strong>vue-loader@^16.5.0</strong> 的 <strong>customElement</strong> 配置项开启。这样不需要再使用 <strong>.ce.vue</strong> 后缀名了。</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>vue 会把所有的的 props 自定义元素的对象的 property 上，也会将自定义元素标签上的 attribute 做一个映射。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com-demo</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;a&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">com-demo</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">props:&#123;</span><br><span class=\"line\">  type:String</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为 HTML 的 <strong>attribute</strong> 的只能是字符串，除了基础类型(Boolean、Number) Vue 在映射时会帮忙做类型转换，其他复杂类型则需要设置到 DOM property 上。</p>\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><p>在自定义元素中，通过 <strong>this.$emit</strong> 或在 <strong>setup</strong> 中的 <strong>emit</strong> 发出的事件会被调度为原生 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events#adding_custom_data_%E2%80%93_customevent\">CustomEvents</a>。附加的事件参数 (payload) 会作为数组暴露在 CustomEvent 对象的 details property 上。</p>\n<h3 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h3><p>编写组件时，可以想 vue 一样，但是使用时只能原生的插槽语法，所以也不在支持作用域插槽。</p>\n<h3 id=\"子组件样式问题\"><a href=\"#子组件样式问题\" class=\"headerlink\" title=\"子组件样式问题\"></a>子组件样式问题</h3><p>使用子组件嵌套的时，有个坑的地方就是默认不会将子组件里的样式抽离出来。</p>\n<p>父组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Childer</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">Childer</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./childer.vue&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">components</span>: &#123; <span class=\"title class_\">Childer</span> &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">title</span>: <span class=\"string\">&quot;父组件&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;less&quot;</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.title</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">font-weight</span>: bold;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>子组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;childer&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">title</span>: <span class=\"string\">&quot;子组件&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;less&quot;</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.childer</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#222</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">font-weight</span>: bold;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到子组件的样式没有插入进去，但是样式隔离的标识是有生成的 data-v-5e87e937。不知道vue官方后续会不会修复这个bug</p>\n<p><img src=\"/images/posts/vue_web_components/pic_1637475879404.png\" alt=\"插入图片\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><em>生成HTML</em></p>\n<p>查看组件是可以看到，子组件的样式是有被抽离出来的，这样就只需要自己注入进去了。</p>\n<p><img src=\"/images/posts/vue_web_components/pic_1637476488307.png\" alt=\"插入图片\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><em>实例对象</em></p>\n<p>将子组件样式抽离插入到父组件里，参考<a href=\"https://github.com/vuejs/vue-loader/issues/1881\">这个的实现</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ComDemo</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;~/demo/index.vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">deepStylesOf</span> = (<span class=\"params\">&#123; styles = [], components = &#123;&#125; &#125;</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">unique</span> = array =&gt; [...<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(array)];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">unique</span>([...styles, ...<span class=\"title class_\">Object</span>.<span class=\"title function_\">values</span>(components).<span class=\"title function_\">flatMap</span>(deepStylesOf)]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将子组件样式插入到父组件里</span></span><br><span class=\"line\"><span class=\"title class_\">ComDemo</span>.<span class=\"property\">styles</span> = <span class=\"title function_\">deepStylesOf</span>(<span class=\"title class_\">ComDemo</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">!customElements.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;com-demo&#x27;</span>) &amp;&amp; customElements.<span class=\"title function_\">define</span>(<span class=\"string\">&#x27;com-demo&#x27;</span>, <span class=\"title function_\">defineCustomElement</span>(<span class=\"title class_\">ComDemo</span>))</span><br></pre></td></tr></table></figure>\n<p>完美解决子组件样式问题</p>\n<p><img src=\"/images/posts/vue_web_components/pic_1637477447787.png\" alt=\"插入图片\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><em>效果图</em></p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p><strong>defineCustomElement</strong> 构建的组件默认是不会将方法挂到 <strong>customElement</strong> 上的，看 Vue 源码中，只有 _def（构造函数），_instance（组件实例)）。如果想调用组件内的方法，dom._instance.proxy.fun()，感觉实在不太优雅。<br><img src=\"/images/posts/vue_web_components/pic_1638631915396.png\" alt=\"vuecode\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'><br>我们当然希望我们组件暴露的方法能像普通dom那样直接 dom.fun() 去掉用，我们对 <strong>defineCustomElement</strong> 稍作扩展。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">VueElement</span>, defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">defineCustomElement</span> = (<span class=\"params\">options, hydate</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title class_\">Comp</span> = <span class=\"title function_\">defineComponent</span>(options);</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">VueCustomElement</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">VueElement</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">constructor</span>(<span class=\"params\">initialProps</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">super</span>(<span class=\"title class_\">Comp</span>, initialProps, hydate);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title class_\">Comp</span>.<span class=\"property\">methods</span>) &#123;</span><br><span class=\"line\">                <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"title class_\">Comp</span>.<span class=\"property\">methods</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 将所有非下划线开头方法 绑定到 元素上</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(!<span class=\"regexp\">/^_/</span>.<span class=\"title function_\">test</span>(key))&#123;</span><br><span class=\"line\">                        <span class=\"variable language_\">this</span>[key] = <span class=\"keyword\">function</span> (<span class=\"params\">...res</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">_instance</span>) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">// 将方法thi改为 组件实例的proxy</span></span><br><span class=\"line\">                                <span class=\"keyword\">return</span> <span class=\"title class_\">Comp</span>.<span class=\"property\">methods</span>[key].<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_instance</span>.<span class=\"property\">proxy</span>, ...res)</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;未找到组件实例&#x27;</span>)</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title class_\">VueCustomElement</span>.<span class=\"property\">def</span> = <span class=\"title class_\">Comp</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">VueCustomElement</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总体来说坑还是有不少的，如果仅仅需要构建一些比较简单跨框架插件，使用这种方式来构建 Web Components 也是一种不错的方案。</p>\n","excerpt":"<p>有时候想写一个无关框架组件，又不想用原生或者 Jquery 那套去写，而且还要避免样式冲突，用 Web Components 去做刚觉就挺合适的。但是现在 Web Components 使用起来还是不够灵活，很多地方还是不太方便的，如果能和 MVVM 搭配使用就好了。早在之前 Angular 就支持将组件构建成 Web Components，<strong>Vue3 3.2+</strong> 开始终于支持将组建构建成 Web Components 了。正好最近想重构下评论插件，于是上手试了试。</p>","more":"<h2 id=\"构建-Web-Components\"><a href=\"#构建-Web-Components\" class=\"headerlink\" title=\"构建 Web Components\"></a>构建 Web Components</h2><p>vue 提供了一个 <strong>defineCustomElement</strong> 方法，用来将 vue 组件转换成一个扩展至HTMLElement的自定义函数构造函数，使用方式和 <strong>defineComponent</strong> 参数api基本保持一致。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineCustomElement &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyVueElement</span> = <span class=\"title function_\">defineCustomElement</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在此提供正常的 Vue 组件选项</span></span><br><span class=\"line\">  <span class=\"attr\">props</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">emits</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`...`</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// defineCustomElement 独有特性: CSS 会被注入到隐式根 (shadow root) 中</span></span><br><span class=\"line\">  <span class=\"attr\">styles</span>: [<span class=\"string\">`/* inlined css */`</span>]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册 Web Components</span></span><br><span class=\"line\">customElements.<span class=\"title function_\">define</span>(<span class=\"string\">&#x27;my-vue-element&#x27;</span>, <span class=\"title class_\">MyVueElement</span>)</span><br></pre></td></tr></table></figure>\n<p>如果需要使用单文件，需要 <strong>@vitejs&#x2F;plugin-vue@^1.4.0</strong> 或 <strong>vue-loader@^16.5.0</strong> 或更高版本工具。如果只是部分文件需要使用，可以将后缀改为 <strong>.ce.vue</strong> 。若果需要将所有文件都构建 <strong>Web Components</strong> 可以将 <strong>@vitejs&#x2F;plugin-vue@^1.4.0</strong> 或 <strong>vue-loader@^16.5.0</strong> 的 <strong>customElement</strong> 配置项开启。这样不需要再使用 <strong>.ce.vue</strong> 后缀名了。</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>vue 会把所有的的 props 自定义元素的对象的 property 上，也会将自定义元素标签上的 attribute 做一个映射。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com-demo</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;a&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">com-demo</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">props:&#123;</span><br><span class=\"line\">  type:String</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为 HTML 的 <strong>attribute</strong> 的只能是字符串，除了基础类型(Boolean、Number) Vue 在映射时会帮忙做类型转换，其他复杂类型则需要设置到 DOM property 上。</p>\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><p>在自定义元素中，通过 <strong>this.$emit</strong> 或在 <strong>setup</strong> 中的 <strong>emit</strong> 发出的事件会被调度为原生 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events#adding_custom_data_%E2%80%93_customevent\">CustomEvents</a>。附加的事件参数 (payload) 会作为数组暴露在 CustomEvent 对象的 details property 上。</p>\n<h3 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h3><p>编写组件时，可以想 vue 一样，但是使用时只能原生的插槽语法，所以也不在支持作用域插槽。</p>\n<h3 id=\"子组件样式问题\"><a href=\"#子组件样式问题\" class=\"headerlink\" title=\"子组件样式问题\"></a>子组件样式问题</h3><p>使用子组件嵌套的时，有个坑的地方就是默认不会将子组件里的样式抽离出来。</p>\n<p>父组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Childer</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> <span class=\"title class_\">Childer</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./childer.vue&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">components</span>: &#123; <span class=\"title class_\">Childer</span> &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">title</span>: <span class=\"string\">&quot;父组件&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;less&quot;</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.title</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">font-weight</span>: bold;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>子组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;childer&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">title</span>: <span class=\"string\">&quot;子组件&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;less&quot;</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.childer</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#222</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">font-weight</span>: bold;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到子组件的样式没有插入进去，但是样式隔离的标识是有生成的 data-v-5e87e937。不知道vue官方后续会不会修复这个bug</p>\n<p><img src=\"/images/posts/vue_web_components/pic_1637475879404.png\" alt=\"插入图片\"><em>生成HTML</em></p>\n<p>查看组件是可以看到，子组件的样式是有被抽离出来的，这样就只需要自己注入进去了。</p>\n<p><img src=\"/images/posts/vue_web_components/pic_1637476488307.png\" alt=\"插入图片\"><em>实例对象</em></p>\n<p>将子组件样式抽离插入到父组件里，参考<a href=\"https://github.com/vuejs/vue-loader/issues/1881\">这个的实现</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ComDemo</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;~/demo/index.vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">deepStylesOf</span> = (<span class=\"params\">&#123; styles = [], components = &#123;&#125; &#125;</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">unique</span> = array =&gt; [...<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(array)];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">unique</span>([...styles, ...<span class=\"title class_\">Object</span>.<span class=\"title function_\">values</span>(components).<span class=\"title function_\">flatMap</span>(deepStylesOf)]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将子组件样式插入到父组件里</span></span><br><span class=\"line\"><span class=\"title class_\">ComDemo</span>.<span class=\"property\">styles</span> = <span class=\"title function_\">deepStylesOf</span>(<span class=\"title class_\">ComDemo</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">!customElements.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;com-demo&#x27;</span>) &amp;&amp; customElements.<span class=\"title function_\">define</span>(<span class=\"string\">&#x27;com-demo&#x27;</span>, <span class=\"title function_\">defineCustomElement</span>(<span class=\"title class_\">ComDemo</span>))</span><br></pre></td></tr></table></figure>\n<p>完美解决子组件样式问题</p>\n<p><img src=\"/images/posts/vue_web_components/pic_1637477447787.png\" alt=\"插入图片\"><em>效果图</em></p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p><strong>defineCustomElement</strong> 构建的组件默认是不会将方法挂到 <strong>customElement</strong> 上的，看 Vue 源码中，只有 _def（构造函数），_instance（组件实例)）。如果想调用组件内的方法，dom._instance.proxy.fun()，感觉实在不太优雅。<br><img src=\"/images/posts/vue_web_components/pic_1638631915396.png\" alt=\"vuecode\"><br>我们当然希望我们组件暴露的方法能像普通dom那样直接 dom.fun() 去掉用，我们对 <strong>defineCustomElement</strong> 稍作扩展。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">VueElement</span>, defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">defineCustomElement</span> = (<span class=\"params\">options, hydate</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title class_\">Comp</span> = <span class=\"title function_\">defineComponent</span>(options);</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">VueCustomElement</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">VueElement</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">constructor</span>(<span class=\"params\">initialProps</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">super</span>(<span class=\"title class_\">Comp</span>, initialProps, hydate);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title class_\">Comp</span>.<span class=\"property\">methods</span>) &#123;</span><br><span class=\"line\">                <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"title class_\">Comp</span>.<span class=\"property\">methods</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 将所有非下划线开头方法 绑定到 元素上</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(!<span class=\"regexp\">/^_/</span>.<span class=\"title function_\">test</span>(key))&#123;</span><br><span class=\"line\">                        <span class=\"variable language_\">this</span>[key] = <span class=\"keyword\">function</span> (<span class=\"params\">...res</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">_instance</span>) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">// 将方法thi改为 组件实例的proxy</span></span><br><span class=\"line\">                                <span class=\"keyword\">return</span> <span class=\"title class_\">Comp</span>.<span class=\"property\">methods</span>[key].<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_instance</span>.<span class=\"property\">proxy</span>, ...res)</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;未找到组件实例&#x27;</span>)</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title class_\">VueCustomElement</span>.<span class=\"property\">def</span> = <span class=\"title class_\">Comp</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">VueCustomElement</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总体来说坑还是有不少的，如果仅仅需要构建一些比较简单跨框架插件，使用这种方式来构建 Web Components 也是一种不错的方案。</p>"},{"title":"Web Components","date":"2020-05-10T02:16:09.000Z","comments":1,"keywords":"js组件,影子DOM,Shadow DOM,自定义元素,Custom elements,HTML模板","_content":"组件是前端的发展方向，现在流行的 React 和 Vue 都是组件框架。如今 Web Components 被越来越多的浏览器所支持，Web Components 或许是未来的方向。\n<!-- more -->\nWeb Components 的组成主要是由这三种组成，它们可以封装自定义功能的元素，可以在你喜欢的任何地方重用，不必担心代码冲突。\n- Custom elements（自定义元素）：允许自定义一个标签，以及一些操作，然后可以像普通标签一样使用它\n- Shadow DOM（影子DOM）：可以对脚本和样式进行隔离，不用担心外部对其由影响\n- HTML templates（HTML模板）：\\<template\\> 和 \\<slot\\> 元素使您可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用。\n\n## 自定义元素 ##\n\nCustomElementRegistry 接口的实例用来注册一个自定义元素，window.customElements 获取去到 CustomElementRegistry 实例。customElements.define() 方法用来注册一个 custom element，该方法接受以下参数：\n- 表示所创建的元素名称的符合 DOMString 标准的字符串。注意，custom element 的名称不能是单个单词，且其中必须要有短横线。\n- 用于定义元素行为的 类 。\n- 可选参数，一个包含 extends 属性的配置对象，是可选参数。它指定了所创建的元素继承自哪个内置元素，可以继承任何内置元素。\n\n像这样定义一个自定义元素\\<user-p>，并且继承元素\\<p>\n\n``` js\ncustomElements.define(\n    'user-p', \n    class UserP extends HTMLParagraphElement {\n        constructor() {\n            // 必须首先调用父类构造方法\n            super()\n        }\n    },\n    {\n        extends: 'p' \n    }\n)\n```\n自定义元素的使用也分两种情况\n一种是如果元素不继承其他内建 HTML 元素,只继承 HTMLElement，可以直接像普通标签一样使用\n``` html\n<user-p></user-p>\n//或者这样\n<script>\n    document.createElement('user-p')\n</script>\n```\n如果是继承了其他元素，比如像上面那个例子 HTMLParagraphElement \n``` html\n<p is='user-p'></p>\n//或者这样\n<script>\n    document.createElement('p',{is:'user-p'})\n</script>\n```\n### 生命周期回调函数 ###\n- connectedCallback：首次被插入文档DOM时，被调用。\n- disconnectedCallback：从文档DOM中删除时，被调用。\n- adoptedCallback：被移动到新的文档时，被调用。\n- attributeChangedCallback:增加、删除、修改自身属性时，被调用。\n\n如果需要在元素属性变化后，触发 attributeChangedCallback()回调函数，你必须监听这个属性。这可以通过定义 observedAttributes() get函数来实现，observedAttributes()函数体内包含一个 return 语句，返回一个数组，包含了需要监听的属性名称：\n``` js\nstatic get observedAttributes() {return ['name', 'style']; }\n```\n\n## Shadow DOM ##\nShadow DOM 可以将一个隐藏的、独立的 DOM 附加到一个元素上，可以将标记结构、样式和行为隐藏起来，并与页面上的其他代码相隔离，保证不同的部分不会混在一起，可使代码更加干净、整洁。\n- Shadow host：一个常规 DOM 节点，Shadow DOM 会被附加到这个节点上。\n- Shadow tree：Shadow DOM 内部的 DOM 树。\n- Shadow boundary：Shadow DOM 结束的地方，也是常规 DOM 开始的地方。\n- Shadow root: Shadow tree 的根节点。\n\n像\\<video>就是用 Shadow DOM 封装的\n\n![](/images/posts/webcomponents/20200510202839.png)\n\n### 自定义Shadow DOM ###\n可以使用 Element.attachShadow() 方法来将一个 shadow root 附加到任何一个元素上,方法接受一个参数\n```js\nattachShadow 参数\n{\n    mode:'open'|'closed', \n    //open 表示外部可以访问根节点,例如 Element.shadowRoot \n    //closed 表示不允许外部访问\n\n    delegatesFocus:true|false\n    //焦点委托\n}\n```\n\n简单例子\n\n``` html\n<style>\n    .demo{\n        color:red !important;\n    }\n    .test{\n        font-size:20px;\n    }\n</style>\n<div class='test'>\n    <div id='demo'>\n        你的浏览器不支持 Shadow DOM \n    </div>\n</div>  \n<script>\n      let demo = document.getElementById('demo').attachShadow({ mode: 'open' })\n      var style = document.createElement('style');\n      style.textContent = `\n      .demo {\n          color: #38acfa;\n      }\n      :host{\n          border:5px  dashed #3699ff;\n      }\n      :host-context(.test){\n          background:#000;\n      }\n      :host(#demo){\n          height:60px;\n          margin: 20px;\n      }`\n      demo.innerHTML = '<div class=\"demo\">自定义Shadow DOM</div>'\n      demo.appendChild(style)\n</script>\n\n```\n效果如下，可以看到外部样式是不会影响里面元素的，但是如果是样式是继承祖先元素的是会穿透进去的\n\n这三个都是用来选定 宿主元素 的\n- :host 当前 ShadowDOM 宿主元素\n- :host() 在宿主元素上查找，比如上面的 :host(#demo) 就是当宿主元素 id='demo' 时候生效\n- :host-context() 在当前 ShadowDOM 宿主元素的祖先节点中查找，比如 :host-context(.test) 可以一直往宿主元素祖先上找，符合就生效\n\n<br>\n<style>\n    .demo{\n        color:red !important;\n    }\n    .test{\n        font-size:20px;\n    }\n</style>\n<div class='test'>\n    <div id='demo'>\n        你的浏览器不支持 Shadow DOM \n    </div>\n</div>  \n<script>\n      let demo = document.getElementById('demo').attachShadow({ mode: 'open' })\n      var style = document.createElement('style');\n      style.textContent = `\n      .demo {\n          color: #38acfa;\n      }\n      :host{\n          border:5px  dashed #3699ff;\n      }\n      :host-context(.test){\n          background:#000;\n      }\n      :host(#demo){\n          height:60px;\n          margin: 20px;\n      }`\n      demo.innerHTML = '<div class=\"demo\">自定义Shadow DOM</div>'\n      demo.appendChild(style)\n</script>\n\n\n## HTML模板 ##\ntemplate 主要作用就是避免重复去创建那些标签结构。比如当一个组件被重复使用时候，如果不用模板的话，会一遍又一遍的去创建组件类的标签结构，使用 template 这样会避免这样重复的创建标签结构。\n\ntemplate 不会再 DOM 上显示，举例：\n``` html\n<template id=\"my-template\">\n    <div>\n        HTML 模板\n    </div>\n</template>\n```\n使用 js 去获取它\n\n``` js\nlet template = document.getElementById('my-template');\ndocument.body.appendChild(template.content);\n```\n\n## 组合使用 ##\n\n``` html\n<my-div image='/images/logo/admin_template.png'>\n    <div slot='header'>Web Components</div>\n    <div slot='footer'>\n        slot footer\n    </div>\n</my-div>\n\n<template id=\"my-template\">\n    <style>\n        .card{\n            padding: 10px 20px;\n            box-shadow: 0 0 5px 0 #00000038;\n            border-radius: 5px;\n            display: inline-block;\n        }\n        ul {\n            list-style: disc;\n            padding-left: 1.5em;\n        }\n        li {\n            height: 30px;\n        }\n        li+li {\n            border-top: 1px solid #f1f1f1;\n        }\n        img{\n            width:250px\n        }\n        .header{\n            margin-bottom: 10px;\n            border-bottom: 1px solid #f1f1f1;\n        }\n        .footer{\n            margin-top: 10px;\n            border-top: 1px solid #f1f1f1;\n        }\n    </style>\n    <div class='card'>\n        <div class='header'>\n            <slot name='header'></slot>\n        </div>\n        <img>\n        <div class='footer'>\n            <slot name='footer'></slot>\n        </div>\n    </div>\n</template>\n\n<script>\n    customElements.define('my-div',\n        class extends HTMLElement {\n            constructor() {\n                super();\n                let template = document.getElementById('my-template');\n                let templateContent = template.content.cloneNode(true);\n\n                const shadowRoot = this.attachShadow({ mode: 'open' })\n\n                templateContent.querySelector('img').setAttribute('src', this.getAttribute('image'));\n                shadowRoot.appendChild(templateContent);\n            }\n        })\n</script>\n\n```\n\n<my-div image='/images/logo/web_conponents.png'>\n    <div slot='header'>Web Components</div>\n    <div slot='footer'>\n        slot footer\n    </div>\n</my-div>\n\n<template id=\"my-template\">\n    <style>\n        .card{\n            padding: 10px 20px;\n            box-shadow: 0 0 5px 0 #00000038;\n            border-radius: 5px;\n            display: inline-block;\n        }\n        ul {\n            list-style: disc;\n            padding-left: 1.5em;\n        }\n        li {\n            height: 30px;\n        }\n        li+li {\n            border-top: 1px solid #f1f1f1;\n        }\n        img{\n            width:250px\n        }\n        .header{\n            margin-bottom: 10px;\n            border-bottom: 1px solid #f1f1f1;\n        }\n        .footer{\n            margin-top: 10px;\n            border-top: 1px solid #f1f1f1;\n        }\n    </style>\n    <div class='card'>\n        <div class='header'>\n            <slot name='header'></slot>\n        </div>\n        <img>\n        <div class='footer'>\n            <slot name='footer'></slot>\n        </div>\n    </div>\n</template>\n\n<script>\n    customElements.define('my-div',\n        class extends HTMLElement {\n            constructor() {\n                super();\n                let template = document.getElementById('my-template');\n                let templateContent = template.content.cloneNode(true);\n\n                const shadowRoot = this.attachShadow({ mode: 'open' })\n\n                templateContent.querySelector('img').setAttribute('src', this.getAttribute('image'));\n                shadowRoot.appendChild(templateContent);\n            }\n        })\n</script>\n","source":"_posts/web_components.md","raw":"---\ntitle: Web Components\ndate: 2020-05-10 10:16:09\ntags: [WebComponents]\ncategories: 记录类\ncomments: true\nkeywords: js组件,影子DOM,Shadow DOM,自定义元素,Custom elements,HTML模板\n---\n组件是前端的发展方向，现在流行的 React 和 Vue 都是组件框架。如今 Web Components 被越来越多的浏览器所支持，Web Components 或许是未来的方向。\n<!-- more -->\nWeb Components 的组成主要是由这三种组成，它们可以封装自定义功能的元素，可以在你喜欢的任何地方重用，不必担心代码冲突。\n- Custom elements（自定义元素）：允许自定义一个标签，以及一些操作，然后可以像普通标签一样使用它\n- Shadow DOM（影子DOM）：可以对脚本和样式进行隔离，不用担心外部对其由影响\n- HTML templates（HTML模板）：\\<template\\> 和 \\<slot\\> 元素使您可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用。\n\n## 自定义元素 ##\n\nCustomElementRegistry 接口的实例用来注册一个自定义元素，window.customElements 获取去到 CustomElementRegistry 实例。customElements.define() 方法用来注册一个 custom element，该方法接受以下参数：\n- 表示所创建的元素名称的符合 DOMString 标准的字符串。注意，custom element 的名称不能是单个单词，且其中必须要有短横线。\n- 用于定义元素行为的 类 。\n- 可选参数，一个包含 extends 属性的配置对象，是可选参数。它指定了所创建的元素继承自哪个内置元素，可以继承任何内置元素。\n\n像这样定义一个自定义元素\\<user-p>，并且继承元素\\<p>\n\n``` js\ncustomElements.define(\n    'user-p', \n    class UserP extends HTMLParagraphElement {\n        constructor() {\n            // 必须首先调用父类构造方法\n            super()\n        }\n    },\n    {\n        extends: 'p' \n    }\n)\n```\n自定义元素的使用也分两种情况\n一种是如果元素不继承其他内建 HTML 元素,只继承 HTMLElement，可以直接像普通标签一样使用\n``` html\n<user-p></user-p>\n//或者这样\n<script>\n    document.createElement('user-p')\n</script>\n```\n如果是继承了其他元素，比如像上面那个例子 HTMLParagraphElement \n``` html\n<p is='user-p'></p>\n//或者这样\n<script>\n    document.createElement('p',{is:'user-p'})\n</script>\n```\n### 生命周期回调函数 ###\n- connectedCallback：首次被插入文档DOM时，被调用。\n- disconnectedCallback：从文档DOM中删除时，被调用。\n- adoptedCallback：被移动到新的文档时，被调用。\n- attributeChangedCallback:增加、删除、修改自身属性时，被调用。\n\n如果需要在元素属性变化后，触发 attributeChangedCallback()回调函数，你必须监听这个属性。这可以通过定义 observedAttributes() get函数来实现，observedAttributes()函数体内包含一个 return 语句，返回一个数组，包含了需要监听的属性名称：\n``` js\nstatic get observedAttributes() {return ['name', 'style']; }\n```\n\n## Shadow DOM ##\nShadow DOM 可以将一个隐藏的、独立的 DOM 附加到一个元素上，可以将标记结构、样式和行为隐藏起来，并与页面上的其他代码相隔离，保证不同的部分不会混在一起，可使代码更加干净、整洁。\n- Shadow host：一个常规 DOM 节点，Shadow DOM 会被附加到这个节点上。\n- Shadow tree：Shadow DOM 内部的 DOM 树。\n- Shadow boundary：Shadow DOM 结束的地方，也是常规 DOM 开始的地方。\n- Shadow root: Shadow tree 的根节点。\n\n像\\<video>就是用 Shadow DOM 封装的\n\n![](/images/posts/webcomponents/20200510202839.png)\n\n### 自定义Shadow DOM ###\n可以使用 Element.attachShadow() 方法来将一个 shadow root 附加到任何一个元素上,方法接受一个参数\n```js\nattachShadow 参数\n{\n    mode:'open'|'closed', \n    //open 表示外部可以访问根节点,例如 Element.shadowRoot \n    //closed 表示不允许外部访问\n\n    delegatesFocus:true|false\n    //焦点委托\n}\n```\n\n简单例子\n\n``` html\n<style>\n    .demo{\n        color:red !important;\n    }\n    .test{\n        font-size:20px;\n    }\n</style>\n<div class='test'>\n    <div id='demo'>\n        你的浏览器不支持 Shadow DOM \n    </div>\n</div>  \n<script>\n      let demo = document.getElementById('demo').attachShadow({ mode: 'open' })\n      var style = document.createElement('style');\n      style.textContent = `\n      .demo {\n          color: #38acfa;\n      }\n      :host{\n          border:5px  dashed #3699ff;\n      }\n      :host-context(.test){\n          background:#000;\n      }\n      :host(#demo){\n          height:60px;\n          margin: 20px;\n      }`\n      demo.innerHTML = '<div class=\"demo\">自定义Shadow DOM</div>'\n      demo.appendChild(style)\n</script>\n\n```\n效果如下，可以看到外部样式是不会影响里面元素的，但是如果是样式是继承祖先元素的是会穿透进去的\n\n这三个都是用来选定 宿主元素 的\n- :host 当前 ShadowDOM 宿主元素\n- :host() 在宿主元素上查找，比如上面的 :host(#demo) 就是当宿主元素 id='demo' 时候生效\n- :host-context() 在当前 ShadowDOM 宿主元素的祖先节点中查找，比如 :host-context(.test) 可以一直往宿主元素祖先上找，符合就生效\n\n<br>\n<style>\n    .demo{\n        color:red !important;\n    }\n    .test{\n        font-size:20px;\n    }\n</style>\n<div class='test'>\n    <div id='demo'>\n        你的浏览器不支持 Shadow DOM \n    </div>\n</div>  \n<script>\n      let demo = document.getElementById('demo').attachShadow({ mode: 'open' })\n      var style = document.createElement('style');\n      style.textContent = `\n      .demo {\n          color: #38acfa;\n      }\n      :host{\n          border:5px  dashed #3699ff;\n      }\n      :host-context(.test){\n          background:#000;\n      }\n      :host(#demo){\n          height:60px;\n          margin: 20px;\n      }`\n      demo.innerHTML = '<div class=\"demo\">自定义Shadow DOM</div>'\n      demo.appendChild(style)\n</script>\n\n\n## HTML模板 ##\ntemplate 主要作用就是避免重复去创建那些标签结构。比如当一个组件被重复使用时候，如果不用模板的话，会一遍又一遍的去创建组件类的标签结构，使用 template 这样会避免这样重复的创建标签结构。\n\ntemplate 不会再 DOM 上显示，举例：\n``` html\n<template id=\"my-template\">\n    <div>\n        HTML 模板\n    </div>\n</template>\n```\n使用 js 去获取它\n\n``` js\nlet template = document.getElementById('my-template');\ndocument.body.appendChild(template.content);\n```\n\n## 组合使用 ##\n\n``` html\n<my-div image='/images/logo/admin_template.png'>\n    <div slot='header'>Web Components</div>\n    <div slot='footer'>\n        slot footer\n    </div>\n</my-div>\n\n<template id=\"my-template\">\n    <style>\n        .card{\n            padding: 10px 20px;\n            box-shadow: 0 0 5px 0 #00000038;\n            border-radius: 5px;\n            display: inline-block;\n        }\n        ul {\n            list-style: disc;\n            padding-left: 1.5em;\n        }\n        li {\n            height: 30px;\n        }\n        li+li {\n            border-top: 1px solid #f1f1f1;\n        }\n        img{\n            width:250px\n        }\n        .header{\n            margin-bottom: 10px;\n            border-bottom: 1px solid #f1f1f1;\n        }\n        .footer{\n            margin-top: 10px;\n            border-top: 1px solid #f1f1f1;\n        }\n    </style>\n    <div class='card'>\n        <div class='header'>\n            <slot name='header'></slot>\n        </div>\n        <img>\n        <div class='footer'>\n            <slot name='footer'></slot>\n        </div>\n    </div>\n</template>\n\n<script>\n    customElements.define('my-div',\n        class extends HTMLElement {\n            constructor() {\n                super();\n                let template = document.getElementById('my-template');\n                let templateContent = template.content.cloneNode(true);\n\n                const shadowRoot = this.attachShadow({ mode: 'open' })\n\n                templateContent.querySelector('img').setAttribute('src', this.getAttribute('image'));\n                shadowRoot.appendChild(templateContent);\n            }\n        })\n</script>\n\n```\n\n<my-div image='/images/logo/web_conponents.png'>\n    <div slot='header'>Web Components</div>\n    <div slot='footer'>\n        slot footer\n    </div>\n</my-div>\n\n<template id=\"my-template\">\n    <style>\n        .card{\n            padding: 10px 20px;\n            box-shadow: 0 0 5px 0 #00000038;\n            border-radius: 5px;\n            display: inline-block;\n        }\n        ul {\n            list-style: disc;\n            padding-left: 1.5em;\n        }\n        li {\n            height: 30px;\n        }\n        li+li {\n            border-top: 1px solid #f1f1f1;\n        }\n        img{\n            width:250px\n        }\n        .header{\n            margin-bottom: 10px;\n            border-bottom: 1px solid #f1f1f1;\n        }\n        .footer{\n            margin-top: 10px;\n            border-top: 1px solid #f1f1f1;\n        }\n    </style>\n    <div class='card'>\n        <div class='header'>\n            <slot name='header'></slot>\n        </div>\n        <img>\n        <div class='footer'>\n            <slot name='footer'></slot>\n        </div>\n    </div>\n</template>\n\n<script>\n    customElements.define('my-div',\n        class extends HTMLElement {\n            constructor() {\n                super();\n                let template = document.getElementById('my-template');\n                let templateContent = template.content.cloneNode(true);\n\n                const shadowRoot = this.attachShadow({ mode: 'open' })\n\n                templateContent.querySelector('img').setAttribute('src', this.getAttribute('image'));\n                shadowRoot.appendChild(templateContent);\n            }\n        })\n</script>\n","slug":"web_components","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vst003h98lgg01j6cg0","content":"<p>组件是前端的发展方向，现在流行的 React 和 Vue 都是组件框架。如今 Web Components 被越来越多的浏览器所支持，Web Components 或许是未来的方向。</p>\n<span id=\"more\"></span>\n<p>Web Components 的组成主要是由这三种组成，它们可以封装自定义功能的元素，可以在你喜欢的任何地方重用，不必担心代码冲突。</p>\n<ul>\n<li>Custom elements（自定义元素）：允许自定义一个标签，以及一些操作，然后可以像普通标签一样使用它</li>\n<li>Shadow DOM（影子DOM）：可以对脚本和样式进行隔离，不用担心外部对其由影响</li>\n<li>HTML templates（HTML模板）：&lt;template&gt; 和 &lt;slot&gt; 元素使您可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用。</li>\n</ul>\n<h2 id=\"自定义元素\"><a href=\"#自定义元素\" class=\"headerlink\" title=\"自定义元素\"></a>自定义元素</h2><p>CustomElementRegistry 接口的实例用来注册一个自定义元素，window.customElements 获取去到 CustomElementRegistry 实例。customElements.define() 方法用来注册一个 custom element，该方法接受以下参数：</p>\n<ul>\n<li>表示所创建的元素名称的符合 DOMString 标准的字符串。注意，custom element 的名称不能是单个单词，且其中必须要有短横线。</li>\n<li>用于定义元素行为的 类 。</li>\n<li>可选参数，一个包含 extends 属性的配置对象，是可选参数。它指定了所创建的元素继承自哪个内置元素，可以继承任何内置元素。</li>\n</ul>\n<p>像这样定义一个自定义元素&lt;user-p&gt;，并且继承元素&lt;p&gt;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customElements.<span class=\"title function_\">define</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;user-p&#x27;</span>, </span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">UserP</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">HTMLParagraphElement</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 必须首先调用父类构造方法</span></span><br><span class=\"line\">            <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">extends</span>: <span class=\"string\">&#x27;p&#x27;</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>自定义元素的使用也分两种情况<br>一种是如果元素不继承其他内建 HTML 元素,只继承 HTMLElement，可以直接像普通标签一样使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user-p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">user-p</span>&gt;</span></span><br><span class=\"line\">//或者这样</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;user-p&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果是继承了其他元素，比如像上面那个例子 HTMLParagraphElement </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">is</span>=<span class=\"string\">&#x27;user-p&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">//或者这样</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;p&#x27;</span>,&#123;<span class=\"attr\">is</span>:<span class=\"string\">&#x27;user-p&#x27;</span>&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"生命周期回调函数\"><a href=\"#生命周期回调函数\" class=\"headerlink\" title=\"生命周期回调函数\"></a>生命周期回调函数</h3><ul>\n<li>connectedCallback：首次被插入文档DOM时，被调用。</li>\n<li>disconnectedCallback：从文档DOM中删除时，被调用。</li>\n<li>adoptedCallback：被移动到新的文档时，被调用。</li>\n<li>attributeChangedCallback:增加、删除、修改自身属性时，被调用。</li>\n</ul>\n<p>如果需要在元素属性变化后，触发 attributeChangedCallback()回调函数，你必须监听这个属性。这可以通过定义 observedAttributes() get函数来实现，observedAttributes()函数体内包含一个 return 语句，返回一个数组，包含了需要监听的属性名称：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">get</span> <span class=\"title function_\">observedAttributes</span>() &#123;<span class=\"keyword\">return</span> [<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;style&#x27;</span>]; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Shadow-DOM\"><a href=\"#Shadow-DOM\" class=\"headerlink\" title=\"Shadow DOM\"></a>Shadow DOM</h2><p>Shadow DOM 可以将一个隐藏的、独立的 DOM 附加到一个元素上，可以将标记结构、样式和行为隐藏起来，并与页面上的其他代码相隔离，保证不同的部分不会混在一起，可使代码更加干净、整洁。</p>\n<ul>\n<li>Shadow host：一个常规 DOM 节点，Shadow DOM 会被附加到这个节点上。</li>\n<li>Shadow tree：Shadow DOM 内部的 DOM 树。</li>\n<li>Shadow boundary：Shadow DOM 结束的地方，也是常规 DOM 开始的地方。</li>\n<li>Shadow root: Shadow tree 的根节点。</li>\n</ul>\n<p>像&lt;video&gt;就是用 Shadow DOM 封装的</p>\n<p><img src=\"/images/posts/webcomponents/20200510202839.png\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'></p>\n<h3 id=\"自定义Shadow-DOM\"><a href=\"#自定义Shadow-DOM\" class=\"headerlink\" title=\"自定义Shadow DOM\"></a>自定义Shadow DOM</h3><p>可以使用 Element.attachShadow() 方法来将一个 shadow root 附加到任何一个元素上,方法接受一个参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attachShadow 参数</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>:<span class=\"string\">&#x27;open&#x27;</span>|<span class=\"string\">&#x27;closed&#x27;</span>, </span><br><span class=\"line\">    <span class=\"comment\">//open 表示外部可以访问根节点,例如 Element.shadowRoot </span></span><br><span class=\"line\">    <span class=\"comment\">//closed 表示不允许外部访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">delegatesFocus</span>:<span class=\"literal\">true</span>|<span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">//焦点委托</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.demo</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">color</span>:red <span class=\"meta\">!important</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.test</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">font-size</span>:<span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;test&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;demo&#x27;</span>&gt;</span></span><br><span class=\"line\">        你的浏览器不支持 Shadow DOM </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> demo = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;demo&#x27;</span>).<span class=\"title function_\">attachShadow</span>(&#123; <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;open&#x27;</span> &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> style = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;style&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      style.<span class=\"property\">textContent</span> = <span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">      .demo &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">          color: #38acfa;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">      :host&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">          border:5px  dashed #3699ff;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">      :host-context(.test)&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">          background:#000;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">      :host(#demo)&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">          height:60px;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">          margin: 20px;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">      &#125;`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      demo.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;&lt;div class=&quot;demo&quot;&gt;自定义Shadow DOM&lt;/div&gt;&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      demo.<span class=\"title function_\">appendChild</span>(style)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>效果如下，可以看到外部样式是不会影响里面元素的，但是如果是样式是继承祖先元素的是会穿透进去的</p>\n<p>这三个都是用来选定 宿主元素 的</p>\n<ul>\n<li>:host 当前 ShadowDOM 宿主元素</li>\n<li>:host() 在宿主元素上查找，比如上面的 :host(#demo) 就是当宿主元素 id&#x3D;’demo’ 时候生效</li>\n<li>:host-context() 在当前 ShadowDOM 宿主元素的祖先节点中查找，比如 :host-context(.test) 可以一直往宿主元素祖先上找，符合就生效</li>\n</ul>\n<br>\n<style>\n    .demo{\n        color:red !important;\n    }\n    .test{\n        font-size:20px;\n    }\n</style>\n<div class='test'>\n    <div id='demo'>\n        你的浏览器不支持 Shadow DOM \n    </div>\n</div>  \n<script>\n      let demo = document.getElementById('demo').attachShadow({ mode: 'open' })\n      var style = document.createElement('style');\n      style.textContent = `\n      .demo {\n          color: #38acfa;\n      }\n      :host{\n          border:5px  dashed #3699ff;\n      }\n      :host-context(.test){\n          background:#000;\n      }\n      :host(#demo){\n          height:60px;\n          margin: 20px;\n      }`\n      demo.innerHTML = '<div class=\"demo\">自定义Shadow DOM</div>'\n      demo.appendChild(style)\n</script>\n\n\n<h2 id=\"HTML模板\"><a href=\"#HTML模板\" class=\"headerlink\" title=\"HTML模板\"></a>HTML模板</h2><p>template 主要作用就是避免重复去创建那些标签结构。比如当一个组件被重复使用时候，如果不用模板的话，会一遍又一遍的去创建组件类的标签结构，使用 template 这样会避免这样重复的创建标签结构。</p>\n<p>template 不会再 DOM 上显示，举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;my-template&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        HTML 模板</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用 js 去获取它</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> template = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;my-template&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(template.<span class=\"property\">content</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组合使用\"><a href=\"#组合使用\" class=\"headerlink\" title=\"组合使用\"></a>组合使用</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-div</span> <span class=\"attr\">image</span>=<span class=\"string\">&#x27;/images/logo/admin_template.png&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">&#x27;header&#x27;</span>&gt;</span>Web Components<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">&#x27;footer&#x27;</span>&gt;</span></span><br><span class=\"line\">        slot footer</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;my-template&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.card</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5px</span> <span class=\"number\">0</span> <span class=\"number\">#00000038</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: inline-block;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">ul</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">list-style</span>: disc;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding-left</span>: <span class=\"number\">1.5em</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">li</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">li</span>+<span class=\"selector-tag\">li</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#f1f1f1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">img</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>:<span class=\"number\">250px</span></span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.header</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#f1f1f1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.footer</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#f1f1f1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;card&#x27;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;header&#x27;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&#x27;header&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;footer&#x27;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&#x27;footer&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    customElements.<span class=\"title function_\">define</span>(<span class=\"string\">&#x27;my-div&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">HTMLElement</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">super</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> template = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;my-template&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> templateContent = template.<span class=\"property\">content</span>.<span class=\"title function_\">cloneNode</span>(<span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">const</span> shadowRoot = <span class=\"variable language_\">this</span>.<span class=\"title function_\">attachShadow</span>(&#123; <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;open&#x27;</span> &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                templateContent.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;img&#x27;</span>).<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;src&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;image&#x27;</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\">                shadowRoot.<span class=\"title function_\">appendChild</span>(templateContent);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<my-div image='/images/logo/web_conponents.png'>\n    <div slot='header'>Web Components</div>\n    <div slot='footer'>\n        slot footer\n    </div>\n</my-div>\n\n<template id=\"my-template\">\n    <style>\n        .card{\n            padding: 10px 20px;\n            box-shadow: 0 0 5px 0 #00000038;\n            border-radius: 5px;\n            display: inline-block;\n        }\n        ul {\n            list-style: disc;\n            padding-left: 1.5em;\n        }\n        li {\n            height: 30px;\n        }\n        li+li {\n            border-top: 1px solid #f1f1f1;\n        }\n        img{\n            width:250px\n        }\n        .header{\n            margin-bottom: 10px;\n            border-bottom: 1px solid #f1f1f1;\n        }\n        .footer{\n            margin-top: 10px;\n            border-top: 1px solid #f1f1f1;\n        }\n    </style>\n    <div class='card'>\n        <div class='header'>\n            <slot name='header'></slot>\n        </div>\n        <img>\n        <div class='footer'>\n            <slot name='footer'></slot>\n        </div>\n    </div>\n</template>\n\n<script>\n    customElements.define('my-div',\n        class extends HTMLElement {\n            constructor() {\n                super();\n                let template = document.getElementById('my-template');\n                let templateContent = template.content.cloneNode(true);\n\n                const shadowRoot = this.attachShadow({ mode: 'open' })\n\n                templateContent.querySelector('img').setAttribute('src', this.getAttribute('image'));\n                shadowRoot.appendChild(templateContent);\n            }\n        })\n</script>\n","excerpt":"<p>组件是前端的发展方向，现在流行的 React 和 Vue 都是组件框架。如今 Web Components 被越来越多的浏览器所支持，Web Components 或许是未来的方向。</p>","more":"<p>Web Components 的组成主要是由这三种组成，它们可以封装自定义功能的元素，可以在你喜欢的任何地方重用，不必担心代码冲突。</p>\n<ul>\n<li>Custom elements（自定义元素）：允许自定义一个标签，以及一些操作，然后可以像普通标签一样使用它</li>\n<li>Shadow DOM（影子DOM）：可以对脚本和样式进行隔离，不用担心外部对其由影响</li>\n<li>HTML templates（HTML模板）：&lt;template&gt; 和 &lt;slot&gt; 元素使您可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用。</li>\n</ul>\n<h2 id=\"自定义元素\"><a href=\"#自定义元素\" class=\"headerlink\" title=\"自定义元素\"></a>自定义元素</h2><p>CustomElementRegistry 接口的实例用来注册一个自定义元素，window.customElements 获取去到 CustomElementRegistry 实例。customElements.define() 方法用来注册一个 custom element，该方法接受以下参数：</p>\n<ul>\n<li>表示所创建的元素名称的符合 DOMString 标准的字符串。注意，custom element 的名称不能是单个单词，且其中必须要有短横线。</li>\n<li>用于定义元素行为的 类 。</li>\n<li>可选参数，一个包含 extends 属性的配置对象，是可选参数。它指定了所创建的元素继承自哪个内置元素，可以继承任何内置元素。</li>\n</ul>\n<p>像这样定义一个自定义元素&lt;user-p&gt;，并且继承元素&lt;p&gt;</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customElements.<span class=\"title function_\">define</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;user-p&#x27;</span>, </span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">UserP</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">HTMLParagraphElement</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 必须首先调用父类构造方法</span></span><br><span class=\"line\">            <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">extends</span>: <span class=\"string\">&#x27;p&#x27;</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>自定义元素的使用也分两种情况<br>一种是如果元素不继承其他内建 HTML 元素,只继承 HTMLElement，可以直接像普通标签一样使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">user-p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">user-p</span>&gt;</span></span><br><span class=\"line\">//或者这样</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;user-p&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果是继承了其他元素，比如像上面那个例子 HTMLParagraphElement </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">is</span>=<span class=\"string\">&#x27;user-p&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">//或者这样</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;p&#x27;</span>,&#123;<span class=\"attr\">is</span>:<span class=\"string\">&#x27;user-p&#x27;</span>&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"生命周期回调函数\"><a href=\"#生命周期回调函数\" class=\"headerlink\" title=\"生命周期回调函数\"></a>生命周期回调函数</h3><ul>\n<li>connectedCallback：首次被插入文档DOM时，被调用。</li>\n<li>disconnectedCallback：从文档DOM中删除时，被调用。</li>\n<li>adoptedCallback：被移动到新的文档时，被调用。</li>\n<li>attributeChangedCallback:增加、删除、修改自身属性时，被调用。</li>\n</ul>\n<p>如果需要在元素属性变化后，触发 attributeChangedCallback()回调函数，你必须监听这个属性。这可以通过定义 observedAttributes() get函数来实现，observedAttributes()函数体内包含一个 return 语句，返回一个数组，包含了需要监听的属性名称：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">get</span> <span class=\"title function_\">observedAttributes</span>() &#123;<span class=\"keyword\">return</span> [<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;style&#x27;</span>]; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Shadow-DOM\"><a href=\"#Shadow-DOM\" class=\"headerlink\" title=\"Shadow DOM\"></a>Shadow DOM</h2><p>Shadow DOM 可以将一个隐藏的、独立的 DOM 附加到一个元素上，可以将标记结构、样式和行为隐藏起来，并与页面上的其他代码相隔离，保证不同的部分不会混在一起，可使代码更加干净、整洁。</p>\n<ul>\n<li>Shadow host：一个常规 DOM 节点，Shadow DOM 会被附加到这个节点上。</li>\n<li>Shadow tree：Shadow DOM 内部的 DOM 树。</li>\n<li>Shadow boundary：Shadow DOM 结束的地方，也是常规 DOM 开始的地方。</li>\n<li>Shadow root: Shadow tree 的根节点。</li>\n</ul>\n<p>像&lt;video&gt;就是用 Shadow DOM 封装的</p>\n<p><img src=\"/images/posts/webcomponents/20200510202839.png\"></p>\n<h3 id=\"自定义Shadow-DOM\"><a href=\"#自定义Shadow-DOM\" class=\"headerlink\" title=\"自定义Shadow DOM\"></a>自定义Shadow DOM</h3><p>可以使用 Element.attachShadow() 方法来将一个 shadow root 附加到任何一个元素上,方法接受一个参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attachShadow 参数</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>:<span class=\"string\">&#x27;open&#x27;</span>|<span class=\"string\">&#x27;closed&#x27;</span>, </span><br><span class=\"line\">    <span class=\"comment\">//open 表示外部可以访问根节点,例如 Element.shadowRoot </span></span><br><span class=\"line\">    <span class=\"comment\">//closed 表示不允许外部访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">delegatesFocus</span>:<span class=\"literal\">true</span>|<span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\">//焦点委托</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单例子</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.demo</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">color</span>:red <span class=\"meta\">!important</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.test</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">font-size</span>:<span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;test&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;demo&#x27;</span>&gt;</span></span><br><span class=\"line\">        你的浏览器不支持 Shadow DOM </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">let</span> demo = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;demo&#x27;</span>).<span class=\"title function_\">attachShadow</span>(&#123; <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;open&#x27;</span> &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> style = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;style&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      style.<span class=\"property\">textContent</span> = <span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">      .demo &#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">          color: #38acfa;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">      :host&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">          border:5px  dashed #3699ff;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">      :host-context(.test)&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">          background:#000;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">      :host(#demo)&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">          height:60px;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">          margin: 20px;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">      &#125;`</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      demo.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;&lt;div class=&quot;demo&quot;&gt;自定义Shadow DOM&lt;/div&gt;&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      demo.<span class=\"title function_\">appendChild</span>(style)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>效果如下，可以看到外部样式是不会影响里面元素的，但是如果是样式是继承祖先元素的是会穿透进去的</p>\n<p>这三个都是用来选定 宿主元素 的</p>\n<ul>\n<li>:host 当前 ShadowDOM 宿主元素</li>\n<li>:host() 在宿主元素上查找，比如上面的 :host(#demo) 就是当宿主元素 id&#x3D;’demo’ 时候生效</li>\n<li>:host-context() 在当前 ShadowDOM 宿主元素的祖先节点中查找，比如 :host-context(.test) 可以一直往宿主元素祖先上找，符合就生效</li>\n</ul>\n<br>\n<style>\n    .demo{\n        color:red !important;\n    }\n    .test{\n        font-size:20px;\n    }\n</style>\n<div class='test'>\n    <div id='demo'>\n        你的浏览器不支持 Shadow DOM \n    </div>\n</div>  \n<script>\n      let demo = document.getElementById('demo').attachShadow({ mode: 'open' })\n      var style = document.createElement('style');\n      style.textContent = `\n      .demo {\n          color: #38acfa;\n      }\n      :host{\n          border:5px  dashed #3699ff;\n      }\n      :host-context(.test){\n          background:#000;\n      }\n      :host(#demo){\n          height:60px;\n          margin: 20px;\n      }`\n      demo.innerHTML = '<div class=\"demo\">自定义Shadow DOM</div>'\n      demo.appendChild(style)\n</script>\n\n\n<h2 id=\"HTML模板\"><a href=\"#HTML模板\" class=\"headerlink\" title=\"HTML模板\"></a>HTML模板</h2><p>template 主要作用就是避免重复去创建那些标签结构。比如当一个组件被重复使用时候，如果不用模板的话，会一遍又一遍的去创建组件类的标签结构，使用 template 这样会避免这样重复的创建标签结构。</p>\n<p>template 不会再 DOM 上显示，举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;my-template&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        HTML 模板</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用 js 去获取它</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> template = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;my-template&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(template.<span class=\"property\">content</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组合使用\"><a href=\"#组合使用\" class=\"headerlink\" title=\"组合使用\"></a>组合使用</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-div</span> <span class=\"attr\">image</span>=<span class=\"string\">&#x27;/images/logo/admin_template.png&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">&#x27;header&#x27;</span>&gt;</span>Web Components<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">&#x27;footer&#x27;</span>&gt;</span></span><br><span class=\"line\">        slot footer</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;my-template&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.card</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5px</span> <span class=\"number\">0</span> <span class=\"number\">#00000038</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: inline-block;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">ul</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">list-style</span>: disc;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding-left</span>: <span class=\"number\">1.5em</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">li</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">li</span>+<span class=\"selector-tag\">li</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#f1f1f1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">img</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>:<span class=\"number\">250px</span></span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.header</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#f1f1f1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.footer</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#f1f1f1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;card&#x27;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;header&#x27;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&#x27;header&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;footer&#x27;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&#x27;footer&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    customElements.<span class=\"title function_\">define</span>(<span class=\"string\">&#x27;my-div&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">HTMLElement</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">super</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> template = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;my-template&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">let</span> templateContent = template.<span class=\"property\">content</span>.<span class=\"title function_\">cloneNode</span>(<span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">const</span> shadowRoot = <span class=\"variable language_\">this</span>.<span class=\"title function_\">attachShadow</span>(&#123; <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;open&#x27;</span> &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                templateContent.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;img&#x27;</span>).<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;src&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;image&#x27;</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\">                shadowRoot.<span class=\"title function_\">appendChild</span>(templateContent);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<my-div image='/images/logo/web_conponents.png'>\n    <div slot='header'>Web Components</div>\n    <div slot='footer'>\n        slot footer\n    </div>\n</my-div>\n\n<template id=\"my-template\">\n    <style>\n        .card{\n            padding: 10px 20px;\n            box-shadow: 0 0 5px 0 #00000038;\n            border-radius: 5px;\n            display: inline-block;\n        }\n        ul {\n            list-style: disc;\n            padding-left: 1.5em;\n        }\n        li {\n            height: 30px;\n        }\n        li+li {\n            border-top: 1px solid #f1f1f1;\n        }\n        img{\n            width:250px\n        }\n        .header{\n            margin-bottom: 10px;\n            border-bottom: 1px solid #f1f1f1;\n        }\n        .footer{\n            margin-top: 10px;\n            border-top: 1px solid #f1f1f1;\n        }\n    </style>\n    <div class='card'>\n        <div class='header'>\n            <slot name='header'></slot>\n        </div>\n        <img>\n        <div class='footer'>\n            <slot name='footer'></slot>\n        </div>\n    </div>\n</template>\n\n<script>\n    customElements.define('my-div',\n        class extends HTMLElement {\n            constructor() {\n                super();\n                let template = document.getElementById('my-template');\n                let templateContent = template.content.cloneNode(true);\n\n                const shadowRoot = this.attachShadow({ mode: 'open' })\n\n                templateContent.querySelector('img').setAttribute('src', this.getAttribute('image'));\n                shadowRoot.appendChild(templateContent);\n            }\n        })\n</script>"},{"title":"瀑布流使用虚拟列表性能优化","comment":true,"date":"2022-11-14T04:05:46.000Z","description":null,"keywords":null,"_content":"\n瀑布流算是比较常见的布局了，一个般常见纵向瀑布流的交互，当我们滚动到底的时候加载下一页的数据追加到上去。因为一次加载的数据量不是很多，页面操作是也不会有太大的性能消耗。但是如果当你一直往下滚动加载，加载几十页的时候，就会开始感觉不那么流畅的，这是因为虽然每次操作的很少，但是页面的 DOM 越来越多，内存占用也会增大，而且发生重排重绘时候浏览器计算量耗时也会增大，就导致了慢慢不能那么流畅了。这个时候可以选择结合虚拟列表方式使用，虚拟列表本身就是用来解决超长列表时的处理方案。\n\n<!--more-->\n\n## 瀑布流\n\n瀑布流的实现方式有很多种，大体分为：\n- CSS： CSS 实现的有 multi-column、grid ，CSS 实现存在一定局限性，例如无法调整顺序，当元素高度差异较大时候不是很好处理各列间隔差等。\n- JavaScript：JavaScript 实现的有 JavaScript + flex、JavaScript + position，JavaScript 实现兼容性较好，可控制性高。\n\n因为我的瀑布流是可提前计算元素宽高，列数是动态的，所以采用了 JavaScript + position 来配合 虚拟列表 进行优化。\n\n\n### js + flex 实现\n\n如果你的瀑布流 列是固定，列宽不固定 的，使用 flex 是个很好选择，当你的容器宽度变话时候，每一列宽度会自适应，大致实现方式\n\n将你的数据分为对应列数\n\n``` js\nlet data1 = [], //第一列\n    data2 = [], //第二列\n    data3 = [], //第三列\n    i = 0;\n\nwhile (i < data.length) {\n    data1.push(data[i++]);\n    if (i < data.length) {\n        data2.push(data[i++]);\n    }\n    if (i < data.length) {\n        data3.push(data[i++]);\n    }\n}\n```\n\n然后将你的每列数据插入进去就可以了，设置 list 为 flex 容器，并设置主轴方向为 row\n\n``` html\n<div class=\"list\">\n    <!-- 第一列 -->\n    <div class=\"column\">\n        <div class=\"item\"></div>\n        <!-- more items-->\n    </div>\n    <!-- 第二列 -->\n    <div class=\"column\">\n        <div class=\"item\"></div>\n        <!-- more items-->\n    </div>\n    <!-- 第三列 -->\n    <div class=\"column\">\n        <div class=\"item\"></div>\n        <!-- more items-->\n    </div>\n</div>\n```\n\n### js + position 实现\n\n这种方式比较适合 列定宽，列数量不固定情况，而且最好能计算出每个元素的大小。\n\n大致 HTML 结构如下：\n\n``` html\n<ul class=\"list\">\n    <li class=\"list-item\"></li>\n    <!-- more items-->\n</ui>\n<style>\n    .list {\n        position: relative;\n    }\n\n    .list-item {\n        position: absolute;\n        top: 0;\n        left: 0;\n    }\n</style>\n```\nJavaScript 部分，首先需要获取 list 宽度，根据 list.width/列宽 计算出列的数量，然后根据列数量去分组数据和计算位置\n\n``` js\n// 以列宽为300 间隔为20 为例\n\nlet catchColumn = (Math.max(parseInt((dom.clientWidth + 20) / (300 + 20)), 1))\n\nconst toTwoDimensionalArray = (count) => {\n    let list = []\n    for (let index = 0; index < count; index++) {\n        list.push([])\n    }\n    return list;\n}\n\nconst minValIndex = (arr = []) => {\n    let val = Math.min(...arr);\n    return arr.findIndex(i => i === val)\n}\n\n// 缓存累计高度\nlet sumHeight = toTwoDimensionalArray(catchColumn)\n\ndata.forEach(item => {\n    // 获取累计高度最小那列\n    const minIndex = minValIndex(sumHeight)\n\n    let width = 0 // 这里宽高更具需求计算出来\n    let height = 0\n\n\titem._top = minIndex * (300 + 20) // 缓存位置信息，后面会用到\n    item.style = {\n        width: width + 'px',\n        height: height + 'px',\n        // 计算偏移位置\n        transform: `translate(${minIndex * (300 + 20)}px, ${sumHeight[minIndex]}px)`\n    }\n\n    sumHeight[minIndex] = sumHeight[minIndex] + height + 20 \n})\n```\n\n### 动态列数\n\n可以使用 [ResizeObserver](https://developer.mozilla.org/zh-CN/docs/Web/API/ResizeObserver)(现代浏览器兼容比较好了) 监听容器元素大小变化，当宽度变化时重新计算列数量，当列数量发生变化时重新计算每项的位置信息。\n\n``` js\nconst observer = debounce((e) => {\n    const column = updateVisibleContainerInfo(visibleContainer)\n    if (column !== catchColumn) {\n        catchColumn = column\n        // 重新计算\n        this.resetLayout()\n    }\n}, 300)\n\nconst resizeObserver = new ResizeObserver(e => observer(e));\n\n// 开始监听\nresizeObserver.observe(dom);\n```\n\n### 过渡动画\n\n当列数量发生变化时候，元素项的位置很多都会发生变化，如下图，第 4 项的位置从第 3 列变到了第 4 项，如果不做处理会显得比较僵硬。\n\n<p align=\"center\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 460 298\" width=\"460\" height=\"298\">\n\t<rect x=\"0\" y=\"0\" width=\"460\" height=\"298\" fill=\"#ffffff\">\n\t</rect>\n\t<g stroke-linecap=\"round\" transform=\"translate(10 113) rotate(0 220 87.5)\">\n\t\t<path d=\"M-0.49 0.17 C99.14 1.36, 198.27 0.42, 439.01 -0.6 M-0.08 -0.06 C124.83 -1.08, 249.03 -1.15, 439.88 -0.3 M441.52 -1.12 C441.14 56.74, 440.97 108.16, 440.42 174.59 M440.47 0.31 C441.08 41.11, 441.73 83.9, 439.17 175.32 M440.53 174.55 C306.2 173.35, 173.32 173.64, -0.03 175.37 M439.94 175.07 C325.72 174.97, 210.49 174.53, 0.34 174.72 M-1.31 173.92 C-1.32 128.03, -0.73 80.94, -0.75 0.21 M-0.02 174.92 C-0.93 132.04, -1.82 87, 0.93 0.03\" stroke=\"#000000\" stroke-width=\"2\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(19 10) rotate(0 46 58.5)\">\n\t\t<path d=\"M0.34 0.61 C36.77 1.67, 70.84 -1.52, 90.79 -0.34 M-0.11 0.63 C19.8 0.16, 39.54 -0.08, 91.41 0.15 M90.88 1.39 C93.57 34.66, 89.93 67.3, 91.59 115.77 M92.31 -0.64 C92.08 46.58, 93.12 92.3, 92.32 117.02 M91.09 115.47 C68.38 116.27, 45.77 117.43, 0.74 116.21 M92.14 117.51 C58.99 116, 24.94 117.57, -0.57 116.74 M-1.08 115.01 C0.47 84.99, 1.3 55.04, 0.21 -1.01 M-0.08 117.12 C-0.38 74.15, -1.73 33.8, 0.03 0.41\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(125 11.5) rotate(0 46 86.5)\">\n\t\t<path d=\"M0.61 0.84 C24.89 -1.19, 45.37 -1.36, 91.66 -1.68 M0.63 -0.07 C31.97 -0.1, 63.69 -0.48, 92.15 -0.14 M93.39 1.68 C94.53 48.35, 93.73 100.21, 90.77 174.96 M91.36 -0.63 C92.84 62.73, 91.99 124.94, 92.02 172.52 M90.47 172.58 C69.22 172.76, 48.83 173.32, -0.79 174.21 M92.51 173.17 C63.97 172.42, 38.41 172.56, -0.26 172.62 M-1.99 173.94 C-0.26 115.9, 0.39 55.47, -1.01 1.19 M0.12 173.73 C-0.74 104.14, 0.97 36.58, 0.41 0.42\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(230 14.5) rotate(0 46 46.5)\">\n\t\t<path d=\"M0.84 1.22 C22.02 -2.25, 44.91 -0.62, 90.32 0.95 M-0.07 0.01 C25.86 -0.81, 51.54 -0.43, 91.86 -0.09 M93.68 1.22 C89.52 35.39, 91.07 68.71, 93.96 94.2 M91.37 0.02 C92.71 31.48, 92.61 64.64, 91.52 92.34 M91.58 91.79 C59.74 92.25, 27.87 91.5, 1.21 92.9 M92.17 92.1 C64.74 94.15, 38.33 93.21, -0.38 93.4 M0.94 91.6 C2.28 70.46, 0.71 48.42, 1.19 1.89 M0.73 92.22 C-0.56 66.24, 0.1 38.04, 0.42 -0.53\" stroke=\"#364fc7\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(344 15.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M-1.03 -1.97 C29.22 -0.9, 59.17 0.39, 91.67 -0.23 M91.58 -0.47 C90.73 42.75, 91.63 84.72, 93.52 115.88 M90.04 117.42 C57.59 116.33, 25.96 118.76, 0.95 117.63 M0.84 115.34 C1.37 89.38, -0.22 60.36, 1.05 -0.91\" stroke=\"#c92a2a\" stroke-width=\"4.5\" fill=\"none\" stroke-dasharray=\"8 12\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(61.5 56) rotate(0 3.5 12.5)\">\n\t\t<text x=\"3.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t1\n\t\t</text>\n\t</g>\n\t<g transform=\"translate(163 85.5) rotate(0 8 12.5)\">\n\t\t<text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t2\n\t\t</text>\n\t</g>\n\t<g transform=\"translate(268 48.5) rotate(0 8 12.5)\">\n\t\t<text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t3\n\t\t</text>\n\t</g>\n\t<g transform=\"translate(382.5 61.5) rotate(0 7.5 12.5)\">\n\t\t<text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t4\n\t\t</text>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(232.5 129.75) rotate(0 46 58.5)\">\n\t\t<path d=\"M0.1 -0.36 C35.38 -0.89, 70.24 0.22, 93.8 0.98 M0.7 0.69 C34.69 -0.96, 68.87 -1.35, 91.53 0.38 M93.77 -1.89 C91.58 30.33, 93.21 60.5, 91.19 117.89 M91.77 0.37 C90.74 34.26, 90.78 69.6, 92.47 116.82 M91.36 118.13 C65.56 115.98, 43.28 118.35, -1.28 115.14 M91.17 117.69 C58.79 117.86, 25.56 117.87, -0.5 117.24 M1.32 116.16 C-0.3 78.71, 0.11 38.79, -0.99 -1.08 M0.19 116.09 C1.6 91.53, -0.11 65.64, 0.55 -0.81\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(271 175.75) rotate(0 7.5 12.5)\">\n\t\t<text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t4\n\t\t</text>\n\t</g>\n</svg>\n</p>\n\n好在我们使用了 transform（也是为什么不使用 top、left 原因，transform 动画性能更高） 进行位置偏移，可以直接使用 transition 过渡。\n\n``` css\n.list-item {\n    position: absolute;\n    top: 0;\n    left: 0;\n    transition: transform .5s ease-in-out;\n}\n```\n\n## 使用虚拟列表\n\n### 瀑布流存在的问题\n\n很多虚拟列表的都是使用的单列定高使用方式，但是瀑布流使用虚拟列表方式有点不同，瀑布流存在多列且时是错位的。所以常规 length*height 为列表总高度，根据 scrollTop/height 来确定下标方式就行不通了，这个时候高度需要根据瀑布流高度动态决定了，可显示元素也不能通过 starindex-endindex 去截取显示了。\n\n如下图：蓝色框的元素是不应该显示的，只有与可视区域存在交叉的元素才应该显示\n\n<p align=\"center\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 353 758.5\" width=\"353\" height=\"758.5\">\n\t<rect x=\"0\" y=\"0\" width=\"353\" height=\"758.5\" fill=\"#ffffff\">\n\t</rect>\n\t<g stroke-linecap=\"round\" transform=\"translate(10 117) rotate(0 166.5 250)\">\n\t\t<path d=\"M0.72 1 C85.82 -0.51, 171.42 0.26, 333.25 0 M0.35 -0.53 C86.39 -0.22, 172.88 0.54, 332.59 -0.65 M333.72 -0.59 C331.75 138.3, 331.35 276.01, 333.39 499.35 M333.05 0.37 C331.22 121.97, 331.11 243.44, 333.2 499.61 M332.83 500.47 C221.23 497.05, 106.02 496.84, -0.33 499.21 M333.04 500.64 C253.92 500.48, 175.76 501.12, 0.15 499.67 M-0.64 500.38 C-1.44 333.69, -1.78 166.77, -0.16 -0.42 M-0.32 500.39 C1.58 380.41, 1.74 260.88, -0.19 -0.11\" stroke=\"#000000\" stroke-width=\"2\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(22 10) rotate(0 46 58.49999999999999)\">\n\t\t<path d=\"M-1.06 -0.78 C31.6 -1.8, 68.39 -0.16, 90.86 0.72 M-0.27 -0.87 C31.57 -0.47, 62.36 -0.61, 91.06 0.06 M90.59 -0.72 C93.57 23.14, 92.92 48.07, 90.1 118.2 M92.59 0.64 C91.54 25.79, 91.84 48.77, 91.4 117.78 M91.63 117.89 C60.19 117.86, 32.15 118.89, 0.85 116.53 M92 116.75 C66.12 117.09, 41.53 116.61, 0.03 116.45 M-1.92 116.26 C0.71 74.42, -0.38 29.15, -1.19 0.01 M-0.27 116.88 C1.29 85.59, -0.09 54.8, 1 0.84\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(128 11.5) rotate(0 46 86.5)\">\n\t\t<path d=\"M0.85 1.5 C26.04 1.21, 56.87 -0.75, 90.53 -0.61 M0.28 -0.1 C20.66 -0.77, 43.28 0.39, 91.41 -0.74 M90.36 1.13 C94.56 36.23, 91.37 72.5, 90.09 173.74 M92.89 0.38 C92.22 62.29, 91.71 123.93, 91.61 172.56 M91.14 173.54 C61.97 173.1, 32.44 173.8, 1.55 172.93 M92.45 172.99 C57.7 172.47, 22.59 172.26, 0.83 172.24 M1.63 171.19 C-1.73 134.92, -0.06 94.82, 0.92 1.1 M-0.33 172.76 C-1 136.8, -0.94 102.31, 0.87 0.64\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(233 14.5) rotate(0 46 46.49999999999999)\">\n\t\t<path d=\"M1.5 -1.92 C34.3 0.56, 66.3 -1.85, 91.39 -1.4 M-0.1 -0.5 C35 0.7, 71.41 -0.85, 91.26 -0.87 M93.13 1.57 C90.61 31.6, 90.05 64.54, 92.74 94.22 M92.38 -0.15 C92.31 29.22, 91.53 59.37, 91.56 93.19 M92.54 92.29 C57.05 91.69, 21.9 94.16, -0.07 94.44 M91.99 92.93 C70.3 92.46, 48.32 94.24, -0.76 92.3 M-1.81 92.05 C1 61.66, 0.7 29.8, 1.1 -1.86 M-0.24 93.39 C-0.67 58.1, 0.62 23.18, 0.64 -0.54\" stroke=\"#364fc7\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(23 143.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M-0.16 1.91 C26.05 0.41, 48.97 1.49, 90.17 -1.4 M0.92 0.77 C26.78 -0.71, 53.96 0.27, 92.13 -0.34 M93.12 -0.54 C90.67 25.41, 89.85 54.4, 93.25 118.3 M92.52 1 C92.11 26.6, 92.41 53.9, 91.76 116.57 M92.4 116.38 C60.05 117.38, 32.44 118.87, 0.83 117.28 M91.77 116.5 C71.51 116.15, 52.53 115.85, -0.4 117.31 M-0.92 118.5 C0.74 89.1, 1.33 61.5, 1.99 0.49 M0.75 117.4 C0.41 87.58, 1.55 58.47, -0.01 -0.67\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(235 137.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M-0.69 -1.37 C32.19 0.55, 67.17 -0.66, 91.16 -1.7 M0.65 -0.73 C20.23 -0.89, 40.43 0.42, 91.79 0.1 M91.14 0.57 C92.73 38.01, 93.44 71.56, 90.28 116.5 M92.14 -0.86 C93.09 39.99, 92.35 80.06, 91.19 116.41 M92.62 115.77 C65.3 117.48, 37.88 118.13, 0.68 116.99 M92.24 116.5 C57.79 116.93, 25.79 118.32, -0.44 116.84 M-1.35 118.8 C-1.39 72.23, -0.63 30.25, -0.54 -1.07 M0.64 116.73 C0.24 87.22, 0.82 58.36, -0.39 -0.67\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(130 200.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M-0.81 0.62 C20.98 0.72, 45.28 -0.11, 93.5 0.68 M1 0.24 C27.03 -0.85, 54.07 0.63, 92.4 -0.44 M91.99 -1.35 C94.61 31.82, 91.23 65.8, 91.64 116.46 M91.05 0.64 C91.13 28.53, 90.81 57.97, 91.72 116.61 M92.58 116.45 C72.28 116.64, 49.65 115.97, -1.97 115.48 M91.14 117.5 C67.24 115.93, 40.92 116.91, -0.89 116.82 M-1.9 117.01 C-0.78 72.29, -0.77 27.7, -0.11 -0.07 M-0.48 117.72 C1.8 74.6, 1.55 32.84, -0.35 0.6\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(64.5 56) rotate(0 3.5 12.5)\">\n\t\t<text x=\"3.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t1\n\t\t</text>\n\t</g>\n\t<g transform=\"translate(166 85.5) rotate(0 8 12.5)\">\n\t\t<text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t2\n\t\t</text>\n\t</g>\n\t<g transform=\"translate(271 48.5) rotate(0 8 12.5)\">\n\t\t<text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t3\n\t\t</text>\n\t</g>\n\t<g transform=\"translate(273.5 183.5) rotate(0 7.5 12.5)\">\n\t\t<text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t4\n\t\t</text>\n\t</g>\n\t<g transform=\"translate(62 189.5) rotate(0 7 12.5)\">\n\t\t<text x=\"7\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t5\n\t\t</text>\n\t</g>\n\t<g transform=\"translate(168.5 246.5) rotate(0 7.5 12.5)\">\n\t\t<text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t6\n\t\t</text>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(22 283.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M-0.78 -0.59 C27.23 -0.65, 50.86 1.22, 91.41 0.37 M0.65 -0.88 C35.95 1.84, 70.95 1.2, 92.81 -0.47 M92.88 1.93 C93.54 24.45, 90.38 49.64, 92.62 117.53 M92.13 0.54 C93.6 38.02, 92.98 74.92, 92.32 116.73 M93.95 117.64 C73.79 117.41, 52.17 115.06, -0.16 117.48 M91.88 117.62 C58.53 116.44, 24.3 116.06, 0.44 117.84 M0.08 115.29 C2.68 92.32, 2.36 63.06, -0.71 1.62 M0.25 116.01 C-0.09 88.67, -1.08 57.96, -0.9 -0.7\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(59.5 329.5) rotate(0 8.5 12.5)\">\n\t\t<text x=\"8.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t8\n\t\t</text>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(130 341.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M1 -0.59 C32.65 2.4, 64.71 -1.19, 93.3 -1.76 M0.32 0.81 C33.12 -1.25, 67.48 -0.82, 92.44 0.96 M93.09 0.62 C92.64 42.41, 93.54 84.48, 92.26 118.08 M92.26 0.32 C92.53 43.1, 91.96 87.36, 92.98 117.32 M90.59 116.84 C58.51 118.16, 24.11 115.78, -0.24 118.24 M91.49 117.44 C57.61 117.08, 20.63 117.77, 0.04 116.14 M-1.46 116.29 C0.71 71.41, 0.36 28.31, 0.49 -1.98 M-0.73 116.1 C-1.66 74.26, -0.99 31.55, -0.82 0.7\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(169 387.5) rotate(0 7 12.5)\">\n\t\t<text x=\"7\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t9\n\t\t</text>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(239 402.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M-1.91 1.3 C27.56 1.23, 60.57 0.64, 92.63 1.61 M-0.49 0.44 C24.23 0.31, 46.63 -1.27, 92.54 0.31 M92.43 0.26 C93.31 39.73, 93.59 76.7, 92.52 117.64 M91.42 0.98 C91.3 32.62, 91.45 63.53, 91.3 116.92 M91.07 116.76 C63.44 118.68, 32.12 118.84, -1.02 117.88 M91.93 117.04 C55.82 116.98, 22.12 116.82, -0.73 116.65 M0.46 117.49 C-1.39 73.71, 2.24 27.13, -1.46 -1.8 M0.11 116.18 C0.66 90.47, 0.18 62.67, -0.63 -0.42\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(274.5 448.5) rotate(0 10.5 12.5)\">\n\t\t<text x=\"10.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t10\n\t\t</text>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(236 269.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M0.71 0.63 C21.11 -1.83, 37.16 -0.28, 91.01 0.88 M-0.99 0.54 C36.77 0.19, 73.11 0.64, 92.21 0.13 M92.27 0.52 C93.52 40.89, 91.15 81.19, 90.84 118.95 M91.68 -0.7 C92.73 39.09, 93.54 77.72, 91.54 116.88 M93.83 115.98 C59.56 118.55, 23.85 115.06, -0.13 117.08 M92.65 116.27 C71.92 118.53, 52.04 118.36, 0.23 117.25 M-0.67 115.54 C-2.57 92.09, -0.69 69.9, 0.22 -1.65 M-0.43 116.37 C-0.92 74.02, -1.25 30.48, 0 -0.28\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(275.5 315.5) rotate(0 6.5 12.5)\">\n\t\t<text x=\"6.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t7\n\t\t</text>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(132 481.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M-0.09 -0.12 C23.71 2.13, 48.58 -0.79, 90.97 -0.22 M0.86 -0.96 C20.51 0.59, 39.63 0.54, 92.21 0.07 M93.37 0.43 C90.65 34.55, 93.85 64.72, 91.87 116.49 M91.38 0.78 C91.26 30.42, 91.17 58.57, 91.8 117.59 M93.23 116.33 C63.71 114.95, 37.3 114.96, 0.33 116.58 M92.29 117.23 C55.88 116.15, 17.81 116.14, 0.34 117.36 M1.21 117.27 C0.07 78.92, 1.26 42.55, 0.64 0.41 M-0.61 116.09 C0.66 75.16, 0.77 33.51, 0.21 0.86\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(167 527.5) rotate(0 11 12.5)\">\n\t\t<text x=\"11\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t12\n\t\t</text>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(27 424.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M-1.07 -1.03 C24.24 -1.65, 47.55 0.29, 93.72 -1.92 M0.63 0.21 C36.37 -0.64, 73.15 -1.15, 92.68 0.21 M90.95 -0.13 C92.46 22.58, 92.47 48.66, 90.76 118.55 M91.28 -0.2 C93.5 29.99, 92.52 59.61, 92.62 116.67 M90.18 117.33 C64.28 119.8, 36.51 117.1, 0.57 117.46 M91.46 117.34 C58.76 116.52, 24 117.36, 0.61 117.13 M-1.43 117.64 C1.33 88.17, 0.63 58.67, -1.22 -1.82 M0.48 117.21 C0.68 76.25, -0.98 35.79, -0.77 0.36\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(66.5 470.5) rotate(0 6.5 12.5)\">\n\t\t<text x=\"6.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t11\n\t\t</text>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(29 558.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M1.81 0.03 C26.11 -2.26, 50.27 0.03, 92.69 -0.1 M-0.15 0.34 C30.65 -0.24, 59.96 -1.21, 92.97 -0.02 M91.82 1.12 C91.64 36.32, 91.7 75.52, 90.33 115.01 M92.13 0.61 C92.27 26.43, 92.61 54.51, 91.26 117.8 M91.96 117.34 C55.06 118.72, 18.7 116.9, 0.17 116.84 M92.42 116.04 C71.88 116.65, 53.23 117.9, 0.19 117.61 M0.06 115.34 C-0.02 78.36, 2.75 40.99, 0.23 -1.36 M-0.56 117.48 C-0.12 71.64, -0.45 24.91, 0.53 -0.14\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(241 544.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M-0.92 -1.7 C33.69 1.69, 65.55 2.11, 92.57 -1.76 M-0.52 -0.11 C33.19 1.17, 64.77 0.08, 92.94 0.81 M93.66 1.44 C92.34 35.96, 92.41 71.36, 92.77 118.36 M91.64 -0.63 C92.16 30.78, 92.24 61.78, 91.58 117.18 M93.34 116.25 C66.7 115.43, 39.37 118.67, 1.23 116.18 M91.34 116.92 C73.62 116.56, 52.63 116.57, -0.68 116.14 M1.81 118.41 C1.49 76.26, 1.67 32.91, 0.23 -1.96 M-0.6 117.22 C-0.29 92.07, -0.06 69.28, -0.44 0.17\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(276.5 590.5) rotate(0 10.5 12.5)\">\n\t\t<text x=\"10.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t13\n\t\t</text>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(134 631.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M-0.46 1.74 C25.38 -0.13, 46.51 2.25, 92.99 -1.32 M-0.72 -0.88 C26.22 -0.04, 54.35 0.01, 92.26 0.91 M92.72 -0.77 C92.54 41.38, 90.45 85.81, 92.21 115.79 M91.43 0.63 C90.62 37.79, 90.4 76, 92.03 116.12 M92 115.94 C67.24 118.96, 43.06 117.38, 0.31 116.54 M92.21 116.33 C72.71 117.24, 51.65 116.22, -0.83 117.88 M-0.29 118.94 C-1.61 68.79, 0.3 23.59, -1.8 -1.35 M0.13 116.21 C-0.88 81.19, -0.34 43.61, 0.78 -0.05\" stroke=\"#364fc7\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(170 677.5) rotate(0 10 12.5)\">\n\t\t<text x=\"10\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t15\n\t\t</text>\n\t</g>\n\t<g transform=\"translate(68 569) rotate(0 10 12.5)\">\n\t\t<text x=\"0\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#1864ab\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t14\n\t\t</text>\n\t</g>\n</svg>\n</p>\n\n\n### 可视元素判定\n\n先来看下面图，当元素完全不在可视区域时候就视为当前元素不需要显示，只有与可视区域存在交叉或被包含时候视为需要显示。\n\n<p align=\"center\">\n\t<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 543 688.2044864933938\" width=\"543\" height=\"688.2044864933938\">\n\t\t<rect x=\"0\" y=\"0\" width=\"543\" height=\"688.2044864933938\" fill=\"#ffffff\">\n\t\t</rect>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(131.5 160) rotate(0 166.5 165)\">\n\t\t\t<path d=\"M0.24 0.87 C123.88 0.38, 245 0.23, 333.59 -0.63 M0.33 -0.24 C91.33 1.23, 182.61 1.05, 333.53 0.44 M332.71 0.36 C334.02 131.26, 334.08 262.73, 333.44 329.43 M332.73 -0.55 C331.42 104.57, 332.58 208.14, 332.71 330.48 M333.66 330.41 C261.8 332.32, 189.92 331.22, 0.11 328.77 M332.9 330.29 C219.76 331.08, 108.19 330.97, 0.25 329.34 M1.29 329.08 C-0.24 224.07, -1.91 117.31, 0.65 1.27 M0.12 329.96 C1.08 251.48, 1.35 173.06, 0.12 -0.13\" stroke=\"#000000\" stroke-width=\"2\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(143.5 10) rotate(0 46 58.49999999999999)\">\n\t\t\t<path d=\"M1.28 1.63 C19.47 -0.96, 38.05 0.71, 91.07 -0.51 M91.28 -0.33 C93.59 38.93, 93.06 81.02, 93.28 118.93 M92.53 116.37 C59.12 116.25, 26.55 117.45, -0.84 117.32 M-1.62 115.19 C1.37 88.48, -0.83 55.93, 1.4 -1.7\" stroke=\"#364fc7\" stroke-width=\"1.5\" fill=\"none\" stroke-dasharray=\"8 9\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(249.5 11.5) rotate(0 46 86.5)\">\n\t\t\t<path d=\"M1.63 0.65 C27.02 -0.17, 56.51 -1.52, 91.49 0.79 M-0.17 0.95 C24.8 1.01, 51.19 0.97, 92.96 0.65 M91.37 0.67 C91.08 38.12, 92.27 72.12, 92.32 172.15 M91.09 0.37 C92.12 41.76, 90.9 85.68, 91.15 172.24 M92.63 173.64 C56.95 172.29, 21.57 171.46, 0.77 172.29 M91.23 172.91 C60.69 173.15, 27.94 172.42, 0.21 173.31 M0.65 173.07 C-3.41 105.29, -0.68 41.62, -1.26 -1.19 M-0.37 172.63 C-0.28 124.36, -0.11 76.74, 0.33 0.72\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(354.5 14.5) rotate(0 46 46.49999999999999)\">\n\t\t\t<path d=\"M0.65 -0.8 C29.62 0.12, 57.47 -1.26, 92.79 -0.52 M93.89 -0.8 C93.03 33.92, 92.95 66.67, 93.29 91.22 M92.67 92.45 C67.99 93.35, 39.86 93.03, -0.85 91.91 M0.73 94.59 C-0.71 67.9, 2.16 42.79, -1.52 1.67\" stroke=\"#364fc7\" stroke-width=\"1.5\" fill=\"none\" stroke-dasharray=\"8 9\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(144.5 143.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M-0.8 0.42 C34.36 -1.23, 66.48 0.49, 91.48 0.96 M-0.4 0.68 C25.07 -0.23, 49.54 -0.22, 91.11 -0.21 M91.45 1.64 C92.27 37.35, 91.95 75.53, 90.91 116.22 M92.8 -0.73 C90.52 26.31, 90.09 50.46, 92.84 117.49 M92.25 116.02 C61.78 115.48, 32 116.59, 1 116.7 M92.91 116.76 C60.88 115.95, 29.22 117.23, 0.85 117.94 M-1.78 115.91 C0.57 91.61, -1.64 61.3, -0.45 0.34 M0.01 116.4 C0.62 82.43, 0.77 48.94, 0.77 0.48\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(356.5 137.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M0.42 0.87 C34.17 -0.14, 70.98 -0.15, 92.96 -0.72 M0.68 0.78 C26.71 1.33, 52.79 -0.52, 91.79 0.26 M93.64 0.64 C91.55 31.72, 91.54 61.71, 91.22 115.38 M91.27 -0.42 C93.13 23.66, 91.67 49.86, 92.49 117.3 M91.02 117.16 C59.69 117.88, 30.3 118.12, -0.3 117.85 M91.76 117.37 C70.56 118.05, 51.36 118.69, 0.94 116.33 M-1.09 117.95 C1.82 76.82, -1.23 38.71, 0.34 -0.12 M-0.6 117.18 C0.25 86.62, 1.15 56.33, 0.48 0.64\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(251.5 200.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M0.87 -0.93 C30.07 0.6, 60.63 0.77, 91.28 -0.33 M0.78 0.64 C37.27 0.02, 71.72 -0.84, 92.26 -0.32 M92.64 -0.84 C92 38.14, 90.59 77.2, 90.38 115.19 M91.58 0.7 C92.08 38.63, 93.77 79.26, 92.3 117.31 M92.16 115.18 C62.23 115.84, 31.93 116.24, 0.85 115.45 M92.37 116.03 C65.4 117.09, 39.22 117.73, -0.67 117.33 M0.95 118.86 C-0.22 80.31, 0.59 46.34, -0.12 -0.75 M0.18 116.82 C0.32 86.92, 0.76 55.89, 0.64 -0.76\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g transform=\"translate(186 56) rotate(0 3.5 12.5)\">\n\t\t\t<text x=\"3.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t1\n\t\t\t</text>\n\t\t</g>\n\t\t<g transform=\"translate(287.5 85.5) rotate(0 8 12.5)\">\n\t\t\t<text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t2\n\t\t\t</text>\n\t\t</g>\n\t\t<g transform=\"translate(392.5 48.5) rotate(0 8 12.5)\">\n\t\t\t<text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t3\n\t\t\t</text>\n\t\t</g>\n\t\t<g transform=\"translate(395 183.5) rotate(0 7.5 12.5)\">\n\t\t\t<text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t4\n\t\t\t</text>\n\t\t</g>\n\t\t<g transform=\"translate(183.5 189.5) rotate(0 7 12.5)\">\n\t\t\t<text x=\"7\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t5\n\t\t\t</text>\n\t\t</g>\n\t\t<g transform=\"translate(290 246.5) rotate(0 7.5 12.5)\">\n\t\t\t<text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t6\n\t\t\t</text>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(143.5 283.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M-0.33 1.89 C24.4 1.69, 51.96 1.61, 93.93 1.29 M-0.32 0.33 C19.12 0.58, 39.12 -0.66, 92.16 -0.43 M90.19 0.73 C93.13 27.27, 90.69 58.87, 90.3 115.48 M92.31 0.32 C92.69 44.4, 92.65 88.87, 92.38 116.65 M90.45 116.83 C61.6 116.92, 28.32 115.45, 0.42 117.61 M92.33 117.03 C55.68 115.84, 21.62 117.31, -0.63 116.41 M-0.75 116.26 C-0.18 83.32, 0.16 51.66, 0.67 1.44 M-0.76 117.71 C-0.41 72.95, 0.1 29.7, -0.27 -0.63\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g transform=\"translate(181 329.5) rotate(0 8.5 12.5)\">\n\t\t\t<text x=\"8.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t8\n\t\t\t</text>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(251.5 341.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M-0.8 1.36 C25.84 0.41, 50.5 0.42, 90.22 -0.42 M-0.28 0.82 C30.35 -0.73, 60.22 -0.73, 91.46 -0.39 M93.59 -1.46 C90.09 27.01, 89.24 49.7, 93.67 117.97 M92.12 -0.49 C92.45 37.73, 92.75 76.93, 92.5 116.85 M93.81 116.53 C61.25 114.99, 29.43 117.53, 1.7 118.89 M91.11 116.45 C71.04 117.96, 48.51 116.44, -0.22 117.17 M0.03 115.8 C0.8 82.24, 1.11 49.66, 1.54 0.96 M0.15 117.07 C1.55 75.31, 0.62 31.12, -0.92 0.03\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g transform=\"translate(290.5 387.5) rotate(0 7 12.5)\">\n\t\t\t<text x=\"7\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t9\n\t\t\t</text>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(360.5 402.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M1.56 1.28 C38.23 0.67, 70.83 -1.05, 92.53 -0.63 M0.32 -0.42 C30.82 -1.18, 60.78 -1.15, 91.19 -0.91 M91.15 1.4 C91.23 37.87, 94.61 79.74, 92.61 117.63 M92.08 -0.91 C92.53 38.48, 92.65 77.51, 92.42 116.23 M92.75 115.07 C65.61 117.4, 40.07 118.67, -1.34 117.65 M92.48 117.93 C63.46 115.9, 35.94 116.67, -0.06 116.63 M0.37 116.63 C0.65 87.65, 1.53 56.37, 1.29 -1.53 M0.66 117.94 C-0.45 72.99, -1.1 30.27, 0.48 0.92\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g transform=\"translate(396 448.5) rotate(0 10.5 12.5)\">\n\t\t\t<text x=\"10.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t10\n\t\t\t</text>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(357.5 269.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M1.93 1.29 C32.09 -1.01, 68.27 -1.22, 92.67 -0.55 M0.16 -0.43 C34.6 -0.01, 69.47 -0.52, 92.37 0.8 M90.3 -1.52 C93.18 27.52, 92.11 53.73, 92.64 117.25 M92.38 -0.35 C92.6 29.19, 92.52 57.9, 91.91 117.91 M92.42 117.61 C68.27 118, 39.8 116.76, 0.07 115.22 M91.37 116.41 C69.19 118.03, 46.77 117.48, -0.37 117.01 M0.67 118.44 C1.33 89.86, 1.07 59.27, 1.42 0.3 M-0.27 116.37 C-1.69 81.11, -0.29 46.1, 0.96 0.17\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g transform=\"translate(397 315.5) rotate(0 6.5 12.5)\">\n\t\t\t<text x=\"6.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t7\n\t\t\t</text>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(253.5 481.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M-1.78 -0.42 C34.03 -1.23, 67.67 -1.15, 93.64 0.64 M-0.54 -0.39 C22.93 -0.51, 47.85 1.19, 91.27 -0.42 M93.67 0.97 C91.61 43.94, 91.64 86.86, 91.02 117.16 M92.5 -0.15 C92.87 23.7, 92.36 49.86, 91.76 117.37 M93.7 118.89 C71.96 117.94, 54.67 115.5, -1.09 117.95 M91.78 117.17 C55.77 116.08, 19.3 116.47, -0.6 117.18 M1.54 117.96 C0.89 82.51, 1.02 51.38, 0.14 1.32 M-0.92 117.03 C0.8 71.86, 1.28 25.05, 0.07 0.74\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g transform=\"translate(288.5 527.5) rotate(0 11 12.5)\">\n\t\t\t<text x=\"11\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t12\n\t\t\t</text>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(148.5 424.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M0.53 -0.63 C34.21 -0.36, 68.73 0.84, 91.16 0.32 M-0.81 -0.91 C24.04 1.16, 46.63 -0.06, 92.7 -0.85 M92.61 0.63 C93.62 26.46, 91.99 52.58, 90.18 117.77 M92.42 -0.77 C92.5 31.87, 92.35 62.3, 91.03 117.21 M90.66 117.65 C61.65 116.09, 30.07 118.82, 1.86 115.74 M91.94 116.63 C69.5 117.17, 47.14 117.34, -0.18 117.33 M1.29 115.47 C0.51 73.76, -0.76 31.24, 1.87 -0.55 M0.48 117.92 C2.04 89.45, 1.14 62.3, -0.87 -0.81\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g transform=\"translate(188 470.5) rotate(0 6.5 12.5)\">\n\t\t\t<text x=\"6.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t11\n\t\t\t</text>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(150.5 558.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M0.67 -0.55 C27.29 0.93, 50.46 0.61, 91.15 -1.09 M92.73 1.59 C89.59 29.67, 92.45 59.33, 90.48 118.67 M92.64 117.25 C58.94 117.45, 26.03 118.06, -0.71 118 M-0.17 118.81 C-0.97 84.42, -2.43 50.77, 0.61 1.7\" stroke=\"#364fc7\" stroke-width=\"1.5\" fill=\"none\" stroke-dasharray=\"8 9\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(362.5 544.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M1.64 0.64 C23.85 0.58, 48.53 -0.83, 91.22 -1.62 M90.54 -0.85 C93.83 22.81, 90.91 50.69, 92.97 117.61 M91.02 117.16 C59.69 117.88, 30.3 118.12, -0.3 117.85 M-0.47 117.75 C-1.83 91.39, 0.71 66.63, 1.89 -1.34\" stroke=\"#364fc7\" stroke-width=\"1.5\" fill=\"none\" stroke-dasharray=\"8 9\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g transform=\"translate(398 590.5) rotate(0 10.5 12.5)\">\n\t\t\t<text x=\"10.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t13\n\t\t\t</text>\n\t\t</g>\n\t\t<g transform=\"translate(184.5 603) rotate(0 10 12.5)\">\n\t\t\t<text x=\"0\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#1864ab\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t14\n\t\t\t</text>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\">\n\t\t\t<g transform=\"translate(487.1804903262407 12.750000000000014) rotate(0 3.6758362127011424 72.03529622842932)\">\n\t\t\t\t<path d=\"M1.35 0.68 C3.65 11.83, 13.85 44.93, 12.72 68.64 C11.58 92.36, -3.16 130.51, -5.45 142.96 M-1.36 -1.42 C0.73 10.1, 10.6 48.01, 10.89 72.49 C11.18 96.98, 3.48 133.32, 0.38 145.49\" stroke=\"#e67700\" stroke-width=\"1\" fill=\"none\">\n\t\t\t\t</path>\n\t\t\t</g>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\">\n\t\t\t<g transform=\"translate(117.53441886727751 157.75) rotate(0 -10.223491209581084 166.2962683300674)\">\n\t\t\t\t<path d=\"M0.05 2.79 C-3.09 27.9, -20.26 97.29, -20.73 151.57 C-21.2 205.85, -5.76 298.74, -2.79 328.47 M-3.37 1.84 C-6.76 26.14, -24.26 93.14, -23.23 147.96 C-22.19 202.78, -0.45 299.99, 2.82 330.75\" stroke=\"#2b8a3e\" stroke-width=\"1\" fill=\"none\">\n\t\t\t\t</path>\n\t\t\t</g>\n\t\t</g>\n\t\t<g transform=\"translate(511 10.75) rotate(0 11 70)\">\n\t\t\t<text x=\"0\" y=\"21\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#e67700\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t已\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"49\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#e67700\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t滚\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"77\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#e67700\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t动\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"105\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#e67700\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t高\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"133\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#e67700\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t度\n\t\t\t</text>\n\t\t</g>\n\t\t<g transform=\"translate(68 242.75) rotate(0 10 65)\">\n\t\t\t<text x=\"0\" y=\"19\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"17.647058823529395px\" fill=\"#2b8a3e\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t可\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"45\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"17.647058823529395px\" fill=\"#2b8a3e\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t视\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"71\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"17.647058823529395px\" fill=\"#2b8a3e\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t区\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"97\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"17.647058823529395px\" fill=\"#2b8a3e\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t高\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"123\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"17.647058823529395px\" fill=\"#2b8a3e\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t度\n\t\t\t</text>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\">\n\t\t\t<g transform=\"translate(126 10.75) rotate(0 -41.557524843499436 334.64067246239637)\">\n\t\t\t\t<path d=\"M-2.22 2.78 C-15.51 51.66, -82.99 184.74, -82.27 295.52 C-81.55 406.3, -11.85 606.05, 2.08 667.45 M1.78 1.83 C-11.78 49.64, -85.13 180.83, -85.2 291.06 C-85.26 401.3, -13.23 600.77, 1.4 663.26\" stroke=\"#5f3dc4\" stroke-width=\"1\" fill=\"none\">\n\t\t\t\t</path>\n\t\t\t</g>\n\t\t</g>\n\t\t<g transform=\"translate(10 218.75) rotate(0 11 84)\">\n\t\t\t<text x=\"0\" y=\"21\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t瀑\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"49\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t布\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"77\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t流\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"105\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t总\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"133\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t高\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"161\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t度\n\t\t\t</text>\n\t\t</g>\n\t</svg>\n</p>\n\n因为上面瀑布流的实现采用的是 position 定位的，所以我们完全能知道所有元素距离顶部的距离，很容易计算出与可视区域交叉位置。\n\n**元素偏移位置 < 滚动高度+可视区域高度  && 元素偏移位置 + 元素高度 > 滚动高度**\n\n如果只渲染可视区域范围，滚动时候会存在白屏再出现，可视适当的扩大渲染区域，例如把上一屏和下一屏都算进来，进行预先渲染。\n\n``` js\nconst top = scrollTop - clientHeight\nconst bottom = scrollTop + clientHeight * 2\nconst visibleList = data.filter(item => item._top + item.height > top && item._top < bottom)\n```\n\n然后通过监听滚动事件，根据滚动位置去处理筛选数。这里会存在一个隐藏性能问题，当滚动加载数据比较多的时候，滚动事件触发也是比较快的，每一次都进行一次遍历，也是比较消耗性能的。可以适当控制一下事件触发频率，当然这也只是治标不治本，归根倒是查询显示元素方法问题。\n\n**标记下标**\n应为列表数据的 _top 值是从小到大正序的，所以我们可以标记在可视区元素的下标，当发生滚动的时候，我们直接从标记下标开始查找，根据滚动分几种情况来判断。\n1> 如果滚动后，标记下标元素还在可视范围内，可以直接从标记下标二分查找，往上往下找直到不符合条件就停止。\n2>  如果滚动后，标记下标元素不在可视范围内，根据滚动方向往上或者往下去查找。这个时候存在两种情况，一种是滚动幅度比较小，直接根据当前下标往上或者往下找。当用户拖动滚动条滚动幅度特别大的时候，可以将下标往上或者往下偏移，偏移量根据 **滚动高度/预估平均高度*列数** 去估算一个，然后在根据这个预估下标进行查找。找到后然后缓存一个新的下标。\n\n### 抖动问题\n\n我们 absolute 定位会撑开容器高度，但是滚动时候还是会存在抖动问题，我们可以自定义一个元素高度去撑开，这个元素高度也就是我们之前计算的每一列累计高度 sumHeight 中最大的那个了。\n\n### 过渡动画问题\n\n当列宽发生变化时，元素位置发生了变化，在可视区域的元素也发生了变化，有些元素可能之前并没有渲染，所以使用上面 CSS 会存在新出现元素不会产生过渡动画。好在我们能够很清楚的知道元素原位置信息和新的位置信息，我们可以利用 **FLIP** 来处理这动画，很容易控制元素过渡变化，如果有些元素之前不存在，就没有原位置信息，我们可以在可视范围内给他随机生成一个位置进行过渡，保证每一个元素都有个过渡效果避免僵硬。\n\n## 总结\n\n上面情况仅仅是针对动态列数量，又能计算出高度情况下优化，可能业务中也是可能存在每项高度是动态的，这个时候可以采用预估元素高度在渲染后缓存大小位置等信息，或者离屏渲染等方案解决做出进一步的优化处理。","source":"_posts/waterfalls_and_visiblelist.md","raw":"---\ntitle: 瀑布流使用虚拟列表性能优化\ncomment: true\ndate: 2022-11-14 12:05:46\ntags: [JavaScript]\ndescription:\ncategories: 记录类\nkeywords:\n---\n\n瀑布流算是比较常见的布局了，一个般常见纵向瀑布流的交互，当我们滚动到底的时候加载下一页的数据追加到上去。因为一次加载的数据量不是很多，页面操作是也不会有太大的性能消耗。但是如果当你一直往下滚动加载，加载几十页的时候，就会开始感觉不那么流畅的，这是因为虽然每次操作的很少，但是页面的 DOM 越来越多，内存占用也会增大，而且发生重排重绘时候浏览器计算量耗时也会增大，就导致了慢慢不能那么流畅了。这个时候可以选择结合虚拟列表方式使用，虚拟列表本身就是用来解决超长列表时的处理方案。\n\n<!--more-->\n\n## 瀑布流\n\n瀑布流的实现方式有很多种，大体分为：\n- CSS： CSS 实现的有 multi-column、grid ，CSS 实现存在一定局限性，例如无法调整顺序，当元素高度差异较大时候不是很好处理各列间隔差等。\n- JavaScript：JavaScript 实现的有 JavaScript + flex、JavaScript + position，JavaScript 实现兼容性较好，可控制性高。\n\n因为我的瀑布流是可提前计算元素宽高，列数是动态的，所以采用了 JavaScript + position 来配合 虚拟列表 进行优化。\n\n\n### js + flex 实现\n\n如果你的瀑布流 列是固定，列宽不固定 的，使用 flex 是个很好选择，当你的容器宽度变话时候，每一列宽度会自适应，大致实现方式\n\n将你的数据分为对应列数\n\n``` js\nlet data1 = [], //第一列\n    data2 = [], //第二列\n    data3 = [], //第三列\n    i = 0;\n\nwhile (i < data.length) {\n    data1.push(data[i++]);\n    if (i < data.length) {\n        data2.push(data[i++]);\n    }\n    if (i < data.length) {\n        data3.push(data[i++]);\n    }\n}\n```\n\n然后将你的每列数据插入进去就可以了，设置 list 为 flex 容器，并设置主轴方向为 row\n\n``` html\n<div class=\"list\">\n    <!-- 第一列 -->\n    <div class=\"column\">\n        <div class=\"item\"></div>\n        <!-- more items-->\n    </div>\n    <!-- 第二列 -->\n    <div class=\"column\">\n        <div class=\"item\"></div>\n        <!-- more items-->\n    </div>\n    <!-- 第三列 -->\n    <div class=\"column\">\n        <div class=\"item\"></div>\n        <!-- more items-->\n    </div>\n</div>\n```\n\n### js + position 实现\n\n这种方式比较适合 列定宽，列数量不固定情况，而且最好能计算出每个元素的大小。\n\n大致 HTML 结构如下：\n\n``` html\n<ul class=\"list\">\n    <li class=\"list-item\"></li>\n    <!-- more items-->\n</ui>\n<style>\n    .list {\n        position: relative;\n    }\n\n    .list-item {\n        position: absolute;\n        top: 0;\n        left: 0;\n    }\n</style>\n```\nJavaScript 部分，首先需要获取 list 宽度，根据 list.width/列宽 计算出列的数量，然后根据列数量去分组数据和计算位置\n\n``` js\n// 以列宽为300 间隔为20 为例\n\nlet catchColumn = (Math.max(parseInt((dom.clientWidth + 20) / (300 + 20)), 1))\n\nconst toTwoDimensionalArray = (count) => {\n    let list = []\n    for (let index = 0; index < count; index++) {\n        list.push([])\n    }\n    return list;\n}\n\nconst minValIndex = (arr = []) => {\n    let val = Math.min(...arr);\n    return arr.findIndex(i => i === val)\n}\n\n// 缓存累计高度\nlet sumHeight = toTwoDimensionalArray(catchColumn)\n\ndata.forEach(item => {\n    // 获取累计高度最小那列\n    const minIndex = minValIndex(sumHeight)\n\n    let width = 0 // 这里宽高更具需求计算出来\n    let height = 0\n\n\titem._top = minIndex * (300 + 20) // 缓存位置信息，后面会用到\n    item.style = {\n        width: width + 'px',\n        height: height + 'px',\n        // 计算偏移位置\n        transform: `translate(${minIndex * (300 + 20)}px, ${sumHeight[minIndex]}px)`\n    }\n\n    sumHeight[minIndex] = sumHeight[minIndex] + height + 20 \n})\n```\n\n### 动态列数\n\n可以使用 [ResizeObserver](https://developer.mozilla.org/zh-CN/docs/Web/API/ResizeObserver)(现代浏览器兼容比较好了) 监听容器元素大小变化，当宽度变化时重新计算列数量，当列数量发生变化时重新计算每项的位置信息。\n\n``` js\nconst observer = debounce((e) => {\n    const column = updateVisibleContainerInfo(visibleContainer)\n    if (column !== catchColumn) {\n        catchColumn = column\n        // 重新计算\n        this.resetLayout()\n    }\n}, 300)\n\nconst resizeObserver = new ResizeObserver(e => observer(e));\n\n// 开始监听\nresizeObserver.observe(dom);\n```\n\n### 过渡动画\n\n当列数量发生变化时候，元素项的位置很多都会发生变化，如下图，第 4 项的位置从第 3 列变到了第 4 项，如果不做处理会显得比较僵硬。\n\n<p align=\"center\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 460 298\" width=\"460\" height=\"298\">\n\t<rect x=\"0\" y=\"0\" width=\"460\" height=\"298\" fill=\"#ffffff\">\n\t</rect>\n\t<g stroke-linecap=\"round\" transform=\"translate(10 113) rotate(0 220 87.5)\">\n\t\t<path d=\"M-0.49 0.17 C99.14 1.36, 198.27 0.42, 439.01 -0.6 M-0.08 -0.06 C124.83 -1.08, 249.03 -1.15, 439.88 -0.3 M441.52 -1.12 C441.14 56.74, 440.97 108.16, 440.42 174.59 M440.47 0.31 C441.08 41.11, 441.73 83.9, 439.17 175.32 M440.53 174.55 C306.2 173.35, 173.32 173.64, -0.03 175.37 M439.94 175.07 C325.72 174.97, 210.49 174.53, 0.34 174.72 M-1.31 173.92 C-1.32 128.03, -0.73 80.94, -0.75 0.21 M-0.02 174.92 C-0.93 132.04, -1.82 87, 0.93 0.03\" stroke=\"#000000\" stroke-width=\"2\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(19 10) rotate(0 46 58.5)\">\n\t\t<path d=\"M0.34 0.61 C36.77 1.67, 70.84 -1.52, 90.79 -0.34 M-0.11 0.63 C19.8 0.16, 39.54 -0.08, 91.41 0.15 M90.88 1.39 C93.57 34.66, 89.93 67.3, 91.59 115.77 M92.31 -0.64 C92.08 46.58, 93.12 92.3, 92.32 117.02 M91.09 115.47 C68.38 116.27, 45.77 117.43, 0.74 116.21 M92.14 117.51 C58.99 116, 24.94 117.57, -0.57 116.74 M-1.08 115.01 C0.47 84.99, 1.3 55.04, 0.21 -1.01 M-0.08 117.12 C-0.38 74.15, -1.73 33.8, 0.03 0.41\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(125 11.5) rotate(0 46 86.5)\">\n\t\t<path d=\"M0.61 0.84 C24.89 -1.19, 45.37 -1.36, 91.66 -1.68 M0.63 -0.07 C31.97 -0.1, 63.69 -0.48, 92.15 -0.14 M93.39 1.68 C94.53 48.35, 93.73 100.21, 90.77 174.96 M91.36 -0.63 C92.84 62.73, 91.99 124.94, 92.02 172.52 M90.47 172.58 C69.22 172.76, 48.83 173.32, -0.79 174.21 M92.51 173.17 C63.97 172.42, 38.41 172.56, -0.26 172.62 M-1.99 173.94 C-0.26 115.9, 0.39 55.47, -1.01 1.19 M0.12 173.73 C-0.74 104.14, 0.97 36.58, 0.41 0.42\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(230 14.5) rotate(0 46 46.5)\">\n\t\t<path d=\"M0.84 1.22 C22.02 -2.25, 44.91 -0.62, 90.32 0.95 M-0.07 0.01 C25.86 -0.81, 51.54 -0.43, 91.86 -0.09 M93.68 1.22 C89.52 35.39, 91.07 68.71, 93.96 94.2 M91.37 0.02 C92.71 31.48, 92.61 64.64, 91.52 92.34 M91.58 91.79 C59.74 92.25, 27.87 91.5, 1.21 92.9 M92.17 92.1 C64.74 94.15, 38.33 93.21, -0.38 93.4 M0.94 91.6 C2.28 70.46, 0.71 48.42, 1.19 1.89 M0.73 92.22 C-0.56 66.24, 0.1 38.04, 0.42 -0.53\" stroke=\"#364fc7\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(344 15.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M-1.03 -1.97 C29.22 -0.9, 59.17 0.39, 91.67 -0.23 M91.58 -0.47 C90.73 42.75, 91.63 84.72, 93.52 115.88 M90.04 117.42 C57.59 116.33, 25.96 118.76, 0.95 117.63 M0.84 115.34 C1.37 89.38, -0.22 60.36, 1.05 -0.91\" stroke=\"#c92a2a\" stroke-width=\"4.5\" fill=\"none\" stroke-dasharray=\"8 12\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(61.5 56) rotate(0 3.5 12.5)\">\n\t\t<text x=\"3.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t1\n\t\t</text>\n\t</g>\n\t<g transform=\"translate(163 85.5) rotate(0 8 12.5)\">\n\t\t<text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t2\n\t\t</text>\n\t</g>\n\t<g transform=\"translate(268 48.5) rotate(0 8 12.5)\">\n\t\t<text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t3\n\t\t</text>\n\t</g>\n\t<g transform=\"translate(382.5 61.5) rotate(0 7.5 12.5)\">\n\t\t<text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t4\n\t\t</text>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(232.5 129.75) rotate(0 46 58.5)\">\n\t\t<path d=\"M0.1 -0.36 C35.38 -0.89, 70.24 0.22, 93.8 0.98 M0.7 0.69 C34.69 -0.96, 68.87 -1.35, 91.53 0.38 M93.77 -1.89 C91.58 30.33, 93.21 60.5, 91.19 117.89 M91.77 0.37 C90.74 34.26, 90.78 69.6, 92.47 116.82 M91.36 118.13 C65.56 115.98, 43.28 118.35, -1.28 115.14 M91.17 117.69 C58.79 117.86, 25.56 117.87, -0.5 117.24 M1.32 116.16 C-0.3 78.71, 0.11 38.79, -0.99 -1.08 M0.19 116.09 C1.6 91.53, -0.11 65.64, 0.55 -0.81\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(271 175.75) rotate(0 7.5 12.5)\">\n\t\t<text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t4\n\t\t</text>\n\t</g>\n</svg>\n</p>\n\n好在我们使用了 transform（也是为什么不使用 top、left 原因，transform 动画性能更高） 进行位置偏移，可以直接使用 transition 过渡。\n\n``` css\n.list-item {\n    position: absolute;\n    top: 0;\n    left: 0;\n    transition: transform .5s ease-in-out;\n}\n```\n\n## 使用虚拟列表\n\n### 瀑布流存在的问题\n\n很多虚拟列表的都是使用的单列定高使用方式，但是瀑布流使用虚拟列表方式有点不同，瀑布流存在多列且时是错位的。所以常规 length*height 为列表总高度，根据 scrollTop/height 来确定下标方式就行不通了，这个时候高度需要根据瀑布流高度动态决定了，可显示元素也不能通过 starindex-endindex 去截取显示了。\n\n如下图：蓝色框的元素是不应该显示的，只有与可视区域存在交叉的元素才应该显示\n\n<p align=\"center\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 353 758.5\" width=\"353\" height=\"758.5\">\n\t<rect x=\"0\" y=\"0\" width=\"353\" height=\"758.5\" fill=\"#ffffff\">\n\t</rect>\n\t<g stroke-linecap=\"round\" transform=\"translate(10 117) rotate(0 166.5 250)\">\n\t\t<path d=\"M0.72 1 C85.82 -0.51, 171.42 0.26, 333.25 0 M0.35 -0.53 C86.39 -0.22, 172.88 0.54, 332.59 -0.65 M333.72 -0.59 C331.75 138.3, 331.35 276.01, 333.39 499.35 M333.05 0.37 C331.22 121.97, 331.11 243.44, 333.2 499.61 M332.83 500.47 C221.23 497.05, 106.02 496.84, -0.33 499.21 M333.04 500.64 C253.92 500.48, 175.76 501.12, 0.15 499.67 M-0.64 500.38 C-1.44 333.69, -1.78 166.77, -0.16 -0.42 M-0.32 500.39 C1.58 380.41, 1.74 260.88, -0.19 -0.11\" stroke=\"#000000\" stroke-width=\"2\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(22 10) rotate(0 46 58.49999999999999)\">\n\t\t<path d=\"M-1.06 -0.78 C31.6 -1.8, 68.39 -0.16, 90.86 0.72 M-0.27 -0.87 C31.57 -0.47, 62.36 -0.61, 91.06 0.06 M90.59 -0.72 C93.57 23.14, 92.92 48.07, 90.1 118.2 M92.59 0.64 C91.54 25.79, 91.84 48.77, 91.4 117.78 M91.63 117.89 C60.19 117.86, 32.15 118.89, 0.85 116.53 M92 116.75 C66.12 117.09, 41.53 116.61, 0.03 116.45 M-1.92 116.26 C0.71 74.42, -0.38 29.15, -1.19 0.01 M-0.27 116.88 C1.29 85.59, -0.09 54.8, 1 0.84\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(128 11.5) rotate(0 46 86.5)\">\n\t\t<path d=\"M0.85 1.5 C26.04 1.21, 56.87 -0.75, 90.53 -0.61 M0.28 -0.1 C20.66 -0.77, 43.28 0.39, 91.41 -0.74 M90.36 1.13 C94.56 36.23, 91.37 72.5, 90.09 173.74 M92.89 0.38 C92.22 62.29, 91.71 123.93, 91.61 172.56 M91.14 173.54 C61.97 173.1, 32.44 173.8, 1.55 172.93 M92.45 172.99 C57.7 172.47, 22.59 172.26, 0.83 172.24 M1.63 171.19 C-1.73 134.92, -0.06 94.82, 0.92 1.1 M-0.33 172.76 C-1 136.8, -0.94 102.31, 0.87 0.64\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(233 14.5) rotate(0 46 46.49999999999999)\">\n\t\t<path d=\"M1.5 -1.92 C34.3 0.56, 66.3 -1.85, 91.39 -1.4 M-0.1 -0.5 C35 0.7, 71.41 -0.85, 91.26 -0.87 M93.13 1.57 C90.61 31.6, 90.05 64.54, 92.74 94.22 M92.38 -0.15 C92.31 29.22, 91.53 59.37, 91.56 93.19 M92.54 92.29 C57.05 91.69, 21.9 94.16, -0.07 94.44 M91.99 92.93 C70.3 92.46, 48.32 94.24, -0.76 92.3 M-1.81 92.05 C1 61.66, 0.7 29.8, 1.1 -1.86 M-0.24 93.39 C-0.67 58.1, 0.62 23.18, 0.64 -0.54\" stroke=\"#364fc7\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(23 143.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M-0.16 1.91 C26.05 0.41, 48.97 1.49, 90.17 -1.4 M0.92 0.77 C26.78 -0.71, 53.96 0.27, 92.13 -0.34 M93.12 -0.54 C90.67 25.41, 89.85 54.4, 93.25 118.3 M92.52 1 C92.11 26.6, 92.41 53.9, 91.76 116.57 M92.4 116.38 C60.05 117.38, 32.44 118.87, 0.83 117.28 M91.77 116.5 C71.51 116.15, 52.53 115.85, -0.4 117.31 M-0.92 118.5 C0.74 89.1, 1.33 61.5, 1.99 0.49 M0.75 117.4 C0.41 87.58, 1.55 58.47, -0.01 -0.67\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(235 137.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M-0.69 -1.37 C32.19 0.55, 67.17 -0.66, 91.16 -1.7 M0.65 -0.73 C20.23 -0.89, 40.43 0.42, 91.79 0.1 M91.14 0.57 C92.73 38.01, 93.44 71.56, 90.28 116.5 M92.14 -0.86 C93.09 39.99, 92.35 80.06, 91.19 116.41 M92.62 115.77 C65.3 117.48, 37.88 118.13, 0.68 116.99 M92.24 116.5 C57.79 116.93, 25.79 118.32, -0.44 116.84 M-1.35 118.8 C-1.39 72.23, -0.63 30.25, -0.54 -1.07 M0.64 116.73 C0.24 87.22, 0.82 58.36, -0.39 -0.67\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(130 200.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M-0.81 0.62 C20.98 0.72, 45.28 -0.11, 93.5 0.68 M1 0.24 C27.03 -0.85, 54.07 0.63, 92.4 -0.44 M91.99 -1.35 C94.61 31.82, 91.23 65.8, 91.64 116.46 M91.05 0.64 C91.13 28.53, 90.81 57.97, 91.72 116.61 M92.58 116.45 C72.28 116.64, 49.65 115.97, -1.97 115.48 M91.14 117.5 C67.24 115.93, 40.92 116.91, -0.89 116.82 M-1.9 117.01 C-0.78 72.29, -0.77 27.7, -0.11 -0.07 M-0.48 117.72 C1.8 74.6, 1.55 32.84, -0.35 0.6\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(64.5 56) rotate(0 3.5 12.5)\">\n\t\t<text x=\"3.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t1\n\t\t</text>\n\t</g>\n\t<g transform=\"translate(166 85.5) rotate(0 8 12.5)\">\n\t\t<text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t2\n\t\t</text>\n\t</g>\n\t<g transform=\"translate(271 48.5) rotate(0 8 12.5)\">\n\t\t<text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t3\n\t\t</text>\n\t</g>\n\t<g transform=\"translate(273.5 183.5) rotate(0 7.5 12.5)\">\n\t\t<text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t4\n\t\t</text>\n\t</g>\n\t<g transform=\"translate(62 189.5) rotate(0 7 12.5)\">\n\t\t<text x=\"7\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t5\n\t\t</text>\n\t</g>\n\t<g transform=\"translate(168.5 246.5) rotate(0 7.5 12.5)\">\n\t\t<text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t6\n\t\t</text>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(22 283.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M-0.78 -0.59 C27.23 -0.65, 50.86 1.22, 91.41 0.37 M0.65 -0.88 C35.95 1.84, 70.95 1.2, 92.81 -0.47 M92.88 1.93 C93.54 24.45, 90.38 49.64, 92.62 117.53 M92.13 0.54 C93.6 38.02, 92.98 74.92, 92.32 116.73 M93.95 117.64 C73.79 117.41, 52.17 115.06, -0.16 117.48 M91.88 117.62 C58.53 116.44, 24.3 116.06, 0.44 117.84 M0.08 115.29 C2.68 92.32, 2.36 63.06, -0.71 1.62 M0.25 116.01 C-0.09 88.67, -1.08 57.96, -0.9 -0.7\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(59.5 329.5) rotate(0 8.5 12.5)\">\n\t\t<text x=\"8.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t8\n\t\t</text>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(130 341.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M1 -0.59 C32.65 2.4, 64.71 -1.19, 93.3 -1.76 M0.32 0.81 C33.12 -1.25, 67.48 -0.82, 92.44 0.96 M93.09 0.62 C92.64 42.41, 93.54 84.48, 92.26 118.08 M92.26 0.32 C92.53 43.1, 91.96 87.36, 92.98 117.32 M90.59 116.84 C58.51 118.16, 24.11 115.78, -0.24 118.24 M91.49 117.44 C57.61 117.08, 20.63 117.77, 0.04 116.14 M-1.46 116.29 C0.71 71.41, 0.36 28.31, 0.49 -1.98 M-0.73 116.1 C-1.66 74.26, -0.99 31.55, -0.82 0.7\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(169 387.5) rotate(0 7 12.5)\">\n\t\t<text x=\"7\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t9\n\t\t</text>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(239 402.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M-1.91 1.3 C27.56 1.23, 60.57 0.64, 92.63 1.61 M-0.49 0.44 C24.23 0.31, 46.63 -1.27, 92.54 0.31 M92.43 0.26 C93.31 39.73, 93.59 76.7, 92.52 117.64 M91.42 0.98 C91.3 32.62, 91.45 63.53, 91.3 116.92 M91.07 116.76 C63.44 118.68, 32.12 118.84, -1.02 117.88 M91.93 117.04 C55.82 116.98, 22.12 116.82, -0.73 116.65 M0.46 117.49 C-1.39 73.71, 2.24 27.13, -1.46 -1.8 M0.11 116.18 C0.66 90.47, 0.18 62.67, -0.63 -0.42\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(274.5 448.5) rotate(0 10.5 12.5)\">\n\t\t<text x=\"10.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t10\n\t\t</text>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(236 269.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M0.71 0.63 C21.11 -1.83, 37.16 -0.28, 91.01 0.88 M-0.99 0.54 C36.77 0.19, 73.11 0.64, 92.21 0.13 M92.27 0.52 C93.52 40.89, 91.15 81.19, 90.84 118.95 M91.68 -0.7 C92.73 39.09, 93.54 77.72, 91.54 116.88 M93.83 115.98 C59.56 118.55, 23.85 115.06, -0.13 117.08 M92.65 116.27 C71.92 118.53, 52.04 118.36, 0.23 117.25 M-0.67 115.54 C-2.57 92.09, -0.69 69.9, 0.22 -1.65 M-0.43 116.37 C-0.92 74.02, -1.25 30.48, 0 -0.28\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(275.5 315.5) rotate(0 6.5 12.5)\">\n\t\t<text x=\"6.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t7\n\t\t</text>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(132 481.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M-0.09 -0.12 C23.71 2.13, 48.58 -0.79, 90.97 -0.22 M0.86 -0.96 C20.51 0.59, 39.63 0.54, 92.21 0.07 M93.37 0.43 C90.65 34.55, 93.85 64.72, 91.87 116.49 M91.38 0.78 C91.26 30.42, 91.17 58.57, 91.8 117.59 M93.23 116.33 C63.71 114.95, 37.3 114.96, 0.33 116.58 M92.29 117.23 C55.88 116.15, 17.81 116.14, 0.34 117.36 M1.21 117.27 C0.07 78.92, 1.26 42.55, 0.64 0.41 M-0.61 116.09 C0.66 75.16, 0.77 33.51, 0.21 0.86\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(167 527.5) rotate(0 11 12.5)\">\n\t\t<text x=\"11\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t12\n\t\t</text>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(27 424.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M-1.07 -1.03 C24.24 -1.65, 47.55 0.29, 93.72 -1.92 M0.63 0.21 C36.37 -0.64, 73.15 -1.15, 92.68 0.21 M90.95 -0.13 C92.46 22.58, 92.47 48.66, 90.76 118.55 M91.28 -0.2 C93.5 29.99, 92.52 59.61, 92.62 116.67 M90.18 117.33 C64.28 119.8, 36.51 117.1, 0.57 117.46 M91.46 117.34 C58.76 116.52, 24 117.36, 0.61 117.13 M-1.43 117.64 C1.33 88.17, 0.63 58.67, -1.22 -1.82 M0.48 117.21 C0.68 76.25, -0.98 35.79, -0.77 0.36\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(66.5 470.5) rotate(0 6.5 12.5)\">\n\t\t<text x=\"6.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t11\n\t\t</text>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(29 558.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M1.81 0.03 C26.11 -2.26, 50.27 0.03, 92.69 -0.1 M-0.15 0.34 C30.65 -0.24, 59.96 -1.21, 92.97 -0.02 M91.82 1.12 C91.64 36.32, 91.7 75.52, 90.33 115.01 M92.13 0.61 C92.27 26.43, 92.61 54.51, 91.26 117.8 M91.96 117.34 C55.06 118.72, 18.7 116.9, 0.17 116.84 M92.42 116.04 C71.88 116.65, 53.23 117.9, 0.19 117.61 M0.06 115.34 C-0.02 78.36, 2.75 40.99, 0.23 -1.36 M-0.56 117.48 C-0.12 71.64, -0.45 24.91, 0.53 -0.14\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(241 544.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M-0.92 -1.7 C33.69 1.69, 65.55 2.11, 92.57 -1.76 M-0.52 -0.11 C33.19 1.17, 64.77 0.08, 92.94 0.81 M93.66 1.44 C92.34 35.96, 92.41 71.36, 92.77 118.36 M91.64 -0.63 C92.16 30.78, 92.24 61.78, 91.58 117.18 M93.34 116.25 C66.7 115.43, 39.37 118.67, 1.23 116.18 M91.34 116.92 C73.62 116.56, 52.63 116.57, -0.68 116.14 M1.81 118.41 C1.49 76.26, 1.67 32.91, 0.23 -1.96 M-0.6 117.22 C-0.29 92.07, -0.06 69.28, -0.44 0.17\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(276.5 590.5) rotate(0 10.5 12.5)\">\n\t\t<text x=\"10.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t13\n\t\t</text>\n\t</g>\n\t<g stroke-linecap=\"round\" transform=\"translate(134 631.5) rotate(0 46 58.5)\">\n\t\t<path d=\"M-0.46 1.74 C25.38 -0.13, 46.51 2.25, 92.99 -1.32 M-0.72 -0.88 C26.22 -0.04, 54.35 0.01, 92.26 0.91 M92.72 -0.77 C92.54 41.38, 90.45 85.81, 92.21 115.79 M91.43 0.63 C90.62 37.79, 90.4 76, 92.03 116.12 M92 115.94 C67.24 118.96, 43.06 117.38, 0.31 116.54 M92.21 116.33 C72.71 117.24, 51.65 116.22, -0.83 117.88 M-0.29 118.94 C-1.61 68.79, 0.3 23.59, -1.8 -1.35 M0.13 116.21 C-0.88 81.19, -0.34 43.61, 0.78 -0.05\" stroke=\"#364fc7\" stroke-width=\"1\" fill=\"none\">\n\t\t</path>\n\t</g>\n\t<g transform=\"translate(170 677.5) rotate(0 10 12.5)\">\n\t\t<text x=\"10\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t15\n\t\t</text>\n\t</g>\n\t<g transform=\"translate(68 569) rotate(0 10 12.5)\">\n\t\t<text x=\"0\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#1864ab\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t14\n\t\t</text>\n\t</g>\n</svg>\n</p>\n\n\n### 可视元素判定\n\n先来看下面图，当元素完全不在可视区域时候就视为当前元素不需要显示，只有与可视区域存在交叉或被包含时候视为需要显示。\n\n<p align=\"center\">\n\t<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 543 688.2044864933938\" width=\"543\" height=\"688.2044864933938\">\n\t\t<rect x=\"0\" y=\"0\" width=\"543\" height=\"688.2044864933938\" fill=\"#ffffff\">\n\t\t</rect>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(131.5 160) rotate(0 166.5 165)\">\n\t\t\t<path d=\"M0.24 0.87 C123.88 0.38, 245 0.23, 333.59 -0.63 M0.33 -0.24 C91.33 1.23, 182.61 1.05, 333.53 0.44 M332.71 0.36 C334.02 131.26, 334.08 262.73, 333.44 329.43 M332.73 -0.55 C331.42 104.57, 332.58 208.14, 332.71 330.48 M333.66 330.41 C261.8 332.32, 189.92 331.22, 0.11 328.77 M332.9 330.29 C219.76 331.08, 108.19 330.97, 0.25 329.34 M1.29 329.08 C-0.24 224.07, -1.91 117.31, 0.65 1.27 M0.12 329.96 C1.08 251.48, 1.35 173.06, 0.12 -0.13\" stroke=\"#000000\" stroke-width=\"2\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(143.5 10) rotate(0 46 58.49999999999999)\">\n\t\t\t<path d=\"M1.28 1.63 C19.47 -0.96, 38.05 0.71, 91.07 -0.51 M91.28 -0.33 C93.59 38.93, 93.06 81.02, 93.28 118.93 M92.53 116.37 C59.12 116.25, 26.55 117.45, -0.84 117.32 M-1.62 115.19 C1.37 88.48, -0.83 55.93, 1.4 -1.7\" stroke=\"#364fc7\" stroke-width=\"1.5\" fill=\"none\" stroke-dasharray=\"8 9\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(249.5 11.5) rotate(0 46 86.5)\">\n\t\t\t<path d=\"M1.63 0.65 C27.02 -0.17, 56.51 -1.52, 91.49 0.79 M-0.17 0.95 C24.8 1.01, 51.19 0.97, 92.96 0.65 M91.37 0.67 C91.08 38.12, 92.27 72.12, 92.32 172.15 M91.09 0.37 C92.12 41.76, 90.9 85.68, 91.15 172.24 M92.63 173.64 C56.95 172.29, 21.57 171.46, 0.77 172.29 M91.23 172.91 C60.69 173.15, 27.94 172.42, 0.21 173.31 M0.65 173.07 C-3.41 105.29, -0.68 41.62, -1.26 -1.19 M-0.37 172.63 C-0.28 124.36, -0.11 76.74, 0.33 0.72\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(354.5 14.5) rotate(0 46 46.49999999999999)\">\n\t\t\t<path d=\"M0.65 -0.8 C29.62 0.12, 57.47 -1.26, 92.79 -0.52 M93.89 -0.8 C93.03 33.92, 92.95 66.67, 93.29 91.22 M92.67 92.45 C67.99 93.35, 39.86 93.03, -0.85 91.91 M0.73 94.59 C-0.71 67.9, 2.16 42.79, -1.52 1.67\" stroke=\"#364fc7\" stroke-width=\"1.5\" fill=\"none\" stroke-dasharray=\"8 9\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(144.5 143.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M-0.8 0.42 C34.36 -1.23, 66.48 0.49, 91.48 0.96 M-0.4 0.68 C25.07 -0.23, 49.54 -0.22, 91.11 -0.21 M91.45 1.64 C92.27 37.35, 91.95 75.53, 90.91 116.22 M92.8 -0.73 C90.52 26.31, 90.09 50.46, 92.84 117.49 M92.25 116.02 C61.78 115.48, 32 116.59, 1 116.7 M92.91 116.76 C60.88 115.95, 29.22 117.23, 0.85 117.94 M-1.78 115.91 C0.57 91.61, -1.64 61.3, -0.45 0.34 M0.01 116.4 C0.62 82.43, 0.77 48.94, 0.77 0.48\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(356.5 137.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M0.42 0.87 C34.17 -0.14, 70.98 -0.15, 92.96 -0.72 M0.68 0.78 C26.71 1.33, 52.79 -0.52, 91.79 0.26 M93.64 0.64 C91.55 31.72, 91.54 61.71, 91.22 115.38 M91.27 -0.42 C93.13 23.66, 91.67 49.86, 92.49 117.3 M91.02 117.16 C59.69 117.88, 30.3 118.12, -0.3 117.85 M91.76 117.37 C70.56 118.05, 51.36 118.69, 0.94 116.33 M-1.09 117.95 C1.82 76.82, -1.23 38.71, 0.34 -0.12 M-0.6 117.18 C0.25 86.62, 1.15 56.33, 0.48 0.64\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(251.5 200.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M0.87 -0.93 C30.07 0.6, 60.63 0.77, 91.28 -0.33 M0.78 0.64 C37.27 0.02, 71.72 -0.84, 92.26 -0.32 M92.64 -0.84 C92 38.14, 90.59 77.2, 90.38 115.19 M91.58 0.7 C92.08 38.63, 93.77 79.26, 92.3 117.31 M92.16 115.18 C62.23 115.84, 31.93 116.24, 0.85 115.45 M92.37 116.03 C65.4 117.09, 39.22 117.73, -0.67 117.33 M0.95 118.86 C-0.22 80.31, 0.59 46.34, -0.12 -0.75 M0.18 116.82 C0.32 86.92, 0.76 55.89, 0.64 -0.76\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g transform=\"translate(186 56) rotate(0 3.5 12.5)\">\n\t\t\t<text x=\"3.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t1\n\t\t\t</text>\n\t\t</g>\n\t\t<g transform=\"translate(287.5 85.5) rotate(0 8 12.5)\">\n\t\t\t<text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t2\n\t\t\t</text>\n\t\t</g>\n\t\t<g transform=\"translate(392.5 48.5) rotate(0 8 12.5)\">\n\t\t\t<text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t3\n\t\t\t</text>\n\t\t</g>\n\t\t<g transform=\"translate(395 183.5) rotate(0 7.5 12.5)\">\n\t\t\t<text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t4\n\t\t\t</text>\n\t\t</g>\n\t\t<g transform=\"translate(183.5 189.5) rotate(0 7 12.5)\">\n\t\t\t<text x=\"7\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t5\n\t\t\t</text>\n\t\t</g>\n\t\t<g transform=\"translate(290 246.5) rotate(0 7.5 12.5)\">\n\t\t\t<text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t6\n\t\t\t</text>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(143.5 283.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M-0.33 1.89 C24.4 1.69, 51.96 1.61, 93.93 1.29 M-0.32 0.33 C19.12 0.58, 39.12 -0.66, 92.16 -0.43 M90.19 0.73 C93.13 27.27, 90.69 58.87, 90.3 115.48 M92.31 0.32 C92.69 44.4, 92.65 88.87, 92.38 116.65 M90.45 116.83 C61.6 116.92, 28.32 115.45, 0.42 117.61 M92.33 117.03 C55.68 115.84, 21.62 117.31, -0.63 116.41 M-0.75 116.26 C-0.18 83.32, 0.16 51.66, 0.67 1.44 M-0.76 117.71 C-0.41 72.95, 0.1 29.7, -0.27 -0.63\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g transform=\"translate(181 329.5) rotate(0 8.5 12.5)\">\n\t\t\t<text x=\"8.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t8\n\t\t\t</text>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(251.5 341.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M-0.8 1.36 C25.84 0.41, 50.5 0.42, 90.22 -0.42 M-0.28 0.82 C30.35 -0.73, 60.22 -0.73, 91.46 -0.39 M93.59 -1.46 C90.09 27.01, 89.24 49.7, 93.67 117.97 M92.12 -0.49 C92.45 37.73, 92.75 76.93, 92.5 116.85 M93.81 116.53 C61.25 114.99, 29.43 117.53, 1.7 118.89 M91.11 116.45 C71.04 117.96, 48.51 116.44, -0.22 117.17 M0.03 115.8 C0.8 82.24, 1.11 49.66, 1.54 0.96 M0.15 117.07 C1.55 75.31, 0.62 31.12, -0.92 0.03\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g transform=\"translate(290.5 387.5) rotate(0 7 12.5)\">\n\t\t\t<text x=\"7\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t9\n\t\t\t</text>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(360.5 402.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M1.56 1.28 C38.23 0.67, 70.83 -1.05, 92.53 -0.63 M0.32 -0.42 C30.82 -1.18, 60.78 -1.15, 91.19 -0.91 M91.15 1.4 C91.23 37.87, 94.61 79.74, 92.61 117.63 M92.08 -0.91 C92.53 38.48, 92.65 77.51, 92.42 116.23 M92.75 115.07 C65.61 117.4, 40.07 118.67, -1.34 117.65 M92.48 117.93 C63.46 115.9, 35.94 116.67, -0.06 116.63 M0.37 116.63 C0.65 87.65, 1.53 56.37, 1.29 -1.53 M0.66 117.94 C-0.45 72.99, -1.1 30.27, 0.48 0.92\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g transform=\"translate(396 448.5) rotate(0 10.5 12.5)\">\n\t\t\t<text x=\"10.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t10\n\t\t\t</text>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(357.5 269.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M1.93 1.29 C32.09 -1.01, 68.27 -1.22, 92.67 -0.55 M0.16 -0.43 C34.6 -0.01, 69.47 -0.52, 92.37 0.8 M90.3 -1.52 C93.18 27.52, 92.11 53.73, 92.64 117.25 M92.38 -0.35 C92.6 29.19, 92.52 57.9, 91.91 117.91 M92.42 117.61 C68.27 118, 39.8 116.76, 0.07 115.22 M91.37 116.41 C69.19 118.03, 46.77 117.48, -0.37 117.01 M0.67 118.44 C1.33 89.86, 1.07 59.27, 1.42 0.3 M-0.27 116.37 C-1.69 81.11, -0.29 46.1, 0.96 0.17\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g transform=\"translate(397 315.5) rotate(0 6.5 12.5)\">\n\t\t\t<text x=\"6.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t7\n\t\t\t</text>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(253.5 481.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M-1.78 -0.42 C34.03 -1.23, 67.67 -1.15, 93.64 0.64 M-0.54 -0.39 C22.93 -0.51, 47.85 1.19, 91.27 -0.42 M93.67 0.97 C91.61 43.94, 91.64 86.86, 91.02 117.16 M92.5 -0.15 C92.87 23.7, 92.36 49.86, 91.76 117.37 M93.7 118.89 C71.96 117.94, 54.67 115.5, -1.09 117.95 M91.78 117.17 C55.77 116.08, 19.3 116.47, -0.6 117.18 M1.54 117.96 C0.89 82.51, 1.02 51.38, 0.14 1.32 M-0.92 117.03 C0.8 71.86, 1.28 25.05, 0.07 0.74\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g transform=\"translate(288.5 527.5) rotate(0 11 12.5)\">\n\t\t\t<text x=\"11\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t12\n\t\t\t</text>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(148.5 424.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M0.53 -0.63 C34.21 -0.36, 68.73 0.84, 91.16 0.32 M-0.81 -0.91 C24.04 1.16, 46.63 -0.06, 92.7 -0.85 M92.61 0.63 C93.62 26.46, 91.99 52.58, 90.18 117.77 M92.42 -0.77 C92.5 31.87, 92.35 62.3, 91.03 117.21 M90.66 117.65 C61.65 116.09, 30.07 118.82, 1.86 115.74 M91.94 116.63 C69.5 117.17, 47.14 117.34, -0.18 117.33 M1.29 115.47 C0.51 73.76, -0.76 31.24, 1.87 -0.55 M0.48 117.92 C2.04 89.45, 1.14 62.3, -0.87 -0.81\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g transform=\"translate(188 470.5) rotate(0 6.5 12.5)\">\n\t\t\t<text x=\"6.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t11\n\t\t\t</text>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(150.5 558.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M0.67 -0.55 C27.29 0.93, 50.46 0.61, 91.15 -1.09 M92.73 1.59 C89.59 29.67, 92.45 59.33, 90.48 118.67 M92.64 117.25 C58.94 117.45, 26.03 118.06, -0.71 118 M-0.17 118.81 C-0.97 84.42, -2.43 50.77, 0.61 1.7\" stroke=\"#364fc7\" stroke-width=\"1.5\" fill=\"none\" stroke-dasharray=\"8 9\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\" transform=\"translate(362.5 544.5) rotate(0 46 58.5)\">\n\t\t\t<path d=\"M1.64 0.64 C23.85 0.58, 48.53 -0.83, 91.22 -1.62 M90.54 -0.85 C93.83 22.81, 90.91 50.69, 92.97 117.61 M91.02 117.16 C59.69 117.88, 30.3 118.12, -0.3 117.85 M-0.47 117.75 C-1.83 91.39, 0.71 66.63, 1.89 -1.34\" stroke=\"#364fc7\" stroke-width=\"1.5\" fill=\"none\" stroke-dasharray=\"8 9\">\n\t\t\t</path>\n\t\t</g>\n\t\t<g transform=\"translate(398 590.5) rotate(0 10.5 12.5)\">\n\t\t\t<text x=\"10.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t13\n\t\t\t</text>\n\t\t</g>\n\t\t<g transform=\"translate(184.5 603) rotate(0 10 12.5)\">\n\t\t\t<text x=\"0\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#1864ab\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t14\n\t\t\t</text>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\">\n\t\t\t<g transform=\"translate(487.1804903262407 12.750000000000014) rotate(0 3.6758362127011424 72.03529622842932)\">\n\t\t\t\t<path d=\"M1.35 0.68 C3.65 11.83, 13.85 44.93, 12.72 68.64 C11.58 92.36, -3.16 130.51, -5.45 142.96 M-1.36 -1.42 C0.73 10.1, 10.6 48.01, 10.89 72.49 C11.18 96.98, 3.48 133.32, 0.38 145.49\" stroke=\"#e67700\" stroke-width=\"1\" fill=\"none\">\n\t\t\t\t</path>\n\t\t\t</g>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\">\n\t\t\t<g transform=\"translate(117.53441886727751 157.75) rotate(0 -10.223491209581084 166.2962683300674)\">\n\t\t\t\t<path d=\"M0.05 2.79 C-3.09 27.9, -20.26 97.29, -20.73 151.57 C-21.2 205.85, -5.76 298.74, -2.79 328.47 M-3.37 1.84 C-6.76 26.14, -24.26 93.14, -23.23 147.96 C-22.19 202.78, -0.45 299.99, 2.82 330.75\" stroke=\"#2b8a3e\" stroke-width=\"1\" fill=\"none\">\n\t\t\t\t</path>\n\t\t\t</g>\n\t\t</g>\n\t\t<g transform=\"translate(511 10.75) rotate(0 11 70)\">\n\t\t\t<text x=\"0\" y=\"21\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#e67700\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t已\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"49\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#e67700\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t滚\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"77\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#e67700\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t动\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"105\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#e67700\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t高\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"133\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#e67700\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t度\n\t\t\t</text>\n\t\t</g>\n\t\t<g transform=\"translate(68 242.75) rotate(0 10 65)\">\n\t\t\t<text x=\"0\" y=\"19\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"17.647058823529395px\" fill=\"#2b8a3e\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t可\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"45\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"17.647058823529395px\" fill=\"#2b8a3e\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t视\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"71\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"17.647058823529395px\" fill=\"#2b8a3e\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t区\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"97\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"17.647058823529395px\" fill=\"#2b8a3e\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t高\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"123\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"17.647058823529395px\" fill=\"#2b8a3e\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t度\n\t\t\t</text>\n\t\t</g>\n\t\t<g stroke-linecap=\"round\">\n\t\t\t<g transform=\"translate(126 10.75) rotate(0 -41.557524843499436 334.64067246239637)\">\n\t\t\t\t<path d=\"M-2.22 2.78 C-15.51 51.66, -82.99 184.74, -82.27 295.52 C-81.55 406.3, -11.85 606.05, 2.08 667.45 M1.78 1.83 C-11.78 49.64, -85.13 180.83, -85.2 291.06 C-85.26 401.3, -13.23 600.77, 1.4 663.26\" stroke=\"#5f3dc4\" stroke-width=\"1\" fill=\"none\">\n\t\t\t\t</path>\n\t\t\t</g>\n\t\t</g>\n\t\t<g transform=\"translate(10 218.75) rotate(0 11 84)\">\n\t\t\t<text x=\"0\" y=\"21\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t瀑\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"49\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t布\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"77\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t流\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"105\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t总\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"133\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t高\n\t\t\t</text>\n\t\t\t<text x=\"0\" y=\"161\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n\t\t\t\t度\n\t\t\t</text>\n\t\t</g>\n\t</svg>\n</p>\n\n因为上面瀑布流的实现采用的是 position 定位的，所以我们完全能知道所有元素距离顶部的距离，很容易计算出与可视区域交叉位置。\n\n**元素偏移位置 < 滚动高度+可视区域高度  && 元素偏移位置 + 元素高度 > 滚动高度**\n\n如果只渲染可视区域范围，滚动时候会存在白屏再出现，可视适当的扩大渲染区域，例如把上一屏和下一屏都算进来，进行预先渲染。\n\n``` js\nconst top = scrollTop - clientHeight\nconst bottom = scrollTop + clientHeight * 2\nconst visibleList = data.filter(item => item._top + item.height > top && item._top < bottom)\n```\n\n然后通过监听滚动事件，根据滚动位置去处理筛选数。这里会存在一个隐藏性能问题，当滚动加载数据比较多的时候，滚动事件触发也是比较快的，每一次都进行一次遍历，也是比较消耗性能的。可以适当控制一下事件触发频率，当然这也只是治标不治本，归根倒是查询显示元素方法问题。\n\n**标记下标**\n应为列表数据的 _top 值是从小到大正序的，所以我们可以标记在可视区元素的下标，当发生滚动的时候，我们直接从标记下标开始查找，根据滚动分几种情况来判断。\n1> 如果滚动后，标记下标元素还在可视范围内，可以直接从标记下标二分查找，往上往下找直到不符合条件就停止。\n2>  如果滚动后，标记下标元素不在可视范围内，根据滚动方向往上或者往下去查找。这个时候存在两种情况，一种是滚动幅度比较小，直接根据当前下标往上或者往下找。当用户拖动滚动条滚动幅度特别大的时候，可以将下标往上或者往下偏移，偏移量根据 **滚动高度/预估平均高度*列数** 去估算一个，然后在根据这个预估下标进行查找。找到后然后缓存一个新的下标。\n\n### 抖动问题\n\n我们 absolute 定位会撑开容器高度，但是滚动时候还是会存在抖动问题，我们可以自定义一个元素高度去撑开，这个元素高度也就是我们之前计算的每一列累计高度 sumHeight 中最大的那个了。\n\n### 过渡动画问题\n\n当列宽发生变化时，元素位置发生了变化，在可视区域的元素也发生了变化，有些元素可能之前并没有渲染，所以使用上面 CSS 会存在新出现元素不会产生过渡动画。好在我们能够很清楚的知道元素原位置信息和新的位置信息，我们可以利用 **FLIP** 来处理这动画，很容易控制元素过渡变化，如果有些元素之前不存在，就没有原位置信息，我们可以在可视范围内给他随机生成一个位置进行过渡，保证每一个元素都有个过渡效果避免僵硬。\n\n## 总结\n\n上面情况仅仅是针对动态列数量，又能计算出高度情况下优化，可能业务中也是可能存在每项高度是动态的，这个时候可以采用预估元素高度在渲染后缓存大小位置等信息，或者离屏渲染等方案解决做出进一步的优化处理。","slug":"waterfalls_and_visiblelist","published":1,"updated":"2024-03-06T07:42:59.000Z","comments":1,"layout":"post","photos":[],"_id":"cltgz7vsu003k98lg1jkn52xg","content":"<p>瀑布流算是比较常见的布局了，一个般常见纵向瀑布流的交互，当我们滚动到底的时候加载下一页的数据追加到上去。因为一次加载的数据量不是很多，页面操作是也不会有太大的性能消耗。但是如果当你一直往下滚动加载，加载几十页的时候，就会开始感觉不那么流畅的，这是因为虽然每次操作的很少，但是页面的 DOM 越来越多，内存占用也会增大，而且发生重排重绘时候浏览器计算量耗时也会增大，就导致了慢慢不能那么流畅了。这个时候可以选择结合虚拟列表方式使用，虚拟列表本身就是用来解决超长列表时的处理方案。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"瀑布流\"><a href=\"#瀑布流\" class=\"headerlink\" title=\"瀑布流\"></a>瀑布流</h2><p>瀑布流的实现方式有很多种，大体分为：</p>\n<ul>\n<li>CSS： CSS 实现的有 multi-column、grid ，CSS 实现存在一定局限性，例如无法调整顺序，当元素高度差异较大时候不是很好处理各列间隔差等。</li>\n<li>JavaScript：JavaScript 实现的有 JavaScript + flex、JavaScript + position，JavaScript 实现兼容性较好，可控制性高。</li>\n</ul>\n<p>因为我的瀑布流是可提前计算元素宽高，列数是动态的，所以采用了 JavaScript + position 来配合 虚拟列表 进行优化。</p>\n<h3 id=\"js-flex-实现\"><a href=\"#js-flex-实现\" class=\"headerlink\" title=\"js + flex 实现\"></a>js + flex 实现</h3><p>如果你的瀑布流 列是固定，列宽不固定 的，使用 flex 是个很好选择，当你的容器宽度变话时候，每一列宽度会自适应，大致实现方式</p>\n<p>将你的数据分为对应列数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data1 = [], <span class=\"comment\">//第一列</span></span><br><span class=\"line\">    data2 = [], <span class=\"comment\">//第二列</span></span><br><span class=\"line\">    data3 = [], <span class=\"comment\">//第三列</span></span><br><span class=\"line\">    i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt; data.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    data1.<span class=\"title function_\">push</span>(data[i++]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; data.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        data2.<span class=\"title function_\">push</span>(data[i++]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; data.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        data3.<span class=\"title function_\">push</span>(data[i++]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后将你的每列数据插入进去就可以了，设置 list 为 flex 容器，并设置主轴方向为 row</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 第一列 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;column&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- more items--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 第二列 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;column&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- more items--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 第三列 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;column&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- more items--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"js-position-实现\"><a href=\"#js-position-实现\" class=\"headerlink\" title=\"js + position 实现\"></a>js + position 实现</h3><p>这种方式比较适合 列定宽，列数量不固定情况，而且最好能计算出每个元素的大小。</p>\n<p>大致 HTML 结构如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- more items--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ui</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.list</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.list-item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript 部分，首先需要获取 list 宽度，根据 list.width&#x2F;列宽 计算出列的数量，然后根据列数量去分组数据和计算位置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以列宽为300 间隔为20 为例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> catchColumn = (<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"built_in\">parseInt</span>((dom.<span class=\"property\">clientWidth</span> + <span class=\"number\">20</span>) / (<span class=\"number\">300</span> + <span class=\"number\">20</span>)), <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">toTwoDimensionalArray</span> = (<span class=\"params\">count</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; count; index++) &#123;</span><br><span class=\"line\">        list.<span class=\"title function_\">push</span>([])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">minValIndex</span> = (<span class=\"params\">arr = []</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> val = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(...arr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.<span class=\"title function_\">findIndex</span>(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> i === val)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 缓存累计高度</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sumHeight = <span class=\"title function_\">toTwoDimensionalArray</span>(catchColumn)</span><br><span class=\"line\"></span><br><span class=\"line\">data.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取累计高度最小那列</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> minIndex = <span class=\"title function_\">minValIndex</span>(sumHeight)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> width = <span class=\"number\">0</span> <span class=\"comment\">// 这里宽高更具需求计算出来</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> height = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\titem.<span class=\"property\">_top</span> = minIndex * (<span class=\"number\">300</span> + <span class=\"number\">20</span>) <span class=\"comment\">// 缓存位置信息，后面会用到</span></span><br><span class=\"line\">    item.<span class=\"property\">style</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">width</span>: width + <span class=\"string\">&#x27;px&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">height</span>: height + <span class=\"string\">&#x27;px&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 计算偏移位置</span></span><br><span class=\"line\">        <span class=\"attr\">transform</span>: <span class=\"string\">`translate(<span class=\"subst\">$&#123;minIndex * (<span class=\"number\">300</span> + <span class=\"number\">20</span>)&#125;</span>px, <span class=\"subst\">$&#123;sumHeight[minIndex]&#125;</span>px)`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sumHeight[minIndex] = sumHeight[minIndex] + height + <span class=\"number\">20</span> </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态列数\"><a href=\"#动态列数\" class=\"headerlink\" title=\"动态列数\"></a>动态列数</h3><p>可以使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/ResizeObserver\">ResizeObserver</a>(现代浏览器兼容比较好了) 监听容器元素大小变化，当宽度变化时重新计算列数量，当列数量发生变化时重新计算每项的位置信息。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> observer = <span class=\"title function_\">debounce</span>(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> column = <span class=\"title function_\">updateVisibleContainerInfo</span>(visibleContainer)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (column !== catchColumn) &#123;</span><br><span class=\"line\">        catchColumn = column</span><br><span class=\"line\">        <span class=\"comment\">// 重新计算</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">resetLayout</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">300</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> resizeObserver = <span class=\"keyword\">new</span> <span class=\"title class_\">ResizeObserver</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"title function_\">observer</span>(e));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开始监听</span></span><br><span class=\"line\">resizeObserver.<span class=\"title function_\">observe</span>(dom);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"过渡动画\"><a href=\"#过渡动画\" class=\"headerlink\" title=\"过渡动画\"></a>过渡动画</h3><p>当列数量发生变化时候，元素项的位置很多都会发生变化，如下图，第 4 项的位置从第 3 列变到了第 4 项，如果不做处理会显得比较僵硬。</p>\n<p align=\"center\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 460 298\" width=\"460\" height=\"298\">\n    <rect x=\"0\" y=\"0\" width=\"460\" height=\"298\" fill=\"#ffffff\">\n    </rect>\n    <g stroke-linecap=\"round\" transform=\"translate(10 113) rotate(0 220 87.5)\">\n        <path d=\"M-0.49 0.17 C99.14 1.36, 198.27 0.42, 439.01 -0.6 M-0.08 -0.06 C124.83 -1.08, 249.03 -1.15, 439.88 -0.3 M441.52 -1.12 C441.14 56.74, 440.97 108.16, 440.42 174.59 M440.47 0.31 C441.08 41.11, 441.73 83.9, 439.17 175.32 M440.53 174.55 C306.2 173.35, 173.32 173.64, -0.03 175.37 M439.94 175.07 C325.72 174.97, 210.49 174.53, 0.34 174.72 M-1.31 173.92 C-1.32 128.03, -0.73 80.94, -0.75 0.21 M-0.02 174.92 C-0.93 132.04, -1.82 87, 0.93 0.03\" stroke=\"#000000\" stroke-width=\"2\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(19 10) rotate(0 46 58.5)\">\n        <path d=\"M0.34 0.61 C36.77 1.67, 70.84 -1.52, 90.79 -0.34 M-0.11 0.63 C19.8 0.16, 39.54 -0.08, 91.41 0.15 M90.88 1.39 C93.57 34.66, 89.93 67.3, 91.59 115.77 M92.31 -0.64 C92.08 46.58, 93.12 92.3, 92.32 117.02 M91.09 115.47 C68.38 116.27, 45.77 117.43, 0.74 116.21 M92.14 117.51 C58.99 116, 24.94 117.57, -0.57 116.74 M-1.08 115.01 C0.47 84.99, 1.3 55.04, 0.21 -1.01 M-0.08 117.12 C-0.38 74.15, -1.73 33.8, 0.03 0.41\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(125 11.5) rotate(0 46 86.5)\">\n        <path d=\"M0.61 0.84 C24.89 -1.19, 45.37 -1.36, 91.66 -1.68 M0.63 -0.07 C31.97 -0.1, 63.69 -0.48, 92.15 -0.14 M93.39 1.68 C94.53 48.35, 93.73 100.21, 90.77 174.96 M91.36 -0.63 C92.84 62.73, 91.99 124.94, 92.02 172.52 M90.47 172.58 C69.22 172.76, 48.83 173.32, -0.79 174.21 M92.51 173.17 C63.97 172.42, 38.41 172.56, -0.26 172.62 M-1.99 173.94 C-0.26 115.9, 0.39 55.47, -1.01 1.19 M0.12 173.73 C-0.74 104.14, 0.97 36.58, 0.41 0.42\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(230 14.5) rotate(0 46 46.5)\">\n        <path d=\"M0.84 1.22 C22.02 -2.25, 44.91 -0.62, 90.32 0.95 M-0.07 0.01 C25.86 -0.81, 51.54 -0.43, 91.86 -0.09 M93.68 1.22 C89.52 35.39, 91.07 68.71, 93.96 94.2 M91.37 0.02 C92.71 31.48, 92.61 64.64, 91.52 92.34 M91.58 91.79 C59.74 92.25, 27.87 91.5, 1.21 92.9 M92.17 92.1 C64.74 94.15, 38.33 93.21, -0.38 93.4 M0.94 91.6 C2.28 70.46, 0.71 48.42, 1.19 1.89 M0.73 92.22 C-0.56 66.24, 0.1 38.04, 0.42 -0.53\" stroke=\"#364fc7\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(344 15.5) rotate(0 46 58.5)\">\n        <path d=\"M-1.03 -1.97 C29.22 -0.9, 59.17 0.39, 91.67 -0.23 M91.58 -0.47 C90.73 42.75, 91.63 84.72, 93.52 115.88 M90.04 117.42 C57.59 116.33, 25.96 118.76, 0.95 117.63 M0.84 115.34 C1.37 89.38, -0.22 60.36, 1.05 -0.91\" stroke=\"#c92a2a\" stroke-width=\"4.5\" fill=\"none\" stroke-dasharray=\"8 12\">\n        </path>\n    </g>\n    <g transform=\"translate(61.5 56) rotate(0 3.5 12.5)\">\n        <text x=\"3.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            1\n        </text>\n    </g>\n    <g transform=\"translate(163 85.5) rotate(0 8 12.5)\">\n        <text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            2\n        </text>\n    </g>\n    <g transform=\"translate(268 48.5) rotate(0 8 12.5)\">\n        <text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            3\n        </text>\n    </g>\n    <g transform=\"translate(382.5 61.5) rotate(0 7.5 12.5)\">\n        <text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            4\n        </text>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(232.5 129.75) rotate(0 46 58.5)\">\n        <path d=\"M0.1 -0.36 C35.38 -0.89, 70.24 0.22, 93.8 0.98 M0.7 0.69 C34.69 -0.96, 68.87 -1.35, 91.53 0.38 M93.77 -1.89 C91.58 30.33, 93.21 60.5, 91.19 117.89 M91.77 0.37 C90.74 34.26, 90.78 69.6, 92.47 116.82 M91.36 118.13 C65.56 115.98, 43.28 118.35, -1.28 115.14 M91.17 117.69 C58.79 117.86, 25.56 117.87, -0.5 117.24 M1.32 116.16 C-0.3 78.71, 0.11 38.79, -0.99 -1.08 M0.19 116.09 C1.6 91.53, -0.11 65.64, 0.55 -0.81\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g transform=\"translate(271 175.75) rotate(0 7.5 12.5)\">\n        <text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            4\n        </text>\n    </g>\n</svg>\n</p>\n\n<p>好在我们使用了 transform（也是为什么不使用 top、left 原因，transform 动画性能更高） 进行位置偏移，可以直接使用 transition 过渡。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.list-item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: transform .<span class=\"number\">5s</span> ease-in-out;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用虚拟列表\"><a href=\"#使用虚拟列表\" class=\"headerlink\" title=\"使用虚拟列表\"></a>使用虚拟列表</h2><h3 id=\"瀑布流存在的问题\"><a href=\"#瀑布流存在的问题\" class=\"headerlink\" title=\"瀑布流存在的问题\"></a>瀑布流存在的问题</h3><p>很多虚拟列表的都是使用的单列定高使用方式，但是瀑布流使用虚拟列表方式有点不同，瀑布流存在多列且时是错位的。所以常规 length*height 为列表总高度，根据 scrollTop&#x2F;height 来确定下标方式就行不通了，这个时候高度需要根据瀑布流高度动态决定了，可显示元素也不能通过 starindex-endindex 去截取显示了。</p>\n<p>如下图：蓝色框的元素是不应该显示的，只有与可视区域存在交叉的元素才应该显示</p>\n<p align=\"center\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 353 758.5\" width=\"353\" height=\"758.5\">\n    <rect x=\"0\" y=\"0\" width=\"353\" height=\"758.5\" fill=\"#ffffff\">\n    </rect>\n    <g stroke-linecap=\"round\" transform=\"translate(10 117) rotate(0 166.5 250)\">\n        <path d=\"M0.72 1 C85.82 -0.51, 171.42 0.26, 333.25 0 M0.35 -0.53 C86.39 -0.22, 172.88 0.54, 332.59 -0.65 M333.72 -0.59 C331.75 138.3, 331.35 276.01, 333.39 499.35 M333.05 0.37 C331.22 121.97, 331.11 243.44, 333.2 499.61 M332.83 500.47 C221.23 497.05, 106.02 496.84, -0.33 499.21 M333.04 500.64 C253.92 500.48, 175.76 501.12, 0.15 499.67 M-0.64 500.38 C-1.44 333.69, -1.78 166.77, -0.16 -0.42 M-0.32 500.39 C1.58 380.41, 1.74 260.88, -0.19 -0.11\" stroke=\"#000000\" stroke-width=\"2\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(22 10) rotate(0 46 58.49999999999999)\">\n        <path d=\"M-1.06 -0.78 C31.6 -1.8, 68.39 -0.16, 90.86 0.72 M-0.27 -0.87 C31.57 -0.47, 62.36 -0.61, 91.06 0.06 M90.59 -0.72 C93.57 23.14, 92.92 48.07, 90.1 118.2 M92.59 0.64 C91.54 25.79, 91.84 48.77, 91.4 117.78 M91.63 117.89 C60.19 117.86, 32.15 118.89, 0.85 116.53 M92 116.75 C66.12 117.09, 41.53 116.61, 0.03 116.45 M-1.92 116.26 C0.71 74.42, -0.38 29.15, -1.19 0.01 M-0.27 116.88 C1.29 85.59, -0.09 54.8, 1 0.84\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(128 11.5) rotate(0 46 86.5)\">\n        <path d=\"M0.85 1.5 C26.04 1.21, 56.87 -0.75, 90.53 -0.61 M0.28 -0.1 C20.66 -0.77, 43.28 0.39, 91.41 -0.74 M90.36 1.13 C94.56 36.23, 91.37 72.5, 90.09 173.74 M92.89 0.38 C92.22 62.29, 91.71 123.93, 91.61 172.56 M91.14 173.54 C61.97 173.1, 32.44 173.8, 1.55 172.93 M92.45 172.99 C57.7 172.47, 22.59 172.26, 0.83 172.24 M1.63 171.19 C-1.73 134.92, -0.06 94.82, 0.92 1.1 M-0.33 172.76 C-1 136.8, -0.94 102.31, 0.87 0.64\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(233 14.5) rotate(0 46 46.49999999999999)\">\n        <path d=\"M1.5 -1.92 C34.3 0.56, 66.3 -1.85, 91.39 -1.4 M-0.1 -0.5 C35 0.7, 71.41 -0.85, 91.26 -0.87 M93.13 1.57 C90.61 31.6, 90.05 64.54, 92.74 94.22 M92.38 -0.15 C92.31 29.22, 91.53 59.37, 91.56 93.19 M92.54 92.29 C57.05 91.69, 21.9 94.16, -0.07 94.44 M91.99 92.93 C70.3 92.46, 48.32 94.24, -0.76 92.3 M-1.81 92.05 C1 61.66, 0.7 29.8, 1.1 -1.86 M-0.24 93.39 C-0.67 58.1, 0.62 23.18, 0.64 -0.54\" stroke=\"#364fc7\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(23 143.5) rotate(0 46 58.5)\">\n        <path d=\"M-0.16 1.91 C26.05 0.41, 48.97 1.49, 90.17 -1.4 M0.92 0.77 C26.78 -0.71, 53.96 0.27, 92.13 -0.34 M93.12 -0.54 C90.67 25.41, 89.85 54.4, 93.25 118.3 M92.52 1 C92.11 26.6, 92.41 53.9, 91.76 116.57 M92.4 116.38 C60.05 117.38, 32.44 118.87, 0.83 117.28 M91.77 116.5 C71.51 116.15, 52.53 115.85, -0.4 117.31 M-0.92 118.5 C0.74 89.1, 1.33 61.5, 1.99 0.49 M0.75 117.4 C0.41 87.58, 1.55 58.47, -0.01 -0.67\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(235 137.5) rotate(0 46 58.5)\">\n        <path d=\"M-0.69 -1.37 C32.19 0.55, 67.17 -0.66, 91.16 -1.7 M0.65 -0.73 C20.23 -0.89, 40.43 0.42, 91.79 0.1 M91.14 0.57 C92.73 38.01, 93.44 71.56, 90.28 116.5 M92.14 -0.86 C93.09 39.99, 92.35 80.06, 91.19 116.41 M92.62 115.77 C65.3 117.48, 37.88 118.13, 0.68 116.99 M92.24 116.5 C57.79 116.93, 25.79 118.32, -0.44 116.84 M-1.35 118.8 C-1.39 72.23, -0.63 30.25, -0.54 -1.07 M0.64 116.73 C0.24 87.22, 0.82 58.36, -0.39 -0.67\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(130 200.5) rotate(0 46 58.5)\">\n        <path d=\"M-0.81 0.62 C20.98 0.72, 45.28 -0.11, 93.5 0.68 M1 0.24 C27.03 -0.85, 54.07 0.63, 92.4 -0.44 M91.99 -1.35 C94.61 31.82, 91.23 65.8, 91.64 116.46 M91.05 0.64 C91.13 28.53, 90.81 57.97, 91.72 116.61 M92.58 116.45 C72.28 116.64, 49.65 115.97, -1.97 115.48 M91.14 117.5 C67.24 115.93, 40.92 116.91, -0.89 116.82 M-1.9 117.01 C-0.78 72.29, -0.77 27.7, -0.11 -0.07 M-0.48 117.72 C1.8 74.6, 1.55 32.84, -0.35 0.6\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g transform=\"translate(64.5 56) rotate(0 3.5 12.5)\">\n        <text x=\"3.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            1\n        </text>\n    </g>\n    <g transform=\"translate(166 85.5) rotate(0 8 12.5)\">\n        <text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            2\n        </text>\n    </g>\n    <g transform=\"translate(271 48.5) rotate(0 8 12.5)\">\n        <text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            3\n        </text>\n    </g>\n    <g transform=\"translate(273.5 183.5) rotate(0 7.5 12.5)\">\n        <text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            4\n        </text>\n    </g>\n    <g transform=\"translate(62 189.5) rotate(0 7 12.5)\">\n        <text x=\"7\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            5\n        </text>\n    </g>\n    <g transform=\"translate(168.5 246.5) rotate(0 7.5 12.5)\">\n        <text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            6\n        </text>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(22 283.5) rotate(0 46 58.5)\">\n        <path d=\"M-0.78 -0.59 C27.23 -0.65, 50.86 1.22, 91.41 0.37 M0.65 -0.88 C35.95 1.84, 70.95 1.2, 92.81 -0.47 M92.88 1.93 C93.54 24.45, 90.38 49.64, 92.62 117.53 M92.13 0.54 C93.6 38.02, 92.98 74.92, 92.32 116.73 M93.95 117.64 C73.79 117.41, 52.17 115.06, -0.16 117.48 M91.88 117.62 C58.53 116.44, 24.3 116.06, 0.44 117.84 M0.08 115.29 C2.68 92.32, 2.36 63.06, -0.71 1.62 M0.25 116.01 C-0.09 88.67, -1.08 57.96, -0.9 -0.7\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g transform=\"translate(59.5 329.5) rotate(0 8.5 12.5)\">\n        <text x=\"8.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            8\n        </text>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(130 341.5) rotate(0 46 58.5)\">\n        <path d=\"M1 -0.59 C32.65 2.4, 64.71 -1.19, 93.3 -1.76 M0.32 0.81 C33.12 -1.25, 67.48 -0.82, 92.44 0.96 M93.09 0.62 C92.64 42.41, 93.54 84.48, 92.26 118.08 M92.26 0.32 C92.53 43.1, 91.96 87.36, 92.98 117.32 M90.59 116.84 C58.51 118.16, 24.11 115.78, -0.24 118.24 M91.49 117.44 C57.61 117.08, 20.63 117.77, 0.04 116.14 M-1.46 116.29 C0.71 71.41, 0.36 28.31, 0.49 -1.98 M-0.73 116.1 C-1.66 74.26, -0.99 31.55, -0.82 0.7\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g transform=\"translate(169 387.5) rotate(0 7 12.5)\">\n        <text x=\"7\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            9\n        </text>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(239 402.5) rotate(0 46 58.5)\">\n        <path d=\"M-1.91 1.3 C27.56 1.23, 60.57 0.64, 92.63 1.61 M-0.49 0.44 C24.23 0.31, 46.63 -1.27, 92.54 0.31 M92.43 0.26 C93.31 39.73, 93.59 76.7, 92.52 117.64 M91.42 0.98 C91.3 32.62, 91.45 63.53, 91.3 116.92 M91.07 116.76 C63.44 118.68, 32.12 118.84, -1.02 117.88 M91.93 117.04 C55.82 116.98, 22.12 116.82, -0.73 116.65 M0.46 117.49 C-1.39 73.71, 2.24 27.13, -1.46 -1.8 M0.11 116.18 C0.66 90.47, 0.18 62.67, -0.63 -0.42\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g transform=\"translate(274.5 448.5) rotate(0 10.5 12.5)\">\n        <text x=\"10.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            10\n        </text>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(236 269.5) rotate(0 46 58.5)\">\n        <path d=\"M0.71 0.63 C21.11 -1.83, 37.16 -0.28, 91.01 0.88 M-0.99 0.54 C36.77 0.19, 73.11 0.64, 92.21 0.13 M92.27 0.52 C93.52 40.89, 91.15 81.19, 90.84 118.95 M91.68 -0.7 C92.73 39.09, 93.54 77.72, 91.54 116.88 M93.83 115.98 C59.56 118.55, 23.85 115.06, -0.13 117.08 M92.65 116.27 C71.92 118.53, 52.04 118.36, 0.23 117.25 M-0.67 115.54 C-2.57 92.09, -0.69 69.9, 0.22 -1.65 M-0.43 116.37 C-0.92 74.02, -1.25 30.48, 0 -0.28\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g transform=\"translate(275.5 315.5) rotate(0 6.5 12.5)\">\n        <text x=\"6.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            7\n        </text>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(132 481.5) rotate(0 46 58.5)\">\n        <path d=\"M-0.09 -0.12 C23.71 2.13, 48.58 -0.79, 90.97 -0.22 M0.86 -0.96 C20.51 0.59, 39.63 0.54, 92.21 0.07 M93.37 0.43 C90.65 34.55, 93.85 64.72, 91.87 116.49 M91.38 0.78 C91.26 30.42, 91.17 58.57, 91.8 117.59 M93.23 116.33 C63.71 114.95, 37.3 114.96, 0.33 116.58 M92.29 117.23 C55.88 116.15, 17.81 116.14, 0.34 117.36 M1.21 117.27 C0.07 78.92, 1.26 42.55, 0.64 0.41 M-0.61 116.09 C0.66 75.16, 0.77 33.51, 0.21 0.86\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g transform=\"translate(167 527.5) rotate(0 11 12.5)\">\n        <text x=\"11\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            12\n        </text>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(27 424.5) rotate(0 46 58.5)\">\n        <path d=\"M-1.07 -1.03 C24.24 -1.65, 47.55 0.29, 93.72 -1.92 M0.63 0.21 C36.37 -0.64, 73.15 -1.15, 92.68 0.21 M90.95 -0.13 C92.46 22.58, 92.47 48.66, 90.76 118.55 M91.28 -0.2 C93.5 29.99, 92.52 59.61, 92.62 116.67 M90.18 117.33 C64.28 119.8, 36.51 117.1, 0.57 117.46 M91.46 117.34 C58.76 116.52, 24 117.36, 0.61 117.13 M-1.43 117.64 C1.33 88.17, 0.63 58.67, -1.22 -1.82 M0.48 117.21 C0.68 76.25, -0.98 35.79, -0.77 0.36\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g transform=\"translate(66.5 470.5) rotate(0 6.5 12.5)\">\n        <text x=\"6.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            11\n        </text>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(29 558.5) rotate(0 46 58.5)\">\n        <path d=\"M1.81 0.03 C26.11 -2.26, 50.27 0.03, 92.69 -0.1 M-0.15 0.34 C30.65 -0.24, 59.96 -1.21, 92.97 -0.02 M91.82 1.12 C91.64 36.32, 91.7 75.52, 90.33 115.01 M92.13 0.61 C92.27 26.43, 92.61 54.51, 91.26 117.8 M91.96 117.34 C55.06 118.72, 18.7 116.9, 0.17 116.84 M92.42 116.04 C71.88 116.65, 53.23 117.9, 0.19 117.61 M0.06 115.34 C-0.02 78.36, 2.75 40.99, 0.23 -1.36 M-0.56 117.48 C-0.12 71.64, -0.45 24.91, 0.53 -0.14\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(241 544.5) rotate(0 46 58.5)\">\n        <path d=\"M-0.92 -1.7 C33.69 1.69, 65.55 2.11, 92.57 -1.76 M-0.52 -0.11 C33.19 1.17, 64.77 0.08, 92.94 0.81 M93.66 1.44 C92.34 35.96, 92.41 71.36, 92.77 118.36 M91.64 -0.63 C92.16 30.78, 92.24 61.78, 91.58 117.18 M93.34 116.25 C66.7 115.43, 39.37 118.67, 1.23 116.18 M91.34 116.92 C73.62 116.56, 52.63 116.57, -0.68 116.14 M1.81 118.41 C1.49 76.26, 1.67 32.91, 0.23 -1.96 M-0.6 117.22 C-0.29 92.07, -0.06 69.28, -0.44 0.17\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g transform=\"translate(276.5 590.5) rotate(0 10.5 12.5)\">\n        <text x=\"10.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            13\n        </text>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(134 631.5) rotate(0 46 58.5)\">\n        <path d=\"M-0.46 1.74 C25.38 -0.13, 46.51 2.25, 92.99 -1.32 M-0.72 -0.88 C26.22 -0.04, 54.35 0.01, 92.26 0.91 M92.72 -0.77 C92.54 41.38, 90.45 85.81, 92.21 115.79 M91.43 0.63 C90.62 37.79, 90.4 76, 92.03 116.12 M92 115.94 C67.24 118.96, 43.06 117.38, 0.31 116.54 M92.21 116.33 C72.71 117.24, 51.65 116.22, -0.83 117.88 M-0.29 118.94 C-1.61 68.79, 0.3 23.59, -1.8 -1.35 M0.13 116.21 C-0.88 81.19, -0.34 43.61, 0.78 -0.05\" stroke=\"#364fc7\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g transform=\"translate(170 677.5) rotate(0 10 12.5)\">\n        <text x=\"10\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            15\n        </text>\n    </g>\n    <g transform=\"translate(68 569) rotate(0 10 12.5)\">\n        <text x=\"0\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#1864ab\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n            14\n        </text>\n    </g>\n</svg>\n</p>\n\n\n<h3 id=\"可视元素判定\"><a href=\"#可视元素判定\" class=\"headerlink\" title=\"可视元素判定\"></a>可视元素判定</h3><p>先来看下面图，当元素完全不在可视区域时候就视为当前元素不需要显示，只有与可视区域存在交叉或被包含时候视为需要显示。</p>\n<p align=\"center\">\n    <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 543 688.2044864933938\" width=\"543\" height=\"688.2044864933938\">\n        <rect x=\"0\" y=\"0\" width=\"543\" height=\"688.2044864933938\" fill=\"#ffffff\">\n        </rect>\n        <g stroke-linecap=\"round\" transform=\"translate(131.5 160) rotate(0 166.5 165)\">\n            <path d=\"M0.24 0.87 C123.88 0.38, 245 0.23, 333.59 -0.63 M0.33 -0.24 C91.33 1.23, 182.61 1.05, 333.53 0.44 M332.71 0.36 C334.02 131.26, 334.08 262.73, 333.44 329.43 M332.73 -0.55 C331.42 104.57, 332.58 208.14, 332.71 330.48 M333.66 330.41 C261.8 332.32, 189.92 331.22, 0.11 328.77 M332.9 330.29 C219.76 331.08, 108.19 330.97, 0.25 329.34 M1.29 329.08 C-0.24 224.07, -1.91 117.31, 0.65 1.27 M0.12 329.96 C1.08 251.48, 1.35 173.06, 0.12 -0.13\" stroke=\"#000000\" stroke-width=\"2\" fill=\"none\">\n            </path>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(143.5 10) rotate(0 46 58.49999999999999)\">\n            <path d=\"M1.28 1.63 C19.47 -0.96, 38.05 0.71, 91.07 -0.51 M91.28 -0.33 C93.59 38.93, 93.06 81.02, 93.28 118.93 M92.53 116.37 C59.12 116.25, 26.55 117.45, -0.84 117.32 M-1.62 115.19 C1.37 88.48, -0.83 55.93, 1.4 -1.7\" stroke=\"#364fc7\" stroke-width=\"1.5\" fill=\"none\" stroke-dasharray=\"8 9\">\n            </path>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(249.5 11.5) rotate(0 46 86.5)\">\n            <path d=\"M1.63 0.65 C27.02 -0.17, 56.51 -1.52, 91.49 0.79 M-0.17 0.95 C24.8 1.01, 51.19 0.97, 92.96 0.65 M91.37 0.67 C91.08 38.12, 92.27 72.12, 92.32 172.15 M91.09 0.37 C92.12 41.76, 90.9 85.68, 91.15 172.24 M92.63 173.64 C56.95 172.29, 21.57 171.46, 0.77 172.29 M91.23 172.91 C60.69 173.15, 27.94 172.42, 0.21 173.31 M0.65 173.07 C-3.41 105.29, -0.68 41.62, -1.26 -1.19 M-0.37 172.63 C-0.28 124.36, -0.11 76.74, 0.33 0.72\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n            </path>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(354.5 14.5) rotate(0 46 46.49999999999999)\">\n            <path d=\"M0.65 -0.8 C29.62 0.12, 57.47 -1.26, 92.79 -0.52 M93.89 -0.8 C93.03 33.92, 92.95 66.67, 93.29 91.22 M92.67 92.45 C67.99 93.35, 39.86 93.03, -0.85 91.91 M0.73 94.59 C-0.71 67.9, 2.16 42.79, -1.52 1.67\" stroke=\"#364fc7\" stroke-width=\"1.5\" fill=\"none\" stroke-dasharray=\"8 9\">\n            </path>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(144.5 143.5) rotate(0 46 58.5)\">\n            <path d=\"M-0.8 0.42 C34.36 -1.23, 66.48 0.49, 91.48 0.96 M-0.4 0.68 C25.07 -0.23, 49.54 -0.22, 91.11 -0.21 M91.45 1.64 C92.27 37.35, 91.95 75.53, 90.91 116.22 M92.8 -0.73 C90.52 26.31, 90.09 50.46, 92.84 117.49 M92.25 116.02 C61.78 115.48, 32 116.59, 1 116.7 M92.91 116.76 C60.88 115.95, 29.22 117.23, 0.85 117.94 M-1.78 115.91 C0.57 91.61, -1.64 61.3, -0.45 0.34 M0.01 116.4 C0.62 82.43, 0.77 48.94, 0.77 0.48\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n            </path>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(356.5 137.5) rotate(0 46 58.5)\">\n            <path d=\"M0.42 0.87 C34.17 -0.14, 70.98 -0.15, 92.96 -0.72 M0.68 0.78 C26.71 1.33, 52.79 -0.52, 91.79 0.26 M93.64 0.64 C91.55 31.72, 91.54 61.71, 91.22 115.38 M91.27 -0.42 C93.13 23.66, 91.67 49.86, 92.49 117.3 M91.02 117.16 C59.69 117.88, 30.3 118.12, -0.3 117.85 M91.76 117.37 C70.56 118.05, 51.36 118.69, 0.94 116.33 M-1.09 117.95 C1.82 76.82, -1.23 38.71, 0.34 -0.12 M-0.6 117.18 C0.25 86.62, 1.15 56.33, 0.48 0.64\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n            </path>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(251.5 200.5) rotate(0 46 58.5)\">\n            <path d=\"M0.87 -0.93 C30.07 0.6, 60.63 0.77, 91.28 -0.33 M0.78 0.64 C37.27 0.02, 71.72 -0.84, 92.26 -0.32 M92.64 -0.84 C92 38.14, 90.59 77.2, 90.38 115.19 M91.58 0.7 C92.08 38.63, 93.77 79.26, 92.3 117.31 M92.16 115.18 C62.23 115.84, 31.93 116.24, 0.85 115.45 M92.37 116.03 C65.4 117.09, 39.22 117.73, -0.67 117.33 M0.95 118.86 C-0.22 80.31, 0.59 46.34, -0.12 -0.75 M0.18 116.82 C0.32 86.92, 0.76 55.89, 0.64 -0.76\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n            </path>\n        </g>\n        <g transform=\"translate(186 56) rotate(0 3.5 12.5)\">\n            <text x=\"3.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                1\n            </text>\n        </g>\n        <g transform=\"translate(287.5 85.5) rotate(0 8 12.5)\">\n            <text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                2\n            </text>\n        </g>\n        <g transform=\"translate(392.5 48.5) rotate(0 8 12.5)\">\n            <text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                3\n            </text>\n        </g>\n        <g transform=\"translate(395 183.5) rotate(0 7.5 12.5)\">\n            <text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                4\n            </text>\n        </g>\n        <g transform=\"translate(183.5 189.5) rotate(0 7 12.5)\">\n            <text x=\"7\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                5\n            </text>\n        </g>\n        <g transform=\"translate(290 246.5) rotate(0 7.5 12.5)\">\n            <text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                6\n            </text>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(143.5 283.5) rotate(0 46 58.5)\">\n            <path d=\"M-0.33 1.89 C24.4 1.69, 51.96 1.61, 93.93 1.29 M-0.32 0.33 C19.12 0.58, 39.12 -0.66, 92.16 -0.43 M90.19 0.73 C93.13 27.27, 90.69 58.87, 90.3 115.48 M92.31 0.32 C92.69 44.4, 92.65 88.87, 92.38 116.65 M90.45 116.83 C61.6 116.92, 28.32 115.45, 0.42 117.61 M92.33 117.03 C55.68 115.84, 21.62 117.31, -0.63 116.41 M-0.75 116.26 C-0.18 83.32, 0.16 51.66, 0.67 1.44 M-0.76 117.71 C-0.41 72.95, 0.1 29.7, -0.27 -0.63\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n            </path>\n        </g>\n        <g transform=\"translate(181 329.5) rotate(0 8.5 12.5)\">\n            <text x=\"8.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                8\n            </text>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(251.5 341.5) rotate(0 46 58.5)\">\n            <path d=\"M-0.8 1.36 C25.84 0.41, 50.5 0.42, 90.22 -0.42 M-0.28 0.82 C30.35 -0.73, 60.22 -0.73, 91.46 -0.39 M93.59 -1.46 C90.09 27.01, 89.24 49.7, 93.67 117.97 M92.12 -0.49 C92.45 37.73, 92.75 76.93, 92.5 116.85 M93.81 116.53 C61.25 114.99, 29.43 117.53, 1.7 118.89 M91.11 116.45 C71.04 117.96, 48.51 116.44, -0.22 117.17 M0.03 115.8 C0.8 82.24, 1.11 49.66, 1.54 0.96 M0.15 117.07 C1.55 75.31, 0.62 31.12, -0.92 0.03\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n            </path>\n        </g>\n        <g transform=\"translate(290.5 387.5) rotate(0 7 12.5)\">\n            <text x=\"7\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                9\n            </text>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(360.5 402.5) rotate(0 46 58.5)\">\n            <path d=\"M1.56 1.28 C38.23 0.67, 70.83 -1.05, 92.53 -0.63 M0.32 -0.42 C30.82 -1.18, 60.78 -1.15, 91.19 -0.91 M91.15 1.4 C91.23 37.87, 94.61 79.74, 92.61 117.63 M92.08 -0.91 C92.53 38.48, 92.65 77.51, 92.42 116.23 M92.75 115.07 C65.61 117.4, 40.07 118.67, -1.34 117.65 M92.48 117.93 C63.46 115.9, 35.94 116.67, -0.06 116.63 M0.37 116.63 C0.65 87.65, 1.53 56.37, 1.29 -1.53 M0.66 117.94 C-0.45 72.99, -1.1 30.27, 0.48 0.92\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n            </path>\n        </g>\n        <g transform=\"translate(396 448.5) rotate(0 10.5 12.5)\">\n            <text x=\"10.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                10\n            </text>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(357.5 269.5) rotate(0 46 58.5)\">\n            <path d=\"M1.93 1.29 C32.09 -1.01, 68.27 -1.22, 92.67 -0.55 M0.16 -0.43 C34.6 -0.01, 69.47 -0.52, 92.37 0.8 M90.3 -1.52 C93.18 27.52, 92.11 53.73, 92.64 117.25 M92.38 -0.35 C92.6 29.19, 92.52 57.9, 91.91 117.91 M92.42 117.61 C68.27 118, 39.8 116.76, 0.07 115.22 M91.37 116.41 C69.19 118.03, 46.77 117.48, -0.37 117.01 M0.67 118.44 C1.33 89.86, 1.07 59.27, 1.42 0.3 M-0.27 116.37 C-1.69 81.11, -0.29 46.1, 0.96 0.17\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n            </path>\n        </g>\n        <g transform=\"translate(397 315.5) rotate(0 6.5 12.5)\">\n            <text x=\"6.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                7\n            </text>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(253.5 481.5) rotate(0 46 58.5)\">\n            <path d=\"M-1.78 -0.42 C34.03 -1.23, 67.67 -1.15, 93.64 0.64 M-0.54 -0.39 C22.93 -0.51, 47.85 1.19, 91.27 -0.42 M93.67 0.97 C91.61 43.94, 91.64 86.86, 91.02 117.16 M92.5 -0.15 C92.87 23.7, 92.36 49.86, 91.76 117.37 M93.7 118.89 C71.96 117.94, 54.67 115.5, -1.09 117.95 M91.78 117.17 C55.77 116.08, 19.3 116.47, -0.6 117.18 M1.54 117.96 C0.89 82.51, 1.02 51.38, 0.14 1.32 M-0.92 117.03 C0.8 71.86, 1.28 25.05, 0.07 0.74\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n            </path>\n        </g>\n        <g transform=\"translate(288.5 527.5) rotate(0 11 12.5)\">\n            <text x=\"11\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                12\n            </text>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(148.5 424.5) rotate(0 46 58.5)\">\n            <path d=\"M0.53 -0.63 C34.21 -0.36, 68.73 0.84, 91.16 0.32 M-0.81 -0.91 C24.04 1.16, 46.63 -0.06, 92.7 -0.85 M92.61 0.63 C93.62 26.46, 91.99 52.58, 90.18 117.77 M92.42 -0.77 C92.5 31.87, 92.35 62.3, 91.03 117.21 M90.66 117.65 C61.65 116.09, 30.07 118.82, 1.86 115.74 M91.94 116.63 C69.5 117.17, 47.14 117.34, -0.18 117.33 M1.29 115.47 C0.51 73.76, -0.76 31.24, 1.87 -0.55 M0.48 117.92 C2.04 89.45, 1.14 62.3, -0.87 -0.81\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n            </path>\n        </g>\n        <g transform=\"translate(188 470.5) rotate(0 6.5 12.5)\">\n            <text x=\"6.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                11\n            </text>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(150.5 558.5) rotate(0 46 58.5)\">\n            <path d=\"M0.67 -0.55 C27.29 0.93, 50.46 0.61, 91.15 -1.09 M92.73 1.59 C89.59 29.67, 92.45 59.33, 90.48 118.67 M92.64 117.25 C58.94 117.45, 26.03 118.06, -0.71 118 M-0.17 118.81 C-0.97 84.42, -2.43 50.77, 0.61 1.7\" stroke=\"#364fc7\" stroke-width=\"1.5\" fill=\"none\" stroke-dasharray=\"8 9\">\n            </path>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(362.5 544.5) rotate(0 46 58.5)\">\n            <path d=\"M1.64 0.64 C23.85 0.58, 48.53 -0.83, 91.22 -1.62 M90.54 -0.85 C93.83 22.81, 90.91 50.69, 92.97 117.61 M91.02 117.16 C59.69 117.88, 30.3 118.12, -0.3 117.85 M-0.47 117.75 C-1.83 91.39, 0.71 66.63, 1.89 -1.34\" stroke=\"#364fc7\" stroke-width=\"1.5\" fill=\"none\" stroke-dasharray=\"8 9\">\n            </path>\n        </g>\n        <g transform=\"translate(398 590.5) rotate(0 10.5 12.5)\">\n            <text x=\"10.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                13\n            </text>\n        </g>\n        <g transform=\"translate(184.5 603) rotate(0 10 12.5)\">\n            <text x=\"0\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#1864ab\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                14\n            </text>\n        </g>\n        <g stroke-linecap=\"round\">\n            <g transform=\"translate(487.1804903262407 12.750000000000014) rotate(0 3.6758362127011424 72.03529622842932)\">\n                <path d=\"M1.35 0.68 C3.65 11.83, 13.85 44.93, 12.72 68.64 C11.58 92.36, -3.16 130.51, -5.45 142.96 M-1.36 -1.42 C0.73 10.1, 10.6 48.01, 10.89 72.49 C11.18 96.98, 3.48 133.32, 0.38 145.49\" stroke=\"#e67700\" stroke-width=\"1\" fill=\"none\">\n                </path>\n            </g>\n        </g>\n        <g stroke-linecap=\"round\">\n            <g transform=\"translate(117.53441886727751 157.75) rotate(0 -10.223491209581084 166.2962683300674)\">\n                <path d=\"M0.05 2.79 C-3.09 27.9, -20.26 97.29, -20.73 151.57 C-21.2 205.85, -5.76 298.74, -2.79 328.47 M-3.37 1.84 C-6.76 26.14, -24.26 93.14, -23.23 147.96 C-22.19 202.78, -0.45 299.99, 2.82 330.75\" stroke=\"#2b8a3e\" stroke-width=\"1\" fill=\"none\">\n                </path>\n            </g>\n        </g>\n        <g transform=\"translate(511 10.75) rotate(0 11 70)\">\n            <text x=\"0\" y=\"21\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#e67700\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                已\n            </text>\n            <text x=\"0\" y=\"49\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#e67700\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                滚\n            </text>\n            <text x=\"0\" y=\"77\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#e67700\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                动\n            </text>\n            <text x=\"0\" y=\"105\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#e67700\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                高\n            </text>\n            <text x=\"0\" y=\"133\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#e67700\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                度\n            </text>\n        </g>\n        <g transform=\"translate(68 242.75) rotate(0 10 65)\">\n            <text x=\"0\" y=\"19\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"17.647058823529395px\" fill=\"#2b8a3e\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                可\n            </text>\n            <text x=\"0\" y=\"45\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"17.647058823529395px\" fill=\"#2b8a3e\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                视\n            </text>\n            <text x=\"0\" y=\"71\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"17.647058823529395px\" fill=\"#2b8a3e\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                区\n            </text>\n            <text x=\"0\" y=\"97\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"17.647058823529395px\" fill=\"#2b8a3e\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                高\n            </text>\n            <text x=\"0\" y=\"123\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"17.647058823529395px\" fill=\"#2b8a3e\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                度\n            </text>\n        </g>\n        <g stroke-linecap=\"round\">\n            <g transform=\"translate(126 10.75) rotate(0 -41.557524843499436 334.64067246239637)\">\n                <path d=\"M-2.22 2.78 C-15.51 51.66, -82.99 184.74, -82.27 295.52 C-81.55 406.3, -11.85 606.05, 2.08 667.45 M1.78 1.83 C-11.78 49.64, -85.13 180.83, -85.2 291.06 C-85.26 401.3, -13.23 600.77, 1.4 663.26\" stroke=\"#5f3dc4\" stroke-width=\"1\" fill=\"none\">\n                </path>\n            </g>\n        </g>\n        <g transform=\"translate(10 218.75) rotate(0 11 84)\">\n            <text x=\"0\" y=\"21\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                瀑\n            </text>\n            <text x=\"0\" y=\"49\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                布\n            </text>\n            <text x=\"0\" y=\"77\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                流\n            </text>\n            <text x=\"0\" y=\"105\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                总\n            </text>\n            <text x=\"0\" y=\"133\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                高\n            </text>\n            <text x=\"0\" y=\"161\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                度\n            </text>\n        </g>\n    </svg>\n</p>\n\n<p>因为上面瀑布流的实现采用的是 position 定位的，所以我们完全能知道所有元素距离顶部的距离，很容易计算出与可视区域交叉位置。</p>\n<p><strong>元素偏移位置 &lt; 滚动高度+可视区域高度  &amp;&amp; 元素偏移位置 + 元素高度 &gt; 滚动高度</strong></p>\n<p>如果只渲染可视区域范围，滚动时候会存在白屏再出现，可视适当的扩大渲染区域，例如把上一屏和下一屏都算进来，进行预先渲染。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> top = scrollTop - clientHeight</span><br><span class=\"line\"><span class=\"keyword\">const</span> bottom = scrollTop + clientHeight * <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> visibleList = data.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">_top</span> + item.<span class=\"property\">height</span> &gt; top &amp;&amp; item.<span class=\"property\">_top</span> &lt; bottom)</span><br></pre></td></tr></table></figure>\n\n<p>然后通过监听滚动事件，根据滚动位置去处理筛选数。这里会存在一个隐藏性能问题，当滚动加载数据比较多的时候，滚动事件触发也是比较快的，每一次都进行一次遍历，也是比较消耗性能的。可以适当控制一下事件触发频率，当然这也只是治标不治本，归根倒是查询显示元素方法问题。</p>\n<p><strong>标记下标</strong><br>应为列表数据的 _top 值是从小到大正序的，所以我们可以标记在可视区元素的下标，当发生滚动的时候，我们直接从标记下标开始查找，根据滚动分几种情况来判断。<br>1&gt; 如果滚动后，标记下标元素还在可视范围内，可以直接从标记下标二分查找，往上往下找直到不符合条件就停止。<br>2&gt;  如果滚动后，标记下标元素不在可视范围内，根据滚动方向往上或者往下去查找。这个时候存在两种情况，一种是滚动幅度比较小，直接根据当前下标往上或者往下找。当用户拖动滚动条滚动幅度特别大的时候，可以将下标往上或者往下偏移，偏移量根据 <strong>滚动高度&#x2F;预估平均高度*列数</strong> 去估算一个，然后在根据这个预估下标进行查找。找到后然后缓存一个新的下标。</p>\n<h3 id=\"抖动问题\"><a href=\"#抖动问题\" class=\"headerlink\" title=\"抖动问题\"></a>抖动问题</h3><p>我们 absolute 定位会撑开容器高度，但是滚动时候还是会存在抖动问题，我们可以自定义一个元素高度去撑开，这个元素高度也就是我们之前计算的每一列累计高度 sumHeight 中最大的那个了。</p>\n<h3 id=\"过渡动画问题\"><a href=\"#过渡动画问题\" class=\"headerlink\" title=\"过渡动画问题\"></a>过渡动画问题</h3><p>当列宽发生变化时，元素位置发生了变化，在可视区域的元素也发生了变化，有些元素可能之前并没有渲染，所以使用上面 CSS 会存在新出现元素不会产生过渡动画。好在我们能够很清楚的知道元素原位置信息和新的位置信息，我们可以利用 <strong>FLIP</strong> 来处理这动画，很容易控制元素过渡变化，如果有些元素之前不存在，就没有原位置信息，我们可以在可视范围内给他随机生成一个位置进行过渡，保证每一个元素都有个过渡效果避免僵硬。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面情况仅仅是针对动态列数量，又能计算出高度情况下优化，可能业务中也是可能存在每项高度是动态的，这个时候可以采用预估元素高度在渲染后缓存大小位置等信息，或者离屏渲染等方案解决做出进一步的优化处理。</p>\n","excerpt":"<p>瀑布流算是比较常见的布局了，一个般常见纵向瀑布流的交互，当我们滚动到底的时候加载下一页的数据追加到上去。因为一次加载的数据量不是很多，页面操作是也不会有太大的性能消耗。但是如果当你一直往下滚动加载，加载几十页的时候，就会开始感觉不那么流畅的，这是因为虽然每次操作的很少，但是页面的 DOM 越来越多，内存占用也会增大，而且发生重排重绘时候浏览器计算量耗时也会增大，就导致了慢慢不能那么流畅了。这个时候可以选择结合虚拟列表方式使用，虚拟列表本身就是用来解决超长列表时的处理方案。</p>","more":"<h2 id=\"瀑布流\"><a href=\"#瀑布流\" class=\"headerlink\" title=\"瀑布流\"></a>瀑布流</h2><p>瀑布流的实现方式有很多种，大体分为：</p>\n<ul>\n<li>CSS： CSS 实现的有 multi-column、grid ，CSS 实现存在一定局限性，例如无法调整顺序，当元素高度差异较大时候不是很好处理各列间隔差等。</li>\n<li>JavaScript：JavaScript 实现的有 JavaScript + flex、JavaScript + position，JavaScript 实现兼容性较好，可控制性高。</li>\n</ul>\n<p>因为我的瀑布流是可提前计算元素宽高，列数是动态的，所以采用了 JavaScript + position 来配合 虚拟列表 进行优化。</p>\n<h3 id=\"js-flex-实现\"><a href=\"#js-flex-实现\" class=\"headerlink\" title=\"js + flex 实现\"></a>js + flex 实现</h3><p>如果你的瀑布流 列是固定，列宽不固定 的，使用 flex 是个很好选择，当你的容器宽度变话时候，每一列宽度会自适应，大致实现方式</p>\n<p>将你的数据分为对应列数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data1 = [], <span class=\"comment\">//第一列</span></span><br><span class=\"line\">    data2 = [], <span class=\"comment\">//第二列</span></span><br><span class=\"line\">    data3 = [], <span class=\"comment\">//第三列</span></span><br><span class=\"line\">    i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt; data.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    data1.<span class=\"title function_\">push</span>(data[i++]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; data.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        data2.<span class=\"title function_\">push</span>(data[i++]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; data.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        data3.<span class=\"title function_\">push</span>(data[i++]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后将你的每列数据插入进去就可以了，设置 list 为 flex 容器，并设置主轴方向为 row</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 第一列 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;column&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- more items--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 第二列 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;column&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- more items--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 第三列 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;column&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- more items--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"js-position-实现\"><a href=\"#js-position-实现\" class=\"headerlink\" title=\"js + position 实现\"></a>js + position 实现</h3><p>这种方式比较适合 列定宽，列数量不固定情况，而且最好能计算出每个元素的大小。</p>\n<p>大致 HTML 结构如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;list-item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- more items--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ui</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.list</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">position</span>: relative;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.list-item</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">position</span>: absolute;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>JavaScript 部分，首先需要获取 list 宽度，根据 list.width&#x2F;列宽 计算出列的数量，然后根据列数量去分组数据和计算位置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以列宽为300 间隔为20 为例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> catchColumn = (<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"built_in\">parseInt</span>((dom.<span class=\"property\">clientWidth</span> + <span class=\"number\">20</span>) / (<span class=\"number\">300</span> + <span class=\"number\">20</span>)), <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">toTwoDimensionalArray</span> = (<span class=\"params\">count</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; count; index++) &#123;</span><br><span class=\"line\">        list.<span class=\"title function_\">push</span>([])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">minValIndex</span> = (<span class=\"params\">arr = []</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> val = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(...arr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.<span class=\"title function_\">findIndex</span>(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> i === val)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 缓存累计高度</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sumHeight = <span class=\"title function_\">toTwoDimensionalArray</span>(catchColumn)</span><br><span class=\"line\"></span><br><span class=\"line\">data.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取累计高度最小那列</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> minIndex = <span class=\"title function_\">minValIndex</span>(sumHeight)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> width = <span class=\"number\">0</span> <span class=\"comment\">// 这里宽高更具需求计算出来</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> height = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\titem.<span class=\"property\">_top</span> = minIndex * (<span class=\"number\">300</span> + <span class=\"number\">20</span>) <span class=\"comment\">// 缓存位置信息，后面会用到</span></span><br><span class=\"line\">    item.<span class=\"property\">style</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">width</span>: width + <span class=\"string\">&#x27;px&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">height</span>: height + <span class=\"string\">&#x27;px&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 计算偏移位置</span></span><br><span class=\"line\">        <span class=\"attr\">transform</span>: <span class=\"string\">`translate(<span class=\"subst\">$&#123;minIndex * (<span class=\"number\">300</span> + <span class=\"number\">20</span>)&#125;</span>px, <span class=\"subst\">$&#123;sumHeight[minIndex]&#125;</span>px)`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sumHeight[minIndex] = sumHeight[minIndex] + height + <span class=\"number\">20</span> </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态列数\"><a href=\"#动态列数\" class=\"headerlink\" title=\"动态列数\"></a>动态列数</h3><p>可以使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/ResizeObserver\">ResizeObserver</a>(现代浏览器兼容比较好了) 监听容器元素大小变化，当宽度变化时重新计算列数量，当列数量发生变化时重新计算每项的位置信息。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> observer = <span class=\"title function_\">debounce</span>(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> column = <span class=\"title function_\">updateVisibleContainerInfo</span>(visibleContainer)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (column !== catchColumn) &#123;</span><br><span class=\"line\">        catchColumn = column</span><br><span class=\"line\">        <span class=\"comment\">// 重新计算</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">resetLayout</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">300</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> resizeObserver = <span class=\"keyword\">new</span> <span class=\"title class_\">ResizeObserver</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"title function_\">observer</span>(e));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开始监听</span></span><br><span class=\"line\">resizeObserver.<span class=\"title function_\">observe</span>(dom);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"过渡动画\"><a href=\"#过渡动画\" class=\"headerlink\" title=\"过渡动画\"></a>过渡动画</h3><p>当列数量发生变化时候，元素项的位置很多都会发生变化，如下图，第 4 项的位置从第 3 列变到了第 4 项，如果不做处理会显得比较僵硬。</p>\n<p align=\"center\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 460 298\" width=\"460\" height=\"298\">\n    <rect x=\"0\" y=\"0\" width=\"460\" height=\"298\" fill=\"#ffffff\">\n    </rect>\n    <g stroke-linecap=\"round\" transform=\"translate(10 113) rotate(0 220 87.5)\">\n        <path d=\"M-0.49 0.17 C99.14 1.36, 198.27 0.42, 439.01 -0.6 M-0.08 -0.06 C124.83 -1.08, 249.03 -1.15, 439.88 -0.3 M441.52 -1.12 C441.14 56.74, 440.97 108.16, 440.42 174.59 M440.47 0.31 C441.08 41.11, 441.73 83.9, 439.17 175.32 M440.53 174.55 C306.2 173.35, 173.32 173.64, -0.03 175.37 M439.94 175.07 C325.72 174.97, 210.49 174.53, 0.34 174.72 M-1.31 173.92 C-1.32 128.03, -0.73 80.94, -0.75 0.21 M-0.02 174.92 C-0.93 132.04, -1.82 87, 0.93 0.03\" stroke=\"#000000\" stroke-width=\"2\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(19 10) rotate(0 46 58.5)\">\n        <path d=\"M0.34 0.61 C36.77 1.67, 70.84 -1.52, 90.79 -0.34 M-0.11 0.63 C19.8 0.16, 39.54 -0.08, 91.41 0.15 M90.88 1.39 C93.57 34.66, 89.93 67.3, 91.59 115.77 M92.31 -0.64 C92.08 46.58, 93.12 92.3, 92.32 117.02 M91.09 115.47 C68.38 116.27, 45.77 117.43, 0.74 116.21 M92.14 117.51 C58.99 116, 24.94 117.57, -0.57 116.74 M-1.08 115.01 C0.47 84.99, 1.3 55.04, 0.21 -1.01 M-0.08 117.12 C-0.38 74.15, -1.73 33.8, 0.03 0.41\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(125 11.5) rotate(0 46 86.5)\">\n        <path d=\"M0.61 0.84 C24.89 -1.19, 45.37 -1.36, 91.66 -1.68 M0.63 -0.07 C31.97 -0.1, 63.69 -0.48, 92.15 -0.14 M93.39 1.68 C94.53 48.35, 93.73 100.21, 90.77 174.96 M91.36 -0.63 C92.84 62.73, 91.99 124.94, 92.02 172.52 M90.47 172.58 C69.22 172.76, 48.83 173.32, -0.79 174.21 M92.51 173.17 C63.97 172.42, 38.41 172.56, -0.26 172.62 M-1.99 173.94 C-0.26 115.9, 0.39 55.47, -1.01 1.19 M0.12 173.73 C-0.74 104.14, 0.97 36.58, 0.41 0.42\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(230 14.5) rotate(0 46 46.5)\">\n        <path d=\"M0.84 1.22 C22.02 -2.25, 44.91 -0.62, 90.32 0.95 M-0.07 0.01 C25.86 -0.81, 51.54 -0.43, 91.86 -0.09 M93.68 1.22 C89.52 35.39, 91.07 68.71, 93.96 94.2 M91.37 0.02 C92.71 31.48, 92.61 64.64, 91.52 92.34 M91.58 91.79 C59.74 92.25, 27.87 91.5, 1.21 92.9 M92.17 92.1 C64.74 94.15, 38.33 93.21, -0.38 93.4 M0.94 91.6 C2.28 70.46, 0.71 48.42, 1.19 1.89 M0.73 92.22 C-0.56 66.24, 0.1 38.04, 0.42 -0.53\" stroke=\"#364fc7\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(344 15.5) rotate(0 46 58.5)\">\n        <path d=\"M-1.03 -1.97 C29.22 -0.9, 59.17 0.39, 91.67 -0.23 M91.58 -0.47 C90.73 42.75, 91.63 84.72, 93.52 115.88 M90.04 117.42 C57.59 116.33, 25.96 118.76, 0.95 117.63 M0.84 115.34 C1.37 89.38, -0.22 60.36, 1.05 -0.91\" stroke=\"#c92a2a\" stroke-width=\"4.5\" fill=\"none\" stroke-dasharray=\"8 12\">\n        </path>\n    </g>\n    <g transform=\"translate(61.5 56) rotate(0 3.5 12.5)\">\n        <text x=\"3.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            1\n        </text>\n    </g>\n    <g transform=\"translate(163 85.5) rotate(0 8 12.5)\">\n        <text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            2\n        </text>\n    </g>\n    <g transform=\"translate(268 48.5) rotate(0 8 12.5)\">\n        <text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            3\n        </text>\n    </g>\n    <g transform=\"translate(382.5 61.5) rotate(0 7.5 12.5)\">\n        <text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            4\n        </text>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(232.5 129.75) rotate(0 46 58.5)\">\n        <path d=\"M0.1 -0.36 C35.38 -0.89, 70.24 0.22, 93.8 0.98 M0.7 0.69 C34.69 -0.96, 68.87 -1.35, 91.53 0.38 M93.77 -1.89 C91.58 30.33, 93.21 60.5, 91.19 117.89 M91.77 0.37 C90.74 34.26, 90.78 69.6, 92.47 116.82 M91.36 118.13 C65.56 115.98, 43.28 118.35, -1.28 115.14 M91.17 117.69 C58.79 117.86, 25.56 117.87, -0.5 117.24 M1.32 116.16 C-0.3 78.71, 0.11 38.79, -0.99 -1.08 M0.19 116.09 C1.6 91.53, -0.11 65.64, 0.55 -0.81\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g transform=\"translate(271 175.75) rotate(0 7.5 12.5)\">\n        <text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            4\n        </text>\n    </g>\n</svg>\n</p>\n\n<p>好在我们使用了 transform（也是为什么不使用 top、left 原因，transform 动画性能更高） 进行位置偏移，可以直接使用 transition 过渡。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.list-item</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: transform .<span class=\"number\">5s</span> ease-in-out;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用虚拟列表\"><a href=\"#使用虚拟列表\" class=\"headerlink\" title=\"使用虚拟列表\"></a>使用虚拟列表</h2><h3 id=\"瀑布流存在的问题\"><a href=\"#瀑布流存在的问题\" class=\"headerlink\" title=\"瀑布流存在的问题\"></a>瀑布流存在的问题</h3><p>很多虚拟列表的都是使用的单列定高使用方式，但是瀑布流使用虚拟列表方式有点不同，瀑布流存在多列且时是错位的。所以常规 length*height 为列表总高度，根据 scrollTop&#x2F;height 来确定下标方式就行不通了，这个时候高度需要根据瀑布流高度动态决定了，可显示元素也不能通过 starindex-endindex 去截取显示了。</p>\n<p>如下图：蓝色框的元素是不应该显示的，只有与可视区域存在交叉的元素才应该显示</p>\n<p align=\"center\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 353 758.5\" width=\"353\" height=\"758.5\">\n    <rect x=\"0\" y=\"0\" width=\"353\" height=\"758.5\" fill=\"#ffffff\">\n    </rect>\n    <g stroke-linecap=\"round\" transform=\"translate(10 117) rotate(0 166.5 250)\">\n        <path d=\"M0.72 1 C85.82 -0.51, 171.42 0.26, 333.25 0 M0.35 -0.53 C86.39 -0.22, 172.88 0.54, 332.59 -0.65 M333.72 -0.59 C331.75 138.3, 331.35 276.01, 333.39 499.35 M333.05 0.37 C331.22 121.97, 331.11 243.44, 333.2 499.61 M332.83 500.47 C221.23 497.05, 106.02 496.84, -0.33 499.21 M333.04 500.64 C253.92 500.48, 175.76 501.12, 0.15 499.67 M-0.64 500.38 C-1.44 333.69, -1.78 166.77, -0.16 -0.42 M-0.32 500.39 C1.58 380.41, 1.74 260.88, -0.19 -0.11\" stroke=\"#000000\" stroke-width=\"2\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(22 10) rotate(0 46 58.49999999999999)\">\n        <path d=\"M-1.06 -0.78 C31.6 -1.8, 68.39 -0.16, 90.86 0.72 M-0.27 -0.87 C31.57 -0.47, 62.36 -0.61, 91.06 0.06 M90.59 -0.72 C93.57 23.14, 92.92 48.07, 90.1 118.2 M92.59 0.64 C91.54 25.79, 91.84 48.77, 91.4 117.78 M91.63 117.89 C60.19 117.86, 32.15 118.89, 0.85 116.53 M92 116.75 C66.12 117.09, 41.53 116.61, 0.03 116.45 M-1.92 116.26 C0.71 74.42, -0.38 29.15, -1.19 0.01 M-0.27 116.88 C1.29 85.59, -0.09 54.8, 1 0.84\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(128 11.5) rotate(0 46 86.5)\">\n        <path d=\"M0.85 1.5 C26.04 1.21, 56.87 -0.75, 90.53 -0.61 M0.28 -0.1 C20.66 -0.77, 43.28 0.39, 91.41 -0.74 M90.36 1.13 C94.56 36.23, 91.37 72.5, 90.09 173.74 M92.89 0.38 C92.22 62.29, 91.71 123.93, 91.61 172.56 M91.14 173.54 C61.97 173.1, 32.44 173.8, 1.55 172.93 M92.45 172.99 C57.7 172.47, 22.59 172.26, 0.83 172.24 M1.63 171.19 C-1.73 134.92, -0.06 94.82, 0.92 1.1 M-0.33 172.76 C-1 136.8, -0.94 102.31, 0.87 0.64\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(233 14.5) rotate(0 46 46.49999999999999)\">\n        <path d=\"M1.5 -1.92 C34.3 0.56, 66.3 -1.85, 91.39 -1.4 M-0.1 -0.5 C35 0.7, 71.41 -0.85, 91.26 -0.87 M93.13 1.57 C90.61 31.6, 90.05 64.54, 92.74 94.22 M92.38 -0.15 C92.31 29.22, 91.53 59.37, 91.56 93.19 M92.54 92.29 C57.05 91.69, 21.9 94.16, -0.07 94.44 M91.99 92.93 C70.3 92.46, 48.32 94.24, -0.76 92.3 M-1.81 92.05 C1 61.66, 0.7 29.8, 1.1 -1.86 M-0.24 93.39 C-0.67 58.1, 0.62 23.18, 0.64 -0.54\" stroke=\"#364fc7\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(23 143.5) rotate(0 46 58.5)\">\n        <path d=\"M-0.16 1.91 C26.05 0.41, 48.97 1.49, 90.17 -1.4 M0.92 0.77 C26.78 -0.71, 53.96 0.27, 92.13 -0.34 M93.12 -0.54 C90.67 25.41, 89.85 54.4, 93.25 118.3 M92.52 1 C92.11 26.6, 92.41 53.9, 91.76 116.57 M92.4 116.38 C60.05 117.38, 32.44 118.87, 0.83 117.28 M91.77 116.5 C71.51 116.15, 52.53 115.85, -0.4 117.31 M-0.92 118.5 C0.74 89.1, 1.33 61.5, 1.99 0.49 M0.75 117.4 C0.41 87.58, 1.55 58.47, -0.01 -0.67\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(235 137.5) rotate(0 46 58.5)\">\n        <path d=\"M-0.69 -1.37 C32.19 0.55, 67.17 -0.66, 91.16 -1.7 M0.65 -0.73 C20.23 -0.89, 40.43 0.42, 91.79 0.1 M91.14 0.57 C92.73 38.01, 93.44 71.56, 90.28 116.5 M92.14 -0.86 C93.09 39.99, 92.35 80.06, 91.19 116.41 M92.62 115.77 C65.3 117.48, 37.88 118.13, 0.68 116.99 M92.24 116.5 C57.79 116.93, 25.79 118.32, -0.44 116.84 M-1.35 118.8 C-1.39 72.23, -0.63 30.25, -0.54 -1.07 M0.64 116.73 C0.24 87.22, 0.82 58.36, -0.39 -0.67\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(130 200.5) rotate(0 46 58.5)\">\n        <path d=\"M-0.81 0.62 C20.98 0.72, 45.28 -0.11, 93.5 0.68 M1 0.24 C27.03 -0.85, 54.07 0.63, 92.4 -0.44 M91.99 -1.35 C94.61 31.82, 91.23 65.8, 91.64 116.46 M91.05 0.64 C91.13 28.53, 90.81 57.97, 91.72 116.61 M92.58 116.45 C72.28 116.64, 49.65 115.97, -1.97 115.48 M91.14 117.5 C67.24 115.93, 40.92 116.91, -0.89 116.82 M-1.9 117.01 C-0.78 72.29, -0.77 27.7, -0.11 -0.07 M-0.48 117.72 C1.8 74.6, 1.55 32.84, -0.35 0.6\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g transform=\"translate(64.5 56) rotate(0 3.5 12.5)\">\n        <text x=\"3.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            1\n        </text>\n    </g>\n    <g transform=\"translate(166 85.5) rotate(0 8 12.5)\">\n        <text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            2\n        </text>\n    </g>\n    <g transform=\"translate(271 48.5) rotate(0 8 12.5)\">\n        <text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            3\n        </text>\n    </g>\n    <g transform=\"translate(273.5 183.5) rotate(0 7.5 12.5)\">\n        <text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            4\n        </text>\n    </g>\n    <g transform=\"translate(62 189.5) rotate(0 7 12.5)\">\n        <text x=\"7\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            5\n        </text>\n    </g>\n    <g transform=\"translate(168.5 246.5) rotate(0 7.5 12.5)\">\n        <text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            6\n        </text>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(22 283.5) rotate(0 46 58.5)\">\n        <path d=\"M-0.78 -0.59 C27.23 -0.65, 50.86 1.22, 91.41 0.37 M0.65 -0.88 C35.95 1.84, 70.95 1.2, 92.81 -0.47 M92.88 1.93 C93.54 24.45, 90.38 49.64, 92.62 117.53 M92.13 0.54 C93.6 38.02, 92.98 74.92, 92.32 116.73 M93.95 117.64 C73.79 117.41, 52.17 115.06, -0.16 117.48 M91.88 117.62 C58.53 116.44, 24.3 116.06, 0.44 117.84 M0.08 115.29 C2.68 92.32, 2.36 63.06, -0.71 1.62 M0.25 116.01 C-0.09 88.67, -1.08 57.96, -0.9 -0.7\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g transform=\"translate(59.5 329.5) rotate(0 8.5 12.5)\">\n        <text x=\"8.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            8\n        </text>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(130 341.5) rotate(0 46 58.5)\">\n        <path d=\"M1 -0.59 C32.65 2.4, 64.71 -1.19, 93.3 -1.76 M0.32 0.81 C33.12 -1.25, 67.48 -0.82, 92.44 0.96 M93.09 0.62 C92.64 42.41, 93.54 84.48, 92.26 118.08 M92.26 0.32 C92.53 43.1, 91.96 87.36, 92.98 117.32 M90.59 116.84 C58.51 118.16, 24.11 115.78, -0.24 118.24 M91.49 117.44 C57.61 117.08, 20.63 117.77, 0.04 116.14 M-1.46 116.29 C0.71 71.41, 0.36 28.31, 0.49 -1.98 M-0.73 116.1 C-1.66 74.26, -0.99 31.55, -0.82 0.7\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g transform=\"translate(169 387.5) rotate(0 7 12.5)\">\n        <text x=\"7\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            9\n        </text>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(239 402.5) rotate(0 46 58.5)\">\n        <path d=\"M-1.91 1.3 C27.56 1.23, 60.57 0.64, 92.63 1.61 M-0.49 0.44 C24.23 0.31, 46.63 -1.27, 92.54 0.31 M92.43 0.26 C93.31 39.73, 93.59 76.7, 92.52 117.64 M91.42 0.98 C91.3 32.62, 91.45 63.53, 91.3 116.92 M91.07 116.76 C63.44 118.68, 32.12 118.84, -1.02 117.88 M91.93 117.04 C55.82 116.98, 22.12 116.82, -0.73 116.65 M0.46 117.49 C-1.39 73.71, 2.24 27.13, -1.46 -1.8 M0.11 116.18 C0.66 90.47, 0.18 62.67, -0.63 -0.42\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g transform=\"translate(274.5 448.5) rotate(0 10.5 12.5)\">\n        <text x=\"10.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            10\n        </text>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(236 269.5) rotate(0 46 58.5)\">\n        <path d=\"M0.71 0.63 C21.11 -1.83, 37.16 -0.28, 91.01 0.88 M-0.99 0.54 C36.77 0.19, 73.11 0.64, 92.21 0.13 M92.27 0.52 C93.52 40.89, 91.15 81.19, 90.84 118.95 M91.68 -0.7 C92.73 39.09, 93.54 77.72, 91.54 116.88 M93.83 115.98 C59.56 118.55, 23.85 115.06, -0.13 117.08 M92.65 116.27 C71.92 118.53, 52.04 118.36, 0.23 117.25 M-0.67 115.54 C-2.57 92.09, -0.69 69.9, 0.22 -1.65 M-0.43 116.37 C-0.92 74.02, -1.25 30.48, 0 -0.28\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g transform=\"translate(275.5 315.5) rotate(0 6.5 12.5)\">\n        <text x=\"6.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            7\n        </text>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(132 481.5) rotate(0 46 58.5)\">\n        <path d=\"M-0.09 -0.12 C23.71 2.13, 48.58 -0.79, 90.97 -0.22 M0.86 -0.96 C20.51 0.59, 39.63 0.54, 92.21 0.07 M93.37 0.43 C90.65 34.55, 93.85 64.72, 91.87 116.49 M91.38 0.78 C91.26 30.42, 91.17 58.57, 91.8 117.59 M93.23 116.33 C63.71 114.95, 37.3 114.96, 0.33 116.58 M92.29 117.23 C55.88 116.15, 17.81 116.14, 0.34 117.36 M1.21 117.27 C0.07 78.92, 1.26 42.55, 0.64 0.41 M-0.61 116.09 C0.66 75.16, 0.77 33.51, 0.21 0.86\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g transform=\"translate(167 527.5) rotate(0 11 12.5)\">\n        <text x=\"11\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            12\n        </text>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(27 424.5) rotate(0 46 58.5)\">\n        <path d=\"M-1.07 -1.03 C24.24 -1.65, 47.55 0.29, 93.72 -1.92 M0.63 0.21 C36.37 -0.64, 73.15 -1.15, 92.68 0.21 M90.95 -0.13 C92.46 22.58, 92.47 48.66, 90.76 118.55 M91.28 -0.2 C93.5 29.99, 92.52 59.61, 92.62 116.67 M90.18 117.33 C64.28 119.8, 36.51 117.1, 0.57 117.46 M91.46 117.34 C58.76 116.52, 24 117.36, 0.61 117.13 M-1.43 117.64 C1.33 88.17, 0.63 58.67, -1.22 -1.82 M0.48 117.21 C0.68 76.25, -0.98 35.79, -0.77 0.36\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g transform=\"translate(66.5 470.5) rotate(0 6.5 12.5)\">\n        <text x=\"6.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            11\n        </text>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(29 558.5) rotate(0 46 58.5)\">\n        <path d=\"M1.81 0.03 C26.11 -2.26, 50.27 0.03, 92.69 -0.1 M-0.15 0.34 C30.65 -0.24, 59.96 -1.21, 92.97 -0.02 M91.82 1.12 C91.64 36.32, 91.7 75.52, 90.33 115.01 M92.13 0.61 C92.27 26.43, 92.61 54.51, 91.26 117.8 M91.96 117.34 C55.06 118.72, 18.7 116.9, 0.17 116.84 M92.42 116.04 C71.88 116.65, 53.23 117.9, 0.19 117.61 M0.06 115.34 C-0.02 78.36, 2.75 40.99, 0.23 -1.36 M-0.56 117.48 C-0.12 71.64, -0.45 24.91, 0.53 -0.14\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(241 544.5) rotate(0 46 58.5)\">\n        <path d=\"M-0.92 -1.7 C33.69 1.69, 65.55 2.11, 92.57 -1.76 M-0.52 -0.11 C33.19 1.17, 64.77 0.08, 92.94 0.81 M93.66 1.44 C92.34 35.96, 92.41 71.36, 92.77 118.36 M91.64 -0.63 C92.16 30.78, 92.24 61.78, 91.58 117.18 M93.34 116.25 C66.7 115.43, 39.37 118.67, 1.23 116.18 M91.34 116.92 C73.62 116.56, 52.63 116.57, -0.68 116.14 M1.81 118.41 C1.49 76.26, 1.67 32.91, 0.23 -1.96 M-0.6 117.22 C-0.29 92.07, -0.06 69.28, -0.44 0.17\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g transform=\"translate(276.5 590.5) rotate(0 10.5 12.5)\">\n        <text x=\"10.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            13\n        </text>\n    </g>\n    <g stroke-linecap=\"round\" transform=\"translate(134 631.5) rotate(0 46 58.5)\">\n        <path d=\"M-0.46 1.74 C25.38 -0.13, 46.51 2.25, 92.99 -1.32 M-0.72 -0.88 C26.22 -0.04, 54.35 0.01, 92.26 0.91 M92.72 -0.77 C92.54 41.38, 90.45 85.81, 92.21 115.79 M91.43 0.63 C90.62 37.79, 90.4 76, 92.03 116.12 M92 115.94 C67.24 118.96, 43.06 117.38, 0.31 116.54 M92.21 116.33 C72.71 117.24, 51.65 116.22, -0.83 117.88 M-0.29 118.94 C-1.61 68.79, 0.3 23.59, -1.8 -1.35 M0.13 116.21 C-0.88 81.19, -0.34 43.61, 0.78 -0.05\" stroke=\"#364fc7\" stroke-width=\"1\" fill=\"none\">\n        </path>\n    </g>\n    <g transform=\"translate(170 677.5) rotate(0 10 12.5)\">\n        <text x=\"10\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n            15\n        </text>\n    </g>\n    <g transform=\"translate(68 569) rotate(0 10 12.5)\">\n        <text x=\"0\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#1864ab\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n            14\n        </text>\n    </g>\n</svg>\n</p>\n\n\n<h3 id=\"可视元素判定\"><a href=\"#可视元素判定\" class=\"headerlink\" title=\"可视元素判定\"></a>可视元素判定</h3><p>先来看下面图，当元素完全不在可视区域时候就视为当前元素不需要显示，只有与可视区域存在交叉或被包含时候视为需要显示。</p>\n<p align=\"center\">\n    <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 543 688.2044864933938\" width=\"543\" height=\"688.2044864933938\">\n        <rect x=\"0\" y=\"0\" width=\"543\" height=\"688.2044864933938\" fill=\"#ffffff\">\n        </rect>\n        <g stroke-linecap=\"round\" transform=\"translate(131.5 160) rotate(0 166.5 165)\">\n            <path d=\"M0.24 0.87 C123.88 0.38, 245 0.23, 333.59 -0.63 M0.33 -0.24 C91.33 1.23, 182.61 1.05, 333.53 0.44 M332.71 0.36 C334.02 131.26, 334.08 262.73, 333.44 329.43 M332.73 -0.55 C331.42 104.57, 332.58 208.14, 332.71 330.48 M333.66 330.41 C261.8 332.32, 189.92 331.22, 0.11 328.77 M332.9 330.29 C219.76 331.08, 108.19 330.97, 0.25 329.34 M1.29 329.08 C-0.24 224.07, -1.91 117.31, 0.65 1.27 M0.12 329.96 C1.08 251.48, 1.35 173.06, 0.12 -0.13\" stroke=\"#000000\" stroke-width=\"2\" fill=\"none\">\n            </path>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(143.5 10) rotate(0 46 58.49999999999999)\">\n            <path d=\"M1.28 1.63 C19.47 -0.96, 38.05 0.71, 91.07 -0.51 M91.28 -0.33 C93.59 38.93, 93.06 81.02, 93.28 118.93 M92.53 116.37 C59.12 116.25, 26.55 117.45, -0.84 117.32 M-1.62 115.19 C1.37 88.48, -0.83 55.93, 1.4 -1.7\" stroke=\"#364fc7\" stroke-width=\"1.5\" fill=\"none\" stroke-dasharray=\"8 9\">\n            </path>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(249.5 11.5) rotate(0 46 86.5)\">\n            <path d=\"M1.63 0.65 C27.02 -0.17, 56.51 -1.52, 91.49 0.79 M-0.17 0.95 C24.8 1.01, 51.19 0.97, 92.96 0.65 M91.37 0.67 C91.08 38.12, 92.27 72.12, 92.32 172.15 M91.09 0.37 C92.12 41.76, 90.9 85.68, 91.15 172.24 M92.63 173.64 C56.95 172.29, 21.57 171.46, 0.77 172.29 M91.23 172.91 C60.69 173.15, 27.94 172.42, 0.21 173.31 M0.65 173.07 C-3.41 105.29, -0.68 41.62, -1.26 -1.19 M-0.37 172.63 C-0.28 124.36, -0.11 76.74, 0.33 0.72\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n            </path>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(354.5 14.5) rotate(0 46 46.49999999999999)\">\n            <path d=\"M0.65 -0.8 C29.62 0.12, 57.47 -1.26, 92.79 -0.52 M93.89 -0.8 C93.03 33.92, 92.95 66.67, 93.29 91.22 M92.67 92.45 C67.99 93.35, 39.86 93.03, -0.85 91.91 M0.73 94.59 C-0.71 67.9, 2.16 42.79, -1.52 1.67\" stroke=\"#364fc7\" stroke-width=\"1.5\" fill=\"none\" stroke-dasharray=\"8 9\">\n            </path>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(144.5 143.5) rotate(0 46 58.5)\">\n            <path d=\"M-0.8 0.42 C34.36 -1.23, 66.48 0.49, 91.48 0.96 M-0.4 0.68 C25.07 -0.23, 49.54 -0.22, 91.11 -0.21 M91.45 1.64 C92.27 37.35, 91.95 75.53, 90.91 116.22 M92.8 -0.73 C90.52 26.31, 90.09 50.46, 92.84 117.49 M92.25 116.02 C61.78 115.48, 32 116.59, 1 116.7 M92.91 116.76 C60.88 115.95, 29.22 117.23, 0.85 117.94 M-1.78 115.91 C0.57 91.61, -1.64 61.3, -0.45 0.34 M0.01 116.4 C0.62 82.43, 0.77 48.94, 0.77 0.48\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n            </path>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(356.5 137.5) rotate(0 46 58.5)\">\n            <path d=\"M0.42 0.87 C34.17 -0.14, 70.98 -0.15, 92.96 -0.72 M0.68 0.78 C26.71 1.33, 52.79 -0.52, 91.79 0.26 M93.64 0.64 C91.55 31.72, 91.54 61.71, 91.22 115.38 M91.27 -0.42 C93.13 23.66, 91.67 49.86, 92.49 117.3 M91.02 117.16 C59.69 117.88, 30.3 118.12, -0.3 117.85 M91.76 117.37 C70.56 118.05, 51.36 118.69, 0.94 116.33 M-1.09 117.95 C1.82 76.82, -1.23 38.71, 0.34 -0.12 M-0.6 117.18 C0.25 86.62, 1.15 56.33, 0.48 0.64\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n            </path>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(251.5 200.5) rotate(0 46 58.5)\">\n            <path d=\"M0.87 -0.93 C30.07 0.6, 60.63 0.77, 91.28 -0.33 M0.78 0.64 C37.27 0.02, 71.72 -0.84, 92.26 -0.32 M92.64 -0.84 C92 38.14, 90.59 77.2, 90.38 115.19 M91.58 0.7 C92.08 38.63, 93.77 79.26, 92.3 117.31 M92.16 115.18 C62.23 115.84, 31.93 116.24, 0.85 115.45 M92.37 116.03 C65.4 117.09, 39.22 117.73, -0.67 117.33 M0.95 118.86 C-0.22 80.31, 0.59 46.34, -0.12 -0.75 M0.18 116.82 C0.32 86.92, 0.76 55.89, 0.64 -0.76\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n            </path>\n        </g>\n        <g transform=\"translate(186 56) rotate(0 3.5 12.5)\">\n            <text x=\"3.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                1\n            </text>\n        </g>\n        <g transform=\"translate(287.5 85.5) rotate(0 8 12.5)\">\n            <text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                2\n            </text>\n        </g>\n        <g transform=\"translate(392.5 48.5) rotate(0 8 12.5)\">\n            <text x=\"8\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                3\n            </text>\n        </g>\n        <g transform=\"translate(395 183.5) rotate(0 7.5 12.5)\">\n            <text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                4\n            </text>\n        </g>\n        <g transform=\"translate(183.5 189.5) rotate(0 7 12.5)\">\n            <text x=\"7\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                5\n            </text>\n        </g>\n        <g transform=\"translate(290 246.5) rotate(0 7.5 12.5)\">\n            <text x=\"7.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                6\n            </text>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(143.5 283.5) rotate(0 46 58.5)\">\n            <path d=\"M-0.33 1.89 C24.4 1.69, 51.96 1.61, 93.93 1.29 M-0.32 0.33 C19.12 0.58, 39.12 -0.66, 92.16 -0.43 M90.19 0.73 C93.13 27.27, 90.69 58.87, 90.3 115.48 M92.31 0.32 C92.69 44.4, 92.65 88.87, 92.38 116.65 M90.45 116.83 C61.6 116.92, 28.32 115.45, 0.42 117.61 M92.33 117.03 C55.68 115.84, 21.62 117.31, -0.63 116.41 M-0.75 116.26 C-0.18 83.32, 0.16 51.66, 0.67 1.44 M-0.76 117.71 C-0.41 72.95, 0.1 29.7, -0.27 -0.63\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n            </path>\n        </g>\n        <g transform=\"translate(181 329.5) rotate(0 8.5 12.5)\">\n            <text x=\"8.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                8\n            </text>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(251.5 341.5) rotate(0 46 58.5)\">\n            <path d=\"M-0.8 1.36 C25.84 0.41, 50.5 0.42, 90.22 -0.42 M-0.28 0.82 C30.35 -0.73, 60.22 -0.73, 91.46 -0.39 M93.59 -1.46 C90.09 27.01, 89.24 49.7, 93.67 117.97 M92.12 -0.49 C92.45 37.73, 92.75 76.93, 92.5 116.85 M93.81 116.53 C61.25 114.99, 29.43 117.53, 1.7 118.89 M91.11 116.45 C71.04 117.96, 48.51 116.44, -0.22 117.17 M0.03 115.8 C0.8 82.24, 1.11 49.66, 1.54 0.96 M0.15 117.07 C1.55 75.31, 0.62 31.12, -0.92 0.03\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n            </path>\n        </g>\n        <g transform=\"translate(290.5 387.5) rotate(0 7 12.5)\">\n            <text x=\"7\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                9\n            </text>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(360.5 402.5) rotate(0 46 58.5)\">\n            <path d=\"M1.56 1.28 C38.23 0.67, 70.83 -1.05, 92.53 -0.63 M0.32 -0.42 C30.82 -1.18, 60.78 -1.15, 91.19 -0.91 M91.15 1.4 C91.23 37.87, 94.61 79.74, 92.61 117.63 M92.08 -0.91 C92.53 38.48, 92.65 77.51, 92.42 116.23 M92.75 115.07 C65.61 117.4, 40.07 118.67, -1.34 117.65 M92.48 117.93 C63.46 115.9, 35.94 116.67, -0.06 116.63 M0.37 116.63 C0.65 87.65, 1.53 56.37, 1.29 -1.53 M0.66 117.94 C-0.45 72.99, -1.1 30.27, 0.48 0.92\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n            </path>\n        </g>\n        <g transform=\"translate(396 448.5) rotate(0 10.5 12.5)\">\n            <text x=\"10.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                10\n            </text>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(357.5 269.5) rotate(0 46 58.5)\">\n            <path d=\"M1.93 1.29 C32.09 -1.01, 68.27 -1.22, 92.67 -0.55 M0.16 -0.43 C34.6 -0.01, 69.47 -0.52, 92.37 0.8 M90.3 -1.52 C93.18 27.52, 92.11 53.73, 92.64 117.25 M92.38 -0.35 C92.6 29.19, 92.52 57.9, 91.91 117.91 M92.42 117.61 C68.27 118, 39.8 116.76, 0.07 115.22 M91.37 116.41 C69.19 118.03, 46.77 117.48, -0.37 117.01 M0.67 118.44 C1.33 89.86, 1.07 59.27, 1.42 0.3 M-0.27 116.37 C-1.69 81.11, -0.29 46.1, 0.96 0.17\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n            </path>\n        </g>\n        <g transform=\"translate(397 315.5) rotate(0 6.5 12.5)\">\n            <text x=\"6.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                7\n            </text>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(253.5 481.5) rotate(0 46 58.5)\">\n            <path d=\"M-1.78 -0.42 C34.03 -1.23, 67.67 -1.15, 93.64 0.64 M-0.54 -0.39 C22.93 -0.51, 47.85 1.19, 91.27 -0.42 M93.67 0.97 C91.61 43.94, 91.64 86.86, 91.02 117.16 M92.5 -0.15 C92.87 23.7, 92.36 49.86, 91.76 117.37 M93.7 118.89 C71.96 117.94, 54.67 115.5, -1.09 117.95 M91.78 117.17 C55.77 116.08, 19.3 116.47, -0.6 117.18 M1.54 117.96 C0.89 82.51, 1.02 51.38, 0.14 1.32 M-0.92 117.03 C0.8 71.86, 1.28 25.05, 0.07 0.74\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n            </path>\n        </g>\n        <g transform=\"translate(288.5 527.5) rotate(0 11 12.5)\">\n            <text x=\"11\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                12\n            </text>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(148.5 424.5) rotate(0 46 58.5)\">\n            <path d=\"M0.53 -0.63 C34.21 -0.36, 68.73 0.84, 91.16 0.32 M-0.81 -0.91 C24.04 1.16, 46.63 -0.06, 92.7 -0.85 M92.61 0.63 C93.62 26.46, 91.99 52.58, 90.18 117.77 M92.42 -0.77 C92.5 31.87, 92.35 62.3, 91.03 117.21 M90.66 117.65 C61.65 116.09, 30.07 118.82, 1.86 115.74 M91.94 116.63 C69.5 117.17, 47.14 117.34, -0.18 117.33 M1.29 115.47 C0.51 73.76, -0.76 31.24, 1.87 -0.55 M0.48 117.92 C2.04 89.45, 1.14 62.3, -0.87 -0.81\" stroke=\"#c92a2a\" stroke-width=\"1\" fill=\"none\">\n            </path>\n        </g>\n        <g transform=\"translate(188 470.5) rotate(0 6.5 12.5)\">\n            <text x=\"6.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#c92a2a\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                11\n            </text>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(150.5 558.5) rotate(0 46 58.5)\">\n            <path d=\"M0.67 -0.55 C27.29 0.93, 50.46 0.61, 91.15 -1.09 M92.73 1.59 C89.59 29.67, 92.45 59.33, 90.48 118.67 M92.64 117.25 C58.94 117.45, 26.03 118.06, -0.71 118 M-0.17 118.81 C-0.97 84.42, -2.43 50.77, 0.61 1.7\" stroke=\"#364fc7\" stroke-width=\"1.5\" fill=\"none\" stroke-dasharray=\"8 9\">\n            </path>\n        </g>\n        <g stroke-linecap=\"round\" transform=\"translate(362.5 544.5) rotate(0 46 58.5)\">\n            <path d=\"M1.64 0.64 C23.85 0.58, 48.53 -0.83, 91.22 -1.62 M90.54 -0.85 C93.83 22.81, 90.91 50.69, 92.97 117.61 M91.02 117.16 C59.69 117.88, 30.3 118.12, -0.3 117.85 M-0.47 117.75 C-1.83 91.39, 0.71 66.63, 1.89 -1.34\" stroke=\"#364fc7\" stroke-width=\"1.5\" fill=\"none\" stroke-dasharray=\"8 9\">\n            </path>\n        </g>\n        <g transform=\"translate(398 590.5) rotate(0 10.5 12.5)\">\n            <text x=\"10.5\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#364fc7\" text-anchor=\"middle\" style=\"white-space: pre;\" direction=\"ltr\">\n                13\n            </text>\n        </g>\n        <g transform=\"translate(184.5 603) rotate(0 10 12.5)\">\n            <text x=\"0\" y=\"18\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#1864ab\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                14\n            </text>\n        </g>\n        <g stroke-linecap=\"round\">\n            <g transform=\"translate(487.1804903262407 12.750000000000014) rotate(0 3.6758362127011424 72.03529622842932)\">\n                <path d=\"M1.35 0.68 C3.65 11.83, 13.85 44.93, 12.72 68.64 C11.58 92.36, -3.16 130.51, -5.45 142.96 M-1.36 -1.42 C0.73 10.1, 10.6 48.01, 10.89 72.49 C11.18 96.98, 3.48 133.32, 0.38 145.49\" stroke=\"#e67700\" stroke-width=\"1\" fill=\"none\">\n                </path>\n            </g>\n        </g>\n        <g stroke-linecap=\"round\">\n            <g transform=\"translate(117.53441886727751 157.75) rotate(0 -10.223491209581084 166.2962683300674)\">\n                <path d=\"M0.05 2.79 C-3.09 27.9, -20.26 97.29, -20.73 151.57 C-21.2 205.85, -5.76 298.74, -2.79 328.47 M-3.37 1.84 C-6.76 26.14, -24.26 93.14, -23.23 147.96 C-22.19 202.78, -0.45 299.99, 2.82 330.75\" stroke=\"#2b8a3e\" stroke-width=\"1\" fill=\"none\">\n                </path>\n            </g>\n        </g>\n        <g transform=\"translate(511 10.75) rotate(0 11 70)\">\n            <text x=\"0\" y=\"21\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#e67700\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                已\n            </text>\n            <text x=\"0\" y=\"49\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#e67700\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                滚\n            </text>\n            <text x=\"0\" y=\"77\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#e67700\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                动\n            </text>\n            <text x=\"0\" y=\"105\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#e67700\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                高\n            </text>\n            <text x=\"0\" y=\"133\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#e67700\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                度\n            </text>\n        </g>\n        <g transform=\"translate(68 242.75) rotate(0 10 65)\">\n            <text x=\"0\" y=\"19\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"17.647058823529395px\" fill=\"#2b8a3e\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                可\n            </text>\n            <text x=\"0\" y=\"45\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"17.647058823529395px\" fill=\"#2b8a3e\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                视\n            </text>\n            <text x=\"0\" y=\"71\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"17.647058823529395px\" fill=\"#2b8a3e\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                区\n            </text>\n            <text x=\"0\" y=\"97\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"17.647058823529395px\" fill=\"#2b8a3e\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                高\n            </text>\n            <text x=\"0\" y=\"123\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"17.647058823529395px\" fill=\"#2b8a3e\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                度\n            </text>\n        </g>\n        <g stroke-linecap=\"round\">\n            <g transform=\"translate(126 10.75) rotate(0 -41.557524843499436 334.64067246239637)\">\n                <path d=\"M-2.22 2.78 C-15.51 51.66, -82.99 184.74, -82.27 295.52 C-81.55 406.3, -11.85 606.05, 2.08 667.45 M1.78 1.83 C-11.78 49.64, -85.13 180.83, -85.2 291.06 C-85.26 401.3, -13.23 600.77, 1.4 663.26\" stroke=\"#5f3dc4\" stroke-width=\"1\" fill=\"none\">\n                </path>\n            </g>\n        </g>\n        <g transform=\"translate(10 218.75) rotate(0 11 84)\">\n            <text x=\"0\" y=\"21\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                瀑\n            </text>\n            <text x=\"0\" y=\"49\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                布\n            </text>\n            <text x=\"0\" y=\"77\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                流\n            </text>\n            <text x=\"0\" y=\"105\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                总\n            </text>\n            <text x=\"0\" y=\"133\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                高\n            </text>\n            <text x=\"0\" y=\"161\" font-family=\"Virgil, Segoe UI Emoji\" font-size=\"20px\" fill=\"#5f3dc4\" text-anchor=\"start\" style=\"white-space: pre;\" direction=\"ltr\">\n                度\n            </text>\n        </g>\n    </svg>\n</p>\n\n<p>因为上面瀑布流的实现采用的是 position 定位的，所以我们完全能知道所有元素距离顶部的距离，很容易计算出与可视区域交叉位置。</p>\n<p><strong>元素偏移位置 &lt; 滚动高度+可视区域高度  &amp;&amp; 元素偏移位置 + 元素高度 &gt; 滚动高度</strong></p>\n<p>如果只渲染可视区域范围，滚动时候会存在白屏再出现，可视适当的扩大渲染区域，例如把上一屏和下一屏都算进来，进行预先渲染。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> top = scrollTop - clientHeight</span><br><span class=\"line\"><span class=\"keyword\">const</span> bottom = scrollTop + clientHeight * <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> visibleList = data.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.<span class=\"property\">_top</span> + item.<span class=\"property\">height</span> &gt; top &amp;&amp; item.<span class=\"property\">_top</span> &lt; bottom)</span><br></pre></td></tr></table></figure>\n\n<p>然后通过监听滚动事件，根据滚动位置去处理筛选数。这里会存在一个隐藏性能问题，当滚动加载数据比较多的时候，滚动事件触发也是比较快的，每一次都进行一次遍历，也是比较消耗性能的。可以适当控制一下事件触发频率，当然这也只是治标不治本，归根倒是查询显示元素方法问题。</p>\n<p><strong>标记下标</strong><br>应为列表数据的 _top 值是从小到大正序的，所以我们可以标记在可视区元素的下标，当发生滚动的时候，我们直接从标记下标开始查找，根据滚动分几种情况来判断。<br>1&gt; 如果滚动后，标记下标元素还在可视范围内，可以直接从标记下标二分查找，往上往下找直到不符合条件就停止。<br>2&gt;  如果滚动后，标记下标元素不在可视范围内，根据滚动方向往上或者往下去查找。这个时候存在两种情况，一种是滚动幅度比较小，直接根据当前下标往上或者往下找。当用户拖动滚动条滚动幅度特别大的时候，可以将下标往上或者往下偏移，偏移量根据 <strong>滚动高度&#x2F;预估平均高度*列数</strong> 去估算一个，然后在根据这个预估下标进行查找。找到后然后缓存一个新的下标。</p>\n<h3 id=\"抖动问题\"><a href=\"#抖动问题\" class=\"headerlink\" title=\"抖动问题\"></a>抖动问题</h3><p>我们 absolute 定位会撑开容器高度，但是滚动时候还是会存在抖动问题，我们可以自定义一个元素高度去撑开，这个元素高度也就是我们之前计算的每一列累计高度 sumHeight 中最大的那个了。</p>\n<h3 id=\"过渡动画问题\"><a href=\"#过渡动画问题\" class=\"headerlink\" title=\"过渡动画问题\"></a>过渡动画问题</h3><p>当列宽发生变化时，元素位置发生了变化，在可视区域的元素也发生了变化，有些元素可能之前并没有渲染，所以使用上面 CSS 会存在新出现元素不会产生过渡动画。好在我们能够很清楚的知道元素原位置信息和新的位置信息，我们可以利用 <strong>FLIP</strong> 来处理这动画，很容易控制元素过渡变化，如果有些元素之前不存在，就没有原位置信息，我们可以在可视范围内给他随机生成一个位置进行过渡，保证每一个元素都有个过渡效果避免僵硬。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面情况仅仅是针对动态列数量，又能计算出高度情况下优化，可能业务中也是可能存在每项高度是动态的，这个时候可以采用预估元素高度在渲染后缓存大小位置等信息，或者离屏渲染等方案解决做出进一步的优化处理。</p>"},{"title":"hexo 在线编辑器","date":"2023-04-06T13:48:58.000Z","description":null,"keywords":"hexo,hexo 编辑器","toc":false,"_content":"\n开源了一款 Hexo 在线编辑器，提供在线编写 Hexo 方式。目前已实现对本地 Hexo 编辑维护\n\n![Img](/images/posts/web_hexo_editor/hexo_editor_demo.png) _示例_\n\n<!-- more -->\n\n话不多说放链接：[在线地址](https://web-hexo-editor.imalun.com)、[Github 地址](https://github.com/MaLuns/hexo-editor)\n\n### 实现大致原理\n\n实现不算复杂，利用 FileSystemHandle 获取文件读写权限，就可以随心所欲操作 Hexo 文件了，就可对文件增删改了。\n\n至于预览就更简单了，将 hexo-renderer 操作替换 markdown 渲染操作，实时渲染输出 HTML 就可以了，这些都有很多现成的案例。\n\n需要更加完整支持 Hexo 在线编辑预览，还是有些细节需要调整的，比如需要支持配置预览样式，最好能和自己博客样式一致，还需要支持 Hexo Tag 等这些需要完善。\n\n### 功能\n\n以实现功能\n\n- [x] 文章增删改和预览\n- [x] 发布草稿、下架发布\n- [x] Markdown 编辑、预览、格式化\n- [x] front-matters 编辑\n- [x] 图片粘贴、Markdown 语法提示、解析 HTML\n- [x] 主题切换\n- [x] 静态资源管理\n- [x] 命令面板\n\n计划实现\n\n- [ ] 替换 markdown 渲染器（因为 Hexo 默认用 marked，结果 marked 渲染标记到具体行，比较麻烦，导致同步滚动还没实现）\n- [ ] 搜索文章内容\n- [ ] 支持图床\n- [ ] Markdown 同步滚动\n- [ ] 连接 Github 仓库，彻底在线维护 Hexo 博客\n","source":"_posts/web_hexo_editor.md","raw":"---\ntitle: hexo 在线编辑器\ndate: 2023-04-06 21:48:58\ntags:\ndescription:\ncategories: 创作类\nkeywords: hexo,hexo 编辑器\ntoc: false\n---\n\n开源了一款 Hexo 在线编辑器，提供在线编写 Hexo 方式。目前已实现对本地 Hexo 编辑维护\n\n![Img](/images/posts/web_hexo_editor/hexo_editor_demo.png) _示例_\n\n<!-- more -->\n\n话不多说放链接：[在线地址](https://web-hexo-editor.imalun.com)、[Github 地址](https://github.com/MaLuns/hexo-editor)\n\n### 实现大致原理\n\n实现不算复杂，利用 FileSystemHandle 获取文件读写权限，就可以随心所欲操作 Hexo 文件了，就可对文件增删改了。\n\n至于预览就更简单了，将 hexo-renderer 操作替换 markdown 渲染操作，实时渲染输出 HTML 就可以了，这些都有很多现成的案例。\n\n需要更加完整支持 Hexo 在线编辑预览，还是有些细节需要调整的，比如需要支持配置预览样式，最好能和自己博客样式一致，还需要支持 Hexo Tag 等这些需要完善。\n\n### 功能\n\n以实现功能\n\n- [x] 文章增删改和预览\n- [x] 发布草稿、下架发布\n- [x] Markdown 编辑、预览、格式化\n- [x] front-matters 编辑\n- [x] 图片粘贴、Markdown 语法提示、解析 HTML\n- [x] 主题切换\n- [x] 静态资源管理\n- [x] 命令面板\n\n计划实现\n\n- [ ] 替换 markdown 渲染器（因为 Hexo 默认用 marked，结果 marked 渲染标记到具体行，比较麻烦，导致同步滚动还没实现）\n- [ ] 搜索文章内容\n- [ ] 支持图床\n- [ ] Markdown 同步滚动\n- [ ] 连接 Github 仓库，彻底在线维护 Hexo 博客\n","slug":"web_hexo_editor","published":1,"updated":"2024-03-06T07:42:59.000Z","comments":1,"layout":"post","photos":[],"_id":"cltgz7vsv003o98lg9caj96pc","content":"<p>开源了一款 Hexo 在线编辑器，提供在线编写 Hexo 方式。目前已实现对本地 Hexo 编辑维护</p>\n<p><img src=\"/images/posts/web_hexo_editor/hexo_editor_demo.png\" alt=\"Img\" loading=\"lazy\" onerror='this.onerror=null;this.src=\"/img/404.jpg\"'> <em>示例</em></p>\n<span id=\"more\"></span>\n\n<p>话不多说放链接：<a href=\"https://web-hexo-editor.imalun.com/\">在线地址</a>、<a href=\"https://github.com/MaLuns/hexo-editor\">Github 地址</a></p>\n<h3 id=\"实现大致原理\"><a href=\"#实现大致原理\" class=\"headerlink\" title=\"实现大致原理\"></a>实现大致原理</h3><p>实现不算复杂，利用 FileSystemHandle 获取文件读写权限，就可以随心所欲操作 Hexo 文件了，就可对文件增删改了。</p>\n<p>至于预览就更简单了，将 hexo-renderer 操作替换 markdown 渲染操作，实时渲染输出 HTML 就可以了，这些都有很多现成的案例。</p>\n<p>需要更加完整支持 Hexo 在线编辑预览，还是有些细节需要调整的，比如需要支持配置预览样式，最好能和自己博客样式一致，还需要支持 Hexo Tag 等这些需要完善。</p>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>以实现功能</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 文章增删改和预览</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 发布草稿、下架发布</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Markdown 编辑、预览、格式化</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> front-matters 编辑</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 图片粘贴、Markdown 语法提示、解析 HTML</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 主题切换</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 静态资源管理</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 命令面板</li>\n</ul>\n<p>计划实现</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 替换 markdown 渲染器（因为 Hexo 默认用 marked，结果 marked 渲染标记到具体行，比较麻烦，导致同步滚动还没实现）</li>\n<li><input disabled=\"\" type=\"checkbox\"> 搜索文章内容</li>\n<li><input disabled=\"\" type=\"checkbox\"> 支持图床</li>\n<li><input disabled=\"\" type=\"checkbox\"> Markdown 同步滚动</li>\n<li><input disabled=\"\" type=\"checkbox\"> 连接 Github 仓库，彻底在线维护 Hexo 博客</li>\n</ul>\n","excerpt":"<p>开源了一款 Hexo 在线编辑器，提供在线编写 Hexo 方式。目前已实现对本地 Hexo 编辑维护</p>\n<p><img src=\"/images/posts/web_hexo_editor/hexo_editor_demo.png\" alt=\"Img\"> <em>示例</em></p>","more":"<p>话不多说放链接：<a href=\"https://web-hexo-editor.imalun.com/\">在线地址</a>、<a href=\"https://github.com/MaLuns/hexo-editor\">Github 地址</a></p>\n<h3 id=\"实现大致原理\"><a href=\"#实现大致原理\" class=\"headerlink\" title=\"实现大致原理\"></a>实现大致原理</h3><p>实现不算复杂，利用 FileSystemHandle 获取文件读写权限，就可以随心所欲操作 Hexo 文件了，就可对文件增删改了。</p>\n<p>至于预览就更简单了，将 hexo-renderer 操作替换 markdown 渲染操作，实时渲染输出 HTML 就可以了，这些都有很多现成的案例。</p>\n<p>需要更加完整支持 Hexo 在线编辑预览，还是有些细节需要调整的，比如需要支持配置预览样式，最好能和自己博客样式一致，还需要支持 Hexo Tag 等这些需要完善。</p>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>以实现功能</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 文章增删改和预览</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 发布草稿、下架发布</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Markdown 编辑、预览、格式化</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> front-matters 编辑</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 图片粘贴、Markdown 语法提示、解析 HTML</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 主题切换</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 静态资源管理</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 命令面板</li>\n</ul>\n<p>计划实现</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 替换 markdown 渲染器（因为 Hexo 默认用 marked，结果 marked 渲染标记到具体行，比较麻烦，导致同步滚动还没实现）</li>\n<li><input disabled=\"\" type=\"checkbox\"> 搜索文章内容</li>\n<li><input disabled=\"\" type=\"checkbox\"> 支持图床</li>\n<li><input disabled=\"\" type=\"checkbox\"> Markdown 同步滚动</li>\n<li><input disabled=\"\" type=\"checkbox\"> 连接 Github 仓库，彻底在线维护 Hexo 博客</li>\n</ul>"},{"title":"解读 webpack 打包后js","date":"2019-11-20T02:16:09.000Z","comments":1,"_content":"\n首先新建 index.js,a.js,b.js 三个文件,index.js 配置为入口,index.js 分别加载a.js,b.js文件, b.js加载a.js文件,js中代码如下\n<!-- more -->\n\n``` javascript\n//index.js\nrequire('./a.js')()\nrequire('./b.js')\n```\n\n``` javascript\n//a.js\nconsole.log(1)\nfunction test(){\n    console.log(3)\n}\nmodule.exports = test\n```\n\n``` javascript\n//b.js\nconsole.log(2)\nrequire('./a.js')()\n```\n\n\n对文件进行打包,打包结果如下\n\n``` javascript \n/******/ (function(modules) { \n/******/ \tvar installedModules = {}; //对模块进行缓存\n/******/\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\tif(installedModules[moduleId]) {//有缓存 直接返回 exports\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/                //加载模块\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/ \t\tmodule.l = true;\n/******/ \t\treturn module.exports; //返回 exports\n/******/ \t}\n/******/\n/******/\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t__webpack_require__.p = \"/\";\n/******/\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);//加载入口 并返回exports\n/******/ })\n/************************************************************************/\n([\nfunction(module, exports, __webpack_require__){\n    \"use strict\";\n        console.log(1);\n        function test(){\n            console.log(3)\n        }\n        module.exports = test\n},\nfunction(module, exports, __webpack_require__){\n    \"use strict\";\n        __webpack_require__(0)();\n        __webpack_require__(2);\n},\nfunction(module, exports, __webpack_require__){\n    \"use strict\";\n        console.log(2)\n        __webpack_require__(0)();\n}])\n```\n\n> 可以看到 webpack 打包后js 是一个自执行匿名函数,而我们的所有模块被打包成了一个数组传入匿名函数中(modules),其中每个元素代表一个模块.然后通过  __webpack_require__(__webpack_require__.s = 1) 加载入口模块.调用 __webpack_require__ 方法会接收一个模块ID(对应数组下标),然后检查 installedModules 变量是否已存在对应模块,如果已存在会直接返回当前模块module.exports,否则会先去加载模块,再返回module.exports \n\n执行结果 1323\n","source":"_posts/webpack.md","raw":"---\ntitle: 解读 webpack 打包后js\ndate: 2019-11-20 10:16:09\ntags: [webpack]\ncategories: 记录类\ncomments: true\n---\n\n首先新建 index.js,a.js,b.js 三个文件,index.js 配置为入口,index.js 分别加载a.js,b.js文件, b.js加载a.js文件,js中代码如下\n<!-- more -->\n\n``` javascript\n//index.js\nrequire('./a.js')()\nrequire('./b.js')\n```\n\n``` javascript\n//a.js\nconsole.log(1)\nfunction test(){\n    console.log(3)\n}\nmodule.exports = test\n```\n\n``` javascript\n//b.js\nconsole.log(2)\nrequire('./a.js')()\n```\n\n\n对文件进行打包,打包结果如下\n\n``` javascript \n/******/ (function(modules) { \n/******/ \tvar installedModules = {}; //对模块进行缓存\n/******/\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\tif(installedModules[moduleId]) {//有缓存 直接返回 exports\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/                //加载模块\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/ \t\tmodule.l = true;\n/******/ \t\treturn module.exports; //返回 exports\n/******/ \t}\n/******/\n/******/\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t__webpack_require__.p = \"/\";\n/******/\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);//加载入口 并返回exports\n/******/ })\n/************************************************************************/\n([\nfunction(module, exports, __webpack_require__){\n    \"use strict\";\n        console.log(1);\n        function test(){\n            console.log(3)\n        }\n        module.exports = test\n},\nfunction(module, exports, __webpack_require__){\n    \"use strict\";\n        __webpack_require__(0)();\n        __webpack_require__(2);\n},\nfunction(module, exports, __webpack_require__){\n    \"use strict\";\n        console.log(2)\n        __webpack_require__(0)();\n}])\n```\n\n> 可以看到 webpack 打包后js 是一个自执行匿名函数,而我们的所有模块被打包成了一个数组传入匿名函数中(modules),其中每个元素代表一个模块.然后通过  __webpack_require__(__webpack_require__.s = 1) 加载入口模块.调用 __webpack_require__ 方法会接收一个模块ID(对应数组下标),然后检查 installedModules 变量是否已存在对应模块,如果已存在会直接返回当前模块module.exports,否则会先去加载模块,再返回module.exports \n\n执行结果 1323\n","slug":"webpack","published":1,"updated":"2024-03-06T07:42:59.000Z","layout":"post","photos":[],"_id":"cltgz7vte004r98lge8lm7f56","content":"<p>首先新建 index.js,a.js,b.js 三个文件,index.js 配置为入口,index.js 分别加载a.js,b.js文件, b.js加载a.js文件,js中代码如下</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a.js&#x27;</span>)()</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./b.js&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = test</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//b.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a.js&#x27;</span>)()</span><br></pre></td></tr></table></figure>\n\n\n<p>对文件进行打包,打包结果如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******/</span> (<span class=\"keyword\">function</span>(<span class=\"params\">modules</span>) &#123; </span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">var</span> installedModules = &#123;&#125;; <span class=\"comment\">//对模块进行缓存</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">if</span>(installedModules[moduleId]) &#123;<span class=\"comment\">//有缓存 直接返回 exports</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"keyword\">return</span> installedModules[moduleId].<span class=\"property\">exports</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">var</span> <span class=\"variable language_\">module</span> = installedModules[moduleId] = &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"attr\">i</span>: moduleId,</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"attr\">l</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"attr\">exports</span>: &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>                <span class=\"comment\">//加载模块</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\tmodules[moduleId].<span class=\"title function_\">call</span>(<span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, <span class=\"variable language_\">module</span>, <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, __webpack_require__);</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"variable language_\">module</span>.<span class=\"property\">l</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>; <span class=\"comment\">//返回 exports</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.<span class=\"property\">m</span> = modules;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.<span class=\"property\">c</span> = installedModules;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.<span class=\"property\">d</span> = <span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">exports</span>, name, getter</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">if</span>(!__webpack_require__.<span class=\"title function_\">o</span>(<span class=\"built_in\">exports</span>, name)) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, name, &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t\t<span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t\t<span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t\t<span class=\"attr\">get</span>: getter</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t&#125;);</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.<span class=\"property\">n</span> = <span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">module</span></span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">var</span> getter = <span class=\"variable language_\">module</span> &amp;&amp; <span class=\"variable language_\">module</span>.<span class=\"property\">__esModule</span> ?</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"keyword\">function</span> <span class=\"title function_\">getDefault</span>(<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>[<span class=\"string\">&#x27;default&#x27;</span>]; &#125; :</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"keyword\">function</span> <span class=\"title function_\">getModuleExports</span>(<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>; &#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t__webpack_require__.<span class=\"title function_\">d</span>(getter, <span class=\"string\">&#x27;a&#x27;</span>, getter);</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">return</span> getter;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.<span class=\"property\">o</span> = <span class=\"keyword\">function</span>(<span class=\"params\">object, property</span>) &#123; <span class=\"keyword\">return</span> <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(object, property); &#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.<span class=\"property\">p</span> = <span class=\"string\">&quot;/&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">return</span> <span class=\"title function_\">__webpack_require__</span>(__webpack_require__.<span class=\"property\">s</span> = <span class=\"number\">1</span>);<span class=\"comment\">//加载入口 并返回exports</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">/************************************************************************/</span></span><br><span class=\"line\">([</span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">module</span>, <span class=\"built_in\">exports</span>, __webpack_require__</span>)&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = test</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">module</span>, <span class=\"built_in\">exports</span>, __webpack_require__</span>)&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\">        <span class=\"title function_\">__webpack_require__</span>(<span class=\"number\">0</span>)();</span><br><span class=\"line\">        <span class=\"title function_\">__webpack_require__</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">module</span>, <span class=\"built_in\">exports</span>, __webpack_require__</span>)&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"title function_\">__webpack_require__</span>(<span class=\"number\">0</span>)();</span><br><span class=\"line\">&#125;])</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以看到 webpack 打包后js 是一个自执行匿名函数,而我们的所有模块被打包成了一个数组传入匿名函数中(modules),其中每个元素代表一个模块.然后通过  <strong>webpack_require</strong>(<strong>webpack_require</strong>.s &#x3D; 1) 加载入口模块.调用 <strong>webpack_require</strong> 方法会接收一个模块ID(对应数组下标),然后检查 installedModules 变量是否已存在对应模块,如果已存在会直接返回当前模块module.exports,否则会先去加载模块,再返回module.exports </p>\n</blockquote>\n<p>执行结果 1323</p>\n","excerpt":"<p>首先新建 index.js,a.js,b.js 三个文件,index.js 配置为入口,index.js 分别加载a.js,b.js文件, b.js加载a.js文件,js中代码如下</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a.js&#x27;</span>)()</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./b.js&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = test</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//b.js</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a.js&#x27;</span>)()</span><br></pre></td></tr></table></figure>\n\n\n<p>对文件进行打包,打包结果如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******/</span> (<span class=\"keyword\">function</span>(<span class=\"params\">modules</span>) &#123; </span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">var</span> installedModules = &#123;&#125;; <span class=\"comment\">//对模块进行缓存</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">if</span>(installedModules[moduleId]) &#123;<span class=\"comment\">//有缓存 直接返回 exports</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"keyword\">return</span> installedModules[moduleId].<span class=\"property\">exports</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">var</span> <span class=\"variable language_\">module</span> = installedModules[moduleId] = &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"attr\">i</span>: moduleId,</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"attr\">l</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"attr\">exports</span>: &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>                <span class=\"comment\">//加载模块</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\tmodules[moduleId].<span class=\"title function_\">call</span>(<span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, <span class=\"variable language_\">module</span>, <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, __webpack_require__);</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"variable language_\">module</span>.<span class=\"property\">l</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>; <span class=\"comment\">//返回 exports</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.<span class=\"property\">m</span> = modules;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.<span class=\"property\">c</span> = installedModules;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.<span class=\"property\">d</span> = <span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">exports</span>, name, getter</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">if</span>(!__webpack_require__.<span class=\"title function_\">o</span>(<span class=\"built_in\">exports</span>, name)) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, name, &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t\t<span class=\"attr\">configurable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t\t<span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t\t<span class=\"attr\">get</span>: getter</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t&#125;);</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.<span class=\"property\">n</span> = <span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">module</span></span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">var</span> getter = <span class=\"variable language_\">module</span> &amp;&amp; <span class=\"variable language_\">module</span>.<span class=\"property\">__esModule</span> ?</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"keyword\">function</span> <span class=\"title function_\">getDefault</span>(<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>[<span class=\"string\">&#x27;default&#x27;</span>]; &#125; :</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"keyword\">function</span> <span class=\"title function_\">getModuleExports</span>(<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>; &#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t__webpack_require__.<span class=\"title function_\">d</span>(getter, <span class=\"string\">&#x27;a&#x27;</span>, getter);</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">return</span> getter;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.<span class=\"property\">o</span> = <span class=\"keyword\">function</span>(<span class=\"params\">object, property</span>) &#123; <span class=\"keyword\">return</span> <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(object, property); &#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t__webpack_require__.<span class=\"property\">p</span> = <span class=\"string\">&quot;/&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">return</span> <span class=\"title function_\">__webpack_require__</span>(__webpack_require__.<span class=\"property\">s</span> = <span class=\"number\">1</span>);<span class=\"comment\">//加载入口 并返回exports</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">/************************************************************************/</span></span><br><span class=\"line\">([</span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">module</span>, <span class=\"built_in\">exports</span>, __webpack_require__</span>)&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = test</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">module</span>, <span class=\"built_in\">exports</span>, __webpack_require__</span>)&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\">        <span class=\"title function_\">__webpack_require__</span>(<span class=\"number\">0</span>)();</span><br><span class=\"line\">        <span class=\"title function_\">__webpack_require__</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">module</span>, <span class=\"built_in\">exports</span>, __webpack_require__</span>)&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"title function_\">__webpack_require__</span>(<span class=\"number\">0</span>)();</span><br><span class=\"line\">&#125;])</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以看到 webpack 打包后js 是一个自执行匿名函数,而我们的所有模块被打包成了一个数组传入匿名函数中(modules),其中每个元素代表一个模块.然后通过  <strong>webpack_require</strong>(<strong>webpack_require</strong>.s &#x3D; 1) 加载入口模块.调用 <strong>webpack_require</strong> 方法会接收一个模块ID(对应数组下标),然后检查 installedModules 变量是否已存在对应模块,如果已存在会直接返回当前模块module.exports,否则会先去加载模块,再返回module.exports </p>\n</blockquote>\n<p>执行结果 1323</p>"},{"title":"小程序 swiper 性能优化","comment":true,"date":"2022-12-28T05:22:09.000Z","description":null,"keywords":"微信小程序","toc":false,"_content":"事情是这样的，我做了一个在线壁纸小程序，壁纸预览部分为了更好时使用体验，增加了类似于那些短视频上滑下滑快速切换壁纸预览的功能，为了避免重复造轮子直接使用了 swiper 来时实现滑动快速切换壁纸。\n<!-- more -->\n\n### 问题所在\n\n当壁纸量比较多的时候，全部渲染成 swiper-item，会出现明显性能问题。还有个原因应该预览壁纸时加载的都是高清原图，直接全部加载出来，对性能也是很大一个浪费。图片的加可以通过设置 lazy-load 懒加载图片。\n\n### 解决方案\n\n解决方案也挺简单，直接使用分页去处理，比如有 200 项，但是我们一次只渲染 3 个 swiper-item，比如当前下标是 1（对应原列表下标1），当你下滑时新的下标就是 2（对应原列表下标2）了，这个时候就需要我们更新下标 0（对应原列表下标3），为当前项，对应原始列表中的下一个，上滑也是这样的逻辑，这样就保证每次滑洞都按照原始列表顺序显示的，但是实际页面只渲染 3 个 swiper-item，和虚拟列表原理类似。\n\n\n官方提供了一个 [video-swiper](https://developers.weixin.qq.com/miniprogram/dev/platform-capabilities/extended/component-plus/video-swiper.html) 组件，原理时类似的，只不过是给视频列表使用的，我们参考他的实现进行修改。\n\n### 实现\n假设我们的数据的为 list，实际渲染的数据为 swiperList，我们现在给他就固定 3 个 swiper-item，前后滑动的时候去替换数据，正向滑动的时候去替换滑动后的下一个数据，反向滑动的时候去替换滑动后的上一个数据，然后将 swiper 设置为可衔接滑动，这样保证一直可以循环滑动，然后更具滑动方向替换数据。\n\n监听 swiper 的 bindchange 事件，可以获取到滑动后的 current，然后在 bindchange 事件里更新数据\n\n滑动的方向判断\n\n``` js \n// swiper 长度\nconst LEN = 3\nconst stateNum = current - this.data.swiperIndex\nconst state = [-1, LEN - 1].includes(stateNum) ? \"Last\" : \"Next\"\n```\n\n获取 swiperList 需要更新的下标\n\n``` js\nlet updateIndex;\nif (state === \"Next\") {\n    updateIndex = current === (LEN - 1) ? 0 : current + 1\n} else {\n    updateIndex = current === 0 ? (LEN - 1) : current - 1\n}\n```\n\n除了需要 swiperList 更新下标，还得记录对应 list 的下标\n\n``` js\n// 获取当前项对应 list 下标\nconst previewIndex = state === \"Last\" ? this.data.previewIndex - 1 : this.data.previewIndex + 1\n```\n\n然后据可以根据滑块方向和 previewIndex，就可以确定更新 swiperList 数据了\n\n``` js\n this.setData({\n    // 更新实际 list 下标\n    previewIndex, \n    [`swiperList[${updateIndex}]`]: state === \"Last\" ? list[previewIndex - 1] : list[previewIndex + 1] \n})\n// 记录 swiper 下标\nthis.data.swiperIndex = current\n```\n\n根据上面思路基本上可以解决 swiper 数据量大性能问题了，但是还存在一些问题。\n\n- 滑块边界问题，list 数据也是有限的，也会滑到边界，需要对边界做一个判断处理\n    \n这个问题可以根据 previewIndex 下标去判断是否到达了边界，如果不需要无限加载数据，可以在达到边界时直接回弹静止滑块继续滚动，因为设置 swiper 为衔接滑动，达到边界时滑动时上一个或者下一个还是会显示有其他 swiper-item，所有需要我们添加一个空的 swiper-item 用来占位。如果时需要无限加载数据，可以在快到达边界时提前拉取数据，等拿到数据时继续下滑，否则反弹回去保持在最后一个。\n\n- 当 previewIndex 不是通过滑块更新时候，比如直接从 0 跳到 5 会有默认滚动动画，导致体验很差\n\n这个解决方式是在非滑动更新时候，先将动画时间 duration 设置为 0 ，去掉动画，然后在更新下标和恢复动画。\n\n``` js\nthis.setData({ duration: 0 }, () => {\n    this.setData({\n        previewIndex: previewIndex,\n        swiperIndex: swiperIndex,\n        swiperList: swiperList,\n        duration: 500\n    })\n})\n```\n\n### 代码实现\n\n相对完整的代码实现\n\n``` html\n<swiper vertical=\"{{true}}\" duration=\"{{duration}}\" current=\"{{swiperIndex}}\" circular=\"{{circular}}\" bindchange=\"handleChangeBigImage\">\n    <swiper-item wx:for=\"{{swiperList}}\" wx:key=\"index\">\n        <block wx:if=\"{{item.type==='placeholder'}}\">\n            <view class=\"placeholder-view\"></view>\n        </block>\n        <block wx:else>\n            <image show-menu-by-longpress lazy-load mode=\"aspectFill\" src=\"{{item.path}}\"></image>\n        </block>\n    </swiper-item>\n</swiper>\n```\n\n``` ts\n// swiper 长度\nconst LEN = 3\nconst SwiperPlaceholder = { type: \"placeholder\" }\ntype State = \"Next\" | \"Last\"\n\nComponent({\n  properties: {\n    list: {\n      type: Array,\n      value: [] as Array<ImageItem>\n    },\n    index: {\n      type: Number,\n      value: 0\n    }\n  },\n  data: {\n    // 当前元素下标\n    previewIndex: 0,\n    // swiper 切换\n    circular: true,\n    duration: 300,\n    swiperIndex: 1, // 当前 swiper 下标\n    swiperList: <Array<ImageItem>>[],\n  },\n  observers: {\n    'index,list': function (index, list) {\n      if (list.length && list[index]) {\n        this._initSwiper(index, list)\n      }\n    },\n  },\n  methods: {\n    // 切换 swiper\n    handleChangeBigImage(e: WechatMiniprogram.SwiperChange) {\n      const { current, source } = e.detail\n      if (source !== \"touch\") return;\n\n      const state = this._getSlideState(current, this.data.swiperIndex)\n      const previewIndex = state === \"Last\" ? this.data.previewIndex - 1 : this.data.previewIndex + 1\n      const currentItem = this.data.swiperList[current]\n\n      // 到达了边界时，反弹回去\n      if (currentItem.type === \"placeholder\") {\n        this.setData({\n          swiperIndex: this.data.swiperIndex\n        })\n        return\n      }\n\n      this.setData({\n        previewIndex,\n        [`swiperList[${this._updateUpdateIndex(current, state)}]`]: this._getUpdateSwiperItem(previewIndex, state),\n      })\n\n      this.data.swiperIndex = current\n    },\n    // 初始化 Swiper 模式\n    _initSwiper(index: number, list: Array<ImageItem>, cb?: Function) {\n      this.setData({ duration: 0 }, () => {\n        let swiperIndex = 1\n        let swiperList: Array<ImageItem> = []\n\n        swiperList.push(list[index - 1] || SwiperPlaceholder)\n        swiperList.push(list[index] || SwiperPlaceholder)\n        swiperList.push(list[index + 1] || SwiperPlaceholder)\n\n        this.setData({\n          previewIndex: index,\n          swiperIndex,\n          swiperList,\n          duration: 500,\n          isHide: false\n        }, () => {\n          if (cb) cb()\n        })\n      })\n    },\n    // 获取滚动状态\n    _getSlideState(current: number, lastCurrent: number): State {\n      const state = current - lastCurrent\n      return [-1, LEN - 1].includes(state) ? \"Last\" : \"Next\"\n    },\n    // 获取需要更新下标\n    _updateUpdateIndex(current: number, type: State) {\n      if (type === \"Next\") {\n        return current === (LEN - 1) ? 0 : current + 1\n      } else {\n        return current === 0 ? (LEN - 1) : current - 1\n      }\n    },\n    // 获取需要更新数据\n    _getUpdateSwiperItem(index: number, type: State) {\n      const list = this.data.list\n      let item\n      if (type === \"Last\") {\n        item = list[index - 1]\n      } else {\n        item = list[index + 1]\n      }\n      // 到达边界时 返回填充元素\n      if (!item) {\n        item = SwiperPlaceholder\n      }\n      return item\n    }\n  }\n})\n```","source":"_posts/wx_swiper.md","raw":"---\ntitle: 小程序 swiper 性能优化\ncomment: true\ndate: 2022-12-28 13:22:09\ntags:\ndescription:\ncategories: 记录类\nkeywords: 微信小程序\ntoc: false\n---\n事情是这样的，我做了一个在线壁纸小程序，壁纸预览部分为了更好时使用体验，增加了类似于那些短视频上滑下滑快速切换壁纸预览的功能，为了避免重复造轮子直接使用了 swiper 来时实现滑动快速切换壁纸。\n<!-- more -->\n\n### 问题所在\n\n当壁纸量比较多的时候，全部渲染成 swiper-item，会出现明显性能问题。还有个原因应该预览壁纸时加载的都是高清原图，直接全部加载出来，对性能也是很大一个浪费。图片的加可以通过设置 lazy-load 懒加载图片。\n\n### 解决方案\n\n解决方案也挺简单，直接使用分页去处理，比如有 200 项，但是我们一次只渲染 3 个 swiper-item，比如当前下标是 1（对应原列表下标1），当你下滑时新的下标就是 2（对应原列表下标2）了，这个时候就需要我们更新下标 0（对应原列表下标3），为当前项，对应原始列表中的下一个，上滑也是这样的逻辑，这样就保证每次滑洞都按照原始列表顺序显示的，但是实际页面只渲染 3 个 swiper-item，和虚拟列表原理类似。\n\n\n官方提供了一个 [video-swiper](https://developers.weixin.qq.com/miniprogram/dev/platform-capabilities/extended/component-plus/video-swiper.html) 组件，原理时类似的，只不过是给视频列表使用的，我们参考他的实现进行修改。\n\n### 实现\n假设我们的数据的为 list，实际渲染的数据为 swiperList，我们现在给他就固定 3 个 swiper-item，前后滑动的时候去替换数据，正向滑动的时候去替换滑动后的下一个数据，反向滑动的时候去替换滑动后的上一个数据，然后将 swiper 设置为可衔接滑动，这样保证一直可以循环滑动，然后更具滑动方向替换数据。\n\n监听 swiper 的 bindchange 事件，可以获取到滑动后的 current，然后在 bindchange 事件里更新数据\n\n滑动的方向判断\n\n``` js \n// swiper 长度\nconst LEN = 3\nconst stateNum = current - this.data.swiperIndex\nconst state = [-1, LEN - 1].includes(stateNum) ? \"Last\" : \"Next\"\n```\n\n获取 swiperList 需要更新的下标\n\n``` js\nlet updateIndex;\nif (state === \"Next\") {\n    updateIndex = current === (LEN - 1) ? 0 : current + 1\n} else {\n    updateIndex = current === 0 ? (LEN - 1) : current - 1\n}\n```\n\n除了需要 swiperList 更新下标，还得记录对应 list 的下标\n\n``` js\n// 获取当前项对应 list 下标\nconst previewIndex = state === \"Last\" ? this.data.previewIndex - 1 : this.data.previewIndex + 1\n```\n\n然后据可以根据滑块方向和 previewIndex，就可以确定更新 swiperList 数据了\n\n``` js\n this.setData({\n    // 更新实际 list 下标\n    previewIndex, \n    [`swiperList[${updateIndex}]`]: state === \"Last\" ? list[previewIndex - 1] : list[previewIndex + 1] \n})\n// 记录 swiper 下标\nthis.data.swiperIndex = current\n```\n\n根据上面思路基本上可以解决 swiper 数据量大性能问题了，但是还存在一些问题。\n\n- 滑块边界问题，list 数据也是有限的，也会滑到边界，需要对边界做一个判断处理\n    \n这个问题可以根据 previewIndex 下标去判断是否到达了边界，如果不需要无限加载数据，可以在达到边界时直接回弹静止滑块继续滚动，因为设置 swiper 为衔接滑动，达到边界时滑动时上一个或者下一个还是会显示有其他 swiper-item，所有需要我们添加一个空的 swiper-item 用来占位。如果时需要无限加载数据，可以在快到达边界时提前拉取数据，等拿到数据时继续下滑，否则反弹回去保持在最后一个。\n\n- 当 previewIndex 不是通过滑块更新时候，比如直接从 0 跳到 5 会有默认滚动动画，导致体验很差\n\n这个解决方式是在非滑动更新时候，先将动画时间 duration 设置为 0 ，去掉动画，然后在更新下标和恢复动画。\n\n``` js\nthis.setData({ duration: 0 }, () => {\n    this.setData({\n        previewIndex: previewIndex,\n        swiperIndex: swiperIndex,\n        swiperList: swiperList,\n        duration: 500\n    })\n})\n```\n\n### 代码实现\n\n相对完整的代码实现\n\n``` html\n<swiper vertical=\"{{true}}\" duration=\"{{duration}}\" current=\"{{swiperIndex}}\" circular=\"{{circular}}\" bindchange=\"handleChangeBigImage\">\n    <swiper-item wx:for=\"{{swiperList}}\" wx:key=\"index\">\n        <block wx:if=\"{{item.type==='placeholder'}}\">\n            <view class=\"placeholder-view\"></view>\n        </block>\n        <block wx:else>\n            <image show-menu-by-longpress lazy-load mode=\"aspectFill\" src=\"{{item.path}}\"></image>\n        </block>\n    </swiper-item>\n</swiper>\n```\n\n``` ts\n// swiper 长度\nconst LEN = 3\nconst SwiperPlaceholder = { type: \"placeholder\" }\ntype State = \"Next\" | \"Last\"\n\nComponent({\n  properties: {\n    list: {\n      type: Array,\n      value: [] as Array<ImageItem>\n    },\n    index: {\n      type: Number,\n      value: 0\n    }\n  },\n  data: {\n    // 当前元素下标\n    previewIndex: 0,\n    // swiper 切换\n    circular: true,\n    duration: 300,\n    swiperIndex: 1, // 当前 swiper 下标\n    swiperList: <Array<ImageItem>>[],\n  },\n  observers: {\n    'index,list': function (index, list) {\n      if (list.length && list[index]) {\n        this._initSwiper(index, list)\n      }\n    },\n  },\n  methods: {\n    // 切换 swiper\n    handleChangeBigImage(e: WechatMiniprogram.SwiperChange) {\n      const { current, source } = e.detail\n      if (source !== \"touch\") return;\n\n      const state = this._getSlideState(current, this.data.swiperIndex)\n      const previewIndex = state === \"Last\" ? this.data.previewIndex - 1 : this.data.previewIndex + 1\n      const currentItem = this.data.swiperList[current]\n\n      // 到达了边界时，反弹回去\n      if (currentItem.type === \"placeholder\") {\n        this.setData({\n          swiperIndex: this.data.swiperIndex\n        })\n        return\n      }\n\n      this.setData({\n        previewIndex,\n        [`swiperList[${this._updateUpdateIndex(current, state)}]`]: this._getUpdateSwiperItem(previewIndex, state),\n      })\n\n      this.data.swiperIndex = current\n    },\n    // 初始化 Swiper 模式\n    _initSwiper(index: number, list: Array<ImageItem>, cb?: Function) {\n      this.setData({ duration: 0 }, () => {\n        let swiperIndex = 1\n        let swiperList: Array<ImageItem> = []\n\n        swiperList.push(list[index - 1] || SwiperPlaceholder)\n        swiperList.push(list[index] || SwiperPlaceholder)\n        swiperList.push(list[index + 1] || SwiperPlaceholder)\n\n        this.setData({\n          previewIndex: index,\n          swiperIndex,\n          swiperList,\n          duration: 500,\n          isHide: false\n        }, () => {\n          if (cb) cb()\n        })\n      })\n    },\n    // 获取滚动状态\n    _getSlideState(current: number, lastCurrent: number): State {\n      const state = current - lastCurrent\n      return [-1, LEN - 1].includes(state) ? \"Last\" : \"Next\"\n    },\n    // 获取需要更新下标\n    _updateUpdateIndex(current: number, type: State) {\n      if (type === \"Next\") {\n        return current === (LEN - 1) ? 0 : current + 1\n      } else {\n        return current === 0 ? (LEN - 1) : current - 1\n      }\n    },\n    // 获取需要更新数据\n    _getUpdateSwiperItem(index: number, type: State) {\n      const list = this.data.list\n      let item\n      if (type === \"Last\") {\n        item = list[index - 1]\n      } else {\n        item = list[index + 1]\n      }\n      // 到达边界时 返回填充元素\n      if (!item) {\n        item = SwiperPlaceholder\n      }\n      return item\n    }\n  }\n})\n```","slug":"wx_swiper","published":1,"updated":"2024-03-06T07:42:59.000Z","comments":1,"layout":"post","photos":[],"_id":"cltgz7vtf004s98lg7j13azjs","content":"<p>事情是这样的，我做了一个在线壁纸小程序，壁纸预览部分为了更好时使用体验，增加了类似于那些短视频上滑下滑快速切换壁纸预览的功能，为了避免重复造轮子直接使用了 swiper 来时实现滑动快速切换壁纸。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"问题所在\"><a href=\"#问题所在\" class=\"headerlink\" title=\"问题所在\"></a>问题所在</h3><p>当壁纸量比较多的时候，全部渲染成 swiper-item，会出现明显性能问题。还有个原因应该预览壁纸时加载的都是高清原图，直接全部加载出来，对性能也是很大一个浪费。图片的加可以通过设置 lazy-load 懒加载图片。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>解决方案也挺简单，直接使用分页去处理，比如有 200 项，但是我们一次只渲染 3 个 swiper-item，比如当前下标是 1（对应原列表下标1），当你下滑时新的下标就是 2（对应原列表下标2）了，这个时候就需要我们更新下标 0（对应原列表下标3），为当前项，对应原始列表中的下一个，上滑也是这样的逻辑，这样就保证每次滑洞都按照原始列表顺序显示的，但是实际页面只渲染 3 个 swiper-item，和虚拟列表原理类似。</p>\n<p>官方提供了一个 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/platform-capabilities/extended/component-plus/video-swiper.html\">video-swiper</a> 组件，原理时类似的，只不过是给视频列表使用的，我们参考他的实现进行修改。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>假设我们的数据的为 list，实际渲染的数据为 swiperList，我们现在给他就固定 3 个 swiper-item，前后滑动的时候去替换数据，正向滑动的时候去替换滑动后的下一个数据，反向滑动的时候去替换滑动后的上一个数据，然后将 swiper 设置为可衔接滑动，这样保证一直可以循环滑动，然后更具滑动方向替换数据。</p>\n<p>监听 swiper 的 bindchange 事件，可以获取到滑动后的 current，然后在 bindchange 事件里更新数据</p>\n<p>滑动的方向判断</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// swiper 长度</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">LEN</span> = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> stateNum = current - <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">swiperIndex</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = [-<span class=\"number\">1</span>, <span class=\"variable constant_\">LEN</span> - <span class=\"number\">1</span>].<span class=\"title function_\">includes</span>(stateNum) ? <span class=\"string\">&quot;Last&quot;</span> : <span class=\"string\">&quot;Next&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>获取 swiperList 需要更新的下标</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> updateIndex;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (state === <span class=\"string\">&quot;Next&quot;</span>) &#123;</span><br><span class=\"line\">    updateIndex = current === (<span class=\"variable constant_\">LEN</span> - <span class=\"number\">1</span>) ? <span class=\"number\">0</span> : current + <span class=\"number\">1</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    updateIndex = current === <span class=\"number\">0</span> ? (<span class=\"variable constant_\">LEN</span> - <span class=\"number\">1</span>) : current - <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了需要 swiperList 更新下标，还得记录对应 list 的下标</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取当前项对应 list 下标</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> previewIndex = state === <span class=\"string\">&quot;Last&quot;</span> ? <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">previewIndex</span> - <span class=\"number\">1</span> : <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">previewIndex</span> + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>然后据可以根据滑块方向和 previewIndex，就可以确定更新 swiperList 数据了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 更新实际 list 下标</span></span><br><span class=\"line\">    previewIndex, </span><br><span class=\"line\">    [<span class=\"string\">`swiperList[<span class=\"subst\">$&#123;updateIndex&#125;</span>]`</span>]: state === <span class=\"string\">&quot;Last&quot;</span> ? list[previewIndex - <span class=\"number\">1</span>] : list[previewIndex + <span class=\"number\">1</span>] </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 记录 swiper 下标</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">swiperIndex</span> = current</span><br></pre></td></tr></table></figure>\n\n<p>根据上面思路基本上可以解决 swiper 数据量大性能问题了，但是还存在一些问题。</p>\n<ul>\n<li>滑块边界问题，list 数据也是有限的，也会滑到边界，需要对边界做一个判断处理</li>\n</ul>\n<p>这个问题可以根据 previewIndex 下标去判断是否到达了边界，如果不需要无限加载数据，可以在达到边界时直接回弹静止滑块继续滚动，因为设置 swiper 为衔接滑动，达到边界时滑动时上一个或者下一个还是会显示有其他 swiper-item，所有需要我们添加一个空的 swiper-item 用来占位。如果时需要无限加载数据，可以在快到达边界时提前拉取数据，等拿到数据时继续下滑，否则反弹回去保持在最后一个。</p>\n<ul>\n<li>当 previewIndex 不是通过滑块更新时候，比如直接从 0 跳到 5 会有默认滚动动画，导致体验很差</li>\n</ul>\n<p>这个解决方式是在非滑动更新时候，先将动画时间 duration 设置为 0 ，去掉动画，然后在更新下标和恢复动画。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123; <span class=\"attr\">duration</span>: <span class=\"number\">0</span> &#125;, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">previewIndex</span>: previewIndex,</span><br><span class=\"line\">        <span class=\"attr\">swiperIndex</span>: swiperIndex,</span><br><span class=\"line\">        <span class=\"attr\">swiperList</span>: swiperList,</span><br><span class=\"line\">        <span class=\"attr\">duration</span>: <span class=\"number\">500</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>相对完整的代码实现</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">swiper</span> <span class=\"attr\">vertical</span>=<span class=\"string\">&quot;&#123;&#123;true&#125;&#125;&quot;</span> <span class=\"attr\">duration</span>=<span class=\"string\">&quot;&#123;&#123;duration&#125;&#125;&quot;</span> <span class=\"attr\">current</span>=<span class=\"string\">&quot;&#123;&#123;swiperIndex&#125;&#125;&quot;</span> <span class=\"attr\">circular</span>=<span class=\"string\">&quot;&#123;&#123;circular&#125;&#125;&quot;</span> <span class=\"attr\">bindchange</span>=<span class=\"string\">&quot;handleChangeBigImage&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">swiper-item</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">&quot;&#123;&#123;swiperList&#125;&#125;&quot;</span> <span class=\"attr\">wx:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">&quot;&#123;&#123;item.type===&#x27;placeholder&#x27;&#125;&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;placeholder-view&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:else</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">show-menu-by-longpress</span> <span class=\"attr\">lazy-load</span> <span class=\"attr\">mode</span>=<span class=\"string\">&quot;aspectFill&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&#123;&#123;item.path&#125;&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">swiper-item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// swiper 长度</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">LEN</span> = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SwiperPlaceholder</span> = &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;placeholder&quot;</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">State</span> = <span class=\"string\">&quot;Next&quot;</span> | <span class=\"string\">&quot;Last&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">properties</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">list</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"title class_\">Array</span>,</span><br><span class=\"line\">      <span class=\"attr\">value</span>: [] <span class=\"keyword\">as</span> <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">ImageItem</span>&gt;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">index</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"title class_\">Number</span>,</span><br><span class=\"line\">      <span class=\"attr\">value</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前元素下标</span></span><br><span class=\"line\">    <span class=\"attr\">previewIndex</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\">// swiper 切换</span></span><br><span class=\"line\">    <span class=\"attr\">circular</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">duration</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">    <span class=\"attr\">swiperIndex</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 当前 swiper 下标</span></span><br><span class=\"line\">    <span class=\"attr\">swiperList</span>: &lt;<span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">ImageItem</span>&gt;&gt;[],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">observers</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;index,list&#x27;</span>: <span class=\"keyword\">function</span> (<span class=\"params\">index, list</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (list.<span class=\"property\">length</span> &amp;&amp; list[index]) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">_initSwiper</span>(index, list)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 切换 swiper</span></span><br><span class=\"line\">    <span class=\"title function_\">handleChangeBigImage</span>(<span class=\"params\">e: WechatMiniprogram.SwiperChange</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; current, source &#125; = e.<span class=\"property\">detail</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (source !== <span class=\"string\">&quot;touch&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> state = <span class=\"variable language_\">this</span>.<span class=\"title function_\">_getSlideState</span>(current, <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">swiperIndex</span>)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> previewIndex = state === <span class=\"string\">&quot;Last&quot;</span> ? <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">previewIndex</span> - <span class=\"number\">1</span> : <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">previewIndex</span> + <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> currentItem = <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">swiperList</span>[current]</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 到达了边界时，反弹回去</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (currentItem.<span class=\"property\">type</span> === <span class=\"string\">&quot;placeholder&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">swiperIndex</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">swiperIndex</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">        previewIndex,</span><br><span class=\"line\">        [<span class=\"string\">`swiperList[<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>._updateUpdateIndex(current, state)&#125;</span>]`</span>]: <span class=\"variable language_\">this</span>.<span class=\"title function_\">_getUpdateSwiperItem</span>(previewIndex, state),</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">swiperIndex</span> = current</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 初始化 Swiper 模式</span></span><br><span class=\"line\">    <span class=\"title function_\">_initSwiper</span>(<span class=\"params\">index: <span class=\"built_in\">number</span>, list: <span class=\"built_in\">Array</span>&lt;ImageItem&gt;, cb?: <span class=\"built_in\">Function</span></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123; <span class=\"attr\">duration</span>: <span class=\"number\">0</span> &#125;, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> swiperIndex = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"attr\">swiperList</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">ImageItem</span>&gt; = []</span><br><span class=\"line\"></span><br><span class=\"line\">        swiperList.<span class=\"title function_\">push</span>(list[index - <span class=\"number\">1</span>] || <span class=\"title class_\">SwiperPlaceholder</span>)</span><br><span class=\"line\">        swiperList.<span class=\"title function_\">push</span>(list[index] || <span class=\"title class_\">SwiperPlaceholder</span>)</span><br><span class=\"line\">        swiperList.<span class=\"title function_\">push</span>(list[index + <span class=\"number\">1</span>] || <span class=\"title class_\">SwiperPlaceholder</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">previewIndex</span>: index,</span><br><span class=\"line\">          swiperIndex,</span><br><span class=\"line\">          swiperList,</span><br><span class=\"line\">          <span class=\"attr\">duration</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">          <span class=\"attr\">isHide</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (cb) <span class=\"title function_\">cb</span>()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 获取滚动状态</span></span><br><span class=\"line\">    <span class=\"title function_\">_getSlideState</span>(<span class=\"attr\">current</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">lastCurrent</span>: <span class=\"built_in\">number</span>): <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> state = current - lastCurrent</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [-<span class=\"number\">1</span>, <span class=\"variable constant_\">LEN</span> - <span class=\"number\">1</span>].<span class=\"title function_\">includes</span>(state) ? <span class=\"string\">&quot;Last&quot;</span> : <span class=\"string\">&quot;Next&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 获取需要更新下标</span></span><br><span class=\"line\">    <span class=\"title function_\">_updateUpdateIndex</span>(<span class=\"params\">current: <span class=\"built_in\">number</span>, <span class=\"keyword\">type</span>: State</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">type</span> === <span class=\"string\">&quot;Next&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> current === (<span class=\"variable constant_\">LEN</span> - <span class=\"number\">1</span>) ? <span class=\"number\">0</span> : current + <span class=\"number\">1</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> current === <span class=\"number\">0</span> ? (<span class=\"variable constant_\">LEN</span> - <span class=\"number\">1</span>) : current - <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 获取需要更新数据</span></span><br><span class=\"line\">    <span class=\"title function_\">_getUpdateSwiperItem</span>(<span class=\"params\">index: <span class=\"built_in\">number</span>, <span class=\"keyword\">type</span>: State</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> list = <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">list</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> item</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">type</span> === <span class=\"string\">&quot;Last&quot;</span>) &#123;</span><br><span class=\"line\">        item = list[index - <span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        item = list[index + <span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 到达边界时 返回填充元素</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!item) &#123;</span><br><span class=\"line\">        item = <span class=\"title class_\">SwiperPlaceholder</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> item</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","excerpt":"<p>事情是这样的，我做了一个在线壁纸小程序，壁纸预览部分为了更好时使用体验，增加了类似于那些短视频上滑下滑快速切换壁纸预览的功能，为了避免重复造轮子直接使用了 swiper 来时实现滑动快速切换壁纸。</p>","more":"<h3 id=\"问题所在\"><a href=\"#问题所在\" class=\"headerlink\" title=\"问题所在\"></a>问题所在</h3><p>当壁纸量比较多的时候，全部渲染成 swiper-item，会出现明显性能问题。还有个原因应该预览壁纸时加载的都是高清原图，直接全部加载出来，对性能也是很大一个浪费。图片的加可以通过设置 lazy-load 懒加载图片。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>解决方案也挺简单，直接使用分页去处理，比如有 200 项，但是我们一次只渲染 3 个 swiper-item，比如当前下标是 1（对应原列表下标1），当你下滑时新的下标就是 2（对应原列表下标2）了，这个时候就需要我们更新下标 0（对应原列表下标3），为当前项，对应原始列表中的下一个，上滑也是这样的逻辑，这样就保证每次滑洞都按照原始列表顺序显示的，但是实际页面只渲染 3 个 swiper-item，和虚拟列表原理类似。</p>\n<p>官方提供了一个 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/platform-capabilities/extended/component-plus/video-swiper.html\">video-swiper</a> 组件，原理时类似的，只不过是给视频列表使用的，我们参考他的实现进行修改。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>假设我们的数据的为 list，实际渲染的数据为 swiperList，我们现在给他就固定 3 个 swiper-item，前后滑动的时候去替换数据，正向滑动的时候去替换滑动后的下一个数据，反向滑动的时候去替换滑动后的上一个数据，然后将 swiper 设置为可衔接滑动，这样保证一直可以循环滑动，然后更具滑动方向替换数据。</p>\n<p>监听 swiper 的 bindchange 事件，可以获取到滑动后的 current，然后在 bindchange 事件里更新数据</p>\n<p>滑动的方向判断</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// swiper 长度</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">LEN</span> = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> stateNum = current - <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">swiperIndex</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = [-<span class=\"number\">1</span>, <span class=\"variable constant_\">LEN</span> - <span class=\"number\">1</span>].<span class=\"title function_\">includes</span>(stateNum) ? <span class=\"string\">&quot;Last&quot;</span> : <span class=\"string\">&quot;Next&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>获取 swiperList 需要更新的下标</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> updateIndex;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (state === <span class=\"string\">&quot;Next&quot;</span>) &#123;</span><br><span class=\"line\">    updateIndex = current === (<span class=\"variable constant_\">LEN</span> - <span class=\"number\">1</span>) ? <span class=\"number\">0</span> : current + <span class=\"number\">1</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    updateIndex = current === <span class=\"number\">0</span> ? (<span class=\"variable constant_\">LEN</span> - <span class=\"number\">1</span>) : current - <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了需要 swiperList 更新下标，还得记录对应 list 的下标</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取当前项对应 list 下标</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> previewIndex = state === <span class=\"string\">&quot;Last&quot;</span> ? <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">previewIndex</span> - <span class=\"number\">1</span> : <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">previewIndex</span> + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>然后据可以根据滑块方向和 previewIndex，就可以确定更新 swiperList 数据了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 更新实际 list 下标</span></span><br><span class=\"line\">    previewIndex, </span><br><span class=\"line\">    [<span class=\"string\">`swiperList[<span class=\"subst\">$&#123;updateIndex&#125;</span>]`</span>]: state === <span class=\"string\">&quot;Last&quot;</span> ? list[previewIndex - <span class=\"number\">1</span>] : list[previewIndex + <span class=\"number\">1</span>] </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 记录 swiper 下标</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">swiperIndex</span> = current</span><br></pre></td></tr></table></figure>\n\n<p>根据上面思路基本上可以解决 swiper 数据量大性能问题了，但是还存在一些问题。</p>\n<ul>\n<li>滑块边界问题，list 数据也是有限的，也会滑到边界，需要对边界做一个判断处理</li>\n</ul>\n<p>这个问题可以根据 previewIndex 下标去判断是否到达了边界，如果不需要无限加载数据，可以在达到边界时直接回弹静止滑块继续滚动，因为设置 swiper 为衔接滑动，达到边界时滑动时上一个或者下一个还是会显示有其他 swiper-item，所有需要我们添加一个空的 swiper-item 用来占位。如果时需要无限加载数据，可以在快到达边界时提前拉取数据，等拿到数据时继续下滑，否则反弹回去保持在最后一个。</p>\n<ul>\n<li>当 previewIndex 不是通过滑块更新时候，比如直接从 0 跳到 5 会有默认滚动动画，导致体验很差</li>\n</ul>\n<p>这个解决方式是在非滑动更新时候，先将动画时间 duration 设置为 0 ，去掉动画，然后在更新下标和恢复动画。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123; <span class=\"attr\">duration</span>: <span class=\"number\">0</span> &#125;, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">previewIndex</span>: previewIndex,</span><br><span class=\"line\">        <span class=\"attr\">swiperIndex</span>: swiperIndex,</span><br><span class=\"line\">        <span class=\"attr\">swiperList</span>: swiperList,</span><br><span class=\"line\">        <span class=\"attr\">duration</span>: <span class=\"number\">500</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>相对完整的代码实现</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">swiper</span> <span class=\"attr\">vertical</span>=<span class=\"string\">&quot;&#123;&#123;true&#125;&#125;&quot;</span> <span class=\"attr\">duration</span>=<span class=\"string\">&quot;&#123;&#123;duration&#125;&#125;&quot;</span> <span class=\"attr\">current</span>=<span class=\"string\">&quot;&#123;&#123;swiperIndex&#125;&#125;&quot;</span> <span class=\"attr\">circular</span>=<span class=\"string\">&quot;&#123;&#123;circular&#125;&#125;&quot;</span> <span class=\"attr\">bindchange</span>=<span class=\"string\">&quot;handleChangeBigImage&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">swiper-item</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">&quot;&#123;&#123;swiperList&#125;&#125;&quot;</span> <span class=\"attr\">wx:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">&quot;&#123;&#123;item.type===&#x27;placeholder&#x27;&#125;&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;placeholder-view&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:else</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">show-menu-by-longpress</span> <span class=\"attr\">lazy-load</span> <span class=\"attr\">mode</span>=<span class=\"string\">&quot;aspectFill&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&#123;&#123;item.path&#125;&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">swiper-item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// swiper 长度</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">LEN</span> = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">SwiperPlaceholder</span> = &#123; <span class=\"attr\">type</span>: <span class=\"string\">&quot;placeholder&quot;</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">State</span> = <span class=\"string\">&quot;Next&quot;</span> | <span class=\"string\">&quot;Last&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">properties</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">list</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"title class_\">Array</span>,</span><br><span class=\"line\">      <span class=\"attr\">value</span>: [] <span class=\"keyword\">as</span> <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">ImageItem</span>&gt;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">index</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"title class_\">Number</span>,</span><br><span class=\"line\">      <span class=\"attr\">value</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前元素下标</span></span><br><span class=\"line\">    <span class=\"attr\">previewIndex</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"comment\">// swiper 切换</span></span><br><span class=\"line\">    <span class=\"attr\">circular</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">duration</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">    <span class=\"attr\">swiperIndex</span>: <span class=\"number\">1</span>, <span class=\"comment\">// 当前 swiper 下标</span></span><br><span class=\"line\">    <span class=\"attr\">swiperList</span>: &lt;<span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">ImageItem</span>&gt;&gt;[],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">observers</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;index,list&#x27;</span>: <span class=\"keyword\">function</span> (<span class=\"params\">index, list</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (list.<span class=\"property\">length</span> &amp;&amp; list[index]) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">_initSwiper</span>(index, list)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 切换 swiper</span></span><br><span class=\"line\">    <span class=\"title function_\">handleChangeBigImage</span>(<span class=\"params\">e: WechatMiniprogram.SwiperChange</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; current, source &#125; = e.<span class=\"property\">detail</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (source !== <span class=\"string\">&quot;touch&quot;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> state = <span class=\"variable language_\">this</span>.<span class=\"title function_\">_getSlideState</span>(current, <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">swiperIndex</span>)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> previewIndex = state === <span class=\"string\">&quot;Last&quot;</span> ? <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">previewIndex</span> - <span class=\"number\">1</span> : <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">previewIndex</span> + <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> currentItem = <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">swiperList</span>[current]</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 到达了边界时，反弹回去</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (currentItem.<span class=\"property\">type</span> === <span class=\"string\">&quot;placeholder&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">swiperIndex</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">swiperIndex</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">        previewIndex,</span><br><span class=\"line\">        [<span class=\"string\">`swiperList[<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>._updateUpdateIndex(current, state)&#125;</span>]`</span>]: <span class=\"variable language_\">this</span>.<span class=\"title function_\">_getUpdateSwiperItem</span>(previewIndex, state),</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">swiperIndex</span> = current</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 初始化 Swiper 模式</span></span><br><span class=\"line\">    <span class=\"title function_\">_initSwiper</span>(<span class=\"params\">index: <span class=\"built_in\">number</span>, list: <span class=\"built_in\">Array</span>&lt;ImageItem&gt;, cb?: <span class=\"built_in\">Function</span></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123; <span class=\"attr\">duration</span>: <span class=\"number\">0</span> &#125;, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> swiperIndex = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"attr\">swiperList</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">ImageItem</span>&gt; = []</span><br><span class=\"line\"></span><br><span class=\"line\">        swiperList.<span class=\"title function_\">push</span>(list[index - <span class=\"number\">1</span>] || <span class=\"title class_\">SwiperPlaceholder</span>)</span><br><span class=\"line\">        swiperList.<span class=\"title function_\">push</span>(list[index] || <span class=\"title class_\">SwiperPlaceholder</span>)</span><br><span class=\"line\">        swiperList.<span class=\"title function_\">push</span>(list[index + <span class=\"number\">1</span>] || <span class=\"title class_\">SwiperPlaceholder</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">previewIndex</span>: index,</span><br><span class=\"line\">          swiperIndex,</span><br><span class=\"line\">          swiperList,</span><br><span class=\"line\">          <span class=\"attr\">duration</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">          <span class=\"attr\">isHide</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (cb) <span class=\"title function_\">cb</span>()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 获取滚动状态</span></span><br><span class=\"line\">    <span class=\"title function_\">_getSlideState</span>(<span class=\"attr\">current</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">lastCurrent</span>: <span class=\"built_in\">number</span>): <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> state = current - lastCurrent</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [-<span class=\"number\">1</span>, <span class=\"variable constant_\">LEN</span> - <span class=\"number\">1</span>].<span class=\"title function_\">includes</span>(state) ? <span class=\"string\">&quot;Last&quot;</span> : <span class=\"string\">&quot;Next&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 获取需要更新下标</span></span><br><span class=\"line\">    <span class=\"title function_\">_updateUpdateIndex</span>(<span class=\"params\">current: <span class=\"built_in\">number</span>, <span class=\"keyword\">type</span>: State</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">type</span> === <span class=\"string\">&quot;Next&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> current === (<span class=\"variable constant_\">LEN</span> - <span class=\"number\">1</span>) ? <span class=\"number\">0</span> : current + <span class=\"number\">1</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> current === <span class=\"number\">0</span> ? (<span class=\"variable constant_\">LEN</span> - <span class=\"number\">1</span>) : current - <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 获取需要更新数据</span></span><br><span class=\"line\">    <span class=\"title function_\">_getUpdateSwiperItem</span>(<span class=\"params\">index: <span class=\"built_in\">number</span>, <span class=\"keyword\">type</span>: State</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> list = <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">list</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> item</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">type</span> === <span class=\"string\">&quot;Last&quot;</span>) &#123;</span><br><span class=\"line\">        item = list[index - <span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        item = list[index + <span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 到达边界时 返回填充元素</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!item) &#123;</span><br><span class=\"line\">        item = <span class=\"title class_\">SwiperPlaceholder</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> item</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cltgz7vqc000398lg3ex0gdvm","category_id":"cltgz7vqj000698lghrprae9k","_id":"cltgz7vqx000k98lg0yaqequb"},{"post_id":"cltgz7vqw000h98lgainighj3","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vr2000p98lg0zfp40sk"},{"post_id":"cltgz7vqh000598lghjkl6z84","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vr4000t98lg0llk1iz8"},{"post_id":"cltgz7vqx000j98lg3dixeriq","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vr5000v98lg7ncw0vzy"},{"post_id":"cltgz7vr0000n98lgdef1ed5n","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vr6000z98lg8m0idhm0"},{"post_id":"cltgz7vqm000998lgbvzi7ndx","category_id":"cltgz7vqj000698lghrprae9k","_id":"cltgz7vrd001298lg826ra0s3"},{"post_id":"cltgz7vr1000o98lg3wp9fmy5","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vrf001598lgc7khecsn"},{"post_id":"cltgz7vr3000s98lg82k82kp2","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vrg001998lga0b1hutx"},{"post_id":"cltgz7vqo000b98lgh9g9g5sp","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vrh001c98lgdqrs503l"},{"post_id":"cltgz7vr4000u98lgfofd3d05","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vri001g98lgc9bh07ad"},{"post_id":"cltgz7vr6000y98lgahhmcbvl","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vrj001j98lg9ggf38cq"},{"post_id":"cltgz7vqp000d98lg43el7zp5","category_id":"cltgz7vr5000w98lg6r3b3my7","_id":"cltgz7vrk001n98lggeo9e8k1"},{"post_id":"cltgz7vrc001198lgbaub3mz4","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vrk001p98lg6ekccd68"},{"post_id":"cltgz7vre001498lg5565a141","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vrl001s98lg2ypn95xv"},{"post_id":"cltgz7vrf001898lgekxe3sm2","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vrm001v98lgfs3v14uj"},{"post_id":"cltgz7vrg001b98lggcujhpb9","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vrn001y98lghkykd83k"},{"post_id":"cltgz7vrh001f98lghp0683it","category_id":"cltgz7vqj000698lghrprae9k","_id":"cltgz7vrs002298lg9zf77wl9"},{"post_id":"cltgz7vri001i98lg5sirbngs","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vru002698lg5lih14t6"},{"post_id":"cltgz7vrj001m98lgddepagan","category_id":"cltgz7vqj000698lghrprae9k","_id":"cltgz7vrw002a98lg1xk74v9e"},{"post_id":"cltgz7vrk001o98lgdezadh96","category_id":"cltgz7vqj000698lghrprae9k","_id":"cltgz7vrx002d98lg0k954fmo"},{"post_id":"cltgz7vrl001r98lg0nfs9y8o","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vrz002h98lg6d962ymm"},{"post_id":"cltgz7vrm001u98lg0tba593h","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vs0002k98lg16oneizt"},{"post_id":"cltgz7vrr002198lg9om73r4w","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vs2002o98lg4moigmoz"},{"post_id":"cltgz7vrt002598lggtgff53c","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vs4002r98lgecn333z6"},{"post_id":"cltgz7vrv002998lg8eq2hyjq","category_id":"cltgz7vqj000698lghrprae9k","_id":"cltgz7vs9002u98lgfpe873rv"},{"post_id":"cltgz7vrm001x98lghckcc4wn","category_id":"cltgz7vrt002498lgft2731ob","_id":"cltgz7vsa002x98lgau5056dt"},{"post_id":"cltgz7vrx002c98lgg3rg2yzr","category_id":"cltgz7vqj000698lghrprae9k","_id":"cltgz7vsb003098lg06hp5nkm"},{"post_id":"cltgz7vry002g98lga3rigk19","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vse003498lgdeo9bun0"},{"post_id":"cltgz7vrz002j98lg737kaosg","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vsp003798lgbiu88vpr"},{"post_id":"cltgz7vs1002n98lgaupg3bz2","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vsr003b98lghjw1h2t3"},{"post_id":"cltgz7vs3002q98lg67ojhl7j","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vss003e98lg01wxhekj"},{"post_id":"cltgz7vs7002t98lgdmzy381l","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vst003i98lg4cnt6nxg"},{"post_id":"cltgz7vsa002z98lg2t8a16xs","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vsu003l98lgfam78dti"},{"post_id":"cltgz7vsd003398lg10jh4rei","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vsv003p98lg8qta6m6x"},{"post_id":"cltgz7vsk003698lggceq232l","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vsw003r98lg8eln6qdf"},{"post_id":"cltgz7vs9002w98lg9al58phw","category_id":"cltgz7vsb003298lg436z2hto","_id":"cltgz7vsw003u98lg7ajydl97"},{"post_id":"cltgz7vsr003a98lghy6i9ra0","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vsx003w98lggnowhnet"},{"post_id":"cltgz7vss003d98lg7ofj8kev","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vsx003y98lgdvry7f3a"},{"post_id":"cltgz7vst003h98lgg01j6cg0","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vsy004098lg1e2wczth"},{"post_id":"cltgz7vsu003k98lg1jkn52xg","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vsy004198lg9xv342zr"},{"post_id":"cltgz7vsv003o98lg9caj96pc","category_id":"cltgz7vqj000698lghrprae9k","_id":"cltgz7vsz004498lggvlx09qc"},{"post_id":"cltgz7vte004r98lge8lm7f56","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vtg004u98lgb2ldav31"},{"post_id":"cltgz7vtf004s98lg7j13azjs","category_id":"cltgz7vqq000e98lg15ie2oij","_id":"cltgz7vtg004v98lg8czcbh3e"}],"PostTag":[{"post_id":"cltgz7vqc000398lg3ex0gdvm","tag_id":"cltgz7vql000798lgfmfh22kh","_id":"cltgz7vra001098lgdes0gfcg"},{"post_id":"cltgz7vqc000398lg3ex0gdvm","tag_id":"cltgz7vqt000f98lg1zisg1tv","_id":"cltgz7vrd001398lg71s79m5r"},{"post_id":"cltgz7vqc000398lg3ex0gdvm","tag_id":"cltgz7vqy000m98lg3d6q5dw5","_id":"cltgz7vrf001798lg2hh63r9z"},{"post_id":"cltgz7vqc000398lg3ex0gdvm","tag_id":"cltgz7vr3000r98lg5p6r0uj6","_id":"cltgz7vrg001a98lg5reubd9a"},{"post_id":"cltgz7vrc001198lgbaub3mz4","tag_id":"cltgz7vql000798lgfmfh22kh","_id":"cltgz7vrh001e98lgadflh5wl"},{"post_id":"cltgz7vqh000598lghjkl6z84","tag_id":"cltgz7vr5000x98lggqct34oi","_id":"cltgz7vri001h98lgenq4fq9e"},{"post_id":"cltgz7vqm000998lgbvzi7ndx","tag_id":"cltgz7vrf001698lg2sty1hcr","_id":"cltgz7vrj001l98lggdwa0jl7"},{"post_id":"cltgz7vqo000b98lgh9g9g5sp","tag_id":"cltgz7vrh001d98lgfetl2njd","_id":"cltgz7vrm001t98lge5l1ddky"},{"post_id":"cltgz7vqo000b98lgh9g9g5sp","tag_id":"cltgz7vrj001k98lgdidyhr4x","_id":"cltgz7vrm001w98lgajml1tj2"},{"post_id":"cltgz7vrl001r98lg0nfs9y8o","tag_id":"cltgz7vql000798lgfmfh22kh","_id":"cltgz7vrq002098lg4baq6ic2"},{"post_id":"cltgz7vrm001u98lg0tba593h","tag_id":"cltgz7vr5000x98lggqct34oi","_id":"cltgz7vrt002398lgcv1oh8kx"},{"post_id":"cltgz7vqp000d98lg43el7zp5","tag_id":"cltgz7vrl001q98lgfgk6asdz","_id":"cltgz7vrv002898lg7on1epok"},{"post_id":"cltgz7vrm001x98lghckcc4wn","tag_id":"cltgz7vr5000x98lggqct34oi","_id":"cltgz7vrw002b98lgfaef2agz"},{"post_id":"cltgz7vqw000h98lgainighj3","tag_id":"cltgz7vrn001z98lg773wbq0s","_id":"cltgz7vry002f98lg1nnnasm4"},{"post_id":"cltgz7vrt002598lggtgff53c","tag_id":"cltgz7vrn001z98lg773wbq0s","_id":"cltgz7vrz002i98lghf9z6dvo"},{"post_id":"cltgz7vqx000j98lg3dixeriq","tag_id":"cltgz7vrn001z98lg773wbq0s","_id":"cltgz7vs1002m98lghazrc9io"},{"post_id":"cltgz7vr0000n98lgdef1ed5n","tag_id":"cltgz7vrx002e98lg4g23gc7p","_id":"cltgz7vs3002p98lgh16jdq5r"},{"post_id":"cltgz7vr1000o98lg3wp9fmy5","tag_id":"cltgz7vrx002e98lg4g23gc7p","_id":"cltgz7vs9002v98lg92gp6y6x"},{"post_id":"cltgz7vr3000s98lg82k82kp2","tag_id":"cltgz7vql000798lgfmfh22kh","_id":"cltgz7vsb003198lg9kvyevy3"},{"post_id":"cltgz7vr3000s98lg82k82kp2","tag_id":"cltgz7vs4002s98lg1v0b0lwk","_id":"cltgz7vsk003598lgckjmecpu"},{"post_id":"cltgz7vsd003398lg10jh4rei","tag_id":"cltgz7vql000798lgfmfh22kh","_id":"cltgz7vsq003998lgds6y5sqs"},{"post_id":"cltgz7vr4000u98lgfofd3d05","tag_id":"cltgz7vsa002y98lghae16bqz","_id":"cltgz7vss003c98lg6hopbtw7"},{"post_id":"cltgz7vsk003698lggceq232l","tag_id":"cltgz7vql000798lgfmfh22kh","_id":"cltgz7vst003g98lg321x0etd"},{"post_id":"cltgz7vsr003a98lghy6i9ra0","tag_id":"cltgz7vql000798lgfmfh22kh","_id":"cltgz7vsu003j98lg3pimbd89"},{"post_id":"cltgz7vr6000y98lgahhmcbvl","tag_id":"cltgz7vsa002y98lghae16bqz","_id":"cltgz7vsv003n98lg0o6e213c"},{"post_id":"cltgz7vrf001898lgekxe3sm2","tag_id":"cltgz7vst003f98lg7xhoh4dg","_id":"cltgz7vsv003q98lg56b4befp"},{"post_id":"cltgz7vsu003k98lg1jkn52xg","tag_id":"cltgz7vr5000x98lggqct34oi","_id":"cltgz7vsw003t98lg6zjdemzu"},{"post_id":"cltgz7vrg001b98lggcujhpb9","tag_id":"cltgz7vsu003m98lg67jz7snp","_id":"cltgz7vsx003v98lge6q8d8ww"},{"post_id":"cltgz7vrh001f98lghp0683it","tag_id":"cltgz7vsw003s98lgezatd5tf","_id":"cltgz7vsy003z98lgc01l2zch"},{"post_id":"cltgz7vri001i98lg5sirbngs","tag_id":"cltgz7vsx003x98lg0702h2yj","_id":"cltgz7vsz004398lgfxbg81sb"},{"post_id":"cltgz7vrj001m98lgddepagan","tag_id":"cltgz7vsx003x98lg0702h2yj","_id":"cltgz7vsz004698lghrmj8h4q"},{"post_id":"cltgz7vrk001o98lgdezadh96","tag_id":"cltgz7vsx003x98lg0702h2yj","_id":"cltgz7vt0004898lg0gtd23kz"},{"post_id":"cltgz7vrr002198lg9om73r4w","tag_id":"cltgz7vsz004798lg2at5b98j","_id":"cltgz7vt0004a98lg9b5x6ua7"},{"post_id":"cltgz7vrv002998lg8eq2hyjq","tag_id":"cltgz7vt0004998lg0jat9ipn","_id":"cltgz7vt0004c98lg4t7l0sza"},{"post_id":"cltgz7vrx002c98lgg3rg2yzr","tag_id":"cltgz7vs4002s98lg1v0b0lwk","_id":"cltgz7vt0004e98lgbfqkfawr"},{"post_id":"cltgz7vry002g98lga3rigk19","tag_id":"cltgz7vt0004d98lg1n519iul","_id":"cltgz7vt1004g98lg2eq448ip"},{"post_id":"cltgz7vs7002t98lgdmzy381l","tag_id":"cltgz7vt1004f98lgdz2u7l54","_id":"cltgz7vt1004i98lgd7d5h1o6"},{"post_id":"cltgz7vs9002w98lg9al58phw","tag_id":"cltgz7vt1004h98lg2pjbbyzb","_id":"cltgz7vt5004k98lg238wbxuq"},{"post_id":"cltgz7vsa002z98lg2t8a16xs","tag_id":"cltgz7vt1004f98lgdz2u7l54","_id":"cltgz7vt7004m98lg58ese8c2"},{"post_id":"cltgz7vss003d98lg7ofj8kev","tag_id":"cltgz7vql000798lgfmfh22kh","_id":"cltgz7vt8004o98lgc69lhqzw"},{"post_id":"cltgz7vss003d98lg7ofj8kev","tag_id":"cltgz7vt5004l98lg26bk0vqy","_id":"cltgz7vt8004p98lga51m2oay"},{"post_id":"cltgz7vst003h98lgg01j6cg0","tag_id":"cltgz7vt5004l98lg26bk0vqy","_id":"cltgz7vt9004q98lg0c5lbyav"},{"post_id":"cltgz7vte004r98lge8lm7f56","tag_id":"cltgz7vtg004t98lg02jzbm6l","_id":"cltgz7vtg004w98lg5q30581h"}],"Tag":[{"name":"vue","_id":"cltgz7vql000798lgfmfh22kh"},{"name":"vuex","_id":"cltgz7vqt000f98lg1zisg1tv"},{"name":"vue-route","_id":"cltgz7vqy000m98lg3d6q5dw5"},{"name":"elemelt-ui","_id":"cltgz7vr3000r98lg5p6r0uj6"},{"name":"JavaScript","_id":"cltgz7vr5000x98lggqct34oi"},{"name":"devenv","_id":"cltgz7vrf001698lg2sty1hcr"},{"name":"工具","_id":"cltgz7vrh001d98lgfetl2njd"},{"name":"AST","_id":"cltgz7vrj001k98lgdidyhr4x"},{"name":"小程序","_id":"cltgz7vrl001q98lgfgk6asdz"},{"name":"node","_id":"cltgz7vrn001z98lg773wbq0s"},{"name":"css","_id":"cltgz7vrx002e98lg4g23gc7p"},{"name":"electron","_id":"cltgz7vs4002s98lg1v0b0lwk"},{"name":"Flutter","_id":"cltgz7vsa002y98lghae16bqz"},{"name":"git","_id":"cltgz7vst003f98lg7xhoh4dg"},{"name":"github","_id":"cltgz7vsu003m98lg67jz7snp"},{"name":"hello world","_id":"cltgz7vsw003s98lgezatd5tf"},{"name":"hexo","_id":"cltgz7vsx003x98lg0702h2yj"},{"name":"MongoDB","_id":"cltgz7vsz004798lg2at5b98j"},{"name":"npm","_id":"cltgz7vt0004998lg0jat9ipn"},{"name":"Pjax","_id":"cltgz7vt0004d98lg1n519iul"},{"name":"vscode","_id":"cltgz7vt1004f98lgdz2u7l54"},{"name":"video","_id":"cltgz7vt1004h98lg2pjbbyzb"},{"name":"WebComponents","_id":"cltgz7vt5004l98lg26bk0vqy"},{"name":"webpack","_id":"cltgz7vtg004t98lg02jzbm6l"}]}}